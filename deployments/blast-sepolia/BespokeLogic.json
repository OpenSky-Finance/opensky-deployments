{
  "address": "0xeEFCf47FD6384b3Ae4E65bBA3Bd6BfAd8a7dfd32",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftManager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "borrowRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "interestPerSecond",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lendAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reserveFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "overdueLoanFeeFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "borrowDuration",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowBegin",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowOverdueTime",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "liquidatableTime",
              "type": "uint40"
            },
            {
              "internalType": "bool",
              "name": "isProrated",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "autoConvertWhenRepay",
              "type": "bool"
            },
            {
              "internalType": "enum BespokeTypes.LoanStatus",
              "name": "status",
              "type": "BespokeTypes.LoanStatus"
            }
          ],
          "internalType": "struct BespokeTypes.LoanData",
          "name": "loan",
          "type": "tuple"
        }
      ],
      "name": "calculateRepayAmountAndProtocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lenderAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftManager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "borrowRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "interestPerSecond",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lendAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reserveFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "overdueLoanFeeFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "borrowDuration",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowBegin",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowOverdueTime",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "liquidatableTime",
              "type": "uint40"
            },
            {
              "internalType": "bool",
              "name": "isProrated",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "autoConvertWhenRepay",
              "type": "bool"
            },
            {
              "internalType": "enum BespokeTypes.LoanStatus",
              "name": "status",
              "type": "BespokeTypes.LoanStatus"
            }
          ],
          "internalType": "struct BespokeTypes.LoanData",
          "name": "loan",
          "type": "tuple"
        }
      ],
      "name": "getBorrowBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftManager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "borrowRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "interestPerSecond",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lendAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reserveFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "overdueLoanFeeFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "borrowDuration",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowBegin",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowOverdueTime",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "liquidatableTime",
              "type": "uint40"
            },
            {
              "internalType": "bool",
              "name": "isProrated",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "autoConvertWhenRepay",
              "type": "bool"
            },
            {
              "internalType": "enum BespokeTypes.LoanStatus",
              "name": "status",
              "type": "BespokeTypes.LoanStatus"
            }
          ],
          "internalType": "struct BespokeTypes.LoanData",
          "name": "loan",
          "type": "tuple"
        }
      ],
      "name": "getBorrowInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftManager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "borrowRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "interestPerSecond",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lendAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reserveFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "overdueLoanFeeFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "borrowDuration",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowBegin",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowOverdueTime",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "liquidatableTime",
              "type": "uint40"
            },
            {
              "internalType": "bool",
              "name": "isProrated",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "autoConvertWhenRepay",
              "type": "bool"
            },
            {
              "internalType": "enum BespokeTypes.LoanStatus",
              "name": "status",
              "type": "BespokeTypes.LoanStatus"
            }
          ],
          "internalType": "struct BespokeTypes.LoanData",
          "name": "loan",
          "type": "tuple"
        }
      ],
      "name": "getLoanDataWithStatus",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftManager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "borrowRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "interestPerSecond",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lendAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reserveFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "overdueLoanFeeFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "borrowDuration",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowBegin",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowOverdueTime",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "liquidatableTime",
              "type": "uint40"
            },
            {
              "internalType": "bool",
              "name": "isProrated",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "autoConvertWhenRepay",
              "type": "bool"
            },
            {
              "internalType": "enum BespokeTypes.LoanStatus",
              "name": "status",
              "type": "BespokeTypes.LoanStatus"
            }
          ],
          "internalType": "struct BespokeTypes.LoanData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOpenSkyBespokeSettings",
          "name": "BESPOKE_SETTINGS",
          "type": "IOpenSkyBespokeSettings"
        },
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "getLoanParties",
      "outputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftManager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "borrowRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "interestPerSecond",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lendAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reserveFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "overdueLoanFeeFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "borrowDuration",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowBegin",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowOverdueTime",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "liquidatableTime",
              "type": "uint40"
            },
            {
              "internalType": "bool",
              "name": "isProrated",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "autoConvertWhenRepay",
              "type": "bool"
            },
            {
              "internalType": "enum BespokeTypes.LoanStatus",
              "name": "status",
              "type": "BespokeTypes.LoanStatus"
            }
          ],
          "internalType": "struct BespokeTypes.LoanData",
          "name": "loan",
          "type": "tuple"
        }
      ],
      "name": "getLoanStatus",
      "outputs": [
        {
          "internalType": "enum BespokeTypes.LoanStatus",
          "name": "",
          "type": "BespokeTypes.LoanStatus"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftManager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "borrowRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "interestPerSecond",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lendAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reserveFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "overdueLoanFeeFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "borrowDuration",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowBegin",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowOverdueTime",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "liquidatableTime",
              "type": "uint40"
            },
            {
              "internalType": "bool",
              "name": "isProrated",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "autoConvertWhenRepay",
              "type": "bool"
            },
            {
              "internalType": "enum BespokeTypes.LoanStatus",
              "name": "status",
              "type": "BespokeTypes.LoanStatus"
            }
          ],
          "internalType": "struct BespokeTypes.LoanData",
          "name": "loan",
          "type": "tuple"
        }
      ],
      "name": "getPenalty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isProrated",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "autoConvertWhenRepay",
              "type": "bool"
            },
            {
              "internalType": "enum BespokeTypes.OfferType",
              "name": "offerType",
              "type": "BespokeTypes.OfferType"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "borrowAmountMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowAmountMax",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "borrowDurationMin",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowDurationMax",
              "type": "uint40"
            },
            {
              "internalType": "uint128",
              "name": "borrowRate",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lendAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonceMaxTimes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BespokeTypes.Offer",
          "name": "offerData",
          "type": "tuple"
        }
      ],
      "name": "hashOffer",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x7680c3aaddcd44494babc86f4c3704d6469376b09a84f72b822123c6806ef899",
  "receipt": {
    "to": null,
    "from": "0x218513C58A4781a5B88De6230caA29aBCe2Ccd75",
    "contractAddress": "0xeEFCf47FD6384b3Ae4E65bBA3Bd6BfAd8a7dfd32",
    "transactionIndex": 1,
    "gasUsed": "2199632",
    "logsBloom": "0x
    "blockHash": "0xd79b27d59e67dac557095d3a38bf9c5ab95760ae052f4c051b1bef3ea386b4c5",
    "transactionHash": "0x7680c3aaddcd44494babc86f4c3704d6469376b09a84f72b822123c6806ef899",
    "logs": [],
    "blockNumber": 2569270,
    "cumulativeGasUsed": "2250153",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "88f70ef30a97ad95dcfad3d4587a7e7c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"borrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"interestPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overdueLoanFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"borrowDuration\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowBegin\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowOverdueTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"liquidatableTime\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"isProrated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoConvertWhenRepay\",\"type\":\"bool\"},{\"internalType\":\"enum BespokeTypes.LoanStatus\",\"name\":\"status\",\"type\":\"BespokeTypes.LoanStatus\"}],\"internalType\":\"struct BespokeTypes.LoanData\",\"name\":\"loan\",\"type\":\"tuple\"}],\"name\":\"calculateRepayAmountAndProtocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lenderAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"borrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"interestPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overdueLoanFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"borrowDuration\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowBegin\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowOverdueTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"liquidatableTime\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"isProrated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoConvertWhenRepay\",\"type\":\"bool\"},{\"internalType\":\"enum BespokeTypes.LoanStatus\",\"name\":\"status\",\"type\":\"BespokeTypes.LoanStatus\"}],\"internalType\":\"struct BespokeTypes.LoanData\",\"name\":\"loan\",\"type\":\"tuple\"}],\"name\":\"getBorrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"borrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"interestPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overdueLoanFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"borrowDuration\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowBegin\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowOverdueTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"liquidatableTime\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"isProrated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoConvertWhenRepay\",\"type\":\"bool\"},{\"internalType\":\"enum BespokeTypes.LoanStatus\",\"name\":\"status\",\"type\":\"BespokeTypes.LoanStatus\"}],\"internalType\":\"struct BespokeTypes.LoanData\",\"name\":\"loan\",\"type\":\"tuple\"}],\"name\":\"getBorrowInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"borrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"interestPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overdueLoanFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"borrowDuration\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowBegin\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowOverdueTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"liquidatableTime\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"isProrated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoConvertWhenRepay\",\"type\":\"bool\"},{\"internalType\":\"enum BespokeTypes.LoanStatus\",\"name\":\"status\",\"type\":\"BespokeTypes.LoanStatus\"}],\"internalType\":\"struct BespokeTypes.LoanData\",\"name\":\"loan\",\"type\":\"tuple\"}],\"name\":\"getLoanDataWithStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"borrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"interestPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overdueLoanFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"borrowDuration\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowBegin\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowOverdueTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"liquidatableTime\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"isProrated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoConvertWhenRepay\",\"type\":\"bool\"},{\"internalType\":\"enum BespokeTypes.LoanStatus\",\"name\":\"status\",\"type\":\"BespokeTypes.LoanStatus\"}],\"internalType\":\"struct BespokeTypes.LoanData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOpenSkyBespokeSettings\",\"name\":\"BESPOKE_SETTINGS\",\"type\":\"IOpenSkyBespokeSettings\"},{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanParties\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"borrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"interestPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overdueLoanFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"borrowDuration\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowBegin\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowOverdueTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"liquidatableTime\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"isProrated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoConvertWhenRepay\",\"type\":\"bool\"},{\"internalType\":\"enum BespokeTypes.LoanStatus\",\"name\":\"status\",\"type\":\"BespokeTypes.LoanStatus\"}],\"internalType\":\"struct BespokeTypes.LoanData\",\"name\":\"loan\",\"type\":\"tuple\"}],\"name\":\"getLoanStatus\",\"outputs\":[{\"internalType\":\"enum BespokeTypes.LoanStatus\",\"name\":\"\",\"type\":\"BespokeTypes.LoanStatus\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"borrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"interestPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overdueLoanFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"borrowDuration\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowBegin\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowOverdueTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"liquidatableTime\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"isProrated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoConvertWhenRepay\",\"type\":\"bool\"},{\"internalType\":\"enum BespokeTypes.LoanStatus\",\"name\":\"status\",\"type\":\"BespokeTypes.LoanStatus\"}],\"internalType\":\"struct BespokeTypes.LoanData\",\"name\":\"loan\",\"type\":\"tuple\"}],\"name\":\"getPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isProrated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoConvertWhenRepay\",\"type\":\"bool\"},{\"internalType\":\"enum BespokeTypes.OfferType\",\"name\":\"offerType\",\"type\":\"BespokeTypes.OfferType\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountMax\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"borrowDurationMin\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowDurationMax\",\"type\":\"uint40\"},{\"internalType\":\"uint128\",\"name\":\"borrowRate\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonceMaxTimes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct BespokeTypes.Offer\",\"name\":\"offerData\",\"type\":\"tuple\"}],\"name\":\"hashOffer\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bespokemarket/libraries/BespokeLogic.sol\":\"BespokeLogic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x14351164423eade7f2dbac5ca9ab8aeded8694f3b2d7a9e0114a2b3b6558198d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/bespokemarket/interfaces/IOpenSkyBespokeLoanNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '../libraries/BespokeTypes.sol';\\n\\ninterface IOpenSkyBespokeLoanNFT is IERC721 {\\n    event Mint(uint256 indexed tokenId, address indexed recipient);\\n    event Burn(uint256 tokenId);\\n    event SetLoanDescriptorAddress(address operator, address descriptorAddress);\\n\\n    function mint(uint256 tokenId, address account) external;\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function getLoanData(uint256 tokenId) external returns (BespokeTypes.LoanData memory);\\n}\\n\",\"keccak256\":\"0x6b6d44dc42af37ea65172148dca4969992f5c9b833479fee071d3977f697e1fb\",\"license\":\"MIT\"},\"contracts/bespokemarket/interfaces/IOpenSkyBespokeSettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\nimport '../libraries/BespokeTypes.sol';\\n\\ninterface IOpenSkyBespokeSettings {\\n    event InitLoanAddress(address operator, address borrowLoanAddress, address lendLoanAddress);\\n    event InitMarketAddress(address operator, address address_);\\n\\n    event InitIncentiveControllerAddressLend(address operator, address address_);\\n    event InitIncentiveControllerAddressBorrow(address operator, address address_);\\n\\n    event SetReserveFactor(address operator, uint256 factor);\\n    event SetOverdueLoanFeeFactor(address operator, uint256 factor);\\n\\n    event SetMinBorrowDuration(address operator, uint256 factor);\\n    event SetMaxBorrowDuration(address operator, uint256 factor);\\n    event SetOverdueDuration(address operator, uint256 factor);\\n\\n    // nft whitelist\\n    event OpenWhitelist(address operator);\\n    event CloseWhitelist(address operator);\\n    event AddToWhitelist(address operator, address nft);\\n    event RemoveFromWhitelist(address operator, address nft);\\n\\n    // currency whitelist\\n    event AddCurrency(address operator, address currency);\\n    event RemoveCurrency(address operator, address currency);\\n\\n    // strategy whitelist list\\n    event AddStrategy(address operator, address address_);\\n    event RemoveStrategy(address operator, address address_);\\n\\n    // setting for nft transfer adapter \\n    event InitDefaultNftTransferAdapter(address ERC721DefaultTransferAdapter, address ERC1155DefaultTransferAdapter);\\n    event AddNftTransferAdapter(address operator, address nftAddress, address adapterAddress);\\n    event RemoveNftTransferAdapter(address operator, address nftAddress);\\n\\n    // settings for currency transfer adapter \\n    event InitDefaultCurrencyTransferAdapter(address currencyDefaultTransferAdapter);\\n    event AddCurrencyTransferAdapter(address operator, address currencyAddress, address adapterAddress);\\n    event RemoveCurrencyTransferAdapter(address operator, address currencyAddress);\\n\\n    function marketAddress() external view returns (address);\\n\\n    function borrowLoanAddress() external view returns (address);\\n\\n    function lendLoanAddress() external view returns (address);\\n\\n    function incentiveControllerAddressLend() external view returns (address);\\n\\n    function incentiveControllerAddressBorrow() external view returns (address);\\n\\n    function minBorrowDuration() external view returns (uint256);\\n\\n    function maxBorrowDuration() external view returns (uint256);\\n\\n    function overdueDuration() external view returns (uint256);\\n\\n    function reserveFactor() external view returns (uint256);\\n\\n    function MAX_RESERVE_FACTOR() external view returns (uint256);\\n\\n    function overdueLoanFeeFactor() external view returns (uint256);\\n\\n    function isWhitelistOn() external view returns (bool);\\n\\n    function inWhitelist(address nft) external view returns (bool);\\n\\n    function getWhitelistDetail(address nft) external view returns (BespokeTypes.WhitelistInfo memory);\\n\\n    function getBorrowDurationConfig(address nftAddress)\\n        external\\n        view\\n        returns (\\n            uint256 minBorrowDuration,\\n            uint256 maxBorrowDuration,\\n            uint256 overdueDuration\\n        );\\n\\n    function isCurrencyWhitelisted(address currency) external view returns (bool);\\n\\n    function getCurrencyTransferAdapter(address currency) external view returns (address adapter);\\n\\n    function getNftTransferAdapter(address nftAddress) external view returns (address);\\n\\n    function isStrategyWhitelisted(address address_) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x253a67aa978e32ef3996f42a0ef605ab92ff34a28173e5f0b9be5684f2b04792\",\"license\":\"MIT\"},\"contracts/bespokemarket/libraries/BespokeLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport '../../libraries/math/MathUtils.sol';\\nimport '../../libraries/math/WadRayMath.sol';\\nimport '../../libraries/math/PercentageMath.sol';\\n\\nimport '../interfaces/IOpenSkyBespokeSettings.sol';\\nimport '../interfaces/IOpenSkyBespokeLoanNFT.sol';\\nimport './BespokeTypes.sol';\\nimport './SignatureChecker.sol';\\n\\nlibrary BespokeLogic {\\n    using PercentageMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    // keccak256(\\\"Offer(bool isProrated,bool autoConvertWhenRepay,uint8 offerType,address tokenAddress,uint256 tokenId,uint256 tokenAmount,address signer,uint256 borrowAmountMin,uint256 borrowAmountMax,uint40 borrowDurationMin,uint40 borrowDurationMax,uint128 borrowRate,address currency,address lendAsset,uint256 nonce,uint256 nonceMaxTimes,uint256 deadline,address strategy,bytes params)\\\")\\n    bytes32 internal constant OFFER_HASH = 0x5898afb02f4982fe09fa9b4daac8eb8efd917a7c9412c0671717c798ae97aa99;\\n\\n    function hashOffer(BespokeTypes.Offer memory offerData) public pure returns (bytes32) {\\n        return\\n            keccak256(\\n                bytes.concat(\\n                    abi.encode(\\n                        OFFER_HASH,\\n                        offerData.isProrated,\\n                        offerData.autoConvertWhenRepay,\\n                        offerData.offerType,\\n                        offerData.tokenAddress,\\n                        offerData.tokenId,\\n                        offerData.tokenAmount,\\n                        offerData.signer,\\n                        offerData.borrowAmountMin,\\n                        offerData.borrowAmountMax,\\n                        offerData.borrowDurationMin,\\n                        offerData.borrowDurationMax,\\n                        offerData.borrowRate\\n                    ),\\n                    abi.encode(\\n                        offerData.currency,\\n                        offerData.lendAsset,\\n                        offerData.nonce,\\n                        offerData.nonceMaxTimes,\\n                        offerData.deadline,\\n                        offerData.strategy,\\n                        keccak256(offerData.params)\\n                    )\\n                )\\n            );\\n    }\\n\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f, // keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n                    0xf0cf7ce475272740cae17eb3cadd6d254800be81c53f84a2f273b99036471c62, // keccak256(\\\"OpenSkyBespokeMarket\\\")\\n                    0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6, // keccak256(bytes(\\\"1\\\")) for versionId = 1\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    function validateOfferCommon(\\n        mapping(address => mapping(uint256 => BespokeTypes.NonceInfo)) storage _nonce,\\n        mapping(address => uint256) storage minNonce,\\n        BespokeTypes.Offer memory offerData,\\n        bytes32 offerHash,\\n        uint256 amount,\\n        uint256 duration,\\n        bytes32 DOMAIN_SEPARATOR,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS //,\\n    ) public view {\\n        // check nonce\\n        require(\\n            !_nonce[offerData.signer][offerData.nonce].invalid && offerData.nonce >= minNonce[offerData.signer],\\n            'BM_TAKE_OFFER_NONCE_INVALID'\\n        );\\n        require(offerData.nonceMaxTimes >= 1, 'BM_TAKE_OFFER_NONCE_MAX_TIMES_INVALIDE');\\n\\n        require(\\n            _nonce[offerData.signer][offerData.nonce].usedTimes < offerData.nonceMaxTimes,\\n            'BM_TAKE_OFFER_NONCE_EXHAUST'\\n        );\\n\\n        if (_nonce[offerData.signer][offerData.nonce].offerHash != 0) {\\n            require(\\n                _nonce[offerData.signer][offerData.nonce].offerHash == offerHash,\\n                'BM_TAKE_OFFER_NONCE_USED_BY_OTHER_OFFER'\\n            );\\n        }\\n\\n        require(BESPOKE_SETTINGS.isCurrencyWhitelisted(offerData.currency), 'BM_TAKE_BORROW_CURRENCY_NOT_IN_WHITELIST');\\n\\n        require(\\n            !BESPOKE_SETTINGS.isWhitelistOn() || BESPOKE_SETTINGS.inWhitelist(offerData.tokenAddress),\\n            'BM_TAKE_BORROW_NFT_NOT_IN_WHITELIST'\\n        );\\n\\n        require(block.timestamp <= offerData.deadline, 'BM_TAKE_BORROW_SIGNING_EXPIRATION');\\n\\n        (uint256 minBorrowDuration, uint256 maxBorrowDuration, ) = BESPOKE_SETTINGS.getBorrowDurationConfig(\\n            offerData.tokenAddress\\n        );\\n\\n        // check borrow duration\\n        require(\\n            offerData.borrowDurationMin <= offerData.borrowDurationMax &&\\n                offerData.borrowDurationMin >= minBorrowDuration &&\\n                offerData.borrowDurationMax <= maxBorrowDuration,\\n            'BM_TAKE_BORROW_OFFER_DURATION_NOT_ALLOWED'\\n        );\\n\\n        require(\\n            duration > 0 && duration >= offerData.borrowDurationMin && duration <= offerData.borrowDurationMax,\\n            'BM_TAKE_BORROW_TAKER_DURATION_NOT_ALLOWED'\\n        );\\n\\n        // check borrow amount\\n        require(\\n            offerData.borrowAmountMin > 0 && offerData.borrowAmountMin <= offerData.borrowAmountMax,\\n            'BM_TAKE_BORROW_OFFER_AMOUNT_NOT_ALLOWED'\\n        );\\n\\n        require(\\n            amount >= offerData.borrowAmountMin && amount <= offerData.borrowAmountMax,\\n            'BM_TAKE_BORROW_SUPPLY_AMOUNT_NOT_ALLOWED'\\n        );\\n        require(\\n            SignatureChecker.verify(\\n                offerHash,\\n                offerData.signer,\\n                offerData.v,\\n                offerData.r,\\n                offerData.s,\\n                DOMAIN_SEPARATOR\\n            ),\\n            'BM_TAKE_BORROW_SIGNATURE_INVALID'\\n        );\\n    }\\n\\n    function createLoan(\\n        mapping(uint256 => BespokeTypes.LoanData) storage _loans,\\n        BespokeTypes.Offer memory offerData,\\n        uint256 loanId,\\n        uint256 supplyAmount,\\n        uint256 supplyDuration,\\n        address nftManager,\\n        uint256 tokenId,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS\\n    ) public {\\n        uint256 borrowRateRay = uint256(offerData.borrowRate).rayDiv(10000);\\n        (, , uint256 overdueDuration) = BESPOKE_SETTINGS.getBorrowDurationConfig(offerData.tokenAddress);\\n\\n        BespokeTypes.LoanData memory loan = BespokeTypes.LoanData({\\n            tokenAddress: offerData.tokenAddress,\\n            tokenId: tokenId,\\n            tokenAmount: offerData.tokenAmount,\\n            nftManager: nftManager,\\n            borrower: offerData.offerType == BespokeTypes.OfferType.BORROW ? offerData.signer : msg.sender,\\n            lender: offerData.offerType == BespokeTypes.OfferType.BORROW ? msg.sender : offerData.signer,\\n            amount: supplyAmount,\\n            borrowRate: uint128(borrowRateRay),\\n            interestPerSecond: uint128(MathUtils.calculateBorrowInterestPerSecond(borrowRateRay, supplyAmount)),\\n            currency: offerData.currency,\\n            lendAsset: offerData.lendAsset,\\n            reserveFactor: BESPOKE_SETTINGS.reserveFactor(),\\n            overdueLoanFeeFactor: BESPOKE_SETTINGS.overdueLoanFeeFactor(),\\n            borrowDuration: uint40(supplyDuration),\\n            borrowBegin: uint40(block.timestamp),\\n            borrowOverdueTime: uint40(block.timestamp + supplyDuration),\\n            liquidatableTime: uint40(block.timestamp + supplyDuration + overdueDuration),\\n            isProrated: offerData.isProrated,\\n            autoConvertWhenRepay: offerData.autoConvertWhenRepay,\\n            status: BespokeTypes.LoanStatus.BORROWING\\n        });\\n\\n        _loans[loanId] = loan;\\n    }\\n\\n    function getLoanStatus(BespokeTypes.LoanData memory loan) public view returns (BespokeTypes.LoanStatus) {\\n        BespokeTypes.LoanStatus status = loan.status;\\n        if (status == BespokeTypes.LoanStatus.BORROWING) {\\n            if (loan.liquidatableTime < block.timestamp) {\\n                status = BespokeTypes.LoanStatus.LIQUIDATABLE;\\n            } else if (loan.borrowOverdueTime < block.timestamp) {\\n                status = BespokeTypes.LoanStatus.OVERDUE;\\n            }\\n        }\\n        return status;\\n    }\\n\\n    function getLoanDataWithStatus(BespokeTypes.LoanData memory loan)\\n        public\\n        view\\n        returns (BespokeTypes.LoanData memory)\\n    {\\n        loan.status = getLoanStatus(loan);\\n        return loan;\\n    }\\n\\n    function getLoanParties(IOpenSkyBespokeSettings BESPOKE_SETTINGS, uint256 loanId)\\n        public\\n        view\\n        returns (address borrower, address lender)\\n    {\\n        lender = IERC721(BESPOKE_SETTINGS.lendLoanAddress()).ownerOf(loanId);\\n        borrower = IERC721(BESPOKE_SETTINGS.borrowLoanAddress()).ownerOf(loanId);\\n    }\\n\\n    function getBorrowInterest(BespokeTypes.LoanData memory loan) public view returns (uint256) {\\n        uint256 endTime = block.timestamp < loan.borrowOverdueTime\\n            ? (loan.isProrated ? block.timestamp : loan.borrowOverdueTime)\\n            : loan.borrowOverdueTime;\\n        return uint256(loan.interestPerSecond).rayMul(endTime -loan.borrowBegin);\\n    }\\n\\n    // @dev principal + interest\\n    function getBorrowBalance(BespokeTypes.LoanData memory loan) public view returns (uint256) {\\n        return loan.amount + getBorrowInterest(loan);\\n    }\\n\\n    function getPenalty(BespokeTypes.LoanData memory loan) public view returns (uint256) {\\n        BespokeTypes.LoanData memory loan = getLoanDataWithStatus(loan);\\n        uint256 penalty = 0;\\n        if (loan.status == BespokeTypes.LoanStatus.OVERDUE) {\\n            penalty = loan.amount.percentMul(loan.overdueLoanFeeFactor);\\n        }\\n        return penalty;\\n    }\\n\\n    function calculateRepayAmountAndProtocolFee(BespokeTypes.LoanData memory loan)\\n        public\\n        view\\n        returns (\\n            uint256 total,\\n            uint256 lenderAmount,\\n            uint256 protocolFee\\n        )\\n    {\\n        uint256 penalty = getPenalty(loan);\\n        total = getBorrowBalance(loan) + penalty;\\n        protocolFee = (getBorrowInterest(loan) + penalty).percentMul(loan.reserveFactor);\\n        lenderAmount = total - protocolFee;\\n    }\\n\\n    function burnLoanNft(\\n        mapping(uint256 => BespokeTypes.LoanData) storage _loans,\\n        uint256 tokenId,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS\\n    ) public {\\n        IOpenSkyBespokeLoanNFT(BESPOKE_SETTINGS.borrowLoanAddress()).burn(tokenId);\\n        IOpenSkyBespokeLoanNFT(BESPOKE_SETTINGS.lendLoanAddress()).burn(tokenId);\\n        delete _loans[tokenId];\\n    }\\n\\n    function mintLoanNFT(\\n        BespokeTypes.Counter storage _loanIdTracker,\\n        address borrower,\\n        address lender,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS\\n    ) internal returns (uint256) {\\n        _loanIdTracker._value = _loanIdTracker._value + 1;\\n        uint256 tokenId = _loanIdTracker._value;\\n\\n        IOpenSkyBespokeLoanNFT(BESPOKE_SETTINGS.borrowLoanAddress()).mint(tokenId, borrower);\\n        IOpenSkyBespokeLoanNFT(BESPOKE_SETTINGS.lendLoanAddress()).mint(tokenId, lender);\\n\\n        return tokenId;\\n    }\\n}\\n\",\"keccak256\":\"0x95df091a5a184b1a5c14009283b322e112910f1c31d594f90f95a0f326be3dad\",\"license\":\"MIT\"},\"contracts/bespokemarket/libraries/BespokeTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary BespokeTypes {\\n    struct Offer {\\n        bool isProrated; // whether to pay interest a fixed-time when repay early\\n        bool autoConvertWhenRepay; // when currency!=lendAsset, whether to convert currency to lendAsset for lender when repay. Determined by lender.\\n        OfferType offerType;\\n        address tokenAddress;\\n        uint256 tokenId;\\n        uint256 tokenAmount; // 1 for ERC721, 1+ for ERC1155\\n        address signer; //borrower or lender\\n        uint256 borrowAmountMin;\\n        uint256 borrowAmountMax;\\n        uint40 borrowDurationMin;\\n        uint40 borrowDurationMax;\\n        uint128 borrowRate;\\n        address currency;  // Asset to borrow or receive when loan created. Borrower should also use it for repay.\\n        address lendAsset; // Using which token to lend. Determined by lender and should be zero address for borrow offer.\\n        uint256 nonce;\\n        uint256 nonceMaxTimes;// should be 1 for a borrow offer\\n        uint256 deadline;\\n        address strategy; // used for lend offer. should be zero address for borrow offer\\n        bytes params;\\n        uint8 v; // v: parameter (27 or 28)\\n        bytes32 r; // r: parameter\\n        bytes32 s; // s: parameter\\n    }\\n\\n    struct LoanData {\\n        address tokenAddress;\\n        uint256 tokenId;\\n        uint256 tokenAmount; // 1 for ERC721, 1+ for ERC1155\\n        address nftManager;\\n        address borrower;\\n        address lender;\\n        uint256 amount;\\n        uint128 borrowRate;\\n        uint128 interestPerSecond;\\n        address currency;\\n        address lendAsset;\\n        uint256 reserveFactor;\\n        uint256 overdueLoanFeeFactor;\\n        uint40 borrowDuration;\\n        uint40 borrowBegin;\\n        uint40 borrowOverdueTime;\\n        uint40 liquidatableTime;\\n        bool isProrated;\\n        bool autoConvertWhenRepay;\\n        LoanStatus status;\\n    }\\n\\n    enum OfferType {\\n        BORROW, // borrow offer\\n        LEND // lend offer\\n    }\\n\\n    struct TakeBorrowInfo {\\n        uint256 borrowAmount;\\n        uint256 borrowDuration;\\n        address lendAsset;\\n        bool autoConvertWhenRepay;\\n    }\\n\\n    struct TakeLendInfo {\\n        uint256 borrowAmount;\\n        uint256 borrowDuration;\\n        uint256 tokenId;\\n        address onBehalfOf;\\n        bytes params;\\n    }\\n\\n    // params for lend strategy\\n    struct TakeLendInfoForStrategy {\\n        address taker;\\n        uint256 tokenId;\\n        bytes params;\\n    }\\n\\n    enum LoanStatus {\\n        NONE,\\n        BORROWING,\\n        OVERDUE,\\n        LIQUIDATABLE\\n    }\\n\\n    struct WhitelistInfo {\\n        bool enabled;\\n        uint256 minBorrowDuration;\\n        uint256 maxBorrowDuration;\\n        uint256 overdueDuration;\\n    }\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    struct NonceInfo {\\n        bool invalid;\\n        uint256 usedTimes;\\n        bytes32 offerHash;\\n    }\\n}\\n\",\"keccak256\":\"0xc1c1fdc3ed498c4e500329e331e52c682d8b8f99cbc96337644ff3723de7191f\",\"license\":\"MIT\"},\"contracts/bespokemarket/libraries/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\nimport {IERC1271} from '@openzeppelin/contracts/interfaces/IERC1271.sol';\\n\\n/**\\n * @title SignatureChecker\\n * @notice This library allows verification of signatures for both EOAs and contracts.\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @notice Recovers the signer of a signature (for EOA)\\n     * @param hash the hash containing the signed mesage\\n     * @param v parameter (27 or 28). This prevents maleability since the public key recovery equation has two possible solutions.\\n     * @param r parameter\\n     * @param s parameter\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // https://ethereum.stackexchange.com/questions/83174/is-it-best-practice-to-check-signature-malleability-in-ecrecover\\n        // https://crypto.iacr.org/2019/affevents/wac/medias/Heninger-BiasedNonceSense.pdf\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            'BM_SIGNATURE_INVALID_S_PARAMETER'\\n        );\\n\\n        require(v == 27 || v == 28, 'BM_SIGNATURE_INVALID_V_PARAMETER');\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), 'BM_SIGNATURE_INVALID_SIGNER');\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @notice Returns whether the signer matches the signed message\\n     * @param hash the hash containing the signed mesage\\n     * @param signer the signer address to confirm message validity\\n     * @param v parameter (27 or 28)\\n     * @param r parameter\\n     * @param s parameter\\n     * @param domainSeparator paramer to prevent signature being executed in other chains and environments\\n     * @return true --> if valid // false --> if invalid\\n     */\\n    function verify(\\n        bytes32 hash,\\n        address signer,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        bytes32 domainSeparator\\n    ) internal view returns (bool) {\\n        // \\\\x19\\\\x01 is the standardized encoding prefix\\n        // https://eips.ethereum.org/EIPS/eip-712#specification\\n        bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', domainSeparator, hash));\\n        if (Address.isContract(signer)) {\\n            // 0x1626ba7e is the interfaceId for signature contracts (see IERC1271)\\n            return IERC1271(signer).isValidSignature(digest, abi.encodePacked(r, s, v)) == 0x1626ba7e;\\n        } else {\\n            return recover(digest, v, r, s) == signer;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d997d9be9ec81d9643d9fc9f1f72d917ab1196add37ae6f9bc1ad378daa829d\",\"license\":\"MIT\"},\"contracts/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    // common\\n    string public constant MATH_MULTIPLICATION_OVERFLOW = '100';\\n    string public constant MATH_ADDITION_OVERFLOW = '101';\\n    string public constant MATH_DIVISION_BY_ZERO = '102';\\n\\n    string public constant ETH_TRANSFER_FAILED = '110';\\n    string public constant RECEIVE_NOT_ALLOWED = '111';\\n    string public constant FALLBACK_NOT_ALLOWED = '112';\\n    string public constant APPROVAL_FAILED = '113';\\n\\n    // setting/factor\\n    string public constant SETTING_ZERO_ADDRESS_NOT_ALLOWED = '115';\\n    string public constant SETTING_RESERVE_FACTOR_NOT_ALLOWED = '116';\\n    string public constant SETTING_WHITELIST_INVALID_RESERVE_ID = '117';\\n    string public constant SETTING_WHITELIST_NFT_ADDRESS_IS_ZERO = '118';\\n    string public constant SETTING_WHITELIST_NFT_DURATION_OUT_OF_ORDER = '119';\\n    string public constant SETTING_WHITELIST_NFT_NAME_EMPTY = '120';\\n    string public constant SETTING_WHITELIST_NFT_SYMBOL_EMPTY = '121';\\n    string public constant SETTING_WHITELIST_NFT_LTV_NOT_ALLOWED = '122';\\n    string public constant SETTING_ADDRESS_ALREADY_INITIALIZED = '123';\\n\\n    // settings/acl\\n    string public constant ACL_ONLY_GOVERNANCE_CAN_CALL = '200';\\n    string public constant ACL_ONLY_EMERGENCY_ADMIN_CAN_CALL = '201';\\n    string public constant ACL_ONLY_POOL_ADMIN_CAN_CALL = '202';\\n    string public constant ACL_ONLY_LIQUIDATOR_CAN_CALL = '203';\\n    string public constant ACL_ONLY_AIRDROP_OPERATOR_CAN_CALL = '204';\\n    string public constant ACL_ONLY_POOL_CAN_CALL = '205';\\n\\n    // lending & borrowing\\n    // reserve\\n    string public constant RESERVE_DOES_NOT_EXIST = '300';\\n    string public constant RESERVE_LIQUIDITY_INSUFFICIENT = '301';\\n    string public constant RESERVE_INDEX_OVERFLOW = '302';\\n    string public constant RESERVE_SWITCH_MONEY_MARKET_STATE_ERROR = '303';\\n    string public constant RESERVE_TREASURY_FACTOR_NOT_ALLOWED = '304';\\n    string public constant RESERVE_TOKEN_CAN_NOT_BE_CLAIMED = '305';\\n\\n    // token\\n    string public constant AMOUNT_SCALED_IS_ZERO = '310';\\n    string public constant AMOUNT_TRANSFER_OVERFLOW = '311';\\n\\n    //deposit\\n    string public constant DEPOSIT_AMOUNT_SHOULD_BE_BIGGER_THAN_ZERO = '320';\\n\\n    // withdraw\\n    string public constant WITHDRAW_AMOUNT_NOT_ALLOWED = '321';\\n    string public constant WITHDRAW_LIQUIDITY_NOT_SUFFICIENT = '322';\\n\\n    // borrow\\n    string public constant BORROW_DURATION_NOT_ALLOWED = '330';\\n    string public constant BORROW_AMOUNT_EXCEED_BORROW_LIMIT = '331';\\n    string public constant NFT_ADDRESS_IS_NOT_IN_WHITELIST = '332';\\n\\n    // repay\\n    string public constant REPAY_STATUS_ERROR = '333';\\n    string public constant REPAY_MSG_VALUE_ERROR = '334';\\n\\n    // extend\\n    string public constant EXTEND_STATUS_ERROR = '335';\\n    string public constant EXTEND_MSG_VALUE_ERROR = '336';\\n\\n    // liquidate\\n    string public constant START_LIQUIDATION_STATUS_ERROR = '360';\\n    string public constant END_LIQUIDATION_STATUS_ERROR = '361';\\n    string public constant END_LIQUIDATION_AMOUNT_ERROR = '362';\\n\\n    // loan\\n    string public constant LOAN_DOES_NOT_EXIST = '400';\\n    string public constant LOAN_SET_STATUS_ERROR = '401';\\n    string public constant LOAN_REPAYER_IS_NOT_OWNER = '402';\\n    string public constant LOAN_LIQUIDATING_STATUS_CAN_NOT_BE_UPDATED = '403';\\n    string public constant LOAN_CALLER_IS_NOT_OWNER = '404';\\n    string public constant LOAN_COLLATERAL_NFT_CAN_NOT_BE_CLAIMED = '405';\\n\\n    string public constant FLASHCLAIM_EXECUTOR_ERROR = '410';\\n    string public constant FLASHCLAIM_STATUS_ERROR = '411';\\n\\n    // money market\\n    string public constant MONEY_MARKET_DEPOSIT_AMOUNT_NOT_ALLOWED = '500';\\n    string public constant MONEY_MARKET_WITHDRAW_AMOUNT_NOT_ALLOWED = '501';\\n    string public constant MONEY_MARKET_APPROVAL_FAILED = '502';\\n    string public constant MONEY_MARKET_DELEGATE_CALL_ERROR = '503';\\n    string public constant MONEY_MARKET_REQUIRE_DELEGATE_CALL = '504';\\n    string public constant MONEY_MARKET_WITHDRAW_AMOUNT_NOT_MATCH = '505';\\n    string public constant MONEY_MARKET_ADDRESS_ZERO_WHEN_OPEN = '506';\\n\\n    // price oracle\\n    string public constant PRICE_ORACLE_HAS_NO_PRICE_FEED = '600';\\n    string public constant PRICE_ORACLE_INCORRECT_TIMESTAMP = '601';\\n    string public constant PRICE_ORACLE_PARAMS_ERROR = '602';\\n}\\n\",\"keccak256\":\"0xf081c51479ec9a7aa3856dba0bddb3b625bed357a165fc0818aa7c3fea5d4a89\",\"license\":\"MIT\"},\"contracts/libraries/math/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {WadRayMath} from './WadRayMath.sol';\\n\\nlibrary MathUtils {\\n    using WadRayMath for uint256;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n     * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate linearly accumulated during the timeDelta, in ray\\n     **/\\n\\n    function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp) external view returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 timeDifference = block.timestamp - (uint256(lastUpdateTimestamp));\\n\\n        return (rate * timeDifference) / SECONDS_PER_YEAR + WadRayMath.ray();\\n    }\\n\\n    function calculateBorrowInterest(\\n        uint256 borrowRate,\\n        uint256 amount,\\n        uint256 duration\\n    ) external pure returns (uint256) {\\n        return amount.rayMul(borrowRate.rayMul(duration).rayDiv(SECONDS_PER_YEAR));\\n    }\\n\\n    function calculateBorrowInterestPerSecond(uint256 borrowRate, uint256 amount) external pure returns (uint256) {\\n        return amount.rayMul(borrowRate).rayDiv(SECONDS_PER_YEAR);\\n    }\\n\\n    function calculateLoanSupplyRate(\\n        uint256 availableLiquidity,\\n        uint256 totalBorrows,\\n        uint256 borrowRate\\n    ) external pure returns (uint256 loanSupplyRate, uint256 utilizationRate) {\\n        utilizationRate = (totalBorrows == 0 && availableLiquidity == 0)\\n            ? 0\\n            : totalBorrows.rayDiv(availableLiquidity + totalBorrows);\\n        loanSupplyRate = utilizationRate.rayMul(borrowRate);\\n    }\\n}\\n\",\"keccak256\":\"0xe06262969c3e10f221573fd7bfdf3a89942957b5d957a6110cb5e933d2bdbff6\",\"license\":\"MIT\"},\"contracts/libraries/math/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../helpers/Errors.sol';\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded half up\\n **/\\n\\nlibrary PercentageMath {\\n  uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\n  uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\n\\n  /**\\n   * @dev Executes a percentage multiplication\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The percentage of value\\n   **/\\n  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    if (value == 0 || percentage == 0) {\\n      return 0;\\n    }\\n\\n    require(\\n      value <= (type(uint256).max - HALF_PERCENT) / percentage,\\n      Errors.MATH_MULTIPLICATION_OVERFLOW\\n    );\\n\\n    return (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\\n  }\\n\\n  /**\\n   * @dev Executes a percentage division\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The value divided the percentage\\n   **/\\n  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    require(percentage != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfPercentage = percentage / 2;\\n\\n    require(\\n      value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR,\\n      Errors.MATH_MULTIPLICATION_OVERFLOW\\n    );\\n\\n    return (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\n  }\\n}\\n\",\"keccak256\":\"0xe8333e1a929245e4198f87645eae3fc8749e8e29f505427b38ec8ca035434953\",\"license\":\"MIT\"},\"contracts/libraries/math/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {Errors} from '../helpers/Errors.sol';\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @return One ray, 1e27\\n     **/\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    /**\\n     * @return One wad, 1e18\\n     **/\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e27/2\\n     **/\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e18/2\\n     **/\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     **/\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfWAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * b + halfWAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     **/\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * WAD + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfRAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * b + halfRAY) / RAY;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, truncating the mantissa\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMulTruncate(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return (a * b) / RAY;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * RAY + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, truncating the mantissa\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDivTruncate(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        return (a * RAY) / b;\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @param a Ray\\n     * @return a casted to wad, rounded half up to the nearest wad\\n     **/\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n        uint256 result = halfRatio + a;\\n        require(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\\n\\n        return result / WAD_RAY_RATIO;\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @param a Wad\\n     * @return a converted in ray\\n     **/\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        uint256 result = a * WAD_RAY_RATIO;\\n        require(result / WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4bf6b9a00c5e9938726d173f11b56de8edd92e17593e4dfa61a3ce7336756c6b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6126cf61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100be5760003560e01c8063678a30cc1161007b578063678a30cc1461019f5780638ac012c6146101bf578063ab51865d146101d2578063b504989b146101e5578063ed24911d146101f8578063f84ea9c1146102a057600080fd5b806304432eed146100c357806323b7b73d146100e9578063415f7e441461010b5780634567bbb71461012b5780634a150a4b1461013e57806351cb15df1461016c575b600080fd5b6100d66100d1366004611f50565b6102c0565b6040519081526020015b60405180910390f35b8180156100f557600080fd5b50610109610104366004611f85565b6103fc565b005b61011e610119366004612029565b610956565b6040516100e091906121ac565b6101096101393660046121ba565b6109b3565b61015161014c366004612029565b611181565b604080519384526020840192909252908201526060016100e0565b61017f61017a366004612235565b6111e1565b604080516001600160a01b039384168152929091166020830152016100e0565b6101b26101ad366004612029565b61138f565b6040516100e09190612261565b6100d66101cd366004612029565b611470565b6100d66101e0366004612029565b6114bd565b6100d66101f3366004612029565b6114d7565b6100d6604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527ff0cf7ce475272740cae17eb3cadd6d254800be81c53f84a2f273b99036471c62918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b8180156102ac57600080fd5b506101096102bb3660046123c2565b61154f565b80516020808301516040808501516060860151608087015160a088015160c089015160e08a01516101008b01516101208c01516101408d01516101608e0151995160009d61033d9d7f5898afb02f4982fe09fa9b4daac8eb8efd917a7c9412c0671717c798ae97aa999d919c919b9a9998979695949392016123fb565b60408051808303601f190181528282526101808501516101a08601516101c08701516101e08801516102008901516102208a01516102408b015180516020918201206001600160a01b03978816918b0191909152948616978901979097526060880192909252608087015260a0860152921660c084015260e0830191909152906101000160408051601f19818403018152908290526103df92916020016124e1565b604051602081830303815290604052805190602001209050919050565b61016087015160009061041a906001600160801b0316612710611762565b6060890151604051632ac21a2f60e21b81526001600160a01b0391821660048201529192506000919084169063ab0868bc90602401606060405180830381865afa15801561046c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104909190612510565b9250505060006040518061028001604052808b606001516001600160a01b031681526020018681526020018b60a001518152602001876001600160a01b03168152602001600060018111156104e7576104e7612182565b8c6040015160018111156104fd576104fd612182565b14610508573361050e565b8b60c001515b6001600160a01b0316815260200160008c60400151600181111561053457610534612182565b14610543578b60c00151610545565b335b6001600160a01b03168152602001898152602001846001600160801b0316815260200173D7ca4B8BFA6709fD87aeC66De1956b1f2bdFB434630c2de090868c6040518363ffffffff1660e01b81526004016105aa929190918252602082015260400190565b602060405180830381865af41580156105c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105eb919061253e565b6001600160801b031681526020018b61018001516001600160a01b031681526020018b6101a001516001600160a01b03168152602001856001600160a01b0316634322b7146040518163ffffffff1660e01b8152600401602060405180830381865afa15801561065f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610683919061253e565b8152602001856001600160a01b031663d7a5a9d36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ea919061253e565b81526020018864ffffffffff1681526020014264ffffffffff1681526020018842610715919061256d565b64ffffffffff1681526020018361072c8a4261256d565b610736919061256d565b64ffffffffff1681528b5115156020808301919091528c0151151560408201526060016001905260008a815260208d8152604091829020835181546001600160a01b039182166001600160a01b031991821617835592850151600183015592840151600282015560608401516003808301805492861692851692909217909155608085015160048301805491861691851691909117905560a085015160058301805491861691851691909117905560c0850151600683015560e08501516101008601516001600160801b03908116600160801b02911617600783015561012085015160088301805491861691851691909117905561014085015160098301805491909516931692909217909255610160830151600a830155610180830151600b8301556101a0830151600c830180546101c08601516101e08701516102008801516102208901516102408a01511515600160a81b0260ff60a81b19911515600160a01b029190911661ffff60a01b1964ffffffffff938416600160781b0264ffffffffff60781b19958516600160501b029590951669ffffffffffffffffffff60501b19968516650100000000000269ffffffffffffffffffff1990981694909916939093179590951793909316959095171793909316179190911780825561026085015194955085949260ff60b01b1990911690600160b01b90849081111561094257610942612182565b021790555050505050505050505050505050565b610260810151600090600181600381111561097357610973612182565b14156109ad574283610200015164ffffffffff161015610995575060036109ad565b42836101e0015164ffffffffff1610156109ad575060025b92915050565b60c08601516001600160a01b03166000908152602089815260408083206101c08a0151845290915290205460ff16158015610a0f575060c08601516001600160a01b03166000908152602088905260409020546101c087015110155b610a605760405162461bcd60e51b815260206004820152601b60248201527f424d5f54414b455f4f464645525f4e4f4e43455f494e56414c4944000000000060448201526064015b60405180910390fd5b6001866101e001511015610ac55760405162461bcd60e51b815260206004820152602660248201527f424d5f54414b455f4f464645525f4e4f4e43455f4d41585f54494d45535f494e60448201526556414c49444560d01b6064820152608401610a57565b6101e086015160c08701516001600160a01b0316600090815260208a815260408083206101c08b0151845290915290206001015410610b465760405162461bcd60e51b815260206004820152601b60248201527f424d5f54414b455f4f464645525f4e4f4e43455f4558484155535400000000006044820152606401610a57565b60c08601516001600160a01b03166000908152602089815260408083206101c08a0151845290915290206002015415610c055760c08601516001600160a01b03166000908152602089815260408083206101c08a015184529091529020600201548514610c055760405162461bcd60e51b815260206004820152602760248201527f424d5f54414b455f4f464645525f4e4f4e43455f555345445f42595f4f544845604482015266292fa7a32322a960c91b6064820152608401610a57565b6101808601516040516343b938c560e01b81526001600160a01b039182166004820152908216906343b938c590602401602060405180830381865afa158015610c52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c769190612585565b610cd35760405162461bcd60e51b815260206004820152602860248201527f424d5f54414b455f424f52524f575f43555252454e43595f4e4f545f494e5f5760448201526712125511531254d560c21b6064820152608401610a57565b806001600160a01b031663716f10bf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d359190612585565b1580610dac5750606086015160405163e2aafa2160e01b81526001600160a01b0391821660048201529082169063e2aafa2190602401602060405180830381865afa158015610d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dac9190612585565b610e045760405162461bcd60e51b815260206004820152602360248201527f424d5f54414b455f424f52524f575f4e46545f4e4f545f494e5f57484954454c6044820152621254d560ea1b6064820152608401610a57565b856102000151421115610e635760405162461bcd60e51b815260206004820152602160248201527f424d5f54414b455f424f52524f575f5349474e494e475f45585049524154494f6044820152602760f91b6064820152608401610a57565b6060860151604051632ac21a2f60e21b81526001600160a01b03918216600482015260009182919084169063ab0868bc90602401606060405180830381865afa158015610eb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed89190612510565b509150915087610140015164ffffffffff1688610120015164ffffffffff1611158015610f1157508188610120015164ffffffffff1610155b8015610f2957508088610140015164ffffffffff1611155b610f875760405162461bcd60e51b815260206004820152602960248201527f424d5f54414b455f424f52524f575f4f464645525f4455524154494f4e5f4e4f6044820152681517d0531313d5d15160ba1b6064820152608401610a57565b600085118015610fa3575087610120015164ffffffffff168510155b8015610fbb575087610140015164ffffffffff168511155b6110195760405162461bcd60e51b815260206004820152602960248201527f424d5f54414b455f424f52524f575f54414b45525f4455524154494f4e5f4e4f6044820152681517d0531313d5d15160ba1b6064820152608401610a57565b60008860e0015111801561103657508761010001518860e0015111155b6110925760405162461bcd60e51b815260206004820152602760248201527f424d5f54414b455f424f52524f575f4f464645525f414d4f554e545f4e4f545f60448201526610531313d5d15160ca1b6064820152608401610a57565b8760e0015186101580156110ab57508761010001518611155b6111085760405162461bcd60e51b815260206004820152602860248201527f424d5f54414b455f424f52524f575f535550504c595f414d4f554e545f4e4f5460448201526717d0531313d5d15160c21b6064820152608401610a57565b611129878960c001518a61026001518b61028001518c6102a0015189611842565b6111755760405162461bcd60e51b815260206004820181905260248201527f424d5f54414b455f424f52524f575f5349474e41545552455f494e56414c49446044820152606401610a57565b50505050505050505050565b60008060008061119085611470565b90508061119c866114bd565b6111a6919061256d565b93506111cb856101600151826111bb886114d7565b6111c5919061256d565b90611978565b91506111d782856125a2565b9250509193909250565b600080836001600160a01b031663b39348386040518163ffffffff1660e01b8152600401602060405180830381865afa158015611222573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124691906125b9565b6001600160a01b0316636352211e846040518263ffffffff1660e01b815260040161127391815260200190565b602060405180830381865afa158015611290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b491906125b9565b9050836001600160a01b031663bb322a836040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131891906125b9565b6001600160a01b0316636352211e846040518263ffffffff1660e01b815260040161134591815260200190565b602060405180830381865afa158015611362573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138691906125b9565b91509250929050565b6114346040805161028081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081018290526101c081018290526101e081018290526102008101829052610220810182905261024081018290529061026082015290565b61143d82610956565b826102600190600381111561145457611454612182565b9081600381111561146757611467612182565b90525090919050565b60008061147c8361138f565b905060006002826102600151600381111561149957611499612182565b14156114b65761018082015160c08301516114b391611978565b90505b9392505050565b60006114c8826114d7565b8260c001516109ad919061256d565b600080826101e0015164ffffffffff1642106114ff57826101e0015164ffffffffff1661151d565b82610220015161151b57826101e0015164ffffffffff1661151d565b425b90506114b6836101c0015164ffffffffff168261153a91906125a2565b6101008501516001600160801b031690611a20565b806001600160a01b031663bb322a836040518163ffffffff1660e01b8152600401602060405180830381865afa15801561158d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b191906125b9565b6001600160a01b03166342966c68836040518263ffffffff1660e01b81526004016115de91815260200190565b600060405180830381600087803b1580156115f857600080fd5b505af115801561160c573d6000803e3d6000fd5b50505050806001600160a01b031663b39348386040518163ffffffff1660e01b8152600401602060405180830381865afa15801561164e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167291906125b9565b6001600160a01b03166342966c68836040518263ffffffff1660e01b815260040161169f91815260200190565b600060405180830381600087803b1580156116b957600080fd5b505af11580156116cd573d6000803e3d6000fd5b505050600092835250506020919091526040812080546001600160a01b0319908116825560018201839055600282018390556003820180548216905560048201805482169055600582018054821690556006820183905560078201839055600882018054821690556009820180549091169055600a8101829055600b810191909155600c0180546001600160b81b0319169055565b60408051808201909152600381526218981960e91b60208201526000908261179d5760405162461bcd60e51b8152600401610a579190612602565b5060006117ab600284612615565b90506b033b2e3c9fd0803ce80000006117c6826000196125a2565b6117d09190612615565b8411156040518060400160405280600381526020016203130360ec1b8152509061180d5760405162461bcd60e51b8152600401610a579190612602565b5082816118266b033b2e3c9fd0803ce800000087612637565b611830919061256d565b61183a9190612615565b949350505050565b60405161190160f01b602082015260228101829052604281018790526000908190606201604051602081830303815290604052805190602001209050611888873b151590565b1561194a57604080516020810187905280820186905260f888901b6001600160f81b0319166060820152815160418183030181526061820192839052630b135d3f60e11b9092526001600160a01b03891691631626ba7e916118ee918591606501612656565b602060405180830381865afa15801561190b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192f919061266f565b6001600160e01b031916631626ba7e60e01b1491505061196e565b866001600160a01b031661196082888888611abe565b6001600160a01b0316149150505b9695505050505050565b6000821580611985575081155b15611992575060006109ad565b816119a06002612710612615565b6119ac906000196125a2565b6119b69190612615565b8311156040518060400160405280600381526020016203130360ec1b815250906119f35760405162461bcd60e51b8152600401610a579190612602565b50612710611a02600282612615565b611a0c8486612637565b611a16919061256d565b6114b69190612615565b6000821580611a2d575081155b15611a3a575060006109ad565b81611a5260026b033b2e3c9fd0803ce8000000612615565b611a5e906000196125a2565b611a689190612615565b8311156040518060400160405280600381526020016203130360ec1b81525090611aa55760405162461bcd60e51b8152600401610a579190612602565b506b033b2e3c9fd0803ce8000000611a02600282612615565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115611b305760405162461bcd60e51b815260206004820181905260248201527f424d5f5349474e41545552455f494e56414c49445f535f504152414d455445526044820152606401610a57565b8360ff16601b1480611b4557508360ff16601c145b611b915760405162461bcd60e51b815260206004820181905260248201527f424d5f5349474e41545552455f494e56414c49445f565f504152414d455445526044820152606401610a57565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015611be5573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611c485760405162461bcd60e51b815260206004820152601b60248201527f424d5f5349474e41545552455f494e56414c49445f5349474e455200000000006044820152606401610a57565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b6040516102c0810167ffffffffffffffff81118282101715611c8b57611c8b611c51565b60405290565b604051610280810167ffffffffffffffff81118282101715611c8b57611c8b611c51565b8015158114611cc357600080fd5b50565b8035611cd181611cb5565b919050565b803560028110611cd157600080fd5b6001600160a01b0381168114611cc357600080fd5b8035611cd181611ce5565b803564ffffffffff81168114611cd157600080fd5b80356001600160801b0381168114611cd157600080fd5b600082601f830112611d4257600080fd5b813567ffffffffffffffff80821115611d5d57611d5d611c51565b604051601f8301601f19908116603f01168101908282118183101715611d8557611d85611c51565b81604052838152866020858801011115611d9e57600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff81168114611cd157600080fd5b60006102c08284031215611de257600080fd5b611dea611c67565b9050611df582611cc6565b8152611e0360208301611cc6565b6020820152611e1460408301611cd6565b6040820152611e2560608301611cfa565b60608201526080820135608082015260a082013560a0820152611e4a60c08301611cfa565b60c082015260e082013560e0820152610100808301358183015250610120611e73818401611d05565b90820152610140611e85838201611d05565b90820152610160611e97838201611d1a565b90820152610180611ea9838201611cfa565b908201526101a0611ebb838201611cfa565b908201526101c082810135908201526101e080830135908201526102008083013590820152610220611eee818401611cfa565b908201526102408281013567ffffffffffffffff811115611f0e57600080fd5b611f1a85828601611d31565b828401525050610260611f2e818401611dbe565b9082015261028082810135908201526102a09182013591810191909152919050565b600060208284031215611f6257600080fd5b813567ffffffffffffffff811115611f7957600080fd5b61183a84828501611dcf565b600080600080600080600080610100898b031215611fa257600080fd5b88359750602089013567ffffffffffffffff811115611fc057600080fd5b611fcc8b828c01611dcf565b97505060408901359550606089013594506080890135935060a0890135611ff281611ce5565b925060c0890135915060e089013561200981611ce5565b809150509295985092959890939650565b803560048110611cd157600080fd5b6000610280828403121561203c57600080fd5b612044611c91565b61204d83611cfa565b8152602083013560208201526040830135604082015261206f60608401611cfa565b606082015261208060808401611cfa565b608082015261209160a08401611cfa565b60a082015260c083013560c08201526120ac60e08401611d1a565b60e08201526101006120bf818501611d1a565b908201526101206120d1848201611cfa565b908201526101406120e3848201611cfa565b90820152610160838101359082015261018080840135908201526101a061210b818501611d05565b908201526101c061211d848201611d05565b908201526101e061212f848201611d05565b90820152610200612141848201611d05565b90820152610220612153848201611cc6565b90820152610240612165848201611cc6565b9082015261026061217784820161201a565b908201529392505050565b634e487b7160e01b600052602160045260246000fd5b600481106121a8576121a8612182565b9052565b602081016109ad8284612198565b600080600080600080600080610100898b0312156121d757600080fd5b8835975060208901359650604089013567ffffffffffffffff8111156121fc57600080fd5b6122088b828c01611dcf565b965050606089013594506080890135935060a0890135925060c0890135915060e089013561200981611ce5565b6000806040838503121561224857600080fd5b823561225381611ce5565b946020939093013593505050565b81516001600160a01b031681526102808101602083015160208301526040830151604083015260608301516122a160608401826001600160a01b03169052565b5060808301516122bc60808401826001600160a01b03169052565b5060a08301516122d760a08401826001600160a01b03169052565b5060c083015160c083015260e08301516122fc60e08401826001600160801b03169052565b50610100838101516001600160801b031690830152610120808401516001600160a01b03908116918401919091526101408085015190911690830152610160808401519083015261018080840151908301526101a08084015164ffffffffff908116918401919091526101c0808501518216908401526101e08085015182169084015261020080850151909116908301526102208084015115159083015261024080840151151590830152610260808401516123ba82850182612198565b505092915050565b6000806000606084860312156123d757600080fd5b833592506020840135915060408401356123f081611ce5565b809150509250925092565b8d81528c151560208201528b151560408201526101a0810160028c1061242357612423612182565b8b606083015261243e608083018c6001600160a01b03169052565b8960a08301528860c083015261245f60e08301896001600160a01b03169052565b866101008301528561012083015261248161014083018664ffffffffff169052565b64ffffffffff84166101608301526001600160801b0383166101808301529e9d5050505050505050505050505050565b60005b838110156124cc5781810151838201526020016124b4565b838111156124db576000848401525b50505050565b600083516124f38184602088016124b1565b8351908301906125078183602088016124b1565b01949350505050565b60008060006060848603121561252557600080fd5b8351925060208401519150604084015190509250925092565b60006020828403121561255057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561258057612580612557565b500190565b60006020828403121561259757600080fd5b81516114b681611cb5565b6000828210156125b4576125b4612557565b500390565b6000602082840312156125cb57600080fd5b81516114b681611ce5565b600081518084526125ee8160208601602086016124b1565b601f01601f19169290920160200192915050565b6020815260006114b660208301846125d6565b60008261263257634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561265157612651612557565b500290565b82815260406020820152600061183a60408301846125d6565b60006020828403121561268157600080fd5b81516001600160e01b0319811681146114b657600080fdfea26469706673582212200a0766778cf25948e3e104c2a05e886972abbcdccb4f55d4f6fea5d9a1a7568e64736f6c634300080a0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100be5760003560e01c8063678a30cc1161007b578063678a30cc1461019f5780638ac012c6146101bf578063ab51865d146101d2578063b504989b146101e5578063ed24911d146101f8578063f84ea9c1146102a057600080fd5b806304432eed146100c357806323b7b73d146100e9578063415f7e441461010b5780634567bbb71461012b5780634a150a4b1461013e57806351cb15df1461016c575b600080fd5b6100d66100d1366004611f50565b6102c0565b6040519081526020015b60405180910390f35b8180156100f557600080fd5b50610109610104366004611f85565b6103fc565b005b61011e610119366004612029565b610956565b6040516100e091906121ac565b6101096101393660046121ba565b6109b3565b61015161014c366004612029565b611181565b604080519384526020840192909252908201526060016100e0565b61017f61017a366004612235565b6111e1565b604080516001600160a01b039384168152929091166020830152016100e0565b6101b26101ad366004612029565b61138f565b6040516100e09190612261565b6100d66101cd366004612029565b611470565b6100d66101e0366004612029565b6114bd565b6100d66101f3366004612029565b6114d7565b6100d6604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527ff0cf7ce475272740cae17eb3cadd6d254800be81c53f84a2f273b99036471c62918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b8180156102ac57600080fd5b506101096102bb3660046123c2565b61154f565b80516020808301516040808501516060860151608087015160a088015160c089015160e08a01516101008b01516101208c01516101408d01516101608e0151995160009d61033d9d7f5898afb02f4982fe09fa9b4daac8eb8efd917a7c9412c0671717c798ae97aa999d919c919b9a9998979695949392016123fb565b60408051808303601f190181528282526101808501516101a08601516101c08701516101e08801516102008901516102208a01516102408b015180516020918201206001600160a01b03978816918b0191909152948616978901979097526060880192909252608087015260a0860152921660c084015260e0830191909152906101000160408051601f19818403018152908290526103df92916020016124e1565b604051602081830303815290604052805190602001209050919050565b61016087015160009061041a906001600160801b0316612710611762565b6060890151604051632ac21a2f60e21b81526001600160a01b0391821660048201529192506000919084169063ab0868bc90602401606060405180830381865afa15801561046c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104909190612510565b9250505060006040518061028001604052808b606001516001600160a01b031681526020018681526020018b60a001518152602001876001600160a01b03168152602001600060018111156104e7576104e7612182565b8c6040015160018111156104fd576104fd612182565b14610508573361050e565b8b60c001515b6001600160a01b0316815260200160008c60400151600181111561053457610534612182565b14610543578b60c00151610545565b335b6001600160a01b03168152602001898152602001846001600160801b0316815260200173__$f742c272e27921345744ab659e4a493fb5$__630c2de090868c6040518363ffffffff1660e01b81526004016105aa929190918252602082015260400190565b602060405180830381865af41580156105c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105eb919061253e565b6001600160801b031681526020018b61018001516001600160a01b031681526020018b6101a001516001600160a01b03168152602001856001600160a01b0316634322b7146040518163ffffffff1660e01b8152600401602060405180830381865afa15801561065f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610683919061253e565b8152602001856001600160a01b031663d7a5a9d36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ea919061253e565b81526020018864ffffffffff1681526020014264ffffffffff1681526020018842610715919061256d565b64ffffffffff1681526020018361072c8a4261256d565b610736919061256d565b64ffffffffff1681528b5115156020808301919091528c0151151560408201526060016001905260008a815260208d8152604091829020835181546001600160a01b039182166001600160a01b031991821617835592850151600183015592840151600282015560608401516003808301805492861692851692909217909155608085015160048301805491861691851691909117905560a085015160058301805491861691851691909117905560c0850151600683015560e08501516101008601516001600160801b03908116600160801b02911617600783015561012085015160088301805491861691851691909117905561014085015160098301805491909516931692909217909255610160830151600a830155610180830151600b8301556101a0830151600c830180546101c08601516101e08701516102008801516102208901516102408a01511515600160a81b0260ff60a81b19911515600160a01b029190911661ffff60a01b1964ffffffffff938416600160781b0264ffffffffff60781b19958516600160501b029590951669ffffffffffffffffffff60501b19968516650100000000000269ffffffffffffffffffff1990981694909916939093179590951793909316959095171793909316179190911780825561026085015194955085949260ff60b01b1990911690600160b01b90849081111561094257610942612182565b021790555050505050505050505050505050565b610260810151600090600181600381111561097357610973612182565b14156109ad574283610200015164ffffffffff161015610995575060036109ad565b42836101e0015164ffffffffff1610156109ad575060025b92915050565b60c08601516001600160a01b03166000908152602089815260408083206101c08a0151845290915290205460ff16158015610a0f575060c08601516001600160a01b03166000908152602088905260409020546101c087015110155b610a605760405162461bcd60e51b815260206004820152601b60248201527f424d5f54414b455f4f464645525f4e4f4e43455f494e56414c4944000000000060448201526064015b60405180910390fd5b6001866101e001511015610ac55760405162461bcd60e51b815260206004820152602660248201527f424d5f54414b455f4f464645525f4e4f4e43455f4d41585f54494d45535f494e60448201526556414c49444560d01b6064820152608401610a57565b6101e086015160c08701516001600160a01b0316600090815260208a815260408083206101c08b0151845290915290206001015410610b465760405162461bcd60e51b815260206004820152601b60248201527f424d5f54414b455f4f464645525f4e4f4e43455f4558484155535400000000006044820152606401610a57565b60c08601516001600160a01b03166000908152602089815260408083206101c08a0151845290915290206002015415610c055760c08601516001600160a01b03166000908152602089815260408083206101c08a015184529091529020600201548514610c055760405162461bcd60e51b815260206004820152602760248201527f424d5f54414b455f4f464645525f4e4f4e43455f555345445f42595f4f544845604482015266292fa7a32322a960c91b6064820152608401610a57565b6101808601516040516343b938c560e01b81526001600160a01b039182166004820152908216906343b938c590602401602060405180830381865afa158015610c52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c769190612585565b610cd35760405162461bcd60e51b815260206004820152602860248201527f424d5f54414b455f424f52524f575f43555252454e43595f4e4f545f494e5f5760448201526712125511531254d560c21b6064820152608401610a57565b806001600160a01b031663716f10bf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d359190612585565b1580610dac5750606086015160405163e2aafa2160e01b81526001600160a01b0391821660048201529082169063e2aafa2190602401602060405180830381865afa158015610d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dac9190612585565b610e045760405162461bcd60e51b815260206004820152602360248201527f424d5f54414b455f424f52524f575f4e46545f4e4f545f494e5f57484954454c6044820152621254d560ea1b6064820152608401610a57565b856102000151421115610e635760405162461bcd60e51b815260206004820152602160248201527f424d5f54414b455f424f52524f575f5349474e494e475f45585049524154494f6044820152602760f91b6064820152608401610a57565b6060860151604051632ac21a2f60e21b81526001600160a01b03918216600482015260009182919084169063ab0868bc90602401606060405180830381865afa158015610eb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed89190612510565b509150915087610140015164ffffffffff1688610120015164ffffffffff1611158015610f1157508188610120015164ffffffffff1610155b8015610f2957508088610140015164ffffffffff1611155b610f875760405162461bcd60e51b815260206004820152602960248201527f424d5f54414b455f424f52524f575f4f464645525f4455524154494f4e5f4e4f6044820152681517d0531313d5d15160ba1b6064820152608401610a57565b600085118015610fa3575087610120015164ffffffffff168510155b8015610fbb575087610140015164ffffffffff168511155b6110195760405162461bcd60e51b815260206004820152602960248201527f424d5f54414b455f424f52524f575f54414b45525f4455524154494f4e5f4e4f6044820152681517d0531313d5d15160ba1b6064820152608401610a57565b60008860e0015111801561103657508761010001518860e0015111155b6110925760405162461bcd60e51b815260206004820152602760248201527f424d5f54414b455f424f52524f575f4f464645525f414d4f554e545f4e4f545f60448201526610531313d5d15160ca1b6064820152608401610a57565b8760e0015186101580156110ab57508761010001518611155b6111085760405162461bcd60e51b815260206004820152602860248201527f424d5f54414b455f424f52524f575f535550504c595f414d4f554e545f4e4f5460448201526717d0531313d5d15160c21b6064820152608401610a57565b611129878960c001518a61026001518b61028001518c6102a0015189611842565b6111755760405162461bcd60e51b815260206004820181905260248201527f424d5f54414b455f424f52524f575f5349474e41545552455f494e56414c49446044820152606401610a57565b50505050505050505050565b60008060008061119085611470565b90508061119c866114bd565b6111a6919061256d565b93506111cb856101600151826111bb886114d7565b6111c5919061256d565b90611978565b91506111d782856125a2565b9250509193909250565b600080836001600160a01b031663b39348386040518163ffffffff1660e01b8152600401602060405180830381865afa158015611222573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124691906125b9565b6001600160a01b0316636352211e846040518263ffffffff1660e01b815260040161127391815260200190565b602060405180830381865afa158015611290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b491906125b9565b9050836001600160a01b031663bb322a836040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131891906125b9565b6001600160a01b0316636352211e846040518263ffffffff1660e01b815260040161134591815260200190565b602060405180830381865afa158015611362573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138691906125b9565b91509250929050565b6114346040805161028081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081018290526101c081018290526101e081018290526102008101829052610220810182905261024081018290529061026082015290565b61143d82610956565b826102600190600381111561145457611454612182565b9081600381111561146757611467612182565b90525090919050565b60008061147c8361138f565b905060006002826102600151600381111561149957611499612182565b14156114b65761018082015160c08301516114b391611978565b90505b9392505050565b60006114c8826114d7565b8260c001516109ad919061256d565b600080826101e0015164ffffffffff1642106114ff57826101e0015164ffffffffff1661151d565b82610220015161151b57826101e0015164ffffffffff1661151d565b425b90506114b6836101c0015164ffffffffff168261153a91906125a2565b6101008501516001600160801b031690611a20565b806001600160a01b031663bb322a836040518163ffffffff1660e01b8152600401602060405180830381865afa15801561158d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b191906125b9565b6001600160a01b03166342966c68836040518263ffffffff1660e01b81526004016115de91815260200190565b600060405180830381600087803b1580156115f857600080fd5b505af115801561160c573d6000803e3d6000fd5b50505050806001600160a01b031663b39348386040518163ffffffff1660e01b8152600401602060405180830381865afa15801561164e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167291906125b9565b6001600160a01b03166342966c68836040518263ffffffff1660e01b815260040161169f91815260200190565b600060405180830381600087803b1580156116b957600080fd5b505af11580156116cd573d6000803e3d6000fd5b505050600092835250506020919091526040812080546001600160a01b0319908116825560018201839055600282018390556003820180548216905560048201805482169055600582018054821690556006820183905560078201839055600882018054821690556009820180549091169055600a8101829055600b810191909155600c0180546001600160b81b0319169055565b60408051808201909152600381526218981960e91b60208201526000908261179d5760405162461bcd60e51b8152600401610a579190612602565b5060006117ab600284612615565b90506b033b2e3c9fd0803ce80000006117c6826000196125a2565b6117d09190612615565b8411156040518060400160405280600381526020016203130360ec1b8152509061180d5760405162461bcd60e51b8152600401610a579190612602565b5082816118266b033b2e3c9fd0803ce800000087612637565b611830919061256d565b61183a9190612615565b949350505050565b60405161190160f01b602082015260228101829052604281018790526000908190606201604051602081830303815290604052805190602001209050611888873b151590565b1561194a57604080516020810187905280820186905260f888901b6001600160f81b0319166060820152815160418183030181526061820192839052630b135d3f60e11b9092526001600160a01b03891691631626ba7e916118ee918591606501612656565b602060405180830381865afa15801561190b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192f919061266f565b6001600160e01b031916631626ba7e60e01b1491505061196e565b866001600160a01b031661196082888888611abe565b6001600160a01b0316149150505b9695505050505050565b6000821580611985575081155b15611992575060006109ad565b816119a06002612710612615565b6119ac906000196125a2565b6119b69190612615565b8311156040518060400160405280600381526020016203130360ec1b815250906119f35760405162461bcd60e51b8152600401610a579190612602565b50612710611a02600282612615565b611a0c8486612637565b611a16919061256d565b6114b69190612615565b6000821580611a2d575081155b15611a3a575060006109ad565b81611a5260026b033b2e3c9fd0803ce8000000612615565b611a5e906000196125a2565b611a689190612615565b8311156040518060400160405280600381526020016203130360ec1b81525090611aa55760405162461bcd60e51b8152600401610a579190612602565b506b033b2e3c9fd0803ce8000000611a02600282612615565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115611b305760405162461bcd60e51b815260206004820181905260248201527f424d5f5349474e41545552455f494e56414c49445f535f504152414d455445526044820152606401610a57565b8360ff16601b1480611b4557508360ff16601c145b611b915760405162461bcd60e51b815260206004820181905260248201527f424d5f5349474e41545552455f494e56414c49445f565f504152414d455445526044820152606401610a57565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015611be5573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611c485760405162461bcd60e51b815260206004820152601b60248201527f424d5f5349474e41545552455f494e56414c49445f5349474e455200000000006044820152606401610a57565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b6040516102c0810167ffffffffffffffff81118282101715611c8b57611c8b611c51565b60405290565b604051610280810167ffffffffffffffff81118282101715611c8b57611c8b611c51565b8015158114611cc357600080fd5b50565b8035611cd181611cb5565b919050565b803560028110611cd157600080fd5b6001600160a01b0381168114611cc357600080fd5b8035611cd181611ce5565b803564ffffffffff81168114611cd157600080fd5b80356001600160801b0381168114611cd157600080fd5b600082601f830112611d4257600080fd5b813567ffffffffffffffff80821115611d5d57611d5d611c51565b604051601f8301601f19908116603f01168101908282118183101715611d8557611d85611c51565b81604052838152866020858801011115611d9e57600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff81168114611cd157600080fd5b60006102c08284031215611de257600080fd5b611dea611c67565b9050611df582611cc6565b8152611e0360208301611cc6565b6020820152611e1460408301611cd6565b6040820152611e2560608301611cfa565b60608201526080820135608082015260a082013560a0820152611e4a60c08301611cfa565b60c082015260e082013560e0820152610100808301358183015250610120611e73818401611d05565b90820152610140611e85838201611d05565b90820152610160611e97838201611d1a565b90820152610180611ea9838201611cfa565b908201526101a0611ebb838201611cfa565b908201526101c082810135908201526101e080830135908201526102008083013590820152610220611eee818401611cfa565b908201526102408281013567ffffffffffffffff811115611f0e57600080fd5b611f1a85828601611d31565b828401525050610260611f2e818401611dbe565b9082015261028082810135908201526102a09182013591810191909152919050565b600060208284031215611f6257600080fd5b813567ffffffffffffffff811115611f7957600080fd5b61183a84828501611dcf565b600080600080600080600080610100898b031215611fa257600080fd5b88359750602089013567ffffffffffffffff811115611fc057600080fd5b611fcc8b828c01611dcf565b97505060408901359550606089013594506080890135935060a0890135611ff281611ce5565b925060c0890135915060e089013561200981611ce5565b809150509295985092959890939650565b803560048110611cd157600080fd5b6000610280828403121561203c57600080fd5b612044611c91565b61204d83611cfa565b8152602083013560208201526040830135604082015261206f60608401611cfa565b606082015261208060808401611cfa565b608082015261209160a08401611cfa565b60a082015260c083013560c08201526120ac60e08401611d1a565b60e08201526101006120bf818501611d1a565b908201526101206120d1848201611cfa565b908201526101406120e3848201611cfa565b90820152610160838101359082015261018080840135908201526101a061210b818501611d05565b908201526101c061211d848201611d05565b908201526101e061212f848201611d05565b90820152610200612141848201611d05565b90820152610220612153848201611cc6565b90820152610240612165848201611cc6565b9082015261026061217784820161201a565b908201529392505050565b634e487b7160e01b600052602160045260246000fd5b600481106121a8576121a8612182565b9052565b602081016109ad8284612198565b600080600080600080600080610100898b0312156121d757600080fd5b8835975060208901359650604089013567ffffffffffffffff8111156121fc57600080fd5b6122088b828c01611dcf565b965050606089013594506080890135935060a0890135925060c0890135915060e089013561200981611ce5565b6000806040838503121561224857600080fd5b823561225381611ce5565b946020939093013593505050565b81516001600160a01b031681526102808101602083015160208301526040830151604083015260608301516122a160608401826001600160a01b03169052565b5060808301516122bc60808401826001600160a01b03169052565b5060a08301516122d760a08401826001600160a01b03169052565b5060c083015160c083015260e08301516122fc60e08401826001600160801b03169052565b50610100838101516001600160801b031690830152610120808401516001600160a01b03908116918401919091526101408085015190911690830152610160808401519083015261018080840151908301526101a08084015164ffffffffff908116918401919091526101c0808501518216908401526101e08085015182169084015261020080850151909116908301526102208084015115159083015261024080840151151590830152610260808401516123ba82850182612198565b505092915050565b6000806000606084860312156123d757600080fd5b833592506020840135915060408401356123f081611ce5565b809150509250925092565b8d81528c151560208201528b151560408201526101a0810160028c1061242357612423612182565b8b606083015261243e608083018c6001600160a01b03169052565b8960a08301528860c083015261245f60e08301896001600160a01b03169052565b866101008301528561012083015261248161014083018664ffffffffff169052565b64ffffffffff84166101608301526001600160801b0383166101808301529e9d5050505050505050505050505050565b60005b838110156124cc5781810151838201526020016124b4565b838111156124db576000848401525b50505050565b600083516124f38184602088016124b1565b8351908301906125078183602088016124b1565b01949350505050565b60008060006060848603121561252557600080fd5b8351925060208401519150604084015190509250925092565b60006020828403121561255057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561258057612580612557565b500190565b60006020828403121561259757600080fd5b81516114b681611cb5565b6000828210156125b4576125b4612557565b500390565b6000602082840312156125cb57600080fd5b81516114b681611ce5565b600081518084526125ee8160208601602086016124b1565b601f01601f19169290920160200192915050565b6020815260006114b660208301846125d6565b60008261263257634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561265157612651612557565b500290565b82815260406020820152600061183a60408301846125d6565b60006020828403121561268157600080fd5b81516001600160e01b0319811681146114b657600080fdfea26469706673582212200a0766778cf25948e3e104c2a05e886972abbcdccb4f55d4f6fea5d9a1a7568e64736f6c634300080a0033",
  "libraries": {
    "BespokeTypes": "0x473482d4940F9075B8E3C42ccE22B71eA74D0d2A",
    "WadRayMath": "0x9CFd56999dF6216aE3D93767A73a6Eba8AeAbE08",
    "MathUtils": "0xD7ca4B8BFA6709fD87aeC66De1956b1f2bdFB434"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}