{
  "address": "0x711dC5Cec4Efc7F852b02dC44096acC0E90b9E0e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "settings_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bespoke_settings_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ClaimERC1155Airdrop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimERC20Airdrop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "ClaimERC721Airdrop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "FlashClaim",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BESPOKE_SETTINGS",
      "outputs": [
        {
          "internalType": "contract IOpenSkyBespokeSettings",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SETTINGS",
      "outputs": [
        {
          "internalType": "contract IOpenSkySettings",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "claimERC1155Airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimERC20Airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "claimERC721Airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyTokenTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiverAddress",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "loanIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "flashClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nftBorrowStat",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferCollateralIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferCollateralOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferCollateralOutOnForeclose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd7167c44085c6e1b439ad69db391c68322d46971107d7456e767193b6c80bcf3",
  "receipt": {
    "to": null,
    "from": "0x218513C58A4781a5B88De6230caA29aBCe2Ccd75",
    "contractAddress": "0x711dC5Cec4Efc7F852b02dC44096acC0E90b9E0e",
    "transactionIndex": 2,
    "gasUsed": "2033041",
    "logsBloom": "0x
    "blockHash": "0x4487f896f1accd813fd2dcdf951879583122a352eb9cdbcffc86f5e5c5b33d96",
    "transactionHash": "0xd7167c44085c6e1b439ad69db391c68322d46971107d7456e767193b6c80bcf3",
    "logs": [],
    "blockNumber": 2569385,
    "cumulativeGasUsed": "2339838",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x24C54B91D29e8319976030581909732336E8B2bb",
    "0xF3B73e2a1427a027c18bfE11dA7A20B5B88dc867"
  ],
  "solcInputHash": "88f70ef30a97ad95dcfad3d4587a7e7c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"settings_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bespoke_settings_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ClaimERC1155Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimERC20Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"ClaimERC721Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"FlashClaim\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BESPOKE_SETTINGS\",\"outputs\":[{\"internalType\":\"contract IOpenSkyBespokeSettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SETTINGS\",\"outputs\":[{\"internalType\":\"contract IOpenSkySettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"claimERC1155Airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimERC20Airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"claimERC721Airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"loanIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"flashClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftBorrowStat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferCollateralIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferCollateralOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferCollateralOutOnForeclose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimERC1155Airdrop(address,address,uint256[],uint256[],bytes)\":{\"params\":{\"amounts\":\"The amount of the ERC1155 tokens\",\"data\":\"packed params to pass to the receiver as extra information*\",\"ids\":\"The ID of the ERC1155 token\",\"to\":\"The address which will receive the ERC1155 tokens\",\"token\":\"The address of the airdropped token\"}},\"claimERC20Airdrop(address,address,uint256)\":{\"params\":{\"amount\":\"The amount of the ERC20 token*\",\"to\":\"The address which will receive ERC20 token\",\"token\":\"The address of the airdropped token\"}},\"claimERC721Airdrop(address,address,uint256[])\":{\"params\":{\"ids\":\"The ID of the ERC721 token*\",\"to\":\"The address which will receive the ERC721 token\",\"token\":\"The address of the airdropped token\"}},\"emergencyTokenTransfer(address,address,uint256)\":{\"details\":\"transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\",\"params\":{\"amount\":\"amount to send\",\"to\":\"recipient of the transfer\",\"token\":\"token to transfer\"}},\"flashClaim(address,uint256[],bytes)\":{\"details\":\"IMPORTANT There are security concerns for developers of flash loan receiver contracts that must be carefully considered\",\"params\":{\"loanIds\":\"The ID of loan being flash-borrowed\",\"params\":\"packed params to pass to the receiver as extra information*\",\"receiverAddress\":\"The address of the contract receiving the funds, implementing IFlashClaimReceiver interface\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimERC1155Airdrop(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Claim the ERC1155 token which has been airdropped to the loan contract\"},\"claimERC20Airdrop(address,address,uint256)\":{\"notice\":\"Claim the ERC20 token which has been airdropped to the loan contract\"},\"claimERC721Airdrop(address,address,uint256[])\":{\"notice\":\"Claim the ERC721 token which has been airdropped to the loan contract\"},\"flashClaim(address,uint256[],bytes)\":{\"notice\":\"Allows smart contracts to access the collateralized NFT within one transaction, as long as the amount taken plus a fee is returned\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bespokemarket/transferAdaptersCollateral/TransferAdapterERC721Default.sol\":\"TransferAdapterERC721Default\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x4716e860c041e651d2f2486399ea5a49ec12289e91b2763991a2fa3a70772acf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x8c578d9e30c8f2bb7ac01d108766df87d42b73d4d3638f01d494a894fe7c1f4b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x8756c97d6004b1ae21517a013bdec72fbf30be7852afb2f395871d280131b250\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/bespokemarket/interfaces/IOpenSkyBespokeMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../libraries/BespokeTypes.sol';\\n\\ninterface IOpenSkyBespokeMarket {\\n    event CancelAllOffers(address indexed sender, uint256 nonce);\\n\\n    event CancelMultipleOffers(address indexed sender, uint256[] nonces);\\n\\n    event TakeBorrowOffer(\\n        bytes32 offerHash,\\n        uint256 indexed loanId,\\n        address indexed lender,\\n        address indexed borrower,\\n        uint256 nonce\\n    );\\n\\n    event TakeLendOffer(\\n        bytes32 offerHash,\\n        uint256 indexed loanId,\\n        address indexed lender,\\n        address indexed borrower,\\n        address onBehalfOf,\\n        uint256 nonce,\\n        uint256 nonceOrder\\n    );\\n\\n    event Repay(uint256 indexed loanId, address indexed operator, address indexed receiver);\\n\\n    event Foreclose(uint256 indexed loanId, address indexed operator, address indexed receiver);\\n\\n    function takeBorrowOffer(\\n        BespokeTypes.Offer memory offerData,\\n        uint256 supplyAmount,\\n        uint256 supplyDuration,\\n        address lendAsset,\\n        bool autoConvertWhenRepay\\n    ) external returns (uint256);\\n\\n    function takeLendOffer(\\n        BespokeTypes.Offer memory offerData,\\n        uint256 tokenId,\\n        uint256 borrowAmount,\\n        uint256 borrowDuration,\\n        address onBehalfOf,\\n        bytes memory params\\n    ) external returns (uint256);\\n\\n    function repay(uint256 loanId) external;\\n\\n    function foreclose(uint256 loanId) external;\\n\\n    function cancelAllBorrowOffersForSender(uint256 minNonce_) external;\\n\\n    function cancelMultipleBorrowOffers(uint256[] calldata offerNonces) external;\\n\\n    function isValidNonce(address account, uint256 nonce) external view returns (bool);\\n\\n    function getLoanData(uint256 loanId) external view returns (BespokeTypes.LoanData memory);\\n\\n    function getStatus(uint256 loanId) external view returns (BespokeTypes.LoanStatus);\\n\\n    function getBorrowInterest(uint256 loanId) external view returns (uint256);\\n\\n    function getBorrowBalance(uint256 loanId) external view returns (uint256);\\n\\n    function getPenalty(uint256 loanId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x26e2311705ef5467421b2c14655f968cf91672decf9776eae50ac528c1122bee\",\"license\":\"MIT\"},\"contracts/bespokemarket/interfaces/IOpenSkyBespokeSettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\nimport '../libraries/BespokeTypes.sol';\\n\\ninterface IOpenSkyBespokeSettings {\\n    event InitLoanAddress(address operator, address borrowLoanAddress, address lendLoanAddress);\\n    event InitMarketAddress(address operator, address address_);\\n\\n    event InitIncentiveControllerAddressLend(address operator, address address_);\\n    event InitIncentiveControllerAddressBorrow(address operator, address address_);\\n\\n    event SetReserveFactor(address operator, uint256 factor);\\n    event SetOverdueLoanFeeFactor(address operator, uint256 factor);\\n\\n    event SetMinBorrowDuration(address operator, uint256 factor);\\n    event SetMaxBorrowDuration(address operator, uint256 factor);\\n    event SetOverdueDuration(address operator, uint256 factor);\\n\\n    // nft whitelist\\n    event OpenWhitelist(address operator);\\n    event CloseWhitelist(address operator);\\n    event AddToWhitelist(address operator, address nft);\\n    event RemoveFromWhitelist(address operator, address nft);\\n\\n    // currency whitelist\\n    event AddCurrency(address operator, address currency);\\n    event RemoveCurrency(address operator, address currency);\\n\\n    // strategy whitelist list\\n    event AddStrategy(address operator, address address_);\\n    event RemoveStrategy(address operator, address address_);\\n\\n    // setting for nft transfer adapter \\n    event InitDefaultNftTransferAdapter(address ERC721DefaultTransferAdapter, address ERC1155DefaultTransferAdapter);\\n    event AddNftTransferAdapter(address operator, address nftAddress, address adapterAddress);\\n    event RemoveNftTransferAdapter(address operator, address nftAddress);\\n\\n    // settings for currency transfer adapter \\n    event InitDefaultCurrencyTransferAdapter(address currencyDefaultTransferAdapter);\\n    event AddCurrencyTransferAdapter(address operator, address currencyAddress, address adapterAddress);\\n    event RemoveCurrencyTransferAdapter(address operator, address currencyAddress);\\n\\n    function marketAddress() external view returns (address);\\n\\n    function borrowLoanAddress() external view returns (address);\\n\\n    function lendLoanAddress() external view returns (address);\\n\\n    function incentiveControllerAddressLend() external view returns (address);\\n\\n    function incentiveControllerAddressBorrow() external view returns (address);\\n\\n    function minBorrowDuration() external view returns (uint256);\\n\\n    function maxBorrowDuration() external view returns (uint256);\\n\\n    function overdueDuration() external view returns (uint256);\\n\\n    function reserveFactor() external view returns (uint256);\\n\\n    function MAX_RESERVE_FACTOR() external view returns (uint256);\\n\\n    function overdueLoanFeeFactor() external view returns (uint256);\\n\\n    function isWhitelistOn() external view returns (bool);\\n\\n    function inWhitelist(address nft) external view returns (bool);\\n\\n    function getWhitelistDetail(address nft) external view returns (BespokeTypes.WhitelistInfo memory);\\n\\n    function getBorrowDurationConfig(address nftAddress)\\n        external\\n        view\\n        returns (\\n            uint256 minBorrowDuration,\\n            uint256 maxBorrowDuration,\\n            uint256 overdueDuration\\n        );\\n\\n    function isCurrencyWhitelisted(address currency) external view returns (bool);\\n\\n    function getCurrencyTransferAdapter(address currency) external view returns (address adapter);\\n\\n    function getNftTransferAdapter(address nftAddress) external view returns (address);\\n\\n    function isStrategyWhitelisted(address address_) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x253a67aa978e32ef3996f42a0ef605ab92ff34a28173e5f0b9be5684f2b04792\",\"license\":\"MIT\"},\"contracts/bespokemarket/interfaces/ITransferAdapterCollateralBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface ITransferAdapterCollateralBase {\\n    event FlashClaim(address indexed receiver, address sender, address indexed nftAddress, uint256 indexed tokenId);\\n    event ClaimERC20Airdrop(address indexed token, address indexed to, uint256 amount);\\n    event ClaimERC721Airdrop(address indexed token, address indexed to, uint256[] ids);\\n    event ClaimERC1155Airdrop(address indexed token, address indexed to, uint256[] ids, uint256[] amounts, bytes data);\\n\\n\\n    /**\\n * @notice Allows smart contracts to access the collateralized NFT within one transaction,\\n     * as long as the amount taken plus a fee is returned\\n     * @dev IMPORTANT There are security concerns for developers of flash loan receiver contracts that must be carefully considered\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashClaimReceiver interface\\n     * @param loanIds The ID of loan being flash-borrowed\\n     * @param params packed params to pass to the receiver as extra information\\n     **/\\n    function flashClaim(\\n        address receiverAddress,\\n        uint256[] calldata loanIds,\\n        bytes calldata params\\n    ) external;\\n\\n    /**\\n     * @notice Claim the ERC20 token which has been airdropped to the loan contract\\n     * @param token The address of the airdropped token\\n     * @param to The address which will receive ERC20 token\\n     * @param amount The amount of the ERC20 token\\n     **/\\n    function claimERC20Airdrop(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Claim the ERC721 token which has been airdropped to the loan contract\\n     * @param token The address of the airdropped token\\n     * @param to The address which will receive the ERC721 token\\n     * @param ids The ID of the ERC721 token\\n     **/\\n    function claimERC721Airdrop(\\n        address token,\\n        address to,\\n        uint256[] calldata ids\\n    ) external;\\n\\n    /**\\n     * @notice Claim the ERC1155 token which has been airdropped to the loan contract\\n     * @param token The address of the airdropped token\\n     * @param to The address which will receive the ERC1155 tokens\\n     * @param ids The ID of the ERC1155 token\\n     * @param amounts The amount of the ERC1155 tokens\\n     * @param data packed params to pass to the receiver as extra information\\n     **/\\n    function claimERC1155Airdrop(\\n        address token,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x356fb19dac1e01fd122679ccaf473fb9bb82dc9b45a31b58d01c852938d09d93\",\"license\":\"MIT\"},\"contracts/bespokemarket/interfaces/ITransferAdapterNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface ITransferAdapterNFT {\\n    function transferCollateralIn(\\n        address collection,\\n        address from,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n\\n    function transferCollateralOut(\\n        address collection,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n\\n    function transferCollateralOutOnForeclose(\\n        address collection,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x02724098b358ab512dfb7a5989d1c29901e79fd8501b72d5b86eb8c44841bdab\",\"license\":\"MIT\"},\"contracts/bespokemarket/libraries/BespokeTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary BespokeTypes {\\n    struct Offer {\\n        bool isProrated; // whether to pay interest a fixed-time when repay early\\n        bool autoConvertWhenRepay; // when currency!=lendAsset, whether to convert currency to lendAsset for lender when repay. Determined by lender.\\n        OfferType offerType;\\n        address tokenAddress;\\n        uint256 tokenId;\\n        uint256 tokenAmount; // 1 for ERC721, 1+ for ERC1155\\n        address signer; //borrower or lender\\n        uint256 borrowAmountMin;\\n        uint256 borrowAmountMax;\\n        uint40 borrowDurationMin;\\n        uint40 borrowDurationMax;\\n        uint128 borrowRate;\\n        address currency;  // Asset to borrow or receive when loan created. Borrower should also use it for repay.\\n        address lendAsset; // Using which token to lend. Determined by lender and should be zero address for borrow offer.\\n        uint256 nonce;\\n        uint256 nonceMaxTimes;// should be 1 for a borrow offer\\n        uint256 deadline;\\n        address strategy; // used for lend offer. should be zero address for borrow offer\\n        bytes params;\\n        uint8 v; // v: parameter (27 or 28)\\n        bytes32 r; // r: parameter\\n        bytes32 s; // s: parameter\\n    }\\n\\n    struct LoanData {\\n        address tokenAddress;\\n        uint256 tokenId;\\n        uint256 tokenAmount; // 1 for ERC721, 1+ for ERC1155\\n        address nftManager;\\n        address borrower;\\n        address lender;\\n        uint256 amount;\\n        uint128 borrowRate;\\n        uint128 interestPerSecond;\\n        address currency;\\n        address lendAsset;\\n        uint256 reserveFactor;\\n        uint256 overdueLoanFeeFactor;\\n        uint40 borrowDuration;\\n        uint40 borrowBegin;\\n        uint40 borrowOverdueTime;\\n        uint40 liquidatableTime;\\n        bool isProrated;\\n        bool autoConvertWhenRepay;\\n        LoanStatus status;\\n    }\\n\\n    enum OfferType {\\n        BORROW, // borrow offer\\n        LEND // lend offer\\n    }\\n\\n    struct TakeBorrowInfo {\\n        uint256 borrowAmount;\\n        uint256 borrowDuration;\\n        address lendAsset;\\n        bool autoConvertWhenRepay;\\n    }\\n\\n    struct TakeLendInfo {\\n        uint256 borrowAmount;\\n        uint256 borrowDuration;\\n        uint256 tokenId;\\n        address onBehalfOf;\\n        bytes params;\\n    }\\n\\n    // params for lend strategy\\n    struct TakeLendInfoForStrategy {\\n        address taker;\\n        uint256 tokenId;\\n        bytes params;\\n    }\\n\\n    enum LoanStatus {\\n        NONE,\\n        BORROWING,\\n        OVERDUE,\\n        LIQUIDATABLE\\n    }\\n\\n    struct WhitelistInfo {\\n        bool enabled;\\n        uint256 minBorrowDuration;\\n        uint256 maxBorrowDuration;\\n        uint256 overdueDuration;\\n    }\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    struct NonceInfo {\\n        bool invalid;\\n        uint256 usedTimes;\\n        bytes32 offerHash;\\n    }\\n}\\n\",\"keccak256\":\"0xc1c1fdc3ed498c4e500329e331e52c682d8b8f99cbc96337644ff3723de7191f\",\"license\":\"MIT\"},\"contracts/bespokemarket/transferAdaptersCollateral/TransferAdapterCollateralBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/utils/Context.sol';\\n//import '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport '../libraries/BespokeTypes.sol';\\nimport '../../interfaces/IOpenSkySettings.sol';\\nimport '../../interfaces/IACLManager.sol';\\nimport '../../interfaces/IOpenSkyFlashClaimReceiver.sol';\\n\\nimport '../interfaces/IOpenSkyBespokeSettings.sol';\\nimport '../interfaces/IOpenSkyBespokeMarket.sol';\\n\\nimport '../interfaces/ITransferAdapterCollateralBase.sol';\\nimport '../interfaces/ITransferAdapterNFT.sol';\\n\\nabstract contract TransferAdapterCollateralBase is\\n    Context,\\n    ReentrancyGuard,\\n    ERC721Holder,\\n    ERC1155Holder,\\n    ITransferAdapterCollateralBase,\\n    ITransferAdapterNFT\\n{\\n    using SafeERC20 for IERC20;\\n\\n    IOpenSkySettings public immutable SETTINGS;\\n    IOpenSkyBespokeSettings public immutable BESPOKE_SETTINGS;\\n\\n    // Add a protective layer to prevent collateral be claimed as airdrop\\n    // nftAddress=>amount\\n    mapping(address => uint256) public nftBorrowStat;\\n\\n    constructor(address SETTINGS_, address BESPOKE_SETTINGS_) ReentrancyGuard() {\\n        SETTINGS = IOpenSkySettings(SETTINGS_);\\n        BESPOKE_SETTINGS = IOpenSkyBespokeSettings(BESPOKE_SETTINGS_);\\n    }\\n\\n    modifier onlyMarket() {\\n        require(_msgSender() == BESPOKE_SETTINGS.marketAddress(), 'BM_ACL_ONLY_BESPOKR_MARKET_CAN_CALL');\\n        _;\\n    }\\n\\n    /// @dev Only emergency admin can call functions marked by this modifier.\\n    modifier onlyEmergencyAdmin() {\\n        IACLManager ACLManager = IACLManager(SETTINGS.ACLManagerAddress());\\n        require(ACLManager.isEmergencyAdmin(_msgSender()), 'BM_ACL_ONLY_EMERGENCY_ADMIN_CAN_CALL');\\n        _;\\n    }\\n\\n    modifier onlyAirdropOperator() {\\n        IACLManager ACLManager = IACLManager(SETTINGS.ACLManagerAddress());\\n        require(ACLManager.isAirdropOperator(_msgSender()), 'BM_ACL_ONLY_AIRDROP_OPERATOR_CAN_CALL');\\n        _;\\n    }\\n    \\n    /// @dev transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due\\n    /// direct transfers to the contract address.\\n    /// @param token token to transfer\\n    /// @param to recipient of the transfer\\n    /// @param amount amount to send\\n    function emergencyTokenTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external onlyEmergencyAdmin {\\n        IERC20(token).safeTransfer(to, amount);\\n    }\\n\\n    function flashClaim(\\n        address receiverAddress,\\n        uint256[] calldata loanIds,\\n        bytes calldata params\\n    ) external override nonReentrant{\\n        uint256 i;\\n        IOpenSkyFlashClaimReceiver receiver = IOpenSkyFlashClaimReceiver(receiverAddress);\\n        // !!!CAUTION: receiver contract may reentry mint, burn, flashClaim again\\n\\n        // only loan owner can do flashClaim\\n        address[] memory nftAddresses = new address[](loanIds.length);\\n        uint256[] memory tokenIds = new uint256[](loanIds.length);\\n        for (i = 0; i < loanIds.length; i++) {\\n            require(\\n                IERC721(BESPOKE_SETTINGS.borrowLoanAddress()).ownerOf(loanIds[i]) == _msgSender(),\\n                'BM_FLASHCLAIM_CALLER_IS_NOT_OWNER'\\n            );\\n            BespokeTypes.LoanData memory loanData = IOpenSkyBespokeMarket(BESPOKE_SETTINGS.marketAddress()).getLoanData(\\n                loanIds[i]\\n            );\\n            require(loanData.status != BespokeTypes.LoanStatus.LIQUIDATABLE, 'BM_FLASHCLAIM_STATUS_ERROR');\\n            nftAddresses[i] = loanData.tokenAddress;\\n            tokenIds[i] = loanData.tokenId;\\n        }\\n\\n        // step 1: moving underlying asset forward to receiver contract\\n        for (i = 0; i < loanIds.length; i++) {\\n            IERC721(nftAddresses[i]).safeTransferFrom(address(this), receiverAddress, tokenIds[i]);\\n        }\\n\\n        // setup 2: execute receiver contract, doing something like aidrop\\n        require(\\n            receiver.executeOperation(nftAddresses, tokenIds, _msgSender(), address(this), params),\\n            'BM_FLASHCLAIM_EXECUTOR_ERROR'\\n        );\\n\\n        // setup 3: moving underlying asset backword from receiver contract\\n        for (i = 0; i < loanIds.length; i++) {\\n            IERC721(nftAddresses[i]).safeTransferFrom(receiverAddress, address(this), tokenIds[i]);\\n            emit FlashClaim(receiverAddress, _msgSender(), nftAddresses[i], tokenIds[i]);\\n        }\\n    }\\n\\n    function claimERC20Airdrop(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external override nonReentrant onlyAirdropOperator {\\n        IERC20(token).safeTransfer(to, amount);\\n        emit ClaimERC20Airdrop(token, to, amount);\\n    }\\n\\n    function claimERC721Airdrop(\\n        address token,\\n        address to,\\n        uint256[] calldata ids\\n    ) external override nonReentrant onlyAirdropOperator {\\n        require(nftBorrowStat[token] == 0, 'BM_CLAIM_ERC721_AIRDROP_NOT_SUPPORTED');\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            IERC721(token).safeTransferFrom(address(this), to, ids[i]);\\n        }\\n        emit ClaimERC721Airdrop(token, to, ids);\\n    }\\n\\n    function claimERC1155Airdrop(\\n        address token,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external override nonReentrant onlyAirdropOperator {\\n        require(nftBorrowStat[token] == 0, 'BM_CLAIM_ERC1155_AIRDROP_NOT_SUPPORTED');\\n        IERC1155(token).safeBatchTransferFrom(address(this), to, ids, amounts, data);\\n        emit ClaimERC1155Airdrop(token, to, ids, amounts, data);\\n    }\\n\\n    function transferCollateralIn(\\n        address collection,\\n        address from,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external override nonReentrant onlyMarket {\\n        nftBorrowStat[collection] += 1;\\n        _transferCollateralIn(collection, from, tokenId, amount);\\n    }\\n\\n    function transferCollateralOut(\\n        address collection,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external override nonReentrant onlyMarket {\\n        nftBorrowStat[collection] -= 1;\\n        _transferCollateralOut(collection, to, tokenId, amount);\\n    }\\n\\n    function transferCollateralOutOnForeclose(\\n        address collection,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) public override nonReentrant onlyMarket {\\n        nftBorrowStat[collection] -= 1;\\n        _transferCollateralOutOnForeclose(collection, to, tokenId, amount);\\n    }\\n\\n    function _transferCollateralIn(\\n        address collection,\\n        address from,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    function _transferCollateralOut(\\n        address collection,\\n        address from,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    function _transferCollateralOutOnForeclose(\\n        address collection,\\n        address from,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x3e60f0152f9e4153ebc05e164a55576da53e5ed11b27cc9e4df9c5fb677bbc61\",\"license\":\"MIT\"},\"contracts/bespokemarket/transferAdaptersCollateral/TransferAdapterERC721Default.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport './TransferAdapterCollateralBase.sol';\\n\\ncontract TransferAdapterERC721Default is TransferAdapterCollateralBase {\\n    constructor(address settings_, address bespoke_settings_)\\n        TransferAdapterCollateralBase(settings_, bespoke_settings_)\\n    {}\\n\\n    function _transferCollateralIn(\\n        address collection,\\n        address from,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal override {\\n        IERC721(collection).safeTransferFrom(from, address(this), tokenId);\\n    }\\n\\n    function _transferCollateralOut(\\n        address collection,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal override {\\n        IERC721(collection).safeTransferFrom(address(this), to, tokenId);\\n    }\\n\\n    function _transferCollateralOutOnForeclose(\\n        address collection,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal override {\\n        IERC721(collection).safeTransferFrom(address(this), to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xc2cdd4c8fcddd062a19bafc8d920c579c497be69e0b35bd86f636fd3eac48879\",\"license\":\"MIT\"},\"contracts/interfaces/IACLManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IACLManager {\\n    function addEmergencyAdmin(address admin) external;\\n    \\n    function isEmergencyAdmin(address admin) external view returns (bool);\\n    \\n    function removeEmergencyAdmin(address admin) external;\\n    \\n    function addGovernance(address admin) external;\\n    \\n    function isGovernance(address admin) external view returns (bool);\\n\\n    function removeGovernance(address admin) external;\\n\\n    function addPoolAdmin(address admin) external;\\n\\n    function isPoolAdmin(address admin) external view returns (bool);\\n\\n    function removePoolAdmin(address admin) external;\\n\\n    function addLiquidationOperator(address address_) external;\\n\\n    function isLiquidationOperator(address address_) external view returns (bool);\\n\\n    function removeLiquidationOperator(address address_) external;\\n\\n    function addAirdropOperator(address address_) external;\\n\\n    function isAirdropOperator(address address_) external view returns (bool);\\n\\n    function removeAirdropOperator(address address_) external;\\n}\\n\",\"keccak256\":\"0x0e77d3bdc88ba10cd78a9a80350bbf0d4120a1d0ac7c7911bef8c8cb389cf42f\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyFlashClaimReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IOpenSkyFlashClaimReceiver {\\n    function executeOperation(\\n        address[] calldata nftAddresses,\\n        uint256[] calldata tokenIds,\\n        address initiator,\\n        address operator,\\n        bytes calldata params\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x20c9cbf82dc555a3e1f468dc755742af0dedb3ab5165b975b473e55870d0fbe4\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkySettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\nimport '../libraries/types/DataTypes.sol';\\n\\ninterface IOpenSkySettings {\\n    event InitPoolAddress(address operator, address address_);\\n    event InitLoanAddress(address operator, address address_);\\n    event InitVaultFactoryAddress(address operator, address address_);\\n    event InitIncentiveControllerAddress(address operator, address address_);\\n    event InitIncentiveControllerAddressForLoan(address operator, address address_);\\n    event InitWETHGatewayAddress(address operator, address address_);\\n    event InitPunkGatewayAddress(address operator, address address_);\\n    event InitDaoVaultAddress(address operator, address address_);\\n\\n    event AddToWhitelist(address operator, uint256 reserveId, address nft);\\n    event RemoveFromWhitelist(address operator, uint256 reserveId, address nft);\\n    event SetReserveFactor(address operator, uint256 factor);\\n    event SetPrepaymentFeeFactor(address operator, uint256 factor);\\n    event SetOverdueLoanFeeFactor(address operator, uint256 factor);\\n    event SetMoneyMarketAddress(address operator, address address_);\\n    event SetTreasuryAddress(address operator, address address_);\\n    event SetACLManagerAddress(address operator, address address_);\\n    event SetLoanDescriptorAddress(address operator, address address_);\\n    event SetNftPriceOracleAddress(address operator, address address_);\\n    event SetInterestRateStrategyAddress(address operator, address address_);\\n    event AddLiquidator(address operator, address address_);\\n    event RemoveLiquidator(address operator, address address_);\\n\\n    function poolAddress() external view returns (address);\\n\\n    function loanAddress() external view returns (address);\\n\\n    function vaultFactoryAddress() external view returns (address);\\n\\n    function incentiveControllerAddress() external view returns (address);\\n\\n    function incentiveControllerAddressForLoan() external view returns (address);\\n    \\n    function wethGatewayAddress() external view returns (address);\\n\\n    function punkGatewayAddress() external view returns (address);\\n\\n    function inWhitelist(uint256 reserveId, address nft) external view returns (bool);\\n\\n    function getWhitelistDetail(uint256 reserveId, address nft) external view returns (DataTypes.WhitelistInfo memory);\\n\\n    function reserveFactor() external view returns (uint256); // treasury ratio\\n\\n    function MAX_RESERVE_FACTOR() external view returns (uint256);\\n\\n    function prepaymentFeeFactor() external view returns (uint256);\\n\\n    function overdueLoanFeeFactor() external view returns (uint256);\\n\\n    function moneyMarketAddress() external view returns (address);\\n\\n    function treasuryAddress() external view returns (address);\\n\\n    function daoVaultAddress() external view returns (address);\\n\\n    function ACLManagerAddress() external view returns (address);\\n\\n    function loanDescriptorAddress() external view returns (address);\\n\\n    function nftPriceOracleAddress() external view returns (address);\\n\\n    function interestRateStrategyAddress() external view returns (address);\\n    \\n    function isLiquidator(address liquidator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2e2c9c1b589b5a3c36c75c101e108b9a9760e00568b27e5a78266eb1e36ab75f\",\"license\":\"MIT\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        uint256 reserveId;\\n        address underlyingAsset;\\n        address oTokenAddress;\\n        address moneyMarketAddress;\\n        uint128 lastSupplyIndex;\\n        uint256 borrowingInterestPerSecond;\\n        uint256 lastMoneyMarketBalance;\\n        uint40 lastUpdateTimestamp;\\n        uint256 totalBorrows;\\n        address interestModelAddress;\\n        uint256 treasuryFactor;\\n        bool isMoneyMarketOn;\\n    }\\n\\n    struct LoanData {\\n        uint256 reserveId;\\n        address nftAddress;\\n        uint256 tokenId;\\n        address borrower;\\n        uint256 amount;\\n        uint128 borrowRate;\\n        uint128 interestPerSecond;\\n        uint40 borrowBegin;\\n        uint40 borrowDuration;\\n        uint40 borrowOverdueTime;\\n        uint40 liquidatableTime;\\n        uint40 extendableTime;\\n        uint40 borrowEnd;\\n        LoanStatus status;\\n    }\\n\\n    enum LoanStatus {\\n        NONE,\\n        BORROWING,\\n        EXTENDABLE,\\n        OVERDUE,\\n        LIQUIDATABLE,\\n        LIQUIDATING\\n    }\\n\\n    struct WhitelistInfo {\\n        bool enabled;\\n        string name;\\n        string symbol;\\n        uint256 LTV;\\n        uint256 minBorrowDuration;\\n        uint256 maxBorrowDuration;\\n        uint256 extendableDuration;\\n        uint256 overdueDuration;\\n    }\\n}\\n\",\"keccak256\":\"0x487cd1dedb3146da46144bc8f0e5b970c5173efa8c19700184b8207c1ee3fc55\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620024683803806200246883398101604081905262000034916200006e565b60016000556001600160a01b039182166080521660a052620000a6565b80516001600160a01b03811681146200006957600080fd5b919050565b600080604083850312156200008257600080fd5b6200008d8362000051565b91506200009d6020840162000051565b90509250929050565b60805160a0516123646200010460003960008181610173015281816103c10152818161052b015281816109f9015261137501526000818161021901528181610b2001528181610ca601528181610e4101526110ec01526123646000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063a3d5b25511610097578063cbed33fb11610066578063cbed33fb146101ad578063e3185e121461026d578063e7674ece14610280578063f23a6e611461029357600080fd5b8063a3d5b25514610201578063ade97ab514610214578063bc197c811461023b578063cae595531461025a57600080fd5b806329c55f06116100d357806329c55f061461016e578063355b3862146101ad5780634f070916146101c05780638a181833146101d357600080fd5b806301ffc9a7146100fa57806303282d6e14610122578063150b7a0214610137575b600080fd5b61010d61010836600461179d565b6102b2565b60405190151581526020015b60405180910390f35b61013561013036600461186b565b6102e9565b005b6101556101453660046119cb565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610119565b6101957f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610119565b6101356101bb366004611a36565b6109cc565b6101356101ce366004611a7c565b610af1565b6101f36101e1366004611abd565b60016020526000908152604090205481565b604051908152602001610119565b61013561020f366004611a7c565b610ca2565b6101957f000000000000000000000000000000000000000000000000000000000000000081565b610155610249366004611b4e565b63bc197c8160e01b95945050505050565b610135610268366004611bfb565b610e12565b61013561027b366004611c5f565b6110bd565b61013561028e366004611a36565b611348565b6101556102a1366004611d1d565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b14806102e357506301ffc9a760e01b6001600160e01b03198316145b92915050565b600260005414156103155760405162461bcd60e51b815260040161030c90611d85565b60405180910390fd5b600260009081558581856001600160401b03811115610336576103366118ed565b60405190808252806020026020018201604052801561035f578160200160208202803683370190505b5090506000866001600160401b0381111561037c5761037c6118ed565b6040519080825280602002602001820160405280156103a5578160200160208202803683370190505b509050600093505b8684101561070757336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb322a836040518163ffffffff1660e01b8152600401602060405180830381865afa15801561041d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104419190611dcc565b6001600160a01b0316636352211e8a8a8881811061046157610461611de9565b905060200201356040518263ffffffff1660e01b815260040161048691815260200190565b602060405180830381865afa1580156104a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c79190611dcc565b6001600160a01b0316146105275760405162461bcd60e51b815260206004820152602160248201527f424d5f464c415348434c41494d5f43414c4c45525f49535f4e4f545f4f574e456044820152602960f91b606482015260840161030c565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663956236416040518163ffffffff1660e01b8152600401602060405180830381865afa158015610587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ab9190611dcc565b6001600160a01b031663622fe39f8a8a888181106105cb576105cb611de9565b905060200201356040518263ffffffff1660e01b81526004016105f091815260200190565b61028060405180830381865afa15801561060e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106329190611e53565b90506003816102600151600381111561064d5761064d611fac565b141561069b5760405162461bcd60e51b815260206004820152601a60248201527f424d5f464c415348434c41494d5f5354415455535f4552524f52000000000000604482015260640161030c565b80600001518386815181106106b2576106b2611de9565b60200260200101906001600160a01b031690816001600160a01b03168152505080602001518286815181106106e9576106e9611de9565b602090810291909101015250836106ff81611fd8565b9450506103ad565b600093505b868410156107bb5781848151811061072657610726611de9565b60200260200101516001600160a01b03166342842e0e308b84888151811061075057610750611de9565b60200260200101516040518463ffffffff1660e01b815260040161077693929190611ff3565b600060405180830381600087803b15801561079057600080fd5b505af11580156107a4573d6000803e3d6000fd5b5050505083806107b390611fd8565b94505061070c565b604051628e896f60e41b81526001600160a01b038416906308e896f0906107f09085908590339030908d908d90600401612040565b6020604051808303816000875af115801561080f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083391906120f9565b61087f5760405162461bcd60e51b815260206004820152601c60248201527f424d5f464c415348434c41494d5f4558454355544f525f4552524f5200000000604482015260640161030c565b600093505b868410156109bc5781848151811061089e5761089e611de9565b60200260200101516001600160a01b03166342842e0e8a308488815181106108c8576108c8611de9565b60200260200101516040518463ffffffff1660e01b81526004016108ee93929190611ff3565b600060405180830381600087803b15801561090857600080fd5b505af115801561091c573d6000803e3d6000fd5b5050505080848151811061093257610932611de9565b602002602001015182858151811061094c5761094c611de9565b60200260200101516001600160a01b03168a6001600160a01b03167f6bac1c66016500cd7b62d69e86268760baac6cd34a70003af66ffa8a9798321661098f3390565b6040516001600160a01b03909116815260200160405180910390a4836109b481611fd8565b945050610884565b5050600160005550505050505050565b600260005414156109ef5760405162461bcd60e51b815260040161030c90611d85565b60026000819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663956236416040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a799190611dcc565b6001600160a01b0316336001600160a01b031614610aa95760405162461bcd60e51b815260040161030c90612114565b6001600160a01b03841660009081526001602081905260408220805491929091610ad4908490612157565b90915550610ae6905084848484611462565b505060016000555050565b60026000541415610b145760405162461bcd60e51b815260040161030c90611d85565b600260008190555060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba09190611dcc565b90506001600160a01b038116639078c85a336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1a91906120f9565b610c365760405162461bcd60e51b815260040161030c9061216e565b610c4a6001600160a01b03851684846114ca565b826001600160a01b0316846001600160a01b03167f81275949a17d84915b61eeb24587a501cc8863011afba1ed12f3f6c5bdfd6a2184604051610c8f91815260200190565b60405180910390a3505060016000555050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d269190611dcc565b90506001600160a01b038116632500f2b6336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610d7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da091906120f9565b610df85760405162461bcd60e51b8152602060048201526024808201527f424d5f41434c5f4f4e4c595f454d455247454e43595f41444d494e5f43414e5f60448201526310d0531360e21b606482015260840161030c565b610e0c6001600160a01b03851684846114ca565b50505050565b60026000541415610e355760405162461bcd60e51b815260040161030c90611d85565b600260008190555060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec19190611dcc565b90506001600160a01b038116639078c85a336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610f17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3b91906120f9565b610f575760405162461bcd60e51b815260040161030c9061216e565b6001600160a01b03851660009081526001602052604090205415610fcb5760405162461bcd60e51b815260206004820152602560248201527f424d5f434c41494d5f4552433732315f41495244524f505f4e4f545f5355505060448201526413d495115160da1b606482015260840161030c565b60005b8281101561106357856001600160a01b03166342842e0e3087878786818110610ff957610ff9611de9565b905060200201356040518463ffffffff1660e01b815260040161101e93929190611ff3565b600060405180830381600087803b15801561103857600080fd5b505af115801561104c573d6000803e3d6000fd5b50505050808061105b90611fd8565b915050610fce565b50836001600160a01b0316856001600160a01b03167f6c6b18e67b757c02ba92ef0f54038fc2135767acf9bef174b8780835ff45582285856040516110a99291906121e9565b60405180910390a350506001600055505050565b600260005414156110e05760405162461bcd60e51b815260040161030c90611d85565b600260008190555060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015611148573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116c9190611dcc565b90506001600160a01b038116639078c85a336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156111c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e691906120f9565b6112025760405162461bcd60e51b815260040161030c9061216e565b6001600160a01b038916600090815260016020526040902054156112775760405162461bcd60e51b815260206004820152602660248201527f424d5f434c41494d5f455243313135355f41495244524f505f4e4f545f5355506044820152651413d495115160d21b606482015260840161030c565b604051631759616b60e11b81526001600160a01b038a1690632eb2c2d6906112b19030908c908c908c908c908c908c908c906004016121fd565b600060405180830381600087803b1580156112cb57600080fd5b505af11580156112df573d6000803e3d6000fd5b50505050876001600160a01b0316896001600160a01b03167fc8144f7a11a69e58de79275b3e7420b4942b4e8318a0e0aa9ccb457c60387b0289898989898960405161133096959493929190612252565b60405180910390a35050600160005550505050505050565b6002600054141561136b5760405162461bcd60e51b815260040161030c90611d85565b60026000819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663956236416040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f59190611dcc565b6001600160a01b0316336001600160a01b0316146114255760405162461bcd60e51b815260040161030c90612114565b6001600160a01b0384166000908152600160208190526040822080549192909161145090849061229b565b90915550610ae6905084848484611521565b604051632142170760e11b81526001600160a01b038516906342842e0e9061149290309087908790600401611ff3565b600060405180830381600087803b1580156114ac57600080fd5b505af11580156114c0573d6000803e3d6000fd5b5050505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261151c908490611551565b505050565b604051632142170760e11b81526001600160a01b038516906342842e0e9061149290869030908790600401611ff3565b60006115a6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116239092919063ffffffff16565b80519091501561151c57808060200190518101906115c491906120f9565b61151c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161030c565b6060611632848460008561163c565b90505b9392505050565b60608247101561169d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161030c565b843b6116eb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161030c565b600080866001600160a01b0316858760405161170791906122df565b60006040518083038185875af1925050503d8060008114611744576040519150601f19603f3d011682016040523d82523d6000602084013e611749565b606091505b5091509150611759828286611764565b979650505050505050565b60608315611773575081611635565b8251156117835782518084602001fd5b8160405162461bcd60e51b815260040161030c91906122fb565b6000602082840312156117af57600080fd5b81356001600160e01b03198116811461163557600080fd5b6001600160a01b03811681146117dc57600080fd5b50565b60008083601f8401126117f157600080fd5b5081356001600160401b0381111561180857600080fd5b6020830191508360208260051b850101111561182357600080fd5b9250929050565b60008083601f84011261183c57600080fd5b5081356001600160401b0381111561185357600080fd5b60208301915083602082850101111561182357600080fd5b60008060008060006060868803121561188357600080fd5b853561188e816117c7565b945060208601356001600160401b03808211156118aa57600080fd5b6118b689838a016117df565b909650945060408801359150808211156118cf57600080fd5b506118dc8882890161182a565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b60405161028081016001600160401b0381118282101715611926576119266118ed565b60405290565b604051601f8201601f191681016001600160401b0381118282101715611954576119546118ed565b604052919050565b600082601f83011261196d57600080fd5b81356001600160401b03811115611986576119866118ed565b611999601f8201601f191660200161192c565b8181528460208386010111156119ae57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156119e157600080fd5b84356119ec816117c7565b935060208501356119fc816117c7565b92506040850135915060608501356001600160401b03811115611a1e57600080fd5b611a2a8782880161195c565b91505092959194509250565b60008060008060808587031215611a4c57600080fd5b8435611a57816117c7565b93506020850135611a67816117c7565b93969395505050506040820135916060013590565b600080600060608486031215611a9157600080fd5b8335611a9c816117c7565b92506020840135611aac816117c7565b929592945050506040919091013590565b600060208284031215611acf57600080fd5b8135611635816117c7565b600082601f830112611aeb57600080fd5b813560206001600160401b03821115611b0657611b066118ed565b8160051b611b1582820161192c565b9283528481018201928281019087851115611b2f57600080fd5b83870192505b8483101561175957823582529183019190830190611b35565b600080600080600060a08688031215611b6657600080fd5b8535611b71816117c7565b94506020860135611b81816117c7565b935060408601356001600160401b0380821115611b9d57600080fd5b611ba989838a01611ada565b94506060880135915080821115611bbf57600080fd5b611bcb89838a01611ada565b93506080880135915080821115611be157600080fd5b50611bee8882890161195c565b9150509295509295909350565b60008060008060608587031215611c1157600080fd5b8435611c1c816117c7565b93506020850135611c2c816117c7565b925060408501356001600160401b03811115611c4757600080fd5b611c53878288016117df565b95989497509550505050565b60008060008060008060008060a0898b031215611c7b57600080fd5b8835611c86816117c7565b97506020890135611c96816117c7565b965060408901356001600160401b0380821115611cb257600080fd5b611cbe8c838d016117df565b909850965060608b0135915080821115611cd757600080fd5b611ce38c838d016117df565b909650945060808b0135915080821115611cfc57600080fd5b50611d098b828c0161182a565b999c989b5096995094979396929594505050565b600080600080600060a08688031215611d3557600080fd5b8535611d40816117c7565b94506020860135611d50816117c7565b9350604086013592506060860135915060808601356001600160401b03811115611d7957600080fd5b611bee8882890161195c565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b8051611dc7816117c7565b919050565b600060208284031215611dde57600080fd5b8151611635816117c7565b634e487b7160e01b600052603260045260246000fd5b80516fffffffffffffffffffffffffffffffff81168114611dc757600080fd5b805164ffffffffff81168114611dc757600080fd5b80518015158114611dc757600080fd5b805160048110611dc757600080fd5b60006102808284031215611e6657600080fd5b611e6e611903565b611e7783611dbc565b81526020830151602082015260408301516040820152611e9960608401611dbc565b6060820152611eaa60808401611dbc565b6080820152611ebb60a08401611dbc565b60a082015260c083015160c0820152611ed660e08401611dff565b60e0820152610100611ee9818501611dff565b90820152610120611efb848201611dbc565b90820152610140611f0d848201611dbc565b90820152610160838101519082015261018080840151908201526101a0611f35818501611e1f565b908201526101c0611f47848201611e1f565b908201526101e0611f59848201611e1f565b90820152610200611f6b848201611e1f565b90820152610220611f7d848201611e34565b90820152610240611f8f848201611e34565b90820152610260611fa1848201611e44565b908201529392505050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611fec57611fec611fc2565b5060010190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60a0808252875190820181905260009060209060c0840190828b01845b828110156120825781516001600160a01b03168452928401929084019060010161205d565b5050508381038285015288518082528983019183019060005b818110156120b75783518352928401929184019160010161209b565b50506001600160a01b03891660408601526001600160a01b038816606086015284810360808601526120ea818789612017565b9b9a5050505050505050505050565b60006020828403121561210b57600080fd5b61163582611e34565b60208082526023908201527f424d5f41434c5f4f4e4c595f424553504f4b525f4d41524b45545f43414e5f4360408201526210531360ea1b606082015260800190565b60008282101561216957612169611fc2565b500390565b60208082526025908201527f424d5f41434c5f4f4e4c595f41495244524f505f4f50455241544f525f43414e60408201526417d0d0531360da1b606082015260800190565b81835260006001600160fb1b038311156121cc57600080fd5b8260051b8083602087013760009401602001938452509192915050565b6020815260006116326020830184866121b3565b6001600160a01b0389811682528816602082015260a06040820181905260009061222a908301888a6121b3565b828103606084015261223d8187896121b3565b905082810360808401526120ea818587612017565b60608152600061226660608301888a6121b3565b82810360208401526122798187896121b3565b9050828103604084015261228e818587612017565b9998505050505050505050565b600082198211156122ae576122ae611fc2565b500190565b60005b838110156122ce5781810151838201526020016122b6565b83811115610e0c5750506000910152565b600082516122f18184602087016122b3565b9190910192915050565b602081526000825180602084015261231a8160408501602087016122b3565b601f01601f1916919091016040019291505056fea26469706673582212208b64ffa66ebb99680497cc1ec43a393cd4b9c9e8d1cbb43bea51d1b8a094404e64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063a3d5b25511610097578063cbed33fb11610066578063cbed33fb146101ad578063e3185e121461026d578063e7674ece14610280578063f23a6e611461029357600080fd5b8063a3d5b25514610201578063ade97ab514610214578063bc197c811461023b578063cae595531461025a57600080fd5b806329c55f06116100d357806329c55f061461016e578063355b3862146101ad5780634f070916146101c05780638a181833146101d357600080fd5b806301ffc9a7146100fa57806303282d6e14610122578063150b7a0214610137575b600080fd5b61010d61010836600461179d565b6102b2565b60405190151581526020015b60405180910390f35b61013561013036600461186b565b6102e9565b005b6101556101453660046119cb565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610119565b6101957f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610119565b6101356101bb366004611a36565b6109cc565b6101356101ce366004611a7c565b610af1565b6101f36101e1366004611abd565b60016020526000908152604090205481565b604051908152602001610119565b61013561020f366004611a7c565b610ca2565b6101957f000000000000000000000000000000000000000000000000000000000000000081565b610155610249366004611b4e565b63bc197c8160e01b95945050505050565b610135610268366004611bfb565b610e12565b61013561027b366004611c5f565b6110bd565b61013561028e366004611a36565b611348565b6101556102a1366004611d1d565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b14806102e357506301ffc9a760e01b6001600160e01b03198316145b92915050565b600260005414156103155760405162461bcd60e51b815260040161030c90611d85565b60405180910390fd5b600260009081558581856001600160401b03811115610336576103366118ed565b60405190808252806020026020018201604052801561035f578160200160208202803683370190505b5090506000866001600160401b0381111561037c5761037c6118ed565b6040519080825280602002602001820160405280156103a5578160200160208202803683370190505b509050600093505b8684101561070757336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb322a836040518163ffffffff1660e01b8152600401602060405180830381865afa15801561041d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104419190611dcc565b6001600160a01b0316636352211e8a8a8881811061046157610461611de9565b905060200201356040518263ffffffff1660e01b815260040161048691815260200190565b602060405180830381865afa1580156104a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c79190611dcc565b6001600160a01b0316146105275760405162461bcd60e51b815260206004820152602160248201527f424d5f464c415348434c41494d5f43414c4c45525f49535f4e4f545f4f574e456044820152602960f91b606482015260840161030c565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663956236416040518163ffffffff1660e01b8152600401602060405180830381865afa158015610587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ab9190611dcc565b6001600160a01b031663622fe39f8a8a888181106105cb576105cb611de9565b905060200201356040518263ffffffff1660e01b81526004016105f091815260200190565b61028060405180830381865afa15801561060e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106329190611e53565b90506003816102600151600381111561064d5761064d611fac565b141561069b5760405162461bcd60e51b815260206004820152601a60248201527f424d5f464c415348434c41494d5f5354415455535f4552524f52000000000000604482015260640161030c565b80600001518386815181106106b2576106b2611de9565b60200260200101906001600160a01b031690816001600160a01b03168152505080602001518286815181106106e9576106e9611de9565b602090810291909101015250836106ff81611fd8565b9450506103ad565b600093505b868410156107bb5781848151811061072657610726611de9565b60200260200101516001600160a01b03166342842e0e308b84888151811061075057610750611de9565b60200260200101516040518463ffffffff1660e01b815260040161077693929190611ff3565b600060405180830381600087803b15801561079057600080fd5b505af11580156107a4573d6000803e3d6000fd5b5050505083806107b390611fd8565b94505061070c565b604051628e896f60e41b81526001600160a01b038416906308e896f0906107f09085908590339030908d908d90600401612040565b6020604051808303816000875af115801561080f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083391906120f9565b61087f5760405162461bcd60e51b815260206004820152601c60248201527f424d5f464c415348434c41494d5f4558454355544f525f4552524f5200000000604482015260640161030c565b600093505b868410156109bc5781848151811061089e5761089e611de9565b60200260200101516001600160a01b03166342842e0e8a308488815181106108c8576108c8611de9565b60200260200101516040518463ffffffff1660e01b81526004016108ee93929190611ff3565b600060405180830381600087803b15801561090857600080fd5b505af115801561091c573d6000803e3d6000fd5b5050505080848151811061093257610932611de9565b602002602001015182858151811061094c5761094c611de9565b60200260200101516001600160a01b03168a6001600160a01b03167f6bac1c66016500cd7b62d69e86268760baac6cd34a70003af66ffa8a9798321661098f3390565b6040516001600160a01b03909116815260200160405180910390a4836109b481611fd8565b945050610884565b5050600160005550505050505050565b600260005414156109ef5760405162461bcd60e51b815260040161030c90611d85565b60026000819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663956236416040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a799190611dcc565b6001600160a01b0316336001600160a01b031614610aa95760405162461bcd60e51b815260040161030c90612114565b6001600160a01b03841660009081526001602081905260408220805491929091610ad4908490612157565b90915550610ae6905084848484611462565b505060016000555050565b60026000541415610b145760405162461bcd60e51b815260040161030c90611d85565b600260008190555060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba09190611dcc565b90506001600160a01b038116639078c85a336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1a91906120f9565b610c365760405162461bcd60e51b815260040161030c9061216e565b610c4a6001600160a01b03851684846114ca565b826001600160a01b0316846001600160a01b03167f81275949a17d84915b61eeb24587a501cc8863011afba1ed12f3f6c5bdfd6a2184604051610c8f91815260200190565b60405180910390a3505060016000555050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d269190611dcc565b90506001600160a01b038116632500f2b6336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610d7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da091906120f9565b610df85760405162461bcd60e51b8152602060048201526024808201527f424d5f41434c5f4f4e4c595f454d455247454e43595f41444d494e5f43414e5f60448201526310d0531360e21b606482015260840161030c565b610e0c6001600160a01b03851684846114ca565b50505050565b60026000541415610e355760405162461bcd60e51b815260040161030c90611d85565b600260008190555060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec19190611dcc565b90506001600160a01b038116639078c85a336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610f17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3b91906120f9565b610f575760405162461bcd60e51b815260040161030c9061216e565b6001600160a01b03851660009081526001602052604090205415610fcb5760405162461bcd60e51b815260206004820152602560248201527f424d5f434c41494d5f4552433732315f41495244524f505f4e4f545f5355505060448201526413d495115160da1b606482015260840161030c565b60005b8281101561106357856001600160a01b03166342842e0e3087878786818110610ff957610ff9611de9565b905060200201356040518463ffffffff1660e01b815260040161101e93929190611ff3565b600060405180830381600087803b15801561103857600080fd5b505af115801561104c573d6000803e3d6000fd5b50505050808061105b90611fd8565b915050610fce565b50836001600160a01b0316856001600160a01b03167f6c6b18e67b757c02ba92ef0f54038fc2135767acf9bef174b8780835ff45582285856040516110a99291906121e9565b60405180910390a350506001600055505050565b600260005414156110e05760405162461bcd60e51b815260040161030c90611d85565b600260008190555060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015611148573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116c9190611dcc565b90506001600160a01b038116639078c85a336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156111c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e691906120f9565b6112025760405162461bcd60e51b815260040161030c9061216e565b6001600160a01b038916600090815260016020526040902054156112775760405162461bcd60e51b815260206004820152602660248201527f424d5f434c41494d5f455243313135355f41495244524f505f4e4f545f5355506044820152651413d495115160d21b606482015260840161030c565b604051631759616b60e11b81526001600160a01b038a1690632eb2c2d6906112b19030908c908c908c908c908c908c908c906004016121fd565b600060405180830381600087803b1580156112cb57600080fd5b505af11580156112df573d6000803e3d6000fd5b50505050876001600160a01b0316896001600160a01b03167fc8144f7a11a69e58de79275b3e7420b4942b4e8318a0e0aa9ccb457c60387b0289898989898960405161133096959493929190612252565b60405180910390a35050600160005550505050505050565b6002600054141561136b5760405162461bcd60e51b815260040161030c90611d85565b60026000819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663956236416040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f59190611dcc565b6001600160a01b0316336001600160a01b0316146114255760405162461bcd60e51b815260040161030c90612114565b6001600160a01b0384166000908152600160208190526040822080549192909161145090849061229b565b90915550610ae6905084848484611521565b604051632142170760e11b81526001600160a01b038516906342842e0e9061149290309087908790600401611ff3565b600060405180830381600087803b1580156114ac57600080fd5b505af11580156114c0573d6000803e3d6000fd5b5050505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261151c908490611551565b505050565b604051632142170760e11b81526001600160a01b038516906342842e0e9061149290869030908790600401611ff3565b60006115a6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116239092919063ffffffff16565b80519091501561151c57808060200190518101906115c491906120f9565b61151c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161030c565b6060611632848460008561163c565b90505b9392505050565b60608247101561169d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161030c565b843b6116eb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161030c565b600080866001600160a01b0316858760405161170791906122df565b60006040518083038185875af1925050503d8060008114611744576040519150601f19603f3d011682016040523d82523d6000602084013e611749565b606091505b5091509150611759828286611764565b979650505050505050565b60608315611773575081611635565b8251156117835782518084602001fd5b8160405162461bcd60e51b815260040161030c91906122fb565b6000602082840312156117af57600080fd5b81356001600160e01b03198116811461163557600080fd5b6001600160a01b03811681146117dc57600080fd5b50565b60008083601f8401126117f157600080fd5b5081356001600160401b0381111561180857600080fd5b6020830191508360208260051b850101111561182357600080fd5b9250929050565b60008083601f84011261183c57600080fd5b5081356001600160401b0381111561185357600080fd5b60208301915083602082850101111561182357600080fd5b60008060008060006060868803121561188357600080fd5b853561188e816117c7565b945060208601356001600160401b03808211156118aa57600080fd5b6118b689838a016117df565b909650945060408801359150808211156118cf57600080fd5b506118dc8882890161182a565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b60405161028081016001600160401b0381118282101715611926576119266118ed565b60405290565b604051601f8201601f191681016001600160401b0381118282101715611954576119546118ed565b604052919050565b600082601f83011261196d57600080fd5b81356001600160401b03811115611986576119866118ed565b611999601f8201601f191660200161192c565b8181528460208386010111156119ae57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156119e157600080fd5b84356119ec816117c7565b935060208501356119fc816117c7565b92506040850135915060608501356001600160401b03811115611a1e57600080fd5b611a2a8782880161195c565b91505092959194509250565b60008060008060808587031215611a4c57600080fd5b8435611a57816117c7565b93506020850135611a67816117c7565b93969395505050506040820135916060013590565b600080600060608486031215611a9157600080fd5b8335611a9c816117c7565b92506020840135611aac816117c7565b929592945050506040919091013590565b600060208284031215611acf57600080fd5b8135611635816117c7565b600082601f830112611aeb57600080fd5b813560206001600160401b03821115611b0657611b066118ed565b8160051b611b1582820161192c565b9283528481018201928281019087851115611b2f57600080fd5b83870192505b8483101561175957823582529183019190830190611b35565b600080600080600060a08688031215611b6657600080fd5b8535611b71816117c7565b94506020860135611b81816117c7565b935060408601356001600160401b0380821115611b9d57600080fd5b611ba989838a01611ada565b94506060880135915080821115611bbf57600080fd5b611bcb89838a01611ada565b93506080880135915080821115611be157600080fd5b50611bee8882890161195c565b9150509295509295909350565b60008060008060608587031215611c1157600080fd5b8435611c1c816117c7565b93506020850135611c2c816117c7565b925060408501356001600160401b03811115611c4757600080fd5b611c53878288016117df565b95989497509550505050565b60008060008060008060008060a0898b031215611c7b57600080fd5b8835611c86816117c7565b97506020890135611c96816117c7565b965060408901356001600160401b0380821115611cb257600080fd5b611cbe8c838d016117df565b909850965060608b0135915080821115611cd757600080fd5b611ce38c838d016117df565b909650945060808b0135915080821115611cfc57600080fd5b50611d098b828c0161182a565b999c989b5096995094979396929594505050565b600080600080600060a08688031215611d3557600080fd5b8535611d40816117c7565b94506020860135611d50816117c7565b9350604086013592506060860135915060808601356001600160401b03811115611d7957600080fd5b611bee8882890161195c565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b8051611dc7816117c7565b919050565b600060208284031215611dde57600080fd5b8151611635816117c7565b634e487b7160e01b600052603260045260246000fd5b80516fffffffffffffffffffffffffffffffff81168114611dc757600080fd5b805164ffffffffff81168114611dc757600080fd5b80518015158114611dc757600080fd5b805160048110611dc757600080fd5b60006102808284031215611e6657600080fd5b611e6e611903565b611e7783611dbc565b81526020830151602082015260408301516040820152611e9960608401611dbc565b6060820152611eaa60808401611dbc565b6080820152611ebb60a08401611dbc565b60a082015260c083015160c0820152611ed660e08401611dff565b60e0820152610100611ee9818501611dff565b90820152610120611efb848201611dbc565b90820152610140611f0d848201611dbc565b90820152610160838101519082015261018080840151908201526101a0611f35818501611e1f565b908201526101c0611f47848201611e1f565b908201526101e0611f59848201611e1f565b90820152610200611f6b848201611e1f565b90820152610220611f7d848201611e34565b90820152610240611f8f848201611e34565b90820152610260611fa1848201611e44565b908201529392505050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611fec57611fec611fc2565b5060010190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60a0808252875190820181905260009060209060c0840190828b01845b828110156120825781516001600160a01b03168452928401929084019060010161205d565b5050508381038285015288518082528983019183019060005b818110156120b75783518352928401929184019160010161209b565b50506001600160a01b03891660408601526001600160a01b038816606086015284810360808601526120ea818789612017565b9b9a5050505050505050505050565b60006020828403121561210b57600080fd5b61163582611e34565b60208082526023908201527f424d5f41434c5f4f4e4c595f424553504f4b525f4d41524b45545f43414e5f4360408201526210531360ea1b606082015260800190565b60008282101561216957612169611fc2565b500390565b60208082526025908201527f424d5f41434c5f4f4e4c595f41495244524f505f4f50455241544f525f43414e60408201526417d0d0531360da1b606082015260800190565b81835260006001600160fb1b038311156121cc57600080fd5b8260051b8083602087013760009401602001938452509192915050565b6020815260006116326020830184866121b3565b6001600160a01b0389811682528816602082015260a06040820181905260009061222a908301888a6121b3565b828103606084015261223d8187896121b3565b905082810360808401526120ea818587612017565b60608152600061226660608301888a6121b3565b82810360208401526122798187896121b3565b9050828103604084015261228e818587612017565b9998505050505050505050565b600082198211156122ae576122ae611fc2565b500190565b60005b838110156122ce5781810151838201526020016122b6565b83811115610e0c5750506000910152565b600082516122f18184602087016122b3565b9190910192915050565b602081526000825180602084015261231a8160408501602087016122b3565b601f01601f1916919091016040019291505056fea26469706673582212208b64ffa66ebb99680497cc1ec43a393cd4b9c9e8d1cbb43bea51d1b8a094404e64736f6c634300080a0033",
  "libraries": {
    "BespokeTypes": "0x473482d4940F9075B8E3C42ccE22B71eA74D0d2A"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimERC1155Airdrop(address,address,uint256[],uint256[],bytes)": {
        "params": {
          "amounts": "The amount of the ERC1155 tokens",
          "data": "packed params to pass to the receiver as extra information*",
          "ids": "The ID of the ERC1155 token",
          "to": "The address which will receive the ERC1155 tokens",
          "token": "The address of the airdropped token"
        }
      },
      "claimERC20Airdrop(address,address,uint256)": {
        "params": {
          "amount": "The amount of the ERC20 token*",
          "to": "The address which will receive ERC20 token",
          "token": "The address of the airdropped token"
        }
      },
      "claimERC721Airdrop(address,address,uint256[])": {
        "params": {
          "ids": "The ID of the ERC721 token*",
          "to": "The address which will receive the ERC721 token",
          "token": "The address of the airdropped token"
        }
      },
      "emergencyTokenTransfer(address,address,uint256)": {
        "details": "transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due direct transfers to the contract address.",
        "params": {
          "amount": "amount to send",
          "to": "recipient of the transfer",
          "token": "token to transfer"
        }
      },
      "flashClaim(address,uint256[],bytes)": {
        "details": "IMPORTANT There are security concerns for developers of flash loan receiver contracts that must be carefully considered",
        "params": {
          "loanIds": "The ID of loan being flash-borrowed",
          "params": "packed params to pass to the receiver as extra information*",
          "receiverAddress": "The address of the contract receiving the funds, implementing IFlashClaimReceiver interface"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimERC1155Airdrop(address,address,uint256[],uint256[],bytes)": {
        "notice": "Claim the ERC1155 token which has been airdropped to the loan contract"
      },
      "claimERC20Airdrop(address,address,uint256)": {
        "notice": "Claim the ERC20 token which has been airdropped to the loan contract"
      },
      "claimERC721Airdrop(address,address,uint256[])": {
        "notice": "Claim the ERC721 token which has been airdropped to the loan contract"
      },
      "flashClaim(address,uint256[],bytes)": {
        "notice": "Allows smart contracts to access the collateralized NFT within one transaction, as long as the amount taken plus a fee is returned"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1379,
        "contract": "contracts/bespokemarket/transferAdaptersCollateral/TransferAdapterERC721Default.sol:TransferAdapterERC721Default",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 17971,
        "contract": "contracts/bespokemarket/transferAdaptersCollateral/TransferAdapterERC721Default.sol:TransferAdapterERC721Default",
        "label": "nftBorrowStat",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}