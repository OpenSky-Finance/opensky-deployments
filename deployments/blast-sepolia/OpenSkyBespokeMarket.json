{
  "address": "0xa7Fb3F5F731955fB9cAd08bE3Ffb095d1cA18AEB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "SETTINGS_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "BESPOKE_SETTINGS_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "CancelAllOffers",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "nonces",
          "type": "uint256[]"
        }
      ],
      "name": "CancelMultipleOffers",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "Foreclose",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "offerHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "TakeBorrowOffer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "offerHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonceOrder",
          "type": "uint256"
        }
      ],
      "name": "TakeLendOffer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "BESPOKE_SETTINGS",
      "outputs": [
        {
          "internalType": "contract IOpenSkyBespokeSettings",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SETTINGS",
      "outputs": [
        {
          "internalType": "contract IOpenSkySettings",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_nonce",
      "outputs": [
        {
          "internalType": "bool",
          "name": "invalid",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "usedTimes",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "offerHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minNonce_",
          "type": "uint256"
        }
      ],
      "name": "cancelAllBorrowOffersForSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "offerNonces",
          "type": "uint256[]"
        }
      ],
      "name": "cancelMultipleBorrowOffers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyTokenTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "foreclose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "getBorrowBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "getBorrowInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "getLoanData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftManager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "borrowRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "interestPerSecond",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lendAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reserveFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "overdueLoanFeeFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "borrowDuration",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowBegin",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowOverdueTime",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "liquidatableTime",
              "type": "uint40"
            },
            {
              "internalType": "bool",
              "name": "isProrated",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "autoConvertWhenRepay",
              "type": "bool"
            },
            {
              "internalType": "enum BespokeTypes.LoanStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct BespokeTypes.LoanData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "getPenalty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "getStatus",
      "outputs": [
        {
          "internalType": "enum BespokeTypes.LoanStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "isValidNonce",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isProrated",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "autoConvertWhenRepay",
              "type": "bool"
            },
            {
              "internalType": "enum BespokeTypes.OfferType",
              "name": "offerType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "borrowAmountMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowAmountMax",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "borrowDurationMin",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowDurationMax",
              "type": "uint40"
            },
            {
              "internalType": "uint128",
              "name": "borrowRate",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lendAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonceMaxTimes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BespokeTypes.Offer",
          "name": "offerData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "supplyAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supplyDuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lendAsset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "autoConvertWhenRepay",
          "type": "bool"
        }
      ],
      "name": "takeBorrowOffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isProrated",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "autoConvertWhenRepay",
              "type": "bool"
            },
            {
              "internalType": "enum BespokeTypes.OfferType",
              "name": "offerType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "borrowAmountMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowAmountMax",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "borrowDurationMin",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowDurationMax",
              "type": "uint40"
            },
            {
              "internalType": "uint128",
              "name": "borrowRate",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lendAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonceMaxTimes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BespokeTypes.Offer",
          "name": "offerData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowDuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "takeLendOffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "totalBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "totalLend",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "userBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "userLend",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x855fec3473375f4b73c3f6b603f3c4ac42be336a522051470737c12997068a6f",
  "receipt": {
    "to": null,
    "from": "0x218513C58A4781a5B88De6230caA29aBCe2Ccd75",
    "contractAddress": "0xa7Fb3F5F731955fB9cAd08bE3Ffb095d1cA18AEB",
    "transactionIndex": 3,
    "gasUsed": "2650619",
    "logsBloom": "0x
    "blockHash": "0x2500947d3cf496022089822fddb391cfd1f49ef69d41aa28a2dc0ae9addc1af0",
    "transactionHash": "0x855fec3473375f4b73c3f6b603f3c4ac42be336a522051470737c12997068a6f",
    "logs": [],
    "blockNumber": 2569316,
    "cumulativeGasUsed": "5190554",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x24C54B91D29e8319976030581909732336E8B2bb",
    "0xF3B73e2a1427a027c18bfE11dA7A20B5B88dc867"
  ],
  "solcInputHash": "88f70ef30a97ad95dcfad3d4587a7e7c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"SETTINGS_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"BESPOKE_SETTINGS_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"CancelAllOffers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nonces\",\"type\":\"uint256[]\"}],\"name\":\"CancelMultipleOffers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Foreclose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"offerHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"TakeBorrowOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"offerHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonceOrder\",\"type\":\"uint256\"}],\"name\":\"TakeLendOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"BESPOKE_SETTINGS\",\"outputs\":[{\"internalType\":\"contract IOpenSkyBespokeSettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SETTINGS\",\"outputs\":[{\"internalType\":\"contract IOpenSkySettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_nonce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"invalid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"usedTimes\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"offerHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minNonce_\",\"type\":\"uint256\"}],\"name\":\"cancelAllBorrowOffersForSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"offerNonces\",\"type\":\"uint256[]\"}],\"name\":\"cancelMultipleBorrowOffers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"foreclose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getBorrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getBorrowInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"borrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"interestPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overdueLoanFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"borrowDuration\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowBegin\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowOverdueTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"liquidatableTime\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"isProrated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoConvertWhenRepay\",\"type\":\"bool\"},{\"internalType\":\"enum BespokeTypes.LoanStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct BespokeTypes.LoanData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum BespokeTypes.LoanStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"isValidNonce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isProrated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoConvertWhenRepay\",\"type\":\"bool\"},{\"internalType\":\"enum BespokeTypes.OfferType\",\"name\":\"offerType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountMax\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"borrowDurationMin\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowDurationMax\",\"type\":\"uint40\"},{\"internalType\":\"uint128\",\"name\":\"borrowRate\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonceMaxTimes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct BespokeTypes.Offer\",\"name\":\"offerData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"supplyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lendAsset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"autoConvertWhenRepay\",\"type\":\"bool\"}],\"name\":\"takeBorrowOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isProrated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoConvertWhenRepay\",\"type\":\"bool\"},{\"internalType\":\"enum BespokeTypes.OfferType\",\"name\":\"offerType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountMax\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"borrowDurationMin\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowDurationMax\",\"type\":\"uint40\"},{\"internalType\":\"uint128\",\"name\":\"borrowRate\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonceMaxTimes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct BespokeTypes.Offer\",\"name\":\"offerData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"takeLendOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"totalBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"totalLend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"userBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"userLend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"OpenSky Labs\",\"kind\":\"dev\",\"methods\":{\"cancelAllBorrowOffersForSender(uint256)\":{\"params\":{\"minNonce_\":\"minimum user nonce\"}},\"cancelMultipleBorrowOffers(uint256[])\":{\"params\":{\"offerNonces\":\"array of borrowOffer nonces\"}},\"emergencyTokenTransfer(address,address,uint256)\":{\"details\":\"transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\",\"params\":{\"amount\":\"amount to send\",\"to\":\"recipient of the transfer\",\"token\":\"token to transfer\"}},\"pause()\":{\"details\":\"Pause pool for emergency case, can only be called by emergency admin.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"unpause()\":{\"details\":\"Unpause pool for emergency case, can only be called by emergency admin.\"}},\"title\":\"OpenSkyBespokeMarket contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelAllBorrowOffersForSender(uint256)\":{\"notice\":\"Cancel all pending offers for a sender\"},\"foreclose(uint256)\":{\"notice\":\"anyone can trigger but only OpenSkyLendNFT owner can receive collaterial\"},\"repay(uint256)\":{\"notice\":\"Anyone can repay but only OpenSkyBorrowNFT owner receive collaterialOnly OpenSkyLendNFT owner can recieve the paymentThis function is not pausable for safety\"},\"takeBorrowOffer((bool,bool,uint8,address,uint256,uint256,address,uint256,uint256,uint40,uint40,uint128,address,address,uint256,uint256,uint256,address,bytes,uint8,bytes32,bytes32),uint256,uint256,address,bool)\":{\"notice\":\"take an borrowing offer using ERC20 include ERC20\"}},\"notice\":\"Main point of interaction with OpenSky protocol's bespoke market - Users can:   # takeBorrowOffer   # takeLendOffer   # repay   # foreclose*\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bespokemarket/OpenSkyBespokeMarket.sol\":\"OpenSkyBespokeMarket\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x14351164423eade7f2dbac5ca9ab8aeded8694f3b2d7a9e0114a2b3b6558198d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/bespokemarket/OpenSkyBespokeMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\nimport './libraries/BespokeTypes.sol';\\nimport './libraries/BespokeLogic.sol';\\nimport './libraries/TakeLendOfferLogic.sol';\\nimport './libraries/TakeBorrowOfferLogic.sol';\\nimport './libraries/RepayLogic.sol';\\nimport './libraries/ForecloseLogic.sol';\\n\\nimport '../interfaces/IOpenSkySettings.sol';\\nimport '../interfaces/IACLManager.sol';\\nimport './interfaces/IOpenSkyBespokeSettings.sol';\\nimport './interfaces/IOpenSkyBespokeMarket.sol';\\nimport '../interfaces/IOpenSkyIncentivesController.sol';\\n\\n/**\\n * @title OpenSkyBespokeMarket contract\\n * @author OpenSky Labs\\n * @notice Main point of interaction with OpenSky protocol's bespoke market\\n * - Users can:\\n *   # takeBorrowOffer\\n *   # takeLendOffer\\n *   # repay\\n *   # foreclose\\n **/\\ncontract OpenSkyBespokeMarket is Context, Pausable, ReentrancyGuard, IOpenSkyBespokeMarket {\\n    using SafeERC20 for IERC20;\\n\\n    IOpenSkySettings public immutable SETTINGS;\\n    IOpenSkyBespokeSettings public immutable BESPOKE_SETTINGS;\\n\\n    mapping(address => uint256) public minNonce;\\n    mapping(address => mapping(uint256 => BespokeTypes.NonceInfo)) public _nonce;\\n\\n    BespokeTypes.Counter private _loanIdTracker;\\n\\n    mapping(uint256 => BespokeTypes.LoanData) internal _loans;\\n\\n    // currency=>amount\\n    mapping(address=>uint256) internal _totalBorrow;\\n    mapping(address=>uint256) internal _totalLend;\\n    \\n    // currency=>userAddress=>amount\\n    mapping(address => mapping(address => uint256))  internal _userBorrow;\\n    mapping(address => mapping(address => uint256))  internal _userLend;\\n\\n    constructor(address SETTINGS_, address BESPOKE_SETTINGS_) Pausable() ReentrancyGuard() {\\n        SETTINGS = IOpenSkySettings(SETTINGS_);\\n        BESPOKE_SETTINGS = IOpenSkyBespokeSettings(BESPOKE_SETTINGS_);\\n    }\\n\\n    /// @dev Only emergency admin can call functions marked by this modifier.\\n    modifier onlyEmergencyAdmin() {\\n        IACLManager ACLManager = IACLManager(SETTINGS.ACLManagerAddress());\\n        require(ACLManager.isEmergencyAdmin(_msgSender()), 'BM_ACL_ONLY_EMERGENCY_ADMIN_CAN_CALL');\\n        _;\\n    }\\n\\n    modifier onlyAirdropOperator() {\\n        IACLManager ACLManager = IACLManager(SETTINGS.ACLManagerAddress());\\n        require(ACLManager.isAirdropOperator(_msgSender()), 'BM_ACL_ONLY_AIRDROP_OPERATOR_CAN_CALL');\\n        _;\\n    }\\n\\n    modifier checkLoanExists(uint256 loanId) {\\n        require(_loans[loanId].amount > 0 && _loans[loanId].tokenAddress != address(0), 'BM_CHECK_LOAN_NOT_EXISTS');\\n        _;\\n    }\\n\\n    /// @dev Pause pool for emergency case, can only be called by emergency admin.\\n    function pause() external onlyEmergencyAdmin {\\n        _pause();\\n    }\\n\\n    /// @dev Unpause pool for emergency case, can only be called by emergency admin.\\n    function unpause() external onlyEmergencyAdmin {\\n        _unpause();\\n    }\\n\\n    /// @notice Cancel all pending offers for a sender\\n    /// @param minNonce_ minimum user nonce\\n    function cancelAllBorrowOffersForSender(uint256 minNonce_) external {\\n        require(minNonce_ > minNonce[msg.sender], 'BM_CANCEL_NONCE_LOWER_THAN_CURRENT');\\n        require(minNonce_ < minNonce[msg.sender] + 500000, 'BM_CANCEL_CANNOT_CANCEL_MORE');\\n        minNonce[msg.sender] = minNonce_;\\n\\n        emit CancelAllOffers(msg.sender, minNonce_);\\n    }\\n\\n    /// @param offerNonces array of borrowOffer nonces\\n    function cancelMultipleBorrowOffers(uint256[] calldata offerNonces) external {\\n        require(offerNonces.length > 0, 'BM_CANCEL_CANNOT_BE_EMPTY');\\n\\n        for (uint256 i = 0; i < offerNonces.length; i++) {\\n            require(offerNonces[i] >= minNonce[msg.sender], 'BM_CANCEL_NONCE_LOWER_THAN_CURRENT');\\n            _nonce[msg.sender][offerNonces[i]].invalid = true;\\n        }\\n\\n        emit CancelMultipleOffers(msg.sender, offerNonces);\\n    }\\n\\n    function isValidNonce(address account, uint256 nonce) external view returns (bool) {\\n        return !_nonce[account][nonce].invalid && nonce >= minNonce[account];\\n    }\\n\\n    /// @notice take an borrowing offer using ERC20 include ERC20\\n    function takeBorrowOffer(\\n        BespokeTypes.Offer memory offerData,\\n        uint256 supplyAmount,\\n        uint256 supplyDuration,\\n        address lendAsset,\\n        bool autoConvertWhenRepay //Only make sence when lend asset is different with borrow asset. eg. oToken,aToken etc.\\n    ) public override whenNotPaused nonReentrant returns (uint256) {\\n        \\n        _beforeLoanAction(offerData.signer, msg.sender, offerData.currency, supplyAmount, true);\\n        \\n        return\\n            TakeBorrowOfferLogic.executeTakeBorrowOffer(\\n                _nonce,\\n                minNonce,\\n                _loans,\\n                _loanIdTracker,\\n                offerData,\\n                BespokeTypes.TakeBorrowInfo({\\n                    borrowAmount: supplyAmount,\\n                    borrowDuration: supplyDuration,\\n                    lendAsset: lendAsset,\\n                    autoConvertWhenRepay: autoConvertWhenRepay\\n                }),\\n                BESPOKE_SETTINGS\\n            );\\n    }\\n\\n    function takeLendOffer(\\n        BespokeTypes.Offer memory offerData,\\n        uint256 tokenId,\\n        uint256 borrowAmount,\\n        uint256 borrowDuration,\\n        address onBehalfOf,\\n        bytes memory params\\n    ) public override whenNotPaused nonReentrant returns (uint256) {\\n\\n        _beforeLoanAction(msg.sender, offerData.signer, offerData.currency, borrowAmount, true);\\n        \\n        return\\n            TakeLendOfferLogic.executeTakeLendOffer(\\n                _nonce,\\n                minNonce,\\n                _loans,\\n                _loanIdTracker,\\n                offerData,\\n                BespokeTypes.TakeLendInfo({\\n                    borrowAmount: borrowAmount,\\n                    borrowDuration: borrowDuration,\\n                    tokenId: tokenId,\\n                    onBehalfOf: onBehalfOf,\\n                    params: params\\n                }),\\n                BESPOKE_SETTINGS\\n            );\\n    }\\n\\n    /// @notice Anyone can repay but only OpenSkyBorrowNFT owner receive collaterial\\n    /// @notice Only OpenSkyLendNFT owner can recieve the payment\\n    /// @notice This function is not pausable for safety\\n    function repay(uint256 loanId) public override nonReentrant checkLoanExists(loanId) {\\n        BespokeTypes.LoanData memory loan = _loans[loanId];\\n        _beforeLoanAction(loan.borrower, loan.lender, loan.currency, loan.amount, false);\\n        \\n        RepayLogic.repay(_loans, loanId, BESPOKE_SETTINGS, SETTINGS);\\n    }\\n\\n    /// @notice anyone can trigger but only OpenSkyLendNFT owner can receive collaterial\\n    function foreclose(uint256 loanId) public override whenNotPaused nonReentrant checkLoanExists(loanId) {\\n        BespokeTypes.LoanData memory loan = _loans[loanId];\\n        _beforeLoanAction(loan.borrower, loan.lender, loan.currency, loan.amount, false);\\n        \\n        ForecloseLogic.foreclose(_loans, loanId, BESPOKE_SETTINGS);\\n    }\\n    \\n    function _beforeLoanAction(address borrower, address lender, address currency, uint256 amount, bool isAdd) internal{\\n\\n        // incentive\\n        _triggerIncentive( borrower, lender, currency);\\n\\n        // borrower\\n        _totalBorrow[currency] = isAdd ? (_totalBorrow[currency] + amount): (_totalBorrow[currency] - amount);\\n        _userBorrow[currency][borrower]= isAdd ?(_userBorrow[currency][borrower] + amount): (_userBorrow[currency][borrower] - amount);\\n\\n        // lender \\n        _totalLend[currency] = isAdd ? (_totalLend[currency] + amount) : (_totalLend[currency] - amount);\\n        _userLend[currency][lender]= isAdd ?(_userLend[currency][lender] + amount): _userLend[currency][lender] - amount;\\n        \\n    }\\n\\n    function _triggerIncentive(address borrower, address lender, address currency) internal{\\n        address incentiveControllerAddressLend = BESPOKE_SETTINGS.incentiveControllerAddressLend();\\n        address incentiveControllerAddressBorrow = BESPOKE_SETTINGS.incentiveControllerAddressBorrow();\\n\\n        if(incentiveControllerAddressBorrow  != address(0)){\\n            IOpenSkyIncentivesController(incentiveControllerAddressBorrow).handleAction(borrower, _userBorrow[currency][borrower], _totalBorrow[borrower], abi.encode(currency));\\n        }\\n        \\n        if(incentiveControllerAddressLend  != address(0)){\\n            IOpenSkyIncentivesController(incentiveControllerAddressLend).handleAction(lender, _userLend[currency][lender], _totalLend[currency], abi.encode(currency));\\n        }\\n    }\\n\\n    function getLoanData(uint256 loanId) public view override returns (BespokeTypes.LoanData memory) {\\n        return BespokeLogic.getLoanDataWithStatus(_loans[loanId]);\\n    }\\n\\n    function getStatus(uint256 loanId) public view override returns (BespokeTypes.LoanStatus) {\\n        return BespokeLogic.getLoanStatus(_loans[loanId]);\\n    }\\n\\n    function getBorrowInterest(uint256 loanId) public view override returns (uint256) {\\n        return BespokeLogic.getBorrowInterest(_loans[loanId]);\\n    }\\n\\n    // @dev principal + interest\\n    function getBorrowBalance(uint256 loanId) public view override returns (uint256) {\\n        return BespokeLogic.getBorrowBalance(_loans[loanId]);\\n    }\\n\\n    function getPenalty(uint256 loanId) public view override returns (uint256) {\\n        return BespokeLogic.getPenalty(_loans[loanId]);\\n    }\\n    \\n    // incentives \\n    function totalBorrow(address currency) external view returns (uint256){\\n        return _totalBorrow[currency];\\n    }\\n    \\n    function userBorrow(address currency, address account) external view returns (uint256){\\n        return _userBorrow[currency][account];\\n    }\\n    \\n    function totalLend(address currency) external view returns (uint256){\\n        return _totalLend[currency];\\n    }\\n\\n    function userLend(address currency, address account) external view returns (uint256){\\n        return _userLend[currency][account];\\n    }\\n\\n    /// @dev transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due\\n    /// direct transfers to the contract address.\\n    /// @param token token to transfer\\n    /// @param to recipient of the transfer\\n    /// @param amount amount to send\\n    function emergencyTokenTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external onlyEmergencyAdmin {\\n        IERC20(token).safeTransfer(to, amount);\\n    }\\n\\n    receive() external payable {\\n        revert('BM_RECEIVE_NOT_ALLOWED');\\n    }\\n\\n    fallback() external payable {\\n        revert('BM_FALLBACK_NOT_ALLOWED');\\n    }\\n}\\n\",\"keccak256\":\"0xb64e11fb3f1b2d8d3ee5210ed46e019dae63f1dae27e5d82eb760b15e5468619\",\"license\":\"MIT\"},\"contracts/bespokemarket/interfaces/IOpenSkyBespokeLendOfferStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../libraries/BespokeTypes.sol';\\n\\ninterface IOpenSkyBespokeLendOfferStrategy {\\n    function validate(BespokeTypes.Offer memory offerData, BespokeTypes.TakeLendInfoForStrategy memory takeInfo)\\n        external\\n        view;\\n}\\n\",\"keccak256\":\"0xa5d11e9cf61892f97e06eb37e1ca2bec8cc400ed516f6e29f82825496d1284c0\",\"license\":\"MIT\"},\"contracts/bespokemarket/interfaces/IOpenSkyBespokeLoanNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '../libraries/BespokeTypes.sol';\\n\\ninterface IOpenSkyBespokeLoanNFT is IERC721 {\\n    event Mint(uint256 indexed tokenId, address indexed recipient);\\n    event Burn(uint256 tokenId);\\n    event SetLoanDescriptorAddress(address operator, address descriptorAddress);\\n\\n    function mint(uint256 tokenId, address account) external;\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function getLoanData(uint256 tokenId) external returns (BespokeTypes.LoanData memory);\\n}\\n\",\"keccak256\":\"0x6b6d44dc42af37ea65172148dca4969992f5c9b833479fee071d3977f697e1fb\",\"license\":\"MIT\"},\"contracts/bespokemarket/interfaces/IOpenSkyBespokeMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../libraries/BespokeTypes.sol';\\n\\ninterface IOpenSkyBespokeMarket {\\n    event CancelAllOffers(address indexed sender, uint256 nonce);\\n\\n    event CancelMultipleOffers(address indexed sender, uint256[] nonces);\\n\\n    event TakeBorrowOffer(\\n        bytes32 offerHash,\\n        uint256 indexed loanId,\\n        address indexed lender,\\n        address indexed borrower,\\n        uint256 nonce\\n    );\\n\\n    event TakeLendOffer(\\n        bytes32 offerHash,\\n        uint256 indexed loanId,\\n        address indexed lender,\\n        address indexed borrower,\\n        address onBehalfOf,\\n        uint256 nonce,\\n        uint256 nonceOrder\\n    );\\n\\n    event Repay(uint256 indexed loanId, address indexed operator, address indexed receiver);\\n\\n    event Foreclose(uint256 indexed loanId, address indexed operator, address indexed receiver);\\n\\n    function takeBorrowOffer(\\n        BespokeTypes.Offer memory offerData,\\n        uint256 supplyAmount,\\n        uint256 supplyDuration,\\n        address lendAsset,\\n        bool autoConvertWhenRepay\\n    ) external returns (uint256);\\n\\n    function takeLendOffer(\\n        BespokeTypes.Offer memory offerData,\\n        uint256 tokenId,\\n        uint256 borrowAmount,\\n        uint256 borrowDuration,\\n        address onBehalfOf,\\n        bytes memory params\\n    ) external returns (uint256);\\n\\n    function repay(uint256 loanId) external;\\n\\n    function foreclose(uint256 loanId) external;\\n\\n    function cancelAllBorrowOffersForSender(uint256 minNonce_) external;\\n\\n    function cancelMultipleBorrowOffers(uint256[] calldata offerNonces) external;\\n\\n    function isValidNonce(address account, uint256 nonce) external view returns (bool);\\n\\n    function getLoanData(uint256 loanId) external view returns (BespokeTypes.LoanData memory);\\n\\n    function getStatus(uint256 loanId) external view returns (BespokeTypes.LoanStatus);\\n\\n    function getBorrowInterest(uint256 loanId) external view returns (uint256);\\n\\n    function getBorrowBalance(uint256 loanId) external view returns (uint256);\\n\\n    function getPenalty(uint256 loanId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x26e2311705ef5467421b2c14655f968cf91672decf9776eae50ac528c1122bee\",\"license\":\"MIT\"},\"contracts/bespokemarket/interfaces/IOpenSkyBespokeSettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\nimport '../libraries/BespokeTypes.sol';\\n\\ninterface IOpenSkyBespokeSettings {\\n    event InitLoanAddress(address operator, address borrowLoanAddress, address lendLoanAddress);\\n    event InitMarketAddress(address operator, address address_);\\n\\n    event InitIncentiveControllerAddressLend(address operator, address address_);\\n    event InitIncentiveControllerAddressBorrow(address operator, address address_);\\n\\n    event SetReserveFactor(address operator, uint256 factor);\\n    event SetOverdueLoanFeeFactor(address operator, uint256 factor);\\n\\n    event SetMinBorrowDuration(address operator, uint256 factor);\\n    event SetMaxBorrowDuration(address operator, uint256 factor);\\n    event SetOverdueDuration(address operator, uint256 factor);\\n\\n    // nft whitelist\\n    event OpenWhitelist(address operator);\\n    event CloseWhitelist(address operator);\\n    event AddToWhitelist(address operator, address nft);\\n    event RemoveFromWhitelist(address operator, address nft);\\n\\n    // currency whitelist\\n    event AddCurrency(address operator, address currency);\\n    event RemoveCurrency(address operator, address currency);\\n\\n    // strategy whitelist list\\n    event AddStrategy(address operator, address address_);\\n    event RemoveStrategy(address operator, address address_);\\n\\n    // setting for nft transfer adapter \\n    event InitDefaultNftTransferAdapter(address ERC721DefaultTransferAdapter, address ERC1155DefaultTransferAdapter);\\n    event AddNftTransferAdapter(address operator, address nftAddress, address adapterAddress);\\n    event RemoveNftTransferAdapter(address operator, address nftAddress);\\n\\n    // settings for currency transfer adapter \\n    event InitDefaultCurrencyTransferAdapter(address currencyDefaultTransferAdapter);\\n    event AddCurrencyTransferAdapter(address operator, address currencyAddress, address adapterAddress);\\n    event RemoveCurrencyTransferAdapter(address operator, address currencyAddress);\\n\\n    function marketAddress() external view returns (address);\\n\\n    function borrowLoanAddress() external view returns (address);\\n\\n    function lendLoanAddress() external view returns (address);\\n\\n    function incentiveControllerAddressLend() external view returns (address);\\n\\n    function incentiveControllerAddressBorrow() external view returns (address);\\n\\n    function minBorrowDuration() external view returns (uint256);\\n\\n    function maxBorrowDuration() external view returns (uint256);\\n\\n    function overdueDuration() external view returns (uint256);\\n\\n    function reserveFactor() external view returns (uint256);\\n\\n    function MAX_RESERVE_FACTOR() external view returns (uint256);\\n\\n    function overdueLoanFeeFactor() external view returns (uint256);\\n\\n    function isWhitelistOn() external view returns (bool);\\n\\n    function inWhitelist(address nft) external view returns (bool);\\n\\n    function getWhitelistDetail(address nft) external view returns (BespokeTypes.WhitelistInfo memory);\\n\\n    function getBorrowDurationConfig(address nftAddress)\\n        external\\n        view\\n        returns (\\n            uint256 minBorrowDuration,\\n            uint256 maxBorrowDuration,\\n            uint256 overdueDuration\\n        );\\n\\n    function isCurrencyWhitelisted(address currency) external view returns (bool);\\n\\n    function getCurrencyTransferAdapter(address currency) external view returns (address adapter);\\n\\n    function getNftTransferAdapter(address nftAddress) external view returns (address);\\n\\n    function isStrategyWhitelisted(address address_) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x253a67aa978e32ef3996f42a0ef605ab92ff34a28173e5f0b9be5684f2b04792\",\"license\":\"MIT\"},\"contracts/bespokemarket/interfaces/ITransferAdapterCurrency.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../libraries/BespokeTypes.sol';\\n\\ninterface ITransferAdapterCurrency {\\n    function transferOnLend(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        BespokeTypes.Offer memory offerData\\n    ) external;\\n\\n    function transferOnRepay(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        BespokeTypes.LoanData memory loanData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7a3d03a4df2f0433dc9403d5a9192023b30d08117afa4493be465c01a3daa656\",\"license\":\"MIT\"},\"contracts/bespokemarket/interfaces/ITransferAdapterNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface ITransferAdapterNFT {\\n    function transferCollateralIn(\\n        address collection,\\n        address from,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n\\n    function transferCollateralOut(\\n        address collection,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n\\n    function transferCollateralOutOnForeclose(\\n        address collection,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x02724098b358ab512dfb7a5989d1c29901e79fd8501b72d5b86eb8c44841bdab\",\"license\":\"MIT\"},\"contracts/bespokemarket/libraries/BespokeLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport '../../libraries/math/MathUtils.sol';\\nimport '../../libraries/math/WadRayMath.sol';\\nimport '../../libraries/math/PercentageMath.sol';\\n\\nimport '../interfaces/IOpenSkyBespokeSettings.sol';\\nimport '../interfaces/IOpenSkyBespokeLoanNFT.sol';\\nimport './BespokeTypes.sol';\\nimport './SignatureChecker.sol';\\n\\nlibrary BespokeLogic {\\n    using PercentageMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    // keccak256(\\\"Offer(bool isProrated,bool autoConvertWhenRepay,uint8 offerType,address tokenAddress,uint256 tokenId,uint256 tokenAmount,address signer,uint256 borrowAmountMin,uint256 borrowAmountMax,uint40 borrowDurationMin,uint40 borrowDurationMax,uint128 borrowRate,address currency,address lendAsset,uint256 nonce,uint256 nonceMaxTimes,uint256 deadline,address strategy,bytes params)\\\")\\n    bytes32 internal constant OFFER_HASH = 0x5898afb02f4982fe09fa9b4daac8eb8efd917a7c9412c0671717c798ae97aa99;\\n\\n    function hashOffer(BespokeTypes.Offer memory offerData) public pure returns (bytes32) {\\n        return\\n            keccak256(\\n                bytes.concat(\\n                    abi.encode(\\n                        OFFER_HASH,\\n                        offerData.isProrated,\\n                        offerData.autoConvertWhenRepay,\\n                        offerData.offerType,\\n                        offerData.tokenAddress,\\n                        offerData.tokenId,\\n                        offerData.tokenAmount,\\n                        offerData.signer,\\n                        offerData.borrowAmountMin,\\n                        offerData.borrowAmountMax,\\n                        offerData.borrowDurationMin,\\n                        offerData.borrowDurationMax,\\n                        offerData.borrowRate\\n                    ),\\n                    abi.encode(\\n                        offerData.currency,\\n                        offerData.lendAsset,\\n                        offerData.nonce,\\n                        offerData.nonceMaxTimes,\\n                        offerData.deadline,\\n                        offerData.strategy,\\n                        keccak256(offerData.params)\\n                    )\\n                )\\n            );\\n    }\\n\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f, // keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n                    0xf0cf7ce475272740cae17eb3cadd6d254800be81c53f84a2f273b99036471c62, // keccak256(\\\"OpenSkyBespokeMarket\\\")\\n                    0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6, // keccak256(bytes(\\\"1\\\")) for versionId = 1\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    function validateOfferCommon(\\n        mapping(address => mapping(uint256 => BespokeTypes.NonceInfo)) storage _nonce,\\n        mapping(address => uint256) storage minNonce,\\n        BespokeTypes.Offer memory offerData,\\n        bytes32 offerHash,\\n        uint256 amount,\\n        uint256 duration,\\n        bytes32 DOMAIN_SEPARATOR,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS //,\\n    ) public view {\\n        // check nonce\\n        require(\\n            !_nonce[offerData.signer][offerData.nonce].invalid && offerData.nonce >= minNonce[offerData.signer],\\n            'BM_TAKE_OFFER_NONCE_INVALID'\\n        );\\n        require(offerData.nonceMaxTimes >= 1, 'BM_TAKE_OFFER_NONCE_MAX_TIMES_INVALIDE');\\n\\n        require(\\n            _nonce[offerData.signer][offerData.nonce].usedTimes < offerData.nonceMaxTimes,\\n            'BM_TAKE_OFFER_NONCE_EXHAUST'\\n        );\\n\\n        if (_nonce[offerData.signer][offerData.nonce].offerHash != 0) {\\n            require(\\n                _nonce[offerData.signer][offerData.nonce].offerHash == offerHash,\\n                'BM_TAKE_OFFER_NONCE_USED_BY_OTHER_OFFER'\\n            );\\n        }\\n\\n        require(BESPOKE_SETTINGS.isCurrencyWhitelisted(offerData.currency), 'BM_TAKE_BORROW_CURRENCY_NOT_IN_WHITELIST');\\n\\n        require(\\n            !BESPOKE_SETTINGS.isWhitelistOn() || BESPOKE_SETTINGS.inWhitelist(offerData.tokenAddress),\\n            'BM_TAKE_BORROW_NFT_NOT_IN_WHITELIST'\\n        );\\n\\n        require(block.timestamp <= offerData.deadline, 'BM_TAKE_BORROW_SIGNING_EXPIRATION');\\n\\n        (uint256 minBorrowDuration, uint256 maxBorrowDuration, ) = BESPOKE_SETTINGS.getBorrowDurationConfig(\\n            offerData.tokenAddress\\n        );\\n\\n        // check borrow duration\\n        require(\\n            offerData.borrowDurationMin <= offerData.borrowDurationMax &&\\n                offerData.borrowDurationMin >= minBorrowDuration &&\\n                offerData.borrowDurationMax <= maxBorrowDuration,\\n            'BM_TAKE_BORROW_OFFER_DURATION_NOT_ALLOWED'\\n        );\\n\\n        require(\\n            duration > 0 && duration >= offerData.borrowDurationMin && duration <= offerData.borrowDurationMax,\\n            'BM_TAKE_BORROW_TAKER_DURATION_NOT_ALLOWED'\\n        );\\n\\n        // check borrow amount\\n        require(\\n            offerData.borrowAmountMin > 0 && offerData.borrowAmountMin <= offerData.borrowAmountMax,\\n            'BM_TAKE_BORROW_OFFER_AMOUNT_NOT_ALLOWED'\\n        );\\n\\n        require(\\n            amount >= offerData.borrowAmountMin && amount <= offerData.borrowAmountMax,\\n            'BM_TAKE_BORROW_SUPPLY_AMOUNT_NOT_ALLOWED'\\n        );\\n        require(\\n            SignatureChecker.verify(\\n                offerHash,\\n                offerData.signer,\\n                offerData.v,\\n                offerData.r,\\n                offerData.s,\\n                DOMAIN_SEPARATOR\\n            ),\\n            'BM_TAKE_BORROW_SIGNATURE_INVALID'\\n        );\\n    }\\n\\n    function createLoan(\\n        mapping(uint256 => BespokeTypes.LoanData) storage _loans,\\n        BespokeTypes.Offer memory offerData,\\n        uint256 loanId,\\n        uint256 supplyAmount,\\n        uint256 supplyDuration,\\n        address nftManager,\\n        uint256 tokenId,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS\\n    ) public {\\n        uint256 borrowRateRay = uint256(offerData.borrowRate).rayDiv(10000);\\n        (, , uint256 overdueDuration) = BESPOKE_SETTINGS.getBorrowDurationConfig(offerData.tokenAddress);\\n\\n        BespokeTypes.LoanData memory loan = BespokeTypes.LoanData({\\n            tokenAddress: offerData.tokenAddress,\\n            tokenId: tokenId,\\n            tokenAmount: offerData.tokenAmount,\\n            nftManager: nftManager,\\n            borrower: offerData.offerType == BespokeTypes.OfferType.BORROW ? offerData.signer : msg.sender,\\n            lender: offerData.offerType == BespokeTypes.OfferType.BORROW ? msg.sender : offerData.signer,\\n            amount: supplyAmount,\\n            borrowRate: uint128(borrowRateRay),\\n            interestPerSecond: uint128(MathUtils.calculateBorrowInterestPerSecond(borrowRateRay, supplyAmount)),\\n            currency: offerData.currency,\\n            lendAsset: offerData.lendAsset,\\n            reserveFactor: BESPOKE_SETTINGS.reserveFactor(),\\n            overdueLoanFeeFactor: BESPOKE_SETTINGS.overdueLoanFeeFactor(),\\n            borrowDuration: uint40(supplyDuration),\\n            borrowBegin: uint40(block.timestamp),\\n            borrowOverdueTime: uint40(block.timestamp + supplyDuration),\\n            liquidatableTime: uint40(block.timestamp + supplyDuration + overdueDuration),\\n            isProrated: offerData.isProrated,\\n            autoConvertWhenRepay: offerData.autoConvertWhenRepay,\\n            status: BespokeTypes.LoanStatus.BORROWING\\n        });\\n\\n        _loans[loanId] = loan;\\n    }\\n\\n    function getLoanStatus(BespokeTypes.LoanData memory loan) public view returns (BespokeTypes.LoanStatus) {\\n        BespokeTypes.LoanStatus status = loan.status;\\n        if (status == BespokeTypes.LoanStatus.BORROWING) {\\n            if (loan.liquidatableTime < block.timestamp) {\\n                status = BespokeTypes.LoanStatus.LIQUIDATABLE;\\n            } else if (loan.borrowOverdueTime < block.timestamp) {\\n                status = BespokeTypes.LoanStatus.OVERDUE;\\n            }\\n        }\\n        return status;\\n    }\\n\\n    function getLoanDataWithStatus(BespokeTypes.LoanData memory loan)\\n        public\\n        view\\n        returns (BespokeTypes.LoanData memory)\\n    {\\n        loan.status = getLoanStatus(loan);\\n        return loan;\\n    }\\n\\n    function getLoanParties(IOpenSkyBespokeSettings BESPOKE_SETTINGS, uint256 loanId)\\n        public\\n        view\\n        returns (address borrower, address lender)\\n    {\\n        lender = IERC721(BESPOKE_SETTINGS.lendLoanAddress()).ownerOf(loanId);\\n        borrower = IERC721(BESPOKE_SETTINGS.borrowLoanAddress()).ownerOf(loanId);\\n    }\\n\\n    function getBorrowInterest(BespokeTypes.LoanData memory loan) public view returns (uint256) {\\n        uint256 endTime = block.timestamp < loan.borrowOverdueTime\\n            ? (loan.isProrated ? block.timestamp : loan.borrowOverdueTime)\\n            : loan.borrowOverdueTime;\\n        return uint256(loan.interestPerSecond).rayMul(endTime -loan.borrowBegin);\\n    }\\n\\n    // @dev principal + interest\\n    function getBorrowBalance(BespokeTypes.LoanData memory loan) public view returns (uint256) {\\n        return loan.amount + getBorrowInterest(loan);\\n    }\\n\\n    function getPenalty(BespokeTypes.LoanData memory loan) public view returns (uint256) {\\n        BespokeTypes.LoanData memory loan = getLoanDataWithStatus(loan);\\n        uint256 penalty = 0;\\n        if (loan.status == BespokeTypes.LoanStatus.OVERDUE) {\\n            penalty = loan.amount.percentMul(loan.overdueLoanFeeFactor);\\n        }\\n        return penalty;\\n    }\\n\\n    function calculateRepayAmountAndProtocolFee(BespokeTypes.LoanData memory loan)\\n        public\\n        view\\n        returns (\\n            uint256 total,\\n            uint256 lenderAmount,\\n            uint256 protocolFee\\n        )\\n    {\\n        uint256 penalty = getPenalty(loan);\\n        total = getBorrowBalance(loan) + penalty;\\n        protocolFee = (getBorrowInterest(loan) + penalty).percentMul(loan.reserveFactor);\\n        lenderAmount = total - protocolFee;\\n    }\\n\\n    function burnLoanNft(\\n        mapping(uint256 => BespokeTypes.LoanData) storage _loans,\\n        uint256 tokenId,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS\\n    ) public {\\n        IOpenSkyBespokeLoanNFT(BESPOKE_SETTINGS.borrowLoanAddress()).burn(tokenId);\\n        IOpenSkyBespokeLoanNFT(BESPOKE_SETTINGS.lendLoanAddress()).burn(tokenId);\\n        delete _loans[tokenId];\\n    }\\n\\n    function mintLoanNFT(\\n        BespokeTypes.Counter storage _loanIdTracker,\\n        address borrower,\\n        address lender,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS\\n    ) internal returns (uint256) {\\n        _loanIdTracker._value = _loanIdTracker._value + 1;\\n        uint256 tokenId = _loanIdTracker._value;\\n\\n        IOpenSkyBespokeLoanNFT(BESPOKE_SETTINGS.borrowLoanAddress()).mint(tokenId, borrower);\\n        IOpenSkyBespokeLoanNFT(BESPOKE_SETTINGS.lendLoanAddress()).mint(tokenId, lender);\\n\\n        return tokenId;\\n    }\\n}\\n\",\"keccak256\":\"0x95df091a5a184b1a5c14009283b322e112910f1c31d594f90f95a0f326be3dad\",\"license\":\"MIT\"},\"contracts/bespokemarket/libraries/BespokeTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary BespokeTypes {\\n    struct Offer {\\n        bool isProrated; // whether to pay interest a fixed-time when repay early\\n        bool autoConvertWhenRepay; // when currency!=lendAsset, whether to convert currency to lendAsset for lender when repay. Determined by lender.\\n        OfferType offerType;\\n        address tokenAddress;\\n        uint256 tokenId;\\n        uint256 tokenAmount; // 1 for ERC721, 1+ for ERC1155\\n        address signer; //borrower or lender\\n        uint256 borrowAmountMin;\\n        uint256 borrowAmountMax;\\n        uint40 borrowDurationMin;\\n        uint40 borrowDurationMax;\\n        uint128 borrowRate;\\n        address currency;  // Asset to borrow or receive when loan created. Borrower should also use it for repay.\\n        address lendAsset; // Using which token to lend. Determined by lender and should be zero address for borrow offer.\\n        uint256 nonce;\\n        uint256 nonceMaxTimes;// should be 1 for a borrow offer\\n        uint256 deadline;\\n        address strategy; // used for lend offer. should be zero address for borrow offer\\n        bytes params;\\n        uint8 v; // v: parameter (27 or 28)\\n        bytes32 r; // r: parameter\\n        bytes32 s; // s: parameter\\n    }\\n\\n    struct LoanData {\\n        address tokenAddress;\\n        uint256 tokenId;\\n        uint256 tokenAmount; // 1 for ERC721, 1+ for ERC1155\\n        address nftManager;\\n        address borrower;\\n        address lender;\\n        uint256 amount;\\n        uint128 borrowRate;\\n        uint128 interestPerSecond;\\n        address currency;\\n        address lendAsset;\\n        uint256 reserveFactor;\\n        uint256 overdueLoanFeeFactor;\\n        uint40 borrowDuration;\\n        uint40 borrowBegin;\\n        uint40 borrowOverdueTime;\\n        uint40 liquidatableTime;\\n        bool isProrated;\\n        bool autoConvertWhenRepay;\\n        LoanStatus status;\\n    }\\n\\n    enum OfferType {\\n        BORROW, // borrow offer\\n        LEND // lend offer\\n    }\\n\\n    struct TakeBorrowInfo {\\n        uint256 borrowAmount;\\n        uint256 borrowDuration;\\n        address lendAsset;\\n        bool autoConvertWhenRepay;\\n    }\\n\\n    struct TakeLendInfo {\\n        uint256 borrowAmount;\\n        uint256 borrowDuration;\\n        uint256 tokenId;\\n        address onBehalfOf;\\n        bytes params;\\n    }\\n\\n    // params for lend strategy\\n    struct TakeLendInfoForStrategy {\\n        address taker;\\n        uint256 tokenId;\\n        bytes params;\\n    }\\n\\n    enum LoanStatus {\\n        NONE,\\n        BORROWING,\\n        OVERDUE,\\n        LIQUIDATABLE\\n    }\\n\\n    struct WhitelistInfo {\\n        bool enabled;\\n        uint256 minBorrowDuration;\\n        uint256 maxBorrowDuration;\\n        uint256 overdueDuration;\\n    }\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    struct NonceInfo {\\n        bool invalid;\\n        uint256 usedTimes;\\n        bytes32 offerHash;\\n    }\\n}\\n\",\"keccak256\":\"0xc1c1fdc3ed498c4e500329e331e52c682d8b8f99cbc96337644ff3723de7191f\",\"license\":\"MIT\"},\"contracts/bespokemarket/libraries/ForecloseLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../interfaces/IOpenSkyBespokeSettings.sol';\\nimport '../interfaces/ITransferAdapterNFT.sol';\\n\\nimport './BespokeTypes.sol';\\nimport './BespokeLogic.sol';\\n\\nlibrary ForecloseLogic {\\n    event Foreclose(uint256 indexed loanId, address indexed operator, address indexed receiver);\\n\\n    function foreclose(\\n        mapping(uint256 => BespokeTypes.LoanData) storage _loans,\\n        uint256 loanId,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS\\n    ) public {\\n        BespokeTypes.LoanData memory loanData = BespokeLogic.getLoanDataWithStatus(_loans[loanId]);\\n        require(loanData.status == BespokeTypes.LoanStatus.LIQUIDATABLE, 'BM_FORECLOSE_STATUS_ERROR');\\n\\n        (, address lender) = BespokeLogic.getLoanParties(BESPOKE_SETTINGS, loanId);\\n        \\n        ITransferAdapterNFT(loanData.nftManager).transferCollateralOutOnForeclose(\\n            loanData.tokenAddress,\\n            lender,\\n            loanData.tokenId,\\n            loanData.tokenAmount\\n        );\\n\\n        BespokeLogic.burnLoanNft(_loans, loanId, BESPOKE_SETTINGS);\\n\\n        emit Foreclose(loanId, msg.sender, lender);\\n    }\\n}\\n\",\"keccak256\":\"0x141b2a8db0a32337104a1d298000547846b7158e54bfa5e0a2a24cc5a3be2f53\",\"license\":\"MIT\"},\"contracts/bespokemarket/libraries/RepayLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport '../../interfaces/IOpenSkySettings.sol';\\n\\nimport '../interfaces/IOpenSkyBespokeSettings.sol';\\nimport '../interfaces/ITransferAdapterCurrency.sol';\\nimport '../interfaces/ITransferAdapterNFT.sol';\\n\\nimport './BespokeTypes.sol';\\nimport './BespokeLogic.sol';\\n\\nlibrary RepayLogic {\\n    using SafeERC20 for IERC20;\\n\\n    event Repay(uint256 indexed loanId, address indexed operator, address indexed receiver);\\n\\n    function repay(\\n        mapping(uint256 => BespokeTypes.LoanData) storage _loans,\\n        uint256 loanId,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS,\\n        IOpenSkySettings SETTINGS\\n    ) public {\\n        BespokeTypes.LoanData memory loanData = BespokeLogic.getLoanDataWithStatus(_loans[loanId]);\\n        require(\\n            loanData.status == BespokeTypes.LoanStatus.BORROWING || loanData.status == BespokeTypes.LoanStatus.OVERDUE,\\n            'BM_REPAY_STATUS_ERROR'\\n        );\\n\\n        (address borrower, address lender) = BespokeLogic.getLoanParties(BESPOKE_SETTINGS, loanId);\\n\\n        (uint256 repayTotal, uint256 lenderAmount, uint256 protocolFee) = BespokeLogic\\n            .calculateRepayAmountAndProtocolFee(loanData);\\n        address currencyTransferAdapter = BESPOKE_SETTINGS.getCurrencyTransferAdapter(loanData.lendAsset);\\n\\n        IERC20(loanData.currency).safeTransferFrom(msg.sender, address(this), lenderAmount);\\n        IERC20(loanData.currency).approve(currencyTransferAdapter, lenderAmount);\\n        ITransferAdapterCurrency(currencyTransferAdapter).transferOnRepay(\\n            loanData.lendAsset,\\n            address(this),\\n            lender,\\n            lenderAmount,\\n            loanData\\n        );\\n\\n        // protocol income\\n        if (protocolFee > 0) {\\n            IERC20(loanData.currency).safeTransferFrom(msg.sender, SETTINGS.daoVaultAddress(), protocolFee);\\n        }\\n\\n        ITransferAdapterNFT(loanData.nftManager).transferCollateralOut(\\n            loanData.tokenAddress,\\n            borrower,\\n            loanData.tokenId,\\n            loanData.tokenAmount\\n        );\\n\\n        BespokeLogic.burnLoanNft(_loans, loanId, BESPOKE_SETTINGS);\\n\\n        emit Repay(loanId, msg.sender, borrower);\\n    }\\n}\\n\",\"keccak256\":\"0x179392eb85787939afc53e750282dea83addb1e4ca08291d59f42c8231c0c2ab\",\"license\":\"MIT\"},\"contracts/bespokemarket/libraries/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\nimport {IERC1271} from '@openzeppelin/contracts/interfaces/IERC1271.sol';\\n\\n/**\\n * @title SignatureChecker\\n * @notice This library allows verification of signatures for both EOAs and contracts.\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @notice Recovers the signer of a signature (for EOA)\\n     * @param hash the hash containing the signed mesage\\n     * @param v parameter (27 or 28). This prevents maleability since the public key recovery equation has two possible solutions.\\n     * @param r parameter\\n     * @param s parameter\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // https://ethereum.stackexchange.com/questions/83174/is-it-best-practice-to-check-signature-malleability-in-ecrecover\\n        // https://crypto.iacr.org/2019/affevents/wac/medias/Heninger-BiasedNonceSense.pdf\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            'BM_SIGNATURE_INVALID_S_PARAMETER'\\n        );\\n\\n        require(v == 27 || v == 28, 'BM_SIGNATURE_INVALID_V_PARAMETER');\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), 'BM_SIGNATURE_INVALID_SIGNER');\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @notice Returns whether the signer matches the signed message\\n     * @param hash the hash containing the signed mesage\\n     * @param signer the signer address to confirm message validity\\n     * @param v parameter (27 or 28)\\n     * @param r parameter\\n     * @param s parameter\\n     * @param domainSeparator paramer to prevent signature being executed in other chains and environments\\n     * @return true --> if valid // false --> if invalid\\n     */\\n    function verify(\\n        bytes32 hash,\\n        address signer,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        bytes32 domainSeparator\\n    ) internal view returns (bool) {\\n        // \\\\x19\\\\x01 is the standardized encoding prefix\\n        // https://eips.ethereum.org/EIPS/eip-712#specification\\n        bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', domainSeparator, hash));\\n        if (Address.isContract(signer)) {\\n            // 0x1626ba7e is the interfaceId for signature contracts (see IERC1271)\\n            return IERC1271(signer).isValidSignature(digest, abi.encodePacked(r, s, v)) == 0x1626ba7e;\\n        } else {\\n            return recover(digest, v, r, s) == signer;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d997d9be9ec81d9643d9fc9f1f72d917ab1196add37ae6f9bc1ad378daa829d\",\"license\":\"MIT\"},\"contracts/bespokemarket/libraries/TakeBorrowOfferLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport '../interfaces/IOpenSkyBespokeSettings.sol';\\nimport '../interfaces/ITransferAdapterCurrency.sol';\\nimport '../interfaces/ITransferAdapterNFT.sol';\\n\\nimport './BespokeTypes.sol';\\nimport './BespokeLogic.sol';\\n\\nlibrary TakeBorrowOfferLogic {\\n    using SafeERC20 for IERC20;\\n\\n    event TakeBorrowOffer(\\n        bytes32 offerHash,\\n        uint256 indexed loanId,\\n        address indexed lender,\\n        address indexed borrower,\\n        uint256 nonce\\n    );\\n\\n    struct TakeBorrowOfferLocalVars {\\n        bytes32 offerHash;\\n        bytes32 domainSeparator;\\n        address nftManager;\\n        address currencyTransferAdapter;\\n        uint256 loanId;\\n    }\\n\\n    function executeTakeBorrowOffer(\\n        mapping(address => mapping(uint256 => BespokeTypes.NonceInfo)) storage _nonce,\\n        mapping(address => uint256) storage minNonce,\\n        mapping(uint256 => BespokeTypes.LoanData) storage _loans,\\n        BespokeTypes.Counter storage _loanIdTracker,\\n        BespokeTypes.Offer memory offerData,\\n        BespokeTypes.TakeBorrowInfo memory params,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS\\n    ) public returns (uint256) {\\n        TakeBorrowOfferLocalVars memory vars;\\n        vars.offerHash = BespokeLogic.hashOffer(offerData);\\n        vars.domainSeparator = BespokeLogic.getDomainSeparator();\\n\\n        require(offerData.offerType == BespokeTypes.OfferType.BORROW, 'BM_TAKE_BORROW_OFFER_INVALID_OFFER_TYPE');\\n\\n        // For a borrower who created a borrow offer:\\n        // 1.No need to care what lender use to lend or what lender will get when loan repaid.\\n        // 2.So field 'autoConvertWhenRepay' and 'lendAsset' of offer data should be kept default value, and will be determined by lender/taker.\\n        require(\\n            offerData.autoConvertWhenRepay == false,\\n            'BM_TAKE_BORROW_OFFER_INVALID_FIELD_VALUE_AUTO_CONVERT_WHENR_EPAY'\\n        );\\n        require(offerData.lendAsset == address(0), 'BM_TAKE_BORROW_OFFER_INVALID_FIELD_VALUE_LEND_ASSET');\\n\\n        // Borrower offer can only be used once by design\\n        require(offerData.nonceMaxTimes == 1, 'BM_TAKE_BORROW_OFFER_INVALID_FIELD_VALUE_NONCE_MAX_TIMES');\\n        \\n        require(offerData.strategy == address(0), 'BM_BORROW_OFFER_STRATEGY_SHOULD_BE_ZERO');\\n\\n\\n        // Comment validation\\n        BespokeLogic.validateOfferCommon(\\n            _nonce,\\n            minNonce,\\n            offerData,\\n            vars.offerHash,\\n            params.borrowAmount,\\n            params.borrowDuration,\\n            vars.domainSeparator,\\n            BESPOKE_SETTINGS\\n        );\\n\\n        // Overwrite default value from lender/taker after common validation\\n        offerData.autoConvertWhenRepay = params.autoConvertWhenRepay;\\n        offerData.lendAsset = params.lendAsset;\\n\\n        // prevents replay\\n        _nonce[offerData.signer][offerData.nonce].invalid = true;\\n\\n        vars.nftManager = BESPOKE_SETTINGS.getNftTransferAdapter(offerData.tokenAddress);\\n        require(vars.nftManager != address(0), 'BM_TRANSFER_NFT_ADAPTER_NOT_AVAILABLE');\\n        ITransferAdapterNFT(vars.nftManager).transferCollateralIn(\\n            offerData.tokenAddress,\\n            offerData.signer,\\n            offerData.tokenId,\\n            offerData.tokenAmount\\n        );\\n\\n        vars.currencyTransferAdapter = BESPOKE_SETTINGS.getCurrencyTransferAdapter(offerData.lendAsset);\\n        IERC20(offerData.lendAsset).safeTransferFrom(msg.sender, address(this), params.borrowAmount);\\n        IERC20(offerData.lendAsset).approve(vars.currencyTransferAdapter, params.borrowAmount);\\n        ITransferAdapterCurrency(vars.currencyTransferAdapter).transferOnLend(\\n            offerData.lendAsset,\\n            address(this),\\n            offerData.signer,\\n            params.borrowAmount,\\n            offerData\\n        );\\n\\n        vars.loanId = BespokeLogic.mintLoanNFT(_loanIdTracker, offerData.signer, msg.sender, BESPOKE_SETTINGS);\\n\\n        BespokeLogic.createLoan(\\n            _loans,\\n            offerData,\\n            vars.loanId,\\n            params.borrowAmount,\\n            params.borrowDuration,\\n            vars.nftManager,\\n            offerData.tokenId,\\n            BESPOKE_SETTINGS\\n        );\\n\\n        emit TakeBorrowOffer(vars.offerHash, vars.loanId, msg.sender, offerData.signer, offerData.nonce);\\n        return vars.loanId;\\n    }\\n}\\n\",\"keccak256\":\"0xff856fb0ee086aa85132fcefa77b923e03e04ad0a021435050d02b19a6f7c924\",\"license\":\"MIT\"},\"contracts/bespokemarket/libraries/TakeLendOfferLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport '../interfaces/IOpenSkyBespokeSettings.sol';\\nimport '../interfaces/IOpenSkyBespokeLendOfferStrategy.sol';\\nimport '../interfaces/ITransferAdapterCurrency.sol';\\nimport '../interfaces/ITransferAdapterNFT.sol';\\n\\nimport './BespokeLogic.sol';\\nimport './BespokeTypes.sol';\\n\\nlibrary TakeLendOfferLogic {\\n    using SafeERC20 for IERC20;\\n\\n    event TakeLendOffer(\\n        bytes32 offerHash,\\n        uint256 indexed loanId,\\n        address indexed lender,\\n        address indexed borrower,\\n        address onBehalfOf,\\n        uint256 nonce,\\n        uint256 nonceOrder\\n    );\\n\\n    struct TakeLendOfferLocalVars {\\n        bytes32 offerHash;\\n        bytes32 domainSeparator;\\n        address nftManager;\\n        address currencyTransferAdapter;\\n        uint256 loanId;\\n    }\\n\\n    function executeTakeLendOffer(\\n        mapping(address => mapping(uint256 => BespokeTypes.NonceInfo)) storage _nonce,\\n        mapping(address => uint256) storage minNonce,\\n        mapping(uint256 => BespokeTypes.LoanData) storage _loans,\\n        BespokeTypes.Counter storage _loanIdTracker,\\n        BespokeTypes.Offer memory offerData,\\n        BespokeTypes.TakeLendInfo memory params,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS\\n    ) public returns (uint256) {\\n        TakeLendOfferLocalVars memory vars;\\n\\n        vars.offerHash = BespokeLogic.hashOffer(offerData);\\n        vars.domainSeparator = BespokeLogic.getDomainSeparator();\\n\\n        require(offerData.offerType == BespokeTypes.OfferType.LEND, 'BM_TAKE_OFFER_INVALID_OFFER_TYPE');\\n\\n        // comment validation\\n        BespokeLogic.validateOfferCommon(\\n            _nonce,\\n            minNonce,\\n            offerData,\\n            vars.offerHash,\\n            params.borrowAmount,\\n            params.borrowDuration,\\n            vars.domainSeparator,\\n            BESPOKE_SETTINGS\\n        );\\n\\n        //validate strategy\\n        require(offerData.strategy != address(0), 'BM_TAKE_LEND_STRATEGY_EMPTY');\\n\\n        require(BESPOKE_SETTINGS.isStrategyWhitelisted(offerData.strategy), 'BM_TAKE_LEND_STRATEGY_NOT_IN_WHITE_LIST');\\n\\n        IOpenSkyBespokeLendOfferStrategy(offerData.strategy).validate(\\n            offerData,\\n            BespokeTypes.TakeLendInfoForStrategy({taker: msg.sender, tokenId: params.tokenId, params: params.params})\\n        );\\n\\n        // update nonce\\n        _nonce[offerData.signer][offerData.nonce].usedTimes++;\\n        if (_nonce[offerData.signer][offerData.nonce].offerHash == 0) {\\n            _nonce[offerData.signer][offerData.nonce].offerHash = vars.offerHash;\\n        }\\n        if (_nonce[offerData.signer][offerData.nonce].usedTimes >= offerData.nonceMaxTimes) {\\n            _nonce[offerData.signer][offerData.nonce].invalid = true;\\n        }\\n        vars.nftManager = BESPOKE_SETTINGS.getNftTransferAdapter(offerData.tokenAddress);\\n\\n        require(vars.nftManager != address(0), 'BM_TRANSFER_NFT_ADAPTER_NOT_AVAILABLE');\\n        ITransferAdapterNFT(vars.nftManager).transferCollateralIn(\\n            offerData.tokenAddress,\\n            msg.sender,\\n            params.tokenId,\\n            offerData.tokenAmount\\n        );\\n\\n        vars.currencyTransferAdapter = BESPOKE_SETTINGS.getCurrencyTransferAdapter(offerData.lendAsset);\\n        IERC20(offerData.lendAsset).safeTransferFrom(offerData.signer, address(this), params.borrowAmount);\\n        IERC20(offerData.lendAsset).approve(vars.currencyTransferAdapter, params.borrowAmount);\\n\\n        ITransferAdapterCurrency(vars.currencyTransferAdapter).transferOnLend(\\n            offerData.lendAsset,\\n            address(this),\\n            params.onBehalfOf,\\n            params.borrowAmount,\\n            offerData\\n        );\\n\\n        // mint loanNft\\n        vars.loanId = BespokeLogic.mintLoanNFT(_loanIdTracker, params.onBehalfOf, offerData.signer, BESPOKE_SETTINGS);\\n        // create loan\\n        BespokeLogic.createLoan(\\n            _loans,\\n            offerData,\\n            vars.loanId,\\n            params.borrowAmount,\\n            params.borrowDuration,\\n            vars.nftManager,\\n            params.tokenId,\\n            BESPOKE_SETTINGS\\n        );\\n\\n        emit TakeLendOffer(\\n            vars.offerHash,\\n            vars.loanId,\\n            offerData.signer,\\n            msg.sender,\\n            params.onBehalfOf,\\n            offerData.nonce,\\n            _nonce[offerData.signer][offerData.nonce].usedTimes\\n        );\\n        return vars.loanId;\\n    }\\n}\\n\",\"keccak256\":\"0x229dd69e4c13dd8ecb7ca242179812cf078165b8db15aaa3b60224348e1b2224\",\"license\":\"MIT\"},\"contracts/interfaces/IACLManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IACLManager {\\n    function addEmergencyAdmin(address admin) external;\\n    \\n    function isEmergencyAdmin(address admin) external view returns (bool);\\n    \\n    function removeEmergencyAdmin(address admin) external;\\n    \\n    function addGovernance(address admin) external;\\n    \\n    function isGovernance(address admin) external view returns (bool);\\n\\n    function removeGovernance(address admin) external;\\n\\n    function addPoolAdmin(address admin) external;\\n\\n    function isPoolAdmin(address admin) external view returns (bool);\\n\\n    function removePoolAdmin(address admin) external;\\n\\n    function addLiquidationOperator(address address_) external;\\n\\n    function isLiquidationOperator(address address_) external view returns (bool);\\n\\n    function removeLiquidationOperator(address address_) external;\\n\\n    function addAirdropOperator(address address_) external;\\n\\n    function isAirdropOperator(address address_) external view returns (bool);\\n\\n    function removeAirdropOperator(address address_) external;\\n}\\n\",\"keccak256\":\"0x0e77d3bdc88ba10cd78a9a80350bbf0d4120a1d0ac7c7911bef8c8cb389cf42f\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\ninterface IOpenSkyIncentivesController {\\n    function handleAction(\\n        address account,\\n        uint256 userBalance,\\n        uint256 totalSupply,\\n        bytes calldata params\\n    ) external;\\n    \\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to,\\n        bool stake\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xf23b190b6e310e6e4a705c1dde1bcb6d94b642431909e282eb493691132f5a5b\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkySettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\nimport '../libraries/types/DataTypes.sol';\\n\\ninterface IOpenSkySettings {\\n    event InitPoolAddress(address operator, address address_);\\n    event InitLoanAddress(address operator, address address_);\\n    event InitVaultFactoryAddress(address operator, address address_);\\n    event InitIncentiveControllerAddress(address operator, address address_);\\n    event InitIncentiveControllerAddressForLoan(address operator, address address_);\\n    event InitWETHGatewayAddress(address operator, address address_);\\n    event InitPunkGatewayAddress(address operator, address address_);\\n    event InitDaoVaultAddress(address operator, address address_);\\n\\n    event AddToWhitelist(address operator, uint256 reserveId, address nft);\\n    event RemoveFromWhitelist(address operator, uint256 reserveId, address nft);\\n    event SetReserveFactor(address operator, uint256 factor);\\n    event SetPrepaymentFeeFactor(address operator, uint256 factor);\\n    event SetOverdueLoanFeeFactor(address operator, uint256 factor);\\n    event SetMoneyMarketAddress(address operator, address address_);\\n    event SetTreasuryAddress(address operator, address address_);\\n    event SetACLManagerAddress(address operator, address address_);\\n    event SetLoanDescriptorAddress(address operator, address address_);\\n    event SetNftPriceOracleAddress(address operator, address address_);\\n    event SetInterestRateStrategyAddress(address operator, address address_);\\n    event AddLiquidator(address operator, address address_);\\n    event RemoveLiquidator(address operator, address address_);\\n\\n    function poolAddress() external view returns (address);\\n\\n    function loanAddress() external view returns (address);\\n\\n    function vaultFactoryAddress() external view returns (address);\\n\\n    function incentiveControllerAddress() external view returns (address);\\n\\n    function incentiveControllerAddressForLoan() external view returns (address);\\n    \\n    function wethGatewayAddress() external view returns (address);\\n\\n    function punkGatewayAddress() external view returns (address);\\n\\n    function inWhitelist(uint256 reserveId, address nft) external view returns (bool);\\n\\n    function getWhitelistDetail(uint256 reserveId, address nft) external view returns (DataTypes.WhitelistInfo memory);\\n\\n    function reserveFactor() external view returns (uint256); // treasury ratio\\n\\n    function MAX_RESERVE_FACTOR() external view returns (uint256);\\n\\n    function prepaymentFeeFactor() external view returns (uint256);\\n\\n    function overdueLoanFeeFactor() external view returns (uint256);\\n\\n    function moneyMarketAddress() external view returns (address);\\n\\n    function treasuryAddress() external view returns (address);\\n\\n    function daoVaultAddress() external view returns (address);\\n\\n    function ACLManagerAddress() external view returns (address);\\n\\n    function loanDescriptorAddress() external view returns (address);\\n\\n    function nftPriceOracleAddress() external view returns (address);\\n\\n    function interestRateStrategyAddress() external view returns (address);\\n    \\n    function isLiquidator(address liquidator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2e2c9c1b589b5a3c36c75c101e108b9a9760e00568b27e5a78266eb1e36ab75f\",\"license\":\"MIT\"},\"contracts/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    // common\\n    string public constant MATH_MULTIPLICATION_OVERFLOW = '100';\\n    string public constant MATH_ADDITION_OVERFLOW = '101';\\n    string public constant MATH_DIVISION_BY_ZERO = '102';\\n\\n    string public constant ETH_TRANSFER_FAILED = '110';\\n    string public constant RECEIVE_NOT_ALLOWED = '111';\\n    string public constant FALLBACK_NOT_ALLOWED = '112';\\n    string public constant APPROVAL_FAILED = '113';\\n\\n    // setting/factor\\n    string public constant SETTING_ZERO_ADDRESS_NOT_ALLOWED = '115';\\n    string public constant SETTING_RESERVE_FACTOR_NOT_ALLOWED = '116';\\n    string public constant SETTING_WHITELIST_INVALID_RESERVE_ID = '117';\\n    string public constant SETTING_WHITELIST_NFT_ADDRESS_IS_ZERO = '118';\\n    string public constant SETTING_WHITELIST_NFT_DURATION_OUT_OF_ORDER = '119';\\n    string public constant SETTING_WHITELIST_NFT_NAME_EMPTY = '120';\\n    string public constant SETTING_WHITELIST_NFT_SYMBOL_EMPTY = '121';\\n    string public constant SETTING_WHITELIST_NFT_LTV_NOT_ALLOWED = '122';\\n    string public constant SETTING_ADDRESS_ALREADY_INITIALIZED = '123';\\n\\n    // settings/acl\\n    string public constant ACL_ONLY_GOVERNANCE_CAN_CALL = '200';\\n    string public constant ACL_ONLY_EMERGENCY_ADMIN_CAN_CALL = '201';\\n    string public constant ACL_ONLY_POOL_ADMIN_CAN_CALL = '202';\\n    string public constant ACL_ONLY_LIQUIDATOR_CAN_CALL = '203';\\n    string public constant ACL_ONLY_AIRDROP_OPERATOR_CAN_CALL = '204';\\n    string public constant ACL_ONLY_POOL_CAN_CALL = '205';\\n\\n    // lending & borrowing\\n    // reserve\\n    string public constant RESERVE_DOES_NOT_EXIST = '300';\\n    string public constant RESERVE_LIQUIDITY_INSUFFICIENT = '301';\\n    string public constant RESERVE_INDEX_OVERFLOW = '302';\\n    string public constant RESERVE_SWITCH_MONEY_MARKET_STATE_ERROR = '303';\\n    string public constant RESERVE_TREASURY_FACTOR_NOT_ALLOWED = '304';\\n    string public constant RESERVE_TOKEN_CAN_NOT_BE_CLAIMED = '305';\\n\\n    // token\\n    string public constant AMOUNT_SCALED_IS_ZERO = '310';\\n    string public constant AMOUNT_TRANSFER_OVERFLOW = '311';\\n\\n    //deposit\\n    string public constant DEPOSIT_AMOUNT_SHOULD_BE_BIGGER_THAN_ZERO = '320';\\n\\n    // withdraw\\n    string public constant WITHDRAW_AMOUNT_NOT_ALLOWED = '321';\\n    string public constant WITHDRAW_LIQUIDITY_NOT_SUFFICIENT = '322';\\n\\n    // borrow\\n    string public constant BORROW_DURATION_NOT_ALLOWED = '330';\\n    string public constant BORROW_AMOUNT_EXCEED_BORROW_LIMIT = '331';\\n    string public constant NFT_ADDRESS_IS_NOT_IN_WHITELIST = '332';\\n\\n    // repay\\n    string public constant REPAY_STATUS_ERROR = '333';\\n    string public constant REPAY_MSG_VALUE_ERROR = '334';\\n\\n    // extend\\n    string public constant EXTEND_STATUS_ERROR = '335';\\n    string public constant EXTEND_MSG_VALUE_ERROR = '336';\\n\\n    // liquidate\\n    string public constant START_LIQUIDATION_STATUS_ERROR = '360';\\n    string public constant END_LIQUIDATION_STATUS_ERROR = '361';\\n    string public constant END_LIQUIDATION_AMOUNT_ERROR = '362';\\n\\n    // loan\\n    string public constant LOAN_DOES_NOT_EXIST = '400';\\n    string public constant LOAN_SET_STATUS_ERROR = '401';\\n    string public constant LOAN_REPAYER_IS_NOT_OWNER = '402';\\n    string public constant LOAN_LIQUIDATING_STATUS_CAN_NOT_BE_UPDATED = '403';\\n    string public constant LOAN_CALLER_IS_NOT_OWNER = '404';\\n    string public constant LOAN_COLLATERAL_NFT_CAN_NOT_BE_CLAIMED = '405';\\n\\n    string public constant FLASHCLAIM_EXECUTOR_ERROR = '410';\\n    string public constant FLASHCLAIM_STATUS_ERROR = '411';\\n\\n    // money market\\n    string public constant MONEY_MARKET_DEPOSIT_AMOUNT_NOT_ALLOWED = '500';\\n    string public constant MONEY_MARKET_WITHDRAW_AMOUNT_NOT_ALLOWED = '501';\\n    string public constant MONEY_MARKET_APPROVAL_FAILED = '502';\\n    string public constant MONEY_MARKET_DELEGATE_CALL_ERROR = '503';\\n    string public constant MONEY_MARKET_REQUIRE_DELEGATE_CALL = '504';\\n    string public constant MONEY_MARKET_WITHDRAW_AMOUNT_NOT_MATCH = '505';\\n    string public constant MONEY_MARKET_ADDRESS_ZERO_WHEN_OPEN = '506';\\n\\n    // price oracle\\n    string public constant PRICE_ORACLE_HAS_NO_PRICE_FEED = '600';\\n    string public constant PRICE_ORACLE_INCORRECT_TIMESTAMP = '601';\\n    string public constant PRICE_ORACLE_PARAMS_ERROR = '602';\\n}\\n\",\"keccak256\":\"0xf081c51479ec9a7aa3856dba0bddb3b625bed357a165fc0818aa7c3fea5d4a89\",\"license\":\"MIT\"},\"contracts/libraries/math/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {WadRayMath} from './WadRayMath.sol';\\n\\nlibrary MathUtils {\\n    using WadRayMath for uint256;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n     * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate linearly accumulated during the timeDelta, in ray\\n     **/\\n\\n    function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp) external view returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 timeDifference = block.timestamp - (uint256(lastUpdateTimestamp));\\n\\n        return (rate * timeDifference) / SECONDS_PER_YEAR + WadRayMath.ray();\\n    }\\n\\n    function calculateBorrowInterest(\\n        uint256 borrowRate,\\n        uint256 amount,\\n        uint256 duration\\n    ) external pure returns (uint256) {\\n        return amount.rayMul(borrowRate.rayMul(duration).rayDiv(SECONDS_PER_YEAR));\\n    }\\n\\n    function calculateBorrowInterestPerSecond(uint256 borrowRate, uint256 amount) external pure returns (uint256) {\\n        return amount.rayMul(borrowRate).rayDiv(SECONDS_PER_YEAR);\\n    }\\n\\n    function calculateLoanSupplyRate(\\n        uint256 availableLiquidity,\\n        uint256 totalBorrows,\\n        uint256 borrowRate\\n    ) external pure returns (uint256 loanSupplyRate, uint256 utilizationRate) {\\n        utilizationRate = (totalBorrows == 0 && availableLiquidity == 0)\\n            ? 0\\n            : totalBorrows.rayDiv(availableLiquidity + totalBorrows);\\n        loanSupplyRate = utilizationRate.rayMul(borrowRate);\\n    }\\n}\\n\",\"keccak256\":\"0xe06262969c3e10f221573fd7bfdf3a89942957b5d957a6110cb5e933d2bdbff6\",\"license\":\"MIT\"},\"contracts/libraries/math/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../helpers/Errors.sol';\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded half up\\n **/\\n\\nlibrary PercentageMath {\\n  uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\n  uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\n\\n  /**\\n   * @dev Executes a percentage multiplication\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The percentage of value\\n   **/\\n  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    if (value == 0 || percentage == 0) {\\n      return 0;\\n    }\\n\\n    require(\\n      value <= (type(uint256).max - HALF_PERCENT) / percentage,\\n      Errors.MATH_MULTIPLICATION_OVERFLOW\\n    );\\n\\n    return (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\\n  }\\n\\n  /**\\n   * @dev Executes a percentage division\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The value divided the percentage\\n   **/\\n  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    require(percentage != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfPercentage = percentage / 2;\\n\\n    require(\\n      value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR,\\n      Errors.MATH_MULTIPLICATION_OVERFLOW\\n    );\\n\\n    return (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\n  }\\n}\\n\",\"keccak256\":\"0xe8333e1a929245e4198f87645eae3fc8749e8e29f505427b38ec8ca035434953\",\"license\":\"MIT\"},\"contracts/libraries/math/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {Errors} from '../helpers/Errors.sol';\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @return One ray, 1e27\\n     **/\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    /**\\n     * @return One wad, 1e18\\n     **/\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e27/2\\n     **/\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e18/2\\n     **/\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     **/\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfWAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * b + halfWAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     **/\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * WAD + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfRAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * b + halfRAY) / RAY;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, truncating the mantissa\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMulTruncate(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return (a * b) / RAY;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * RAY + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, truncating the mantissa\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDivTruncate(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        return (a * RAY) / b;\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @param a Ray\\n     * @return a casted to wad, rounded half up to the nearest wad\\n     **/\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n        uint256 result = halfRatio + a;\\n        require(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\\n\\n        return result / WAD_RAY_RATIO;\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @param a Wad\\n     * @return a converted in ray\\n     **/\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        uint256 result = a * WAD_RAY_RATIO;\\n        require(result / WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4bf6b9a00c5e9938726d173f11b56de8edd92e17593e4dfa61a3ce7336756c6b\",\"license\":\"MIT\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        uint256 reserveId;\\n        address underlyingAsset;\\n        address oTokenAddress;\\n        address moneyMarketAddress;\\n        uint128 lastSupplyIndex;\\n        uint256 borrowingInterestPerSecond;\\n        uint256 lastMoneyMarketBalance;\\n        uint40 lastUpdateTimestamp;\\n        uint256 totalBorrows;\\n        address interestModelAddress;\\n        uint256 treasuryFactor;\\n        bool isMoneyMarketOn;\\n    }\\n\\n    struct LoanData {\\n        uint256 reserveId;\\n        address nftAddress;\\n        uint256 tokenId;\\n        address borrower;\\n        uint256 amount;\\n        uint128 borrowRate;\\n        uint128 interestPerSecond;\\n        uint40 borrowBegin;\\n        uint40 borrowDuration;\\n        uint40 borrowOverdueTime;\\n        uint40 liquidatableTime;\\n        uint40 extendableTime;\\n        uint40 borrowEnd;\\n        LoanStatus status;\\n    }\\n\\n    enum LoanStatus {\\n        NONE,\\n        BORROWING,\\n        EXTENDABLE,\\n        OVERDUE,\\n        LIQUIDATABLE,\\n        LIQUIDATING\\n    }\\n\\n    struct WhitelistInfo {\\n        bool enabled;\\n        string name;\\n        string symbol;\\n        uint256 LTV;\\n        uint256 minBorrowDuration;\\n        uint256 maxBorrowDuration;\\n        uint256 extendableDuration;\\n        uint256 overdueDuration;\\n    }\\n}\\n\",\"keccak256\":\"0x487cd1dedb3146da46144bc8f0e5b970c5173efa8c19700184b8207c1ee3fc55\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162002fa038038062002fa0833981016040819052620000349162000077565b6000805460ff19169055600180556001600160a01b039182166080521660a052620000af565b80516001600160a01b03811681146200007257600080fd5b919050565b600080604083850312156200008b57600080fd5b62000096836200005a565b9150620000a6602084016200005a565b90509250929050565b60805160a051612e856200011b600039600081816102bd0152818161073101528181610bc0015281816113fc0152818161155b01528181611a5e0152611ae401526000818161055001528181610be801528181610c6a01528181610f8401526115d60152612e856000f3fe60806040526004361061014f5760003560e01c80638456cb59116100b6578063a3d5b2551161006f578063a3d5b255146104bb578063a7b8b8f5146104db578063aa99fa9814610511578063ade97ab51461053e578063dd6d195414610572578063febcc680146105a85761019a565b80638456cb59146103e057806384e5cec5146103f55780638bf1badd146104155780638dc876601461043557806396e596821461047b578063a2b8fe871461049b5761019a565b8063371fd8e611610108578063371fd8e6146103195780633f4ba83a146103395780635c622a0e1461034e5780635c975abb1461037b578063622fe39f146103935780636b52b365146103c05761019a565b80630647ee20146101e257806319ef8c33146102175780631c18749514610245578063227c73081461026557806329c55f06146102ab5780632f844ea8146102f75761019a565b3661019a5760405162461bcd60e51b8152602060048201526016602482015275109357d49150d152559157d393d517d0531313d5d15160521b60448201526064015b60405180910390fd5b60405162461bcd60e51b815260206004820152601760248201527f424d5f46414c4c4241434b5f4e4f545f414c4c4f5745440000000000000000006044820152606401610191565b3480156101ee57600080fd5b506102026101fd366004611f45565b610610565b60405190151581526020015b60405180910390f35b34801561022357600080fd5b5061023761023236600461225a565b610665565b60405190815260200161020e565b34801561025157600080fd5b506102376102603660046122d2565b6107a7565b34801561027157600080fd5b506102376102803660046122eb565b6001600160a01b03918216600090815260096020908152604080832093909416825291909152205490565b3480156102b757600080fd5b506102df7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161020e565b34801561030357600080fd5b50610317610312366004612324565b61082c565b005b34801561032557600080fd5b506103176103343660046122d2565b610971565b34801561034557600080fd5b50610317610c66565b34801561035a57600080fd5b5061036e6103693660046122d2565b610d8b565b60405161020e91906123c3565b34801561038757600080fd5b5060005460ff16610202565b34801561039f57600080fd5b506103b36103ae3660046122d2565b610e10565b60405161020e91906123d1565b3480156103cc57600080fd5b506102376103db3660046122d2565b610f3c565b3480156103ec57600080fd5b50610317610f80565b34801561040157600080fd5b506103176104103660046122d2565b6110a2565b34801561042157600080fd5b506103176104303660046122d2565b61118a565b34801561044157600080fd5b506102376104503660046122eb565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205490565b34801561048757600080fd5b506102376104963660046122d2565b611445565b3480156104a757600080fd5b506102376104b6366004612532565b611489565b3480156104c757600080fd5b506103176104d63660046125c6565b6115d2565b3480156104e757600080fd5b506102376104f6366004612607565b6001600160a01b031660009081526007602052604090205490565b34801561051d57600080fd5b5061023761052c366004612607565b60026020526000908152604090205481565b34801561054a57600080fd5b506102df7f000000000000000000000000000000000000000000000000000000000000000081565b34801561057e57600080fd5b5061023761058d366004612607565b6001600160a01b031660009081526006602052604090205490565b3480156105b457600080fd5b506105f36105c3366004611f45565b600360209081526000928352604080842090915290825290208054600182015460029092015460ff909116919083565b60408051931515845260208401929092529082015260600161020e565b6001600160a01b038216600090815260036020908152604080832084845290915281205460ff1615801561065c57506001600160a01b0383166000908152600260205260409020548210155b90505b92915050565b6000805460ff16156106895760405162461bcd60e51b815260040161019190612624565b600260015414156106ac5760405162461bcd60e51b81526004016101919061264e565b60026001819055506106cb8660c0015133886101800151886001611706565b60408051608081018252868152602081018690526001600160a01b038516818301528315156060820152905163ef52b43b60e01b815273ebBC12b39165DFCCeA69BA1a4d5FCd86F3a32DBf9163ef52b43b91610758916003916002916005916004918e917f000000000000000000000000000000000000000000000000000000000000000090840161285e565b602060405180830381865af4158015610775573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079991906128d7565b600180559695505050505050565b600081815260056020526040808220905163b504989b60e01b815273eEFCf47FD6384b3Ae4E65bBA3Bd6BfAd8a7dfd329163b504989b916107eb91906004016128f0565b602060405180830381865af4158015610808573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065f91906128d7565b806108795760405162461bcd60e51b815260206004820152601960248201527f424d5f43414e43454c5f43414e4e4f545f42455f454d505459000000000000006044820152606401610191565b60005b8181101561092957336000908152600260205260409020548383838181106108a6576108a6612a35565b9050602002013510156108cb5760405162461bcd60e51b815260040161019190612a4b565b3360009081526003602052604081206001918585858181106108ef576108ef612a35565b60209081029290920135835250810191909152604001600020805460ff19169115159190911790558061092181612aa3565b91505061087c565b50336001600160a01b03167fac0004ba1a2ea62c1d6de00ade33246fa25432a7148f9e20cce8d9fea7493aa18383604051610965929190612abe565b60405180910390a25050565b600260015414156109945760405162461bcd60e51b81526004016101919061264e565b60026001556000818152600560205260409020600601548190158015906109d157506000818152600560205260409020546001600160a01b031615155b610a185760405162461bcd60e51b8152602060048201526018602482015277424d5f434845434b5f4c4f414e5f4e4f545f45584953545360401b6044820152606401610191565b600082815260056020818152604080842081516102808101835281546001600160a01b0390811682526001830154948201949094526002820154928101929092526003808201548416606084015260048201548416608084015293810154831660a0830152600681015460c083015260078101546001600160801b0380821660e0850152600160801b90910416610100830152600881015483166101208301526009810154909216610140820152600a820154610160820152600b820154610180820152600c82015464ffffffffff8082166101a084015265010000000000820481166101c0840152600160501b820481166101e0840152600160781b82041661020083015260ff600160a01b820481161515610220840152600160a81b8204811615156102408401529193610260850192600160b01b90920490911690811115610b6557610b65612399565b6003811115610b7657610b76612399565b815250509050610b9b81608001518260a001518361012001518460c001516000611706565b6040516306d8c6df60e01b815260056004820152602481018490526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660448301527f0000000000000000000000000000000000000000000000000000000000000000166064820152737beB1db41Bb8f518BA972db1D1B11BfE0f57DE57906306d8c6df906084015b60006040518083038186803b158015610c4557600080fd5b505af4158015610c59573d6000803e3d6000fd5b5050600180555050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cea9190612b05565b90506001600160a01b038116632500f2b6336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610d40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d649190612b2d565b610d805760405162461bcd60e51b815260040161019190612b4a565b610d88611918565b50565b6000818152600560205260408082209051631057df9160e21b815273eEFCf47FD6384b3Ae4E65bBA3Bd6BfAd8a7dfd329163415f7e4491610dcf91906004016128f0565b602060405180830381865af4158015610dec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065f9190612b9d565b610eb56040805161028081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081018290526101c081018290526101e081018290526102008101829052610220810182905261024081018290529061026082015290565b6000828152600560205260409081902090516319e28c3360e21b815273eEFCf47FD6384b3Ae4E65bBA3Bd6BfAd8a7dfd329163678a30cc91610efa91906004016128f0565b61028060405180830381865af4158015610f18573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065f9190612bce565b600081815260056020526040808220905163ab51865d60e01b815273eEFCf47FD6384b3Ae4E65bBA3Bd6BfAd8a7dfd329163ab51865d916107eb91906004016128f0565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fe0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110049190612b05565b90506001600160a01b038116632500f2b6336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561105a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107e9190612b2d565b61109a5760405162461bcd60e51b815260040161019190612b4a565b610d886119ab565b3360009081526002602052604090205481116110d05760405162461bcd60e51b815260040161019190612a4b565b336000908152600260205260409020546110ed906207a120612d27565b811061113b5760405162461bcd60e51b815260206004820152601c60248201527f424d5f43414e43454c5f43414e4e4f545f43414e43454c5f4d4f5245000000006044820152606401610191565b3360008181526002602052604090819020839055517f3472ca53ce86826d0cf2457fc20b0aadb9ff559e29da4c38e37e98fb8edd966d9061117f9084815260200190565b60405180910390a250565b60005460ff16156111ad5760405162461bcd60e51b815260040161019190612624565b600260015414156111d05760405162461bcd60e51b81526004016101919061264e565b600260015560008181526005602052604090206006015481901580159061120d57506000818152600560205260409020546001600160a01b031615155b6112545760405162461bcd60e51b8152602060048201526018602482015277424d5f434845434b5f4c4f414e5f4e4f545f45584953545360401b6044820152606401610191565b600082815260056020818152604080842081516102808101835281546001600160a01b0390811682526001830154948201949094526002820154928101929092526003808201548416606084015260048201548416608084015293810154831660a0830152600681015460c083015260078101546001600160801b0380821660e0850152600160801b90910416610100830152600881015483166101208301526009810154909216610140820152600a820154610160820152600b820154610180820152600c82015464ffffffffff8082166101a084015265010000000000820481166101c0840152600160501b820481166101e0840152600160781b82041661020083015260ff600160a01b820481161515610220840152600160a81b8204811615156102408401529193610260850192600160b01b909204909116908111156113a1576113a1612399565b60038111156113b2576113b2612399565b8152505090506113d781608001518260a001518361012001518460c001516000611706565b604051635430170f60e11b815260056004820152602481018490526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166044820152731d9393B167ec445730745d8dadF38419D891413e9063a8602e1e90606401610c2d565b6000818152600560205260408082209051634560096360e11b815273eEFCf47FD6384b3Ae4E65bBA3Bd6BfAd8a7dfd3291638ac012c6916107eb91906004016128f0565b6000805460ff16156114ad5760405162461bcd60e51b815260040161019190612624565b600260015414156114d05760405162461bcd60e51b81526004016101919061264e565b60026001819055506114ef338860c00151896101800151886001611706565b6040805160a081018252868152602081018690528082018890526001600160a01b038516606082015260808101849052905163d28ce47360e01b8152737E4F725Ae544b816F913FAfCF9e16A69f8DAA2FF9163d28ce47391611582916003916002916005916004918f917f0000000000000000000000000000000000000000000000000000000000000000908401612d3f565b602060405180830381865af415801561159f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c391906128d7565b60018055979650505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015611632573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116569190612b05565b90506001600160a01b038116632500f2b6336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156116ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d09190612b2d565b6116ec5760405162461bcd60e51b815260040161019190612b4a565b6117006001600160a01b0385168484611a03565b50505050565b611711858585611a5a565b8061173f576001600160a01b03831660009081526006602052604090205461173a908390612dd2565b611763565b6001600160a01b038316600090815260066020526040902054611763908390612d27565b6001600160a01b038416600090815260066020526040902055806117b7576001600160a01b038084166000908152600860209081526040808320938916835292905220546117b2908390612dd2565b6117e8565b6001600160a01b038084166000908152600860209081526040808320938916835292905220546117e8908390612d27565b6001600160a01b038085166000908152600860209081526040808320938a16835292905220558061183c576001600160a01b038316600090815260076020526040902054611837908390612dd2565b611860565b6001600160a01b038316600090815260076020526040902054611860908390612d27565b6001600160a01b038416600090815260076020526040902055806118b4576001600160a01b038084166000908152600960209081526040808320938816835292905220546118af908390612dd2565b6118e5565b6001600160a01b038084166000908152600960209081526040808320938816835292905220546118e5908390612d27565b6001600160a01b039384166000908152600960209081526040808320979096168252959095529290932091909155505050565b60005460ff166119615760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610191565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60005460ff16156119ce5760405162461bcd60e51b815260040161019190612624565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861198e3390565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611a55908490611cd4565b505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b75e7d316040518163ffffffff1660e01b8152600401602060405180830381865afa158015611aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ade9190612b05565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663efbe23376040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b649190612b05565b90506001600160a01b03811615611c18576001600160a01b0383811660008181526008602090815260408083208a861684528252808320546006835292819020548151808401959095528151808603909301835284820191829052639ab99ddf60e01b90915293851693639ab99ddf93611be5938b93909291604401612de9565b600060405180830381600087803b158015611bff57600080fd5b505af1158015611c13573d6000803e3d6000fd5b505050505b6001600160a01b03821615611ccd576001600160a01b03838116600081815260096020908152604080832089861684528252808320548484526007835292819020548151808401959095528151808603909301835284820191829052639ab99ddf60e01b90915293861693639ab99ddf93611c9a938a93909291604401612de9565b600060405180830381600087803b158015611cb457600080fd5b505af1158015611cc8573d6000803e3d6000fd5b505050505b5050505050565b6000611d29826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611da69092919063ffffffff16565b805190915015611a555780806020019051810190611d479190612b2d565b611a555760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610191565b6060611db58484600085611dbf565b90505b9392505050565b606082471015611e205760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610191565b843b611e6e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610191565b600080866001600160a01b03168587604051611e8a9190612e20565b60006040518083038185875af1925050503d8060008114611ec7576040519150601f19603f3d011682016040523d82523d6000602084013e611ecc565b606091505b5091509150611edc828286611ee7565b979650505050505050565b60608315611ef6575081611db8565b825115611f065782518084602001fd5b8160405162461bcd60e51b81526004016101919190612e3c565b6001600160a01b0381168114610d8857600080fd5b8035611f4081611f20565b919050565b60008060408385031215611f5857600080fd5b8235611f6381611f20565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6040516102c0810167ffffffffffffffff81118282101715611fab57611fab611f71565b60405290565b604051610280810167ffffffffffffffff81118282101715611fab57611fab611f71565b8015158114610d8857600080fd5b8035611f4081611fd5565b803560028110611f4057600080fd5b64ffffffffff81168114610d8857600080fd5b8035611f4081611ffd565b6001600160801b0381168114610d8857600080fd5b8035611f408161201b565b600082601f83011261204c57600080fd5b813567ffffffffffffffff8082111561206757612067611f71565b604051601f8301601f19908116603f0116810190828211818310171561208f5761208f611f71565b816040528381528660208588010111156120a857600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff81168114611f4057600080fd5b60006102c082840312156120ec57600080fd5b6120f4611f87565b90506120ff82611fe3565b815261210d60208301611fe3565b602082015261211e60408301611fee565b604082015261212f60608301611f35565b60608201526080820135608082015260a082013560a082015261215460c08301611f35565b60c082015260e082013560e082015261010080830135818301525061012061217d818401612010565b9082015261014061218f838201612010565b908201526101606121a1838201612030565b908201526101806121b3838201611f35565b908201526101a06121c5838201611f35565b908201526101c082810135908201526101e0808301359082015261020080830135908201526102206121f8818401611f35565b908201526102408281013567ffffffffffffffff81111561221857600080fd5b6122248582860161203b565b8284015250506102606122388184016120c8565b9082015261028082810135908201526102a09182013591810191909152919050565b600080600080600060a0868803121561227257600080fd5b853567ffffffffffffffff81111561228957600080fd5b612295888289016120d9565b955050602086013593506040860135925060608601356122b481611f20565b915060808601356122c481611fd5565b809150509295509295909350565b6000602082840312156122e457600080fd5b5035919050565b600080604083850312156122fe57600080fd5b823561230981611f20565b9150602083013561231981611f20565b809150509250929050565b6000806020838503121561233757600080fd5b823567ffffffffffffffff8082111561234f57600080fd5b818501915085601f83011261236357600080fd5b81358181111561237257600080fd5b8660208260051b850101111561238757600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052602160045260246000fd5b600481106123bf576123bf612399565b9052565b6020810161065f82846123af565b81516001600160a01b0316815261028081016020830151602083015260408301516040830152606083015161241160608401826001600160a01b03169052565b50608083015161242c60808401826001600160a01b03169052565b5060a083015161244760a08401826001600160a01b03169052565b5060c083015160c083015260e083015161246c60e08401826001600160801b03169052565b50610100838101516001600160801b031690830152610120808401516001600160a01b03908116918401919091526101408085015190911690830152610160808401519083015261018080840151908301526101a08084015164ffffffffff908116918401919091526101c0808501518216908401526101e080850151821690840152610200808501519091169083015261022080840151151590830152610240808401511515908301526102608084015161252a828501826123af565b505092915050565b60008060008060008060c0878903121561254b57600080fd5b863567ffffffffffffffff8082111561256357600080fd5b61256f8a838b016120d9565b97506020890135965060408901359550606089013594506080890135915061259682611f20565b90925060a088013590808211156125ac57600080fd5b506125b989828a0161203b565b9150509295509295509295565b6000806000606084860312156125db57600080fd5b83356125e681611f20565b925060208401356125f681611f20565b929592945050506040919091013590565b60006020828403121561261957600080fd5b8135611db881611f20565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600281106123bf576123bf612399565b60005b838110156126b0578181015183820152602001612698565b838111156117005750506000910152565b600081518084526126d9816020860160208601612695565b601f01601f19169290920160200192915050565b80511515825260006102c0602083015161270b602086018215159052565b50604083015161271e6040860182612685565b50606083015161273960608601826001600160a01b03169052565b506080830151608085015260a083015160a085015260c083015161276860c08601826001600160a01b03169052565b5060e0838101519085015261010080840151908501526101208084015164ffffffffff908116918601919091526101408085015190911690850152610160808401516001600160801b031690850152610180808401516001600160a01b03908116918601919091526101a0808501518216908601526101c080850151908601526101e080850151908601526102008085015190860152610220808501519091169085015261024080840151818601839052612825838701826126c1565b925050506102608084015161283e8287018260ff169052565b505061028083810151908501526102a09283015192909301919091525090565b600061014089835288602084015287604084015286606084015280608084015261288a818401876126ed565b855160a0850152602086015160c085015260408601516001600160a01b0390811660e086015260609096015115156101008501529390941661012090920191909152509695505050505050565b6000602082840312156128e957600080fd5b5051919050565b81546001600160a01b031681526102808101600183015460208301526002830154604083015260038301546001600160a01b039081166060840152600484015481166080808501919091526005850154821660a0850152600685015460c085015260078501546001600160801b03811660e0860152901c61010084015260088401548116610120840152600984015416610140830152600a830154610160830152600b830154610180830152600c83015464ffffffffff8082166101a0850152602882901c81166101c08501526129d66101e08501828460501c1664ffffffffff169052565b6129ef6102008501828460781c1664ffffffffff169052565b50612a05610220840160ff8360a01c1615159052565b612a1a610240840160ff8360a81c1615159052565b612a2e610260840160ff8360b01c166123af565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60208082526022908201527f424d5f43414e43454c5f4e4f4e43455f4c4f5745525f5448414e5f4355525245604082015261139560f21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612ab757612ab7612a8d565b5060010190565b6020808252810182905260006001600160fb1b03831115612ade57600080fd5b8260051b80856040850137600092016040019182525092915050565b8051611f4081611f20565b600060208284031215612b1757600080fd5b8151611db881611f20565b8051611f4081611fd5565b600060208284031215612b3f57600080fd5b8151611db881611fd5565b60208082526024908201527f424d5f41434c5f4f4e4c595f454d455247454e43595f41444d494e5f43414e5f60408201526310d0531360e21b606082015260800190565b805160048110611f4057600080fd5b600060208284031215612baf57600080fd5b61065c82612b8e565b8051611f408161201b565b8051611f4081611ffd565b60006102808284031215612be157600080fd5b612be9611fb1565b612bf283612afa565b81526020830151602082015260408301516040820152612c1460608401612afa565b6060820152612c2560808401612afa565b6080820152612c3660a08401612afa565b60a082015260c083015160c0820152612c5160e08401612bb8565b60e0820152610100612c64818501612bb8565b90820152610120612c76848201612afa565b90820152610140612c88848201612afa565b90820152610160838101519082015261018080840151908201526101a0612cb0818501612bc3565b908201526101c0612cc2848201612bc3565b908201526101e0612cd4848201612bc3565b90820152610200612ce6848201612bc3565b90820152610220612cf8848201612b22565b90820152610240612d0a848201612b22565b90820152610260612d1c848201612b8e565b908201529392505050565b60008219821115612d3a57612d3a612a8d565b500190565b87815286602082015285604082015284606082015260e060808201526000612d6a60e08301866126ed565b82810360a0840152845181526020850151602082015260408501516040820152606085015160018060a01b0380821660608401526080870151915060a06080840152612db960a08401836126c1565b935080861660c086015250505098975050505050505050565b600082821015612de457612de4612a8d565b500390565b60018060a01b0385168152836020820152826040820152608060608201526000612e1660808301846126c1565b9695505050505050565b60008251612e32818460208701612695565b9190910192915050565b60208152600061065c60208301846126c156fea264697066735822122025df33afa309d720e9cb8c67ecb317f86642fce1518893fdc0612be0ab528dae64736f6c634300080a0033",
  "deployedBytecode": "0x60806040526004361061014f5760003560e01c80638456cb59116100b6578063a3d5b2551161006f578063a3d5b255146104bb578063a7b8b8f5146104db578063aa99fa9814610511578063ade97ab51461053e578063dd6d195414610572578063febcc680146105a85761019a565b80638456cb59146103e057806384e5cec5146103f55780638bf1badd146104155780638dc876601461043557806396e596821461047b578063a2b8fe871461049b5761019a565b8063371fd8e611610108578063371fd8e6146103195780633f4ba83a146103395780635c622a0e1461034e5780635c975abb1461037b578063622fe39f146103935780636b52b365146103c05761019a565b80630647ee20146101e257806319ef8c33146102175780631c18749514610245578063227c73081461026557806329c55f06146102ab5780632f844ea8146102f75761019a565b3661019a5760405162461bcd60e51b8152602060048201526016602482015275109357d49150d152559157d393d517d0531313d5d15160521b60448201526064015b60405180910390fd5b60405162461bcd60e51b815260206004820152601760248201527f424d5f46414c4c4241434b5f4e4f545f414c4c4f5745440000000000000000006044820152606401610191565b3480156101ee57600080fd5b506102026101fd366004611f45565b610610565b60405190151581526020015b60405180910390f35b34801561022357600080fd5b5061023761023236600461225a565b610665565b60405190815260200161020e565b34801561025157600080fd5b506102376102603660046122d2565b6107a7565b34801561027157600080fd5b506102376102803660046122eb565b6001600160a01b03918216600090815260096020908152604080832093909416825291909152205490565b3480156102b757600080fd5b506102df7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161020e565b34801561030357600080fd5b50610317610312366004612324565b61082c565b005b34801561032557600080fd5b506103176103343660046122d2565b610971565b34801561034557600080fd5b50610317610c66565b34801561035a57600080fd5b5061036e6103693660046122d2565b610d8b565b60405161020e91906123c3565b34801561038757600080fd5b5060005460ff16610202565b34801561039f57600080fd5b506103b36103ae3660046122d2565b610e10565b60405161020e91906123d1565b3480156103cc57600080fd5b506102376103db3660046122d2565b610f3c565b3480156103ec57600080fd5b50610317610f80565b34801561040157600080fd5b506103176104103660046122d2565b6110a2565b34801561042157600080fd5b506103176104303660046122d2565b61118a565b34801561044157600080fd5b506102376104503660046122eb565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205490565b34801561048757600080fd5b506102376104963660046122d2565b611445565b3480156104a757600080fd5b506102376104b6366004612532565b611489565b3480156104c757600080fd5b506103176104d63660046125c6565b6115d2565b3480156104e757600080fd5b506102376104f6366004612607565b6001600160a01b031660009081526007602052604090205490565b34801561051d57600080fd5b5061023761052c366004612607565b60026020526000908152604090205481565b34801561054a57600080fd5b506102df7f000000000000000000000000000000000000000000000000000000000000000081565b34801561057e57600080fd5b5061023761058d366004612607565b6001600160a01b031660009081526006602052604090205490565b3480156105b457600080fd5b506105f36105c3366004611f45565b600360209081526000928352604080842090915290825290208054600182015460029092015460ff909116919083565b60408051931515845260208401929092529082015260600161020e565b6001600160a01b038216600090815260036020908152604080832084845290915281205460ff1615801561065c57506001600160a01b0383166000908152600260205260409020548210155b90505b92915050565b6000805460ff16156106895760405162461bcd60e51b815260040161019190612624565b600260015414156106ac5760405162461bcd60e51b81526004016101919061264e565b60026001819055506106cb8660c0015133886101800151886001611706565b60408051608081018252868152602081018690526001600160a01b038516818301528315156060820152905163ef52b43b60e01b815273__$d034307112fbb42c17024cd888eeadb556$__9163ef52b43b91610758916003916002916005916004918e917f000000000000000000000000000000000000000000000000000000000000000090840161285e565b602060405180830381865af4158015610775573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079991906128d7565b600180559695505050505050565b600081815260056020526040808220905163b504989b60e01b815273__$99340bd5a7874738aefb18e7cdd0ba78ce$__9163b504989b916107eb91906004016128f0565b602060405180830381865af4158015610808573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065f91906128d7565b806108795760405162461bcd60e51b815260206004820152601960248201527f424d5f43414e43454c5f43414e4e4f545f42455f454d505459000000000000006044820152606401610191565b60005b8181101561092957336000908152600260205260409020548383838181106108a6576108a6612a35565b9050602002013510156108cb5760405162461bcd60e51b815260040161019190612a4b565b3360009081526003602052604081206001918585858181106108ef576108ef612a35565b60209081029290920135835250810191909152604001600020805460ff19169115159190911790558061092181612aa3565b91505061087c565b50336001600160a01b03167fac0004ba1a2ea62c1d6de00ade33246fa25432a7148f9e20cce8d9fea7493aa18383604051610965929190612abe565b60405180910390a25050565b600260015414156109945760405162461bcd60e51b81526004016101919061264e565b60026001556000818152600560205260409020600601548190158015906109d157506000818152600560205260409020546001600160a01b031615155b610a185760405162461bcd60e51b8152602060048201526018602482015277424d5f434845434b5f4c4f414e5f4e4f545f45584953545360401b6044820152606401610191565b600082815260056020818152604080842081516102808101835281546001600160a01b0390811682526001830154948201949094526002820154928101929092526003808201548416606084015260048201548416608084015293810154831660a0830152600681015460c083015260078101546001600160801b0380821660e0850152600160801b90910416610100830152600881015483166101208301526009810154909216610140820152600a820154610160820152600b820154610180820152600c82015464ffffffffff8082166101a084015265010000000000820481166101c0840152600160501b820481166101e0840152600160781b82041661020083015260ff600160a01b820481161515610220840152600160a81b8204811615156102408401529193610260850192600160b01b90920490911690811115610b6557610b65612399565b6003811115610b7657610b76612399565b815250509050610b9b81608001518260a001518361012001518460c001516000611706565b6040516306d8c6df60e01b815260056004820152602481018490526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660448301527f000000000000000000000000000000000000000000000000000000000000000016606482015273__$cb2d98c3e8fdb912f01fe366012ef33d45$__906306d8c6df906084015b60006040518083038186803b158015610c4557600080fd5b505af4158015610c59573d6000803e3d6000fd5b5050600180555050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cea9190612b05565b90506001600160a01b038116632500f2b6336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610d40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d649190612b2d565b610d805760405162461bcd60e51b815260040161019190612b4a565b610d88611918565b50565b6000818152600560205260408082209051631057df9160e21b815273__$99340bd5a7874738aefb18e7cdd0ba78ce$__9163415f7e4491610dcf91906004016128f0565b602060405180830381865af4158015610dec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065f9190612b9d565b610eb56040805161028081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081018290526101c081018290526101e081018290526102008101829052610220810182905261024081018290529061026082015290565b6000828152600560205260409081902090516319e28c3360e21b815273__$99340bd5a7874738aefb18e7cdd0ba78ce$__9163678a30cc91610efa91906004016128f0565b61028060405180830381865af4158015610f18573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065f9190612bce565b600081815260056020526040808220905163ab51865d60e01b815273__$99340bd5a7874738aefb18e7cdd0ba78ce$__9163ab51865d916107eb91906004016128f0565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fe0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110049190612b05565b90506001600160a01b038116632500f2b6336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561105a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107e9190612b2d565b61109a5760405162461bcd60e51b815260040161019190612b4a565b610d886119ab565b3360009081526002602052604090205481116110d05760405162461bcd60e51b815260040161019190612a4b565b336000908152600260205260409020546110ed906207a120612d27565b811061113b5760405162461bcd60e51b815260206004820152601c60248201527f424d5f43414e43454c5f43414e4e4f545f43414e43454c5f4d4f5245000000006044820152606401610191565b3360008181526002602052604090819020839055517f3472ca53ce86826d0cf2457fc20b0aadb9ff559e29da4c38e37e98fb8edd966d9061117f9084815260200190565b60405180910390a250565b60005460ff16156111ad5760405162461bcd60e51b815260040161019190612624565b600260015414156111d05760405162461bcd60e51b81526004016101919061264e565b600260015560008181526005602052604090206006015481901580159061120d57506000818152600560205260409020546001600160a01b031615155b6112545760405162461bcd60e51b8152602060048201526018602482015277424d5f434845434b5f4c4f414e5f4e4f545f45584953545360401b6044820152606401610191565b600082815260056020818152604080842081516102808101835281546001600160a01b0390811682526001830154948201949094526002820154928101929092526003808201548416606084015260048201548416608084015293810154831660a0830152600681015460c083015260078101546001600160801b0380821660e0850152600160801b90910416610100830152600881015483166101208301526009810154909216610140820152600a820154610160820152600b820154610180820152600c82015464ffffffffff8082166101a084015265010000000000820481166101c0840152600160501b820481166101e0840152600160781b82041661020083015260ff600160a01b820481161515610220840152600160a81b8204811615156102408401529193610260850192600160b01b909204909116908111156113a1576113a1612399565b60038111156113b2576113b2612399565b8152505090506113d781608001518260a001518361012001518460c001516000611706565b604051635430170f60e11b815260056004820152602481018490526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016604482015273__$6adc9fc567591ef512536f539e32424d55$__9063a8602e1e90606401610c2d565b6000818152600560205260408082209051634560096360e11b815273__$99340bd5a7874738aefb18e7cdd0ba78ce$__91638ac012c6916107eb91906004016128f0565b6000805460ff16156114ad5760405162461bcd60e51b815260040161019190612624565b600260015414156114d05760405162461bcd60e51b81526004016101919061264e565b60026001819055506114ef338860c00151896101800151886001611706565b6040805160a081018252868152602081018690528082018890526001600160a01b038516606082015260808101849052905163d28ce47360e01b815273__$f2bbf53d856d978c1f5e4330933069481a$__9163d28ce47391611582916003916002916005916004918f917f0000000000000000000000000000000000000000000000000000000000000000908401612d3f565b602060405180830381865af415801561159f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c391906128d7565b60018055979650505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015611632573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116569190612b05565b90506001600160a01b038116632500f2b6336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156116ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d09190612b2d565b6116ec5760405162461bcd60e51b815260040161019190612b4a565b6117006001600160a01b0385168484611a03565b50505050565b611711858585611a5a565b8061173f576001600160a01b03831660009081526006602052604090205461173a908390612dd2565b611763565b6001600160a01b038316600090815260066020526040902054611763908390612d27565b6001600160a01b038416600090815260066020526040902055806117b7576001600160a01b038084166000908152600860209081526040808320938916835292905220546117b2908390612dd2565b6117e8565b6001600160a01b038084166000908152600860209081526040808320938916835292905220546117e8908390612d27565b6001600160a01b038085166000908152600860209081526040808320938a16835292905220558061183c576001600160a01b038316600090815260076020526040902054611837908390612dd2565b611860565b6001600160a01b038316600090815260076020526040902054611860908390612d27565b6001600160a01b038416600090815260076020526040902055806118b4576001600160a01b038084166000908152600960209081526040808320938816835292905220546118af908390612dd2565b6118e5565b6001600160a01b038084166000908152600960209081526040808320938816835292905220546118e5908390612d27565b6001600160a01b039384166000908152600960209081526040808320979096168252959095529290932091909155505050565b60005460ff166119615760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610191565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60005460ff16156119ce5760405162461bcd60e51b815260040161019190612624565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861198e3390565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611a55908490611cd4565b505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b75e7d316040518163ffffffff1660e01b8152600401602060405180830381865afa158015611aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ade9190612b05565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663efbe23376040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b649190612b05565b90506001600160a01b03811615611c18576001600160a01b0383811660008181526008602090815260408083208a861684528252808320546006835292819020548151808401959095528151808603909301835284820191829052639ab99ddf60e01b90915293851693639ab99ddf93611be5938b93909291604401612de9565b600060405180830381600087803b158015611bff57600080fd5b505af1158015611c13573d6000803e3d6000fd5b505050505b6001600160a01b03821615611ccd576001600160a01b03838116600081815260096020908152604080832089861684528252808320548484526007835292819020548151808401959095528151808603909301835284820191829052639ab99ddf60e01b90915293861693639ab99ddf93611c9a938a93909291604401612de9565b600060405180830381600087803b158015611cb457600080fd5b505af1158015611cc8573d6000803e3d6000fd5b505050505b5050505050565b6000611d29826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611da69092919063ffffffff16565b805190915015611a555780806020019051810190611d479190612b2d565b611a555760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610191565b6060611db58484600085611dbf565b90505b9392505050565b606082471015611e205760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610191565b843b611e6e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610191565b600080866001600160a01b03168587604051611e8a9190612e20565b60006040518083038185875af1925050503d8060008114611ec7576040519150601f19603f3d011682016040523d82523d6000602084013e611ecc565b606091505b5091509150611edc828286611ee7565b979650505050505050565b60608315611ef6575081611db8565b825115611f065782518084602001fd5b8160405162461bcd60e51b81526004016101919190612e3c565b6001600160a01b0381168114610d8857600080fd5b8035611f4081611f20565b919050565b60008060408385031215611f5857600080fd5b8235611f6381611f20565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6040516102c0810167ffffffffffffffff81118282101715611fab57611fab611f71565b60405290565b604051610280810167ffffffffffffffff81118282101715611fab57611fab611f71565b8015158114610d8857600080fd5b8035611f4081611fd5565b803560028110611f4057600080fd5b64ffffffffff81168114610d8857600080fd5b8035611f4081611ffd565b6001600160801b0381168114610d8857600080fd5b8035611f408161201b565b600082601f83011261204c57600080fd5b813567ffffffffffffffff8082111561206757612067611f71565b604051601f8301601f19908116603f0116810190828211818310171561208f5761208f611f71565b816040528381528660208588010111156120a857600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff81168114611f4057600080fd5b60006102c082840312156120ec57600080fd5b6120f4611f87565b90506120ff82611fe3565b815261210d60208301611fe3565b602082015261211e60408301611fee565b604082015261212f60608301611f35565b60608201526080820135608082015260a082013560a082015261215460c08301611f35565b60c082015260e082013560e082015261010080830135818301525061012061217d818401612010565b9082015261014061218f838201612010565b908201526101606121a1838201612030565b908201526101806121b3838201611f35565b908201526101a06121c5838201611f35565b908201526101c082810135908201526101e0808301359082015261020080830135908201526102206121f8818401611f35565b908201526102408281013567ffffffffffffffff81111561221857600080fd5b6122248582860161203b565b8284015250506102606122388184016120c8565b9082015261028082810135908201526102a09182013591810191909152919050565b600080600080600060a0868803121561227257600080fd5b853567ffffffffffffffff81111561228957600080fd5b612295888289016120d9565b955050602086013593506040860135925060608601356122b481611f20565b915060808601356122c481611fd5565b809150509295509295909350565b6000602082840312156122e457600080fd5b5035919050565b600080604083850312156122fe57600080fd5b823561230981611f20565b9150602083013561231981611f20565b809150509250929050565b6000806020838503121561233757600080fd5b823567ffffffffffffffff8082111561234f57600080fd5b818501915085601f83011261236357600080fd5b81358181111561237257600080fd5b8660208260051b850101111561238757600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052602160045260246000fd5b600481106123bf576123bf612399565b9052565b6020810161065f82846123af565b81516001600160a01b0316815261028081016020830151602083015260408301516040830152606083015161241160608401826001600160a01b03169052565b50608083015161242c60808401826001600160a01b03169052565b5060a083015161244760a08401826001600160a01b03169052565b5060c083015160c083015260e083015161246c60e08401826001600160801b03169052565b50610100838101516001600160801b031690830152610120808401516001600160a01b03908116918401919091526101408085015190911690830152610160808401519083015261018080840151908301526101a08084015164ffffffffff908116918401919091526101c0808501518216908401526101e080850151821690840152610200808501519091169083015261022080840151151590830152610240808401511515908301526102608084015161252a828501826123af565b505092915050565b60008060008060008060c0878903121561254b57600080fd5b863567ffffffffffffffff8082111561256357600080fd5b61256f8a838b016120d9565b97506020890135965060408901359550606089013594506080890135915061259682611f20565b90925060a088013590808211156125ac57600080fd5b506125b989828a0161203b565b9150509295509295509295565b6000806000606084860312156125db57600080fd5b83356125e681611f20565b925060208401356125f681611f20565b929592945050506040919091013590565b60006020828403121561261957600080fd5b8135611db881611f20565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600281106123bf576123bf612399565b60005b838110156126b0578181015183820152602001612698565b838111156117005750506000910152565b600081518084526126d9816020860160208601612695565b601f01601f19169290920160200192915050565b80511515825260006102c0602083015161270b602086018215159052565b50604083015161271e6040860182612685565b50606083015161273960608601826001600160a01b03169052565b506080830151608085015260a083015160a085015260c083015161276860c08601826001600160a01b03169052565b5060e0838101519085015261010080840151908501526101208084015164ffffffffff908116918601919091526101408085015190911690850152610160808401516001600160801b031690850152610180808401516001600160a01b03908116918601919091526101a0808501518216908601526101c080850151908601526101e080850151908601526102008085015190860152610220808501519091169085015261024080840151818601839052612825838701826126c1565b925050506102608084015161283e8287018260ff169052565b505061028083810151908501526102a09283015192909301919091525090565b600061014089835288602084015287604084015286606084015280608084015261288a818401876126ed565b855160a0850152602086015160c085015260408601516001600160a01b0390811660e086015260609096015115156101008501529390941661012090920191909152509695505050505050565b6000602082840312156128e957600080fd5b5051919050565b81546001600160a01b031681526102808101600183015460208301526002830154604083015260038301546001600160a01b039081166060840152600484015481166080808501919091526005850154821660a0850152600685015460c085015260078501546001600160801b03811660e0860152901c61010084015260088401548116610120840152600984015416610140830152600a830154610160830152600b830154610180830152600c83015464ffffffffff8082166101a0850152602882901c81166101c08501526129d66101e08501828460501c1664ffffffffff169052565b6129ef6102008501828460781c1664ffffffffff169052565b50612a05610220840160ff8360a01c1615159052565b612a1a610240840160ff8360a81c1615159052565b612a2e610260840160ff8360b01c166123af565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60208082526022908201527f424d5f43414e43454c5f4e4f4e43455f4c4f5745525f5448414e5f4355525245604082015261139560f21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612ab757612ab7612a8d565b5060010190565b6020808252810182905260006001600160fb1b03831115612ade57600080fd5b8260051b80856040850137600092016040019182525092915050565b8051611f4081611f20565b600060208284031215612b1757600080fd5b8151611db881611f20565b8051611f4081611fd5565b600060208284031215612b3f57600080fd5b8151611db881611fd5565b60208082526024908201527f424d5f41434c5f4f4e4c595f454d455247454e43595f41444d494e5f43414e5f60408201526310d0531360e21b606082015260800190565b805160048110611f4057600080fd5b600060208284031215612baf57600080fd5b61065c82612b8e565b8051611f408161201b565b8051611f4081611ffd565b60006102808284031215612be157600080fd5b612be9611fb1565b612bf283612afa565b81526020830151602082015260408301516040820152612c1460608401612afa565b6060820152612c2560808401612afa565b6080820152612c3660a08401612afa565b60a082015260c083015160c0820152612c5160e08401612bb8565b60e0820152610100612c64818501612bb8565b90820152610120612c76848201612afa565b90820152610140612c88848201612afa565b90820152610160838101519082015261018080840151908201526101a0612cb0818501612bc3565b908201526101c0612cc2848201612bc3565b908201526101e0612cd4848201612bc3565b90820152610200612ce6848201612bc3565b90820152610220612cf8848201612b22565b90820152610240612d0a848201612b22565b90820152610260612d1c848201612b8e565b908201529392505050565b60008219821115612d3a57612d3a612a8d565b500190565b87815286602082015285604082015284606082015260e060808201526000612d6a60e08301866126ed565b82810360a0840152845181526020850151602082015260408501516040820152606085015160018060a01b0380821660608401526080870151915060a06080840152612db960a08401836126c1565b935080861660c086015250505098975050505050505050565b600082821015612de457612de4612a8d565b500390565b60018060a01b0385168152836020820152826040820152608060608201526000612e1660808301846126c1565b9695505050505050565b60008251612e32818460208701612695565b9190910192915050565b60208152600061065c60208301846126c156fea264697066735822122025df33afa309d720e9cb8c67ecb317f86642fce1518893fdc0612be0ab528dae64736f6c634300080a0033",
  "libraries": {
    "BespokeTypes": "0x473482d4940F9075B8E3C42ccE22B71eA74D0d2A",
    "BespokeLogic": "0xeEFCf47FD6384b3Ae4E65bBA3Bd6BfAd8a7dfd32",
    "TakeLendOfferLogic": "0x7E4F725Ae544b816F913FAfCF9e16A69f8DAA2FF",
    "TakeBorrowOfferLogic": "0xebBC12b39165DFCCeA69BA1a4d5FCd86F3a32DBf",
    "ForecloseLogic": "0x1d9393B167ec445730745d8dadF38419D891413e",
    "RepayLogic": "0x7beB1db41Bb8f518BA972db1D1B11BfE0f57DE57"
  },
  "devdoc": {
    "author": "OpenSky Labs",
    "kind": "dev",
    "methods": {
      "cancelAllBorrowOffersForSender(uint256)": {
        "params": {
          "minNonce_": "minimum user nonce"
        }
      },
      "cancelMultipleBorrowOffers(uint256[])": {
        "params": {
          "offerNonces": "array of borrowOffer nonces"
        }
      },
      "emergencyTokenTransfer(address,address,uint256)": {
        "details": "transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due direct transfers to the contract address.",
        "params": {
          "amount": "amount to send",
          "to": "recipient of the transfer",
          "token": "token to transfer"
        }
      },
      "pause()": {
        "details": "Pause pool for emergency case, can only be called by emergency admin."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "unpause()": {
        "details": "Unpause pool for emergency case, can only be called by emergency admin."
      }
    },
    "title": "OpenSkyBespokeMarket contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cancelAllBorrowOffersForSender(uint256)": {
        "notice": "Cancel all pending offers for a sender"
      },
      "foreclose(uint256)": {
        "notice": "anyone can trigger but only OpenSkyLendNFT owner can receive collaterial"
      },
      "repay(uint256)": {
        "notice": "Anyone can repay but only OpenSkyBorrowNFT owner receive collaterialOnly OpenSkyLendNFT owner can recieve the paymentThis function is not pausable for safety"
      },
      "takeBorrowOffer((bool,bool,uint8,address,uint256,uint256,address,uint256,uint256,uint40,uint40,uint128,address,address,uint256,uint256,uint256,address,bytes,uint8,bytes32,bytes32),uint256,uint256,address,bool)": {
        "notice": "take an borrowing offer using ERC20 include ERC20"
      }
    },
    "notice": "Main point of interaction with OpenSky protocol's bespoke market - Users can:   # takeBorrowOffer   # takeLendOffer   # repay   # foreclose*",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1294,
        "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1379,
        "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 13147,
        "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
        "label": "minNonce",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13154,
        "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
        "label": "_nonce",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(NonceInfo)16621_storage))"
      },
      {
        "astId": 13157,
        "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
        "label": "_loanIdTracker",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Counter)16614_storage"
      },
      {
        "astId": 13162,
        "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
        "label": "_loans",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(LoanData)16567_storage)"
      },
      {
        "astId": 13166,
        "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
        "label": "_totalBorrow",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13170,
        "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
        "label": "_totalLend",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13176,
        "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
        "label": "_userBorrow",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 13182,
        "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
        "label": "_userLend",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(LoanStatus)16602": {
        "encoding": "inplace",
        "label": "enum BespokeTypes.LoanStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(NonceInfo)16621_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct BespokeTypes.NonceInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(NonceInfo)16621_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(LoanData)16567_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BespokeTypes.LoanData)",
        "numberOfBytes": "32",
        "value": "t_struct(LoanData)16567_storage"
      },
      "t_mapping(t_uint256,t_struct(NonceInfo)16621_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BespokeTypes.NonceInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(NonceInfo)16621_storage"
      },
      "t_struct(Counter)16614_storage": {
        "encoding": "inplace",
        "label": "struct BespokeTypes.Counter",
        "members": [
          {
            "astId": 16613,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(LoanData)16567_storage": {
        "encoding": "inplace",
        "label": "struct BespokeTypes.LoanData",
        "members": [
          {
            "astId": 16527,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 16529,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16531,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "tokenAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 16533,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "nftManager",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 16535,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "borrower",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 16537,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "lender",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 16539,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "amount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 16541,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "borrowRate",
            "offset": 0,
            "slot": "7",
            "type": "t_uint128"
          },
          {
            "astId": 16543,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "interestPerSecond",
            "offset": 16,
            "slot": "7",
            "type": "t_uint128"
          },
          {
            "astId": 16545,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "currency",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 16547,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "lendAsset",
            "offset": 0,
            "slot": "9",
            "type": "t_address"
          },
          {
            "astId": 16549,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "reserveFactor",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 16551,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "overdueLoanFeeFactor",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 16553,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "borrowDuration",
            "offset": 0,
            "slot": "12",
            "type": "t_uint40"
          },
          {
            "astId": 16555,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "borrowBegin",
            "offset": 5,
            "slot": "12",
            "type": "t_uint40"
          },
          {
            "astId": 16557,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "borrowOverdueTime",
            "offset": 10,
            "slot": "12",
            "type": "t_uint40"
          },
          {
            "astId": 16559,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "liquidatableTime",
            "offset": 15,
            "slot": "12",
            "type": "t_uint40"
          },
          {
            "astId": 16561,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "isProrated",
            "offset": 20,
            "slot": "12",
            "type": "t_bool"
          },
          {
            "astId": 16563,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "autoConvertWhenRepay",
            "offset": 21,
            "slot": "12",
            "type": "t_bool"
          },
          {
            "astId": 16566,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "status",
            "offset": 22,
            "slot": "12",
            "type": "t_enum(LoanStatus)16602"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(NonceInfo)16621_storage": {
        "encoding": "inplace",
        "label": "struct BespokeTypes.NonceInfo",
        "members": [
          {
            "astId": 16616,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "invalid",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 16618,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "usedTimes",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16620,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "offerHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      }
    }
  }
}