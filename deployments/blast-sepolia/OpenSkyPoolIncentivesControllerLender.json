{
  "address": "0x739A55dd48Db5B26910BC3840c28fc4D06f7F67A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "emissionManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "emission",
          "type": "uint256"
        }
      ],
      "name": "AssetConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "AssetIndexUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        }
      ],
      "name": "ClaimerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDistributionEnd",
          "type": "uint256"
        }
      ],
      "name": "DistributionEndUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsAccrued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "RewardsVaultUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "UserIndexUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DISTRIBUTION_END",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EMISSION_MANAGER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REVISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assets",
      "outputs": [
        {
          "internalType": "uint104",
          "name": "emissionPerSecond",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "index",
          "type": "uint104"
        },
        {
          "internalType": "uint40",
          "name": "lastUpdateTimestamp",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claimRewardsOnBehalf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimRewardsToSelf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "emissionsPerSecond",
          "type": "uint256[]"
        }
      ],
      "name": "configureAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getAssetData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getClaimer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDistributionEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getRewardsBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardsVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getUserAssetData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserUnclaimedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userBalance",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "handleAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardsVault",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "setClaimer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "distributionEnd",
          "type": "uint256"
        }
      ],
      "name": "setDistributionEnd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardsVault",
          "type": "address"
        }
      ],
      "name": "setRewardsVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa9ec7a3005650cf1b749765082ddafcd95af95f778b0d1e0b8805ba24e8069bf",
  "receipt": {
    "to": null,
    "from": "0x218513C58A4781a5B88De6230caA29aBCe2Ccd75",
    "contractAddress": "0x739A55dd48Db5B26910BC3840c28fc4D06f7F67A",
    "transactionIndex": 3,
    "gasUsed": "1789494",
    "logsBloom": "0x
    "blockHash": "0xac8c8fc0a57c09aad1d27e7f939b53d034f362ffb4810ffc6470aa5b1cd96f02",
    "transactionHash": "0xa9ec7a3005650cf1b749765082ddafcd95af95f778b0d1e0b8805ba24e8069bf",
    "logs": [],
    "blockNumber": 2569503,
    "cumulativeGasUsed": "2174886",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb47c287eB1d8D9675eB456934FC0A1F557A1f657",
    "0x218513C58A4781a5B88De6230caA29aBCe2Ccd75"
  ],
  "solcInputHash": "9b4eb64291b836b34a0d4d73e41b5cea",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"emissionManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emission\",\"type\":\"uint256\"}],\"name\":\"AssetConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"AssetIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"ClaimerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDistributionEnd\",\"type\":\"uint256\"}],\"name\":\"DistributionEndUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsAccrued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"RewardsVaultUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"UserIndexUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DISTRIBUTION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMISSION_MANAGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"emissionPerSecond\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"index\",\"type\":\"uint104\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimRewardsOnBehalf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimRewardsToSelf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"emissionsPerSecond\",\"type\":\"uint256[]\"}],\"name\":\"configureAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getClaimer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributionEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getRewardsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getUserAssetData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserUnclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBalance\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"handleAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardsVault\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"setClaimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"distributionEnd\",\"type\":\"uint256\"}],\"name\":\"setDistributionEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardsVault\",\"type\":\"address\"}],\"name\":\"setRewardsVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"DISTRIBUTION_END()\":{\"details\":\"for backwards compatibility with the previous DistributionManager used\",\"returns\":{\"_0\":\"The end of the distribution*\"}},\"claimRewards(address[],uint256,address)\":{\"details\":\"Claims reward for an user to the desired address, on all the assets of the lending pool, accumulating the pending rewards\",\"params\":{\"amount\":\"Amount of rewards to claim\",\"to\":\"Address that will be receiving the rewards\"},\"returns\":{\"_0\":\"Rewards claimed*\"}},\"claimRewardsOnBehalf(address[],uint256,address,address)\":{\"details\":\"Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\",\"params\":{\"amount\":\"Amount of rewards to claim\",\"to\":\"Address that will be receiving the rewards\",\"user\":\"Address to check and claim rewards\"},\"returns\":{\"_0\":\"Rewards claimed*\"}},\"claimRewardsToSelf(address[],uint256)\":{\"details\":\"Claims reward for msg.sender, on all the assets of the lending pool, accumulating the pending rewards\",\"params\":{\"amount\":\"Amount of rewards to claim\"},\"returns\":{\"_0\":\"Rewards claimed*\"}},\"configureAssets(address[],uint256[])\":{\"details\":\"Configure assets for a certain rewards emission\",\"params\":{\"assets\":\"The assets to incentivize\",\"emissionsPerSecond\":\"The emission for each asset\"}},\"getAssetData(address)\":{\"details\":\"Returns the configuration of the distribution for a certain asset\",\"params\":{\"asset\":\"The address of the reference asset of the distribution\"},\"returns\":{\"_0\":\"The asset index, the emission per second and the last updated timestamp*\"}},\"getClaimer(address)\":{\"details\":\"Returns the whitelisted claimer for a certain address (0x0 if not set)\",\"params\":{\"user\":\"The address of the user\"},\"returns\":{\"_0\":\"The claimer address\"}},\"getDistributionEnd()\":{\"details\":\"Gets the end date for the distribution\",\"returns\":{\"_0\":\"The end of the distribution*\"}},\"getRewardsBalance(address[],address)\":{\"details\":\"Returns the total of rewards of an user, already accrued + not yet accrued\",\"params\":{\"user\":\"The address of the user\"},\"returns\":{\"_0\":\"The rewards*\"}},\"getRewardsVault()\":{\"details\":\"returns the current rewards vault contract\",\"returns\":{\"_0\":\"address\"}},\"getUserAssetData(address,address)\":{\"details\":\"Returns the data of an user on a distribution\",\"params\":{\"asset\":\"The address of the reference asset of the distribution\",\"user\":\"Address of the user\"},\"returns\":{\"_0\":\"The new index*\"}},\"getUserUnclaimedRewards(address)\":{\"details\":\"returns the unclaimed rewards of the user\",\"params\":{\"user\":\"the address of the user\"},\"returns\":{\"_0\":\"the unclaimed user rewards\"}},\"initialize(address)\":{\"details\":\"Initialize AaveIncentivesController\",\"params\":{\"rewardsVault\":\"rewards vault to pull ERC20 funds*\"}},\"setClaimer(address,address)\":{\"details\":\"Whitelists an address to claim the rewards on behalf of another address\",\"params\":{\"claimer\":\"The address of the claimer\",\"user\":\"The address of the user\"}},\"setDistributionEnd(uint256)\":{\"details\":\"Sets the end date for the distribution\",\"params\":{\"distributionEnd\":\"The end date timestamp*\"}},\"setRewardsVault(address)\":{\"details\":\"update the rewards vault address, only allowed by the Rewards admin\",\"params\":{\"rewardsVault\":\"The address of the rewards vault*\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/incentives/OpenSkyPoolIncentivesControllerLender.sol\":\"OpenSkyPoolIncentivesControllerLender\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/incentives/OpenSkyPoolIncentivesControllerLender.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from './interfaces/IERC20.sol';\\nimport {SafeERC20} from './lib/SafeERC20.sol';\\nimport {SafeMath} from './lib/SafeMath.sol';\\n\\nimport {BaseIncentivesController} from './base/BaseIncentivesController.sol';\\nimport {IScaledBalanceToken} from './interfaces/IScaledBalanceToken.sol';\\n\\n\\ncontract OpenSkyPoolIncentivesControllerLender is\\nBaseIncentivesController\\n{\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    address internal _rewardsVault;\\n    \\n    event RewardsVaultUpdated(address indexed vault);\\n\\n    constructor(IERC20 rewardToken, address emissionManager)\\n    BaseIncentivesController(rewardToken, emissionManager)\\n    {}\\n\\n    /**\\n     * @dev Initialize AaveIncentivesController\\n   * @param rewardsVault rewards vault to pull ERC20 funds\\n   **/\\n    function initialize(address rewardsVault) external initializer {\\n        require(rewardsVault != address(0));\\n        _rewardsVault = rewardsVault;\\n        emit RewardsVaultUpdated(_rewardsVault);\\n    }\\n\\n    /**\\n     * @dev returns the current rewards vault contract\\n   * @return address\\n   */\\n    function getRewardsVault() external view returns (address) {\\n        return _rewardsVault;\\n    }\\n\\n    /**\\n     * @dev update the rewards vault address, only allowed by the Rewards admin\\n   * @param rewardsVault The address of the rewards vault\\n   **/\\n    function setRewardsVault(address rewardsVault) external onlyEmissionManager {\\n        _rewardsVault = rewardsVault;\\n        emit RewardsVaultUpdated(rewardsVault);\\n    }\\n\\n    /// @inheritdoc BaseIncentivesController\\n    function _transferRewards(address to, uint256 amount) internal override {\\n        IERC20(REWARD_TOKEN).safeTransferFrom(_rewardsVault, to, amount);\\n    }\\n\\n    function _getUserBalanceAndSupply(address asset, address user) internal view override returns (uint256, uint256) {\\n        return IScaledBalanceToken(asset).getScaledUserBalanceAndSupply(user);\\n    }\\n\\n    function _getTotalSupply(address asset) internal view override returns (uint256){\\n        return IScaledBalanceToken(asset).scaledTotalSupply();\\n    }\\n\\n    function handleAction(\\n        address user,\\n        uint256 totalSupply,\\n        uint256 userBalance,\\n        bytes calldata params //ignore\\n    ) external override {\\n        uint256 accruedRewards = _updateUserAssetInternal(user, msg.sender, userBalance, totalSupply);\\n        if (accruedRewards != 0) {\\n            _usersUnclaimedRewards[user] = _usersUnclaimedRewards[user].add(accruedRewards);\\n            emit RewardsAccrued(user, accruedRewards);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x309718b58cd5a8f861a75e965a0b2cd80c85e520926c0ef29f4cfaee66abd6ce\",\"license\":\"agpl-3.0\"},\"contracts/incentives/base/BaseIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\nimport {SafeMath} from '../lib/SafeMath.sol';\\nimport {DistributionTypes} from '../lib/DistributionTypes.sol';\\nimport {VersionedInitializable} from '../utils/VersionedInitializable.sol';\\nimport {DistributionManager} from './DistributionManager.sol';\\nimport {IERC20} from '../interfaces/IERC20.sol';\\nimport {IAaveIncentivesController} from '../interfaces/IAaveIncentivesController.sol';\\n\\n/**\\n * @title BaseIncentivesController\\n * @notice Abstract contract template to build Distributors contracts for ERC20 rewards to protocol participants\\n * @author Aave\\n **/\\nabstract contract BaseIncentivesController is\\nIAaveIncentivesController,\\nVersionedInitializable,\\nDistributionManager\\n{\\n    using SafeMath for uint256;\\n\\n    uint256 public constant REVISION = 1;\\n\\n    address public immutable override REWARD_TOKEN;\\n\\n    mapping(address => uint256) internal _usersUnclaimedRewards;\\n\\n    // this mapping allows whitelisted addresses to claim on behalf of others\\n    // useful for contracts that hold tokens to be rewarded but don't have any native logic to claim Liquidity Mining rewards\\n    mapping(address => address) internal _authorizedClaimers;\\n\\n    modifier onlyAuthorizedClaimers(address claimer, address user) {\\n        require(_authorizedClaimers[user] == claimer, 'CLAIMER_UNAUTHORIZED');\\n        _;\\n    }\\n\\n    constructor(IERC20 rewardToken, address emissionManager)\\n    DistributionManager(emissionManager)\\n    {\\n        REWARD_TOKEN = address(rewardToken);\\n    }\\n\\n    /// @inheritdoc IAaveIncentivesController\\n    function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\\n    external\\n    override\\n    onlyEmissionManager\\n    {\\n        require(assets.length == emissionsPerSecond.length, 'INVALID_CONFIGURATION');\\n\\n        DistributionTypes.AssetConfigInput[] memory assetsConfig =\\n                    new DistributionTypes.AssetConfigInput[](assets.length);\\n\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            require(uint104(emissionsPerSecond[i]) == emissionsPerSecond[i], 'Index overflow at emissionsPerSecond');\\n            assetsConfig[i].underlyingAsset = assets[i];\\n            assetsConfig[i].emissionPerSecond = uint104(emissionsPerSecond[i]);\\n            assetsConfig[i].totalStaked = _getTotalSupply(assets[i]);\\n        }\\n        _configureAssets(assetsConfig);\\n    }\\n\\n    /// @inheritdoc IAaveIncentivesController\\n    function getRewardsBalance(address[] calldata assets, address user)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n    {\\n        uint256 unclaimedRewards = _usersUnclaimedRewards[user];\\n\\n        DistributionTypes.UserStakeInput[] memory userState =\\n                    new DistributionTypes.UserStakeInput[](assets.length);\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            userState[i].underlyingAsset = assets[i];\\n            (userState[i].stakedByUser, userState[i].totalStaked) = _getUserBalanceAndSupply(assets[i], user);\\n        }\\n        unclaimedRewards = unclaimedRewards.add(_getUnclaimedRewards(user, userState));\\n        return unclaimedRewards;\\n    }\\n\\n    /// @inheritdoc IAaveIncentivesController\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external override returns (uint256) {\\n        require(to != address(0), 'INVALID_TO_ADDRESS');\\n        return _claimRewards(assets, amount, msg.sender, msg.sender, to);\\n    }\\n\\n    /// @inheritdoc IAaveIncentivesController\\n    function claimRewardsOnBehalf(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address user,\\n        address to\\n    ) external override onlyAuthorizedClaimers(msg.sender, user) returns (uint256) {\\n        require(user != address(0), 'INVALID_USER_ADDRESS');\\n        require(to != address(0), 'INVALID_TO_ADDRESS');\\n        return _claimRewards(assets, amount, msg.sender, user, to);\\n    }\\n\\n    /// @inheritdoc IAaveIncentivesController\\n    function claimRewardsToSelf(address[] calldata assets, uint256 amount)\\n    external\\n    override\\n    returns (uint256)\\n    {\\n        return _claimRewards(assets, amount, msg.sender, msg.sender, msg.sender);\\n    }\\n\\n    /// @inheritdoc IAaveIncentivesController\\n    function setClaimer(address user, address caller) external override onlyEmissionManager {\\n        _authorizedClaimers[user] = caller;\\n        emit ClaimerSet(user, caller);\\n    }\\n\\n    /// @inheritdoc IAaveIncentivesController\\n    function getClaimer(address user) external view override returns (address) {\\n        return _authorizedClaimers[user];\\n    }\\n\\n    /// @inheritdoc IAaveIncentivesController\\n    function getUserUnclaimedRewards(address _user) external view override returns (uint256) {\\n        return _usersUnclaimedRewards[_user];\\n    }\\n\\n    /**\\n     * @dev returns the revision of the implementation contract\\n   */\\n    function getRevision() internal pure override returns (uint256) {\\n        return REVISION;\\n    }\\n\\n    /**\\n     * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards.\\n   * @param amount Amount of rewards to claim\\n   * @param user Address to check and claim rewards\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n    function _claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address claimer,\\n        address user,\\n        address to\\n    ) internal returns (uint256) {\\n        if (amount == 0) {\\n            return 0;\\n        }\\n        uint256 unclaimedRewards = _usersUnclaimedRewards[user];\\n\\n        if (amount > unclaimedRewards) {\\n            DistributionTypes.UserStakeInput[] memory userState =\\n                        new DistributionTypes.UserStakeInput[](assets.length);\\n            for (uint256 i = 0; i < assets.length; i++) {\\n                userState[i].underlyingAsset = assets[i];\\n                (userState[i].stakedByUser, userState[i].totalStaked) = _getUserBalanceAndSupply(assets[i], user);\\n            }\\n\\n            uint256 accruedRewards = _claimRewards(user, userState);\\n            if (accruedRewards != 0) {\\n                unclaimedRewards = unclaimedRewards.add(accruedRewards);\\n                emit RewardsAccrued(user, accruedRewards);\\n            }\\n        }\\n\\n        if (unclaimedRewards == 0) {\\n            return 0;\\n        }\\n\\n        uint256 amountToClaim = amount > unclaimedRewards ? unclaimedRewards : amount;\\n        _usersUnclaimedRewards[user] = unclaimedRewards - amountToClaim; // Safe due to the previous line\\n\\n        _transferRewards(to, amountToClaim);\\n        emit RewardsClaimed(user, to, claimer, amountToClaim);\\n\\n        return amountToClaim;\\n    }\\n\\n    /**\\n     * @dev Abstract function to transfer rewards to the desired account\\n   * @param to Account address to send the rewards\\n   * @param amount Amount of rewards to transfer\\n   */\\n    function _transferRewards(address to, uint256 amount) internal virtual;\\n\\n    function _getUserBalanceAndSupply(address asset, address user) internal view virtual returns (uint256, uint256);\\n\\n    function _getTotalSupply(address asset) internal view virtual returns (uint256);\\n\\n    function handleAction(\\n        address user,\\n        uint256 totalSupply,\\n        uint256 userBalance,\\n        bytes calldata params\\n    ) external virtual;\\n}\\n\",\"keccak256\":\"0x7a3202ed21ab1da80d2cae5dcd6c16b10f221f05fb48f2820e4379a5b7bfdd97\",\"license\":\"agpl-3.0\"},\"contracts/incentives/base/DistributionManager.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\nimport {IAaveDistributionManager} from '../interfaces/IAaveDistributionManager.sol';\\nimport {SafeMath} from '../lib/SafeMath.sol';\\nimport {DistributionTypes} from '../lib/DistributionTypes.sol';\\n\\n/**\\n * @title DistributionManager\\n * @notice Accounting contract to manage multiple staking distributions\\n * @author Aave\\n **/\\ncontract DistributionManager is IAaveDistributionManager {\\n  using SafeMath for uint256;\\n\\n  struct AssetData {\\n    uint104 emissionPerSecond;\\n    uint104 index;\\n    uint40 lastUpdateTimestamp;\\n    mapping(address => uint256) users;\\n  }\\n\\n  address public immutable EMISSION_MANAGER;\\n\\n  uint8 public constant PRECISION = 18;\\n\\n  mapping(address => AssetData) public assets;\\n\\n  uint256 internal _distributionEnd;\\n\\n  modifier onlyEmissionManager() {\\n    require(msg.sender == EMISSION_MANAGER, 'ONLY_EMISSION_MANAGER');\\n    _;\\n  }\\n\\n  constructor(address emissionManager) {\\n    EMISSION_MANAGER = emissionManager;\\n  }\\n\\n  /// @inheritdoc IAaveDistributionManager\\n  function setDistributionEnd(uint256 distributionEnd) external override onlyEmissionManager {\\n    _distributionEnd = distributionEnd;\\n    emit DistributionEndUpdated(distributionEnd);\\n  }\\n\\n  /// @inheritdoc IAaveDistributionManager\\n  function getDistributionEnd() external view override returns (uint256) {\\n    return _distributionEnd;\\n  }\\n\\n  /// @inheritdoc IAaveDistributionManager\\n  function DISTRIBUTION_END() external view override returns (uint256) {\\n    return _distributionEnd;\\n  }\\n\\n  /// @inheritdoc IAaveDistributionManager\\n  function getUserAssetData(address user, address asset) public view override returns (uint256) {\\n    return assets[asset].users[user];\\n  }\\n\\n  /// @inheritdoc IAaveDistributionManager\\n  function getAssetData(address asset) public view override returns (uint256, uint256, uint256) {\\n    return (assets[asset].index, assets[asset].emissionPerSecond, assets[asset].lastUpdateTimestamp);\\n  }\\n\\n  /**\\n   * @dev Configure the assets for a specific emission\\n   * @param assetsConfigInput The array of each asset configuration\\n   **/\\n  function _configureAssets(DistributionTypes.AssetConfigInput[] memory assetsConfigInput)\\n    internal\\n  {\\n    for (uint256 i = 0; i < assetsConfigInput.length; i++) {\\n      AssetData storage assetConfig = assets[assetsConfigInput[i].underlyingAsset];\\n\\n      _updateAssetStateInternal(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetConfig,\\n        assetsConfigInput[i].totalStaked\\n      );\\n\\n      assetConfig.emissionPerSecond = assetsConfigInput[i].emissionPerSecond;\\n\\n      emit AssetConfigUpdated(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetsConfigInput[i].emissionPerSecond\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the state of one distribution, mainly rewards index and timestamp\\n   * @param asset The address of the asset being updated\\n   * @param assetConfig Storage pointer to the distribution's config\\n   * @param totalStaked Current total of staked assets for this distribution\\n   * @return The new distribution index\\n   **/\\n  function _updateAssetStateInternal(\\n    address asset,\\n    AssetData storage assetConfig,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    uint256 oldIndex = assetConfig.index;\\n    uint256 emissionPerSecond = assetConfig.emissionPerSecond;\\n    uint128 lastUpdateTimestamp = assetConfig.lastUpdateTimestamp;\\n\\n    if (block.timestamp == lastUpdateTimestamp) {\\n      return oldIndex;\\n    }\\n\\n    uint256 newIndex =\\n      _getAssetIndex(oldIndex, emissionPerSecond, lastUpdateTimestamp, totalStaked);\\n\\n    if (newIndex != oldIndex) {\\n      require(uint104(newIndex) == newIndex, 'Index overflow');\\n      //optimization: storing one after another saves one SSTORE\\n      assetConfig.index = uint104(newIndex);\\n      assetConfig.lastUpdateTimestamp = uint40(block.timestamp);\\n      emit AssetIndexUpdated(asset, newIndex);\\n    } else {\\n      assetConfig.lastUpdateTimestamp = uint40(block.timestamp);\\n    }\\n\\n    return newIndex;\\n  }\\n\\n  /**\\n   * @dev Updates the state of an user in a distribution\\n   * @param user The user's address\\n   * @param asset The address of the reference asset of the distribution\\n   * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\\n   * @param totalStaked Total tokens staked in the distribution\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _updateUserAssetInternal(\\n    address user,\\n    address asset,\\n    uint256 stakedByUser,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    AssetData storage assetData = assets[asset];\\n    uint256 userIndex = assetData.users[user];\\n    uint256 accruedRewards = 0;\\n\\n    uint256 newIndex = _updateAssetStateInternal(asset, assetData, totalStaked);\\n\\n    if (userIndex != newIndex) {\\n      if (stakedByUser != 0) {\\n        accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\\n      }\\n\\n      assetData.users[user] = newIndex;\\n      emit UserIndexUpdated(user, asset, newIndex);\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Used by \\\"frontend\\\" stake contracts to update the data of an user when claiming rewards from there\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _claimRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      accruedRewards = accruedRewards.add(\\n        _updateUserAssetInternal(\\n          user,\\n          stakes[i].underlyingAsset,\\n          stakes[i].stakedByUser,\\n          stakes[i].totalStaked\\n        )\\n      );\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Return the accrued rewards for an user over a list of distribution\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _getUnclaimedRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      AssetData storage assetConfig = assets[stakes[i].underlyingAsset];\\n      uint256 assetIndex =\\n        _getAssetIndex(\\n          assetConfig.index,\\n          assetConfig.emissionPerSecond,\\n          assetConfig.lastUpdateTimestamp,\\n          stakes[i].totalStaked\\n        );\\n\\n      accruedRewards = accruedRewards.add(\\n        _getRewards(stakes[i].stakedByUser, assetIndex, assetConfig.users[user])\\n      );\\n    }\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Internal function for the calculation of user's rewards on a distribution\\n   * @param principalUserBalance Amount staked by the user on a distribution\\n   * @param reserveIndex Current index of the distribution\\n   * @param userIndex Index stored for the user, representation his staking moment\\n   * @return The rewards\\n   **/\\n  function _getRewards(\\n    uint256 principalUserBalance,\\n    uint256 reserveIndex,\\n    uint256 userIndex\\n  ) internal pure returns (uint256) {\\n    return principalUserBalance.mul(reserveIndex.sub(userIndex)) / 10**uint256(PRECISION);\\n  }\\n\\n  /**\\n   * @dev Calculates the next value of an specific distribution index, with validations\\n   * @param currentIndex Current index of the distribution\\n   * @param emissionPerSecond Representing the total rewards distributed per second per asset unit, on the distribution\\n   * @param lastUpdateTimestamp Last moment this distribution was updated\\n   * @param totalBalance of tokens considered for the distribution\\n   * @return The new index.\\n   **/\\n  function _getAssetIndex(\\n    uint256 currentIndex,\\n    uint256 emissionPerSecond,\\n    uint128 lastUpdateTimestamp,\\n    uint256 totalBalance\\n  ) internal view returns (uint256) {\\n    uint256 distributionEnd = _distributionEnd;\\n    if (\\n      emissionPerSecond == 0 ||\\n      totalBalance == 0 ||\\n      lastUpdateTimestamp == block.timestamp ||\\n      lastUpdateTimestamp >= distributionEnd\\n    ) {\\n      return currentIndex;\\n    }\\n\\n    uint256 currentTimestamp =\\n      block.timestamp > distributionEnd ? distributionEnd : block.timestamp;\\n    uint256 timeDelta = currentTimestamp.sub(lastUpdateTimestamp);\\n    return\\n      emissionPerSecond.mul(timeDelta).mul(10**uint256(PRECISION)).div(totalBalance).add(\\n        currentIndex\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0x478bd598fd4f486dedd2219529a3a0bf3f713f1e140e16d91fd5ac6b467f8654\",\"license\":\"agpl-3.0\"},\"contracts/incentives/interfaces/IAaveDistributionManager.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\n\\nimport {DistributionTypes} from '../lib/DistributionTypes.sol';\\n\\ninterface IAaveDistributionManager {\\n  \\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\\n  event AssetIndexUpdated(address indexed asset, uint256 index);\\n  event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\\n  event DistributionEndUpdated(uint256 newDistributionEnd);\\n\\n  /**\\n  * @dev Sets the end date for the distribution\\n  * @param distributionEnd The end date timestamp\\n  **/\\n  function setDistributionEnd(uint256 distributionEnd) external;\\n\\n  /**\\n  * @dev Gets the end date for the distribution\\n  * @return The end of the distribution\\n  **/\\n  function getDistributionEnd() external view returns (uint256);\\n\\n  /**\\n  * @dev for backwards compatibility with the previous DistributionManager used\\n  * @return The end of the distribution\\n  **/\\n  function DISTRIBUTION_END() external view returns(uint256);\\n\\n   /**\\n   * @dev Returns the data of an user on a distribution\\n   * @param user Address of the user\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The new index\\n   **/\\n   function getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n   /**\\n   * @dev Returns the configuration of the distribution for a certain asset\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The asset index, the emission per second and the last updated timestamp\\n   **/\\n   function getAssetData(address asset) external view returns (uint256, uint256, uint256);\\n}\\n\",\"keccak256\":\"0x8b548a40a0f456d3c26b5d523c3e8385181bb65087bbaedef601d47ba7cf574f\",\"license\":\"agpl-3.0\"},\"contracts/incentives/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\nimport {IAaveDistributionManager} from '../interfaces/IAaveDistributionManager.sol';\\n\\ninterface IAaveIncentivesController is IAaveDistributionManager {\\n  event RewardsAccrued(address indexed user, uint256 amount);\\n\\n  event RewardsClaimed(\\n    address indexed user,\\n    address indexed to,\\n    address indexed claimer,\\n    uint256 amount\\n  );\\n\\n  event ClaimerSet(address indexed user, address indexed claimer);\\n\\n  /**\\n   * @dev Whitelists an address to claim the rewards on behalf of another address\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  function setClaimer(address user, address claimer) external;\\n\\n  /**\\n   * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n   * @param user The address of the user\\n   * @return The claimer address\\n   */\\n  function getClaimer(address user) external view returns (address);\\n\\n  /**\\n   * @dev Configure assets for a certain rewards emission\\n   * @param assets The assets to incentivize\\n   * @param emissionsPerSecond The emission for each asset\\n   */\\n  function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\\n    external;\\n\\n  /**\\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param asset The address of the user\\n   * @param userBalance The balance of the user of the asset in the lending pool\\n   * @param totalSupply The total supply of the asset in the lending pool\\n   * @param params extra params\\n   **/\\n  function handleAction(\\n    address asset,\\n    uint256 userBalance,\\n    uint256 totalSupply,\\n    bytes calldata params\\n  ) external;\\n\\n  /**\\n   * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n   * @param user The address of the user\\n   * @return The rewards\\n   **/\\n  function getRewardsBalance(address[] calldata assets, address user)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user to the desired address, on all the assets of the lending pool, accumulating the pending rewards\\n   * @param amount Amount of rewards to claim\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param amount Amount of rewards to claim\\n   * @param user Address to check and claim rewards\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewardsOnBehalf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address user,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for msg.sender, on all the assets of the lending pool, accumulating the pending rewards\\n   * @param amount Amount of rewards to claim\\n   * @return Rewards claimed\\n   **/\\n  function claimRewardsToSelf(address[] calldata assets, uint256 amount) external returns (uint256);\\n\\n  /**\\n   * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @return the unclaimed user rewards\\n   */\\n  function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev for backward compatibility with previous implementation of the Incentives controller\\n   */\\n  function REWARD_TOKEN() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa864c72c4da4ccb069433c15ece0fa829513852ff996271885b99826fd271408\",\"license\":\"agpl-3.0\"},\"contracts/incentives/interfaces/IERC20.sol\":{\"content\":\"pragma solidity 0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x490b6d09af9d487952a3ccb8f531d8abfb8a299b667b436e8ba1fa064cada07f\"},\"contracts/incentives/interfaces/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\ninterface IScaledBalanceToken {\\n  /**\\n   * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n   * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n   * @param user The user whose balance is calculated\\n   * @return The scaled balance of the user\\n   **/\\n  function scaledBalanceOf(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the scaled balance of the user and the scaled total supply.\\n   * @param user The address of the user\\n   * @return The scaled balance of the user\\n   * @return The scaled balance and the scaled total supply\\n   **/\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n  /**\\n   * @dev Returns the scaled total supply of the token. Represents sum(debt/index)\\n   * @return The scaled total supply\\n   **/\\n  function scaledTotalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x515a72da609a85086c1b3d3c968cea26147a869ec902b227348ec0343d62b766\",\"license\":\"agpl-3.0\"},\"contracts/incentives/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\",\"keccak256\":\"0x77e3e320efee1f58065d38cf9b09f797714f5cdc76a8ed7b861bfc9d1433e21e\",\"license\":\"MIT\"},\"contracts/incentives/lib/DistributionTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\nlibrary DistributionTypes {\\n  struct AssetConfigInput {\\n    uint104 emissionPerSecond;\\n    uint256 totalStaked;\\n    address underlyingAsset;\\n  }\\n\\n  struct UserStakeInput {\\n    address underlyingAsset;\\n    uint256 stakedByUser;\\n    uint256 totalStaked;\\n  }\\n}\\n\",\"keccak256\":\"0x9e402be2a5c15ee9984c8f2b2b1060df0d715ba097e00d8b4ab810fc17178f33\",\"license\":\"agpl-3.0\"},\"contracts/incentives/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from '../interfaces/IERC20.sol';\\nimport {SafeMath} from './SafeMath.sol';\\nimport {Address} from './Address.sol';\\n\\n/**\\n * @title SafeERC20\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x680e1d7b7222eb25fb2228d661b71a59aa0d67ce85ae86d58a67c8a11f0581f9\",\"license\":\"MIT\"},\"contracts/incentives/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\n/// inspired by uniswap V3\\nlibrary SafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    function div(uint256 x, uint256 y) internal pure returns(uint256) {\\n        // no need to check for division by zero - solidity already reverts\\n        return x / y;\\n    }\\n}\\n\",\"keccak256\":\"0x4d3fa4e6313b524109a70baac997324def188de873ff9dd8d98aa024329e2cc0\",\"license\":\"agpl-3.0\"},\"contracts/incentives/utils/VersionedInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 internal lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(revision > lastInitializedRevision, 'Contract instance has already been initialized');\\n\\n    lastInitializedRevision = revision;\\n\\n    _;\\n  }\\n\\n  /// @dev returns the revision number of the contract.\\n  /// Needs to be defined in the inherited class as a constant.\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x583c1b942560b3a99bd2d17a0972d3ced0c4c6a21e24b4dd3ae654ecb1e82941\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x60c0604052600080553480156200001557600080fd5b506040516200204438038062002044833981016040819052620000389162000069565b6001600160a01b039081166080521660a052620000a8565b6001600160a01b03811681146200006657600080fd5b50565b600080604083850312156200007d57600080fd5b82516200008a8162000050565b60208401519092506200009d8162000050565b809150509250929050565b60805160a051611f53620000f1600039600081816102c401526114a601526000818161032b015281816104a50152818161065a01528181610bfd0152610c8f0152611f536000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806399248ea7116100b8578063cc69afec1161007c578063cc69afec146102b7578063dde43cba1461034d578063e23ddec514610355578063f11b818814610366578063f5bb3e02146103d8578063f5cf673b146103eb57600080fd5b806399248ea7146102bf5780639ab99ddf146102e6578063aaf5eb68146102f9578063c4d66de814610313578063cbcbb5071461032657600080fd5b8063414853041161010a57806341485304146102275780636d34b96e1461023a57806374d945ec1461024d57806379f171b2146102915780638b599f26146102a4578063919cd40f146102b757600080fd5b80631652e7b714610147578063198fa81e146101b55780633111e7b3146101ec5780633373ee4c146101ff57806339ccbdd314610212575b600080fd5b610195610155366004611980565b6001600160a01b0316600090815260336020526040902054600160681b81046001600160681b039081169290821691600160d01b900464ffffffffff1690565b604080519384526020840192909252908201526060015b60405180910390f35b6101de6101c3366004611980565b6001600160a01b031660009081526035602052604090205490565b6040519081526020016101ac565b6101de6101fa3660046119e0565b6103fe565b6101de61020d366004611a3d565b610469565b610225610220366004611a70565b61049a565b005b6101de610235366004611a89565b61051d565b6101de610248366004611ad5565b610537565b61027961025b366004611980565b6001600160a01b039081166000908152603660205260409020541690565b6040516001600160a01b0390911681526020016101ac565b61022561029f366004611b43565b61064f565b6101de6102b2366004611baf565b6108f8565b6034546101de565b6102797f000000000000000000000000000000000000000000000000000000000000000081565b6102256102f4366004611c03565b610a8b565b610301601281565b60405160ff90911681526020016101ac565b610225610321366004611980565b610b24565b6102797f000000000000000000000000000000000000000000000000000000000000000081565b6101de600181565b6037546001600160a01b0316610279565b6103ab610374366004611980565b6033602052600090815260409020546001600160681b0380821691600160681b810490911690600160d01b900464ffffffffff1683565b604080516001600160681b03948516815293909216602084015264ffffffffff16908201526060016101ac565b6102256103e6366004611980565b610bf2565b6102256103f9366004611a3d565b610c84565b60006001600160a01b0382166104505760405162461bcd60e51b8152602060048201526012602482015271494e56414c49445f544f5f4144445245535360701b60448201526064015b60405180910390fd5b61045e858585333387610d23565b90505b949350505050565b6001600160a01b03808216600090815260336020908152604080832093861683526001909301905220545b92915050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104e25760405162461bcd60e51b815260040161044790611c97565b60348190556040518181527f1cc1849a6602c3e91f2088cadea4381cc5717f2f28584197060ed2ebb434c16f9060200160405180910390a150565b600061052d848484333333610d23565b90505b9392505050565b6001600160a01b0380831660009081526036602052604081205490913391859116821461059d5760405162461bcd60e51b815260206004820152601460248201527310d3105253515497d5539055551213d49256915160621b6044820152606401610447565b6001600160a01b0385166105ea5760405162461bcd60e51b8152602060048201526014602482015273494e56414c49445f555345525f4144445245535360601b6044820152606401610447565b6001600160a01b0384166106355760405162461bcd60e51b8152602060048201526012602482015271494e56414c49445f544f5f4144445245535360701b6044820152606401610447565b610643888888338989610d23565b98975050505050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106975760405162461bcd60e51b815260040161044790611c97565b8281146106de5760405162461bcd60e51b815260206004820152601560248201527424a72b20a624a22fa1a7a72324a3aaa920aa24a7a760591b6044820152606401610447565b60008367ffffffffffffffff8111156106f9576106f9611cc6565b60405190808252806020026020018201604052801561074457816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816107175790505b50905060005b848110156108e75783838281811061076457610764611cdc565b9050602002013584848381811061077d5761077d611cdc565b905060200201356001600160681b0316146107e65760405162461bcd60e51b8152602060048201526024808201527f496e646578206f766572666c6f7720617420656d697373696f6e73506572536560448201526318dbdb9960e21b6064820152608401610447565b8585828181106107f8576107f8611cdc565b905060200201602081019061080d9190611980565b82828151811061081f5761081f611cdc565b6020026020010151604001906001600160a01b031690816001600160a01b03168152505083838281811061085557610855611cdc565b9050602002013582828151811061086e5761086e611cdc565b60209081029190910101516001600160681b0390911690526108b586868381811061089b5761089b611cdc565b90506020020160208101906108b09190611980565b610fc9565b8282815181106108c7576108c7611cdc565b6020908102919091018101510152806108df81611d08565b91505061074a565b506108f18161102d565b5050505050565b6001600160a01b038116600090815260356020526040812054818467ffffffffffffffff81111561092b5761092b611cc6565b60405190808252806020026020018201604052801561098957816020015b610976604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b8152602001906001900390816109495790505b50905060005b85811015610a6c578686828181106109a9576109a9611cdc565b90506020020160208101906109be9190611980565b8282815181106109d0576109d0611cdc565b60209081029190910101516001600160a01b039091169052610a188787838181106109fd576109fd611cdc565b9050602002016020810190610a129190611980565b8661119c565b838381518110610a2a57610a2a611cdc565b6020026020010151602001848481518110610a4757610a47611cdc565b6020908102919091010151604001919091525280610a6481611d08565b91505061098f565b50610a81610a7a8583611216565b8390611331565b9695505050505050565b6000610a998633868861134c565b90508015610b1c576001600160a01b038616600090815260356020526040902054610ac49082611331565b6001600160a01b038716600081815260356020526040908190209290925590517f2468f9268c60ad90e2d49edb0032c8a001e733ae888b3ab8e982edf535be1a7690610b139084815260200190565b60405180910390a25b505050505050565b6000546001908111610b8f5760405162461bcd60e51b815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201526d195b881a5b9a5d1a585b1a5e995960921b6064820152608401610447565b60008190556001600160a01b038216610ba757600080fd5b603780546001600160a01b0319166001600160a01b0384169081179091556040517f28a48cbce43190d77247f342cf319b1607bff4ef716cf26b76cf7bb71baebaa590600090a25050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c3a5760405162461bcd60e51b815260040161044790611c97565b603780546001600160a01b0319166001600160a01b0383169081179091556040517f28a48cbce43190d77247f342cf319b1607bff4ef716cf26b76cf7bb71baebaa590600090a250565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ccc5760405162461bcd60e51b815260040161044790611c97565b6001600160a01b0382811660008181526036602052604080822080546001600160a01b0319169486169485179055517f4925eafc82d0c4d67889898eeed64b18488ab19811e61620f387026dec126a289190a35050565b600084610d3257506000610a81565b6001600160a01b03831660009081526035602052604090205480861115610f175760008767ffffffffffffffff811115610d6e57610d6e611cc6565b604051908082528060200260200182016040528015610dcc57816020015b610db9604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b815260200190600190039081610d8c5790505b50905060005b88811015610eaf57898982818110610dec57610dec611cdc565b9050602002016020810190610e019190611980565b828281518110610e1357610e13611cdc565b60209081029190910101516001600160a01b039091169052610e5b8a8a83818110610e4057610e40611cdc565b9050602002016020810190610e559190611980565b8761119c565b838381518110610e6d57610e6d611cdc565b6020026020010151602001848481518110610e8a57610e8a611cdc565b6020908102919091010151604001919091525280610ea781611d08565b915050610dd2565b506000610ebc868361140d565b90508015610f1457610ece8382611331565b9250856001600160a01b03167f2468f9268c60ad90e2d49edb0032c8a001e733ae888b3ab8e982edf535be1a7682604051610f0b91815260200190565b60405180910390a25b50505b80610f26576000915050610a81565b6000818711610f355786610f37565b815b9050610f438183611d23565b6001600160a01b038616600090815260356020526040902055610f668482611495565b856001600160a01b0316846001600160a01b0316866001600160a01b03167f5637d7f962248a7f05a7ab69eec6446e31f3d0a299d997f135a65c62806e789184604051610fb591815260200190565b60405180910390a498975050505050505050565b6000816001600160a01b031663b1bf962d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611009573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104949190611d3a565b60005b81518110156111985760006033600084848151811061105157611051611cdc565b6020026020010151604001516001600160a01b03166001600160a01b0316815260200190815260200160002090506110c483838151811061109457611094611cdc565b602002602001015160400151828585815181106110b3576110b3611cdc565b6020026020010151602001516114d0565b508282815181106110d7576110d7611cdc565b60209081029190910101515181546cffffffffffffffffffffffffff19166001600160681b03909116178155825183908390811061111757611117611cdc565b6020026020010151604001516001600160a01b03167f87fa03892a0556cb6b8f97e6d533a150d4d55fcbf275fff5fa003fa636bcc7fa84848151811061115f5761115f611cdc565b602090810291909101810151516040516001600160681b0390911681520160405180910390a2508061119081611d08565b915050611030565b5050565b604051630afbcdc960e01b81526001600160a01b0382811660048301526000918291851690630afbcdc9906024016040805180830381865afa1580156111e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120a9190611d53565b915091505b9250929050565b600080805b83518110156113295760006033600086848151811061123c5761123c611cdc565b602090810291909101810151516001600160a01b031682528101919091526040016000908120805487519193506112b791600160681b82046001600160681b039081169290811691600160d01b90910464ffffffffff16908a90889081106112a6576112a6611cdc565b602002602001015160400151611621565b905061131261130b8785815181106112d1576112d1611cdc565b602002602001015160200151838560010160008c6001600160a01b03166001600160a01b03168152602001908152602001600020546116c4565b8590611331565b93505050808061132190611d08565b91505061121b565b509392505050565b60008261133e8382611d77565b915081101561049457600080fd5b6001600160a01b03808416600090815260336020908152604080832093881683526001840190915281205490919082806113878885886114d0565b90508083146114015786156113a4576113a18782856116c4565b91505b6001600160a01b03808a1660008181526001870160205260409081902084905551918a16917fbb123b5c06d5408bbea3c4fef481578175cfb432e3b482c6186f02ed9086585b906113f89085815260200190565b60405180910390a35b50979650505050505050565b600080805b835181101561132957611481610a7a8686848151811061143457611434611cdc565b60200260200101516000015187858151811061145257611452611cdc565b60200260200101516020015188868151811061147057611470611cdc565b60200260200101516040015161134c565b91508061148d81611d08565b915050611412565b603754611198906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911684846116f0565b81546000906001600160681b03600160681b82048116919081169064ffffffffff600160d01b909104164281141561150d57829350505050610530565b600061151b84848489611621565b90508381146115f75780816001600160681b03161461156d5760405162461bcd60e51b815260206004820152600e60248201526d496e646578206f766572666c6f7760901b6044820152606401610447565b865471ffffffffffffffffffffffffffffffffffff60681b1916600160681b6001600160681b0383160264ffffffffff60d01b191617600160d01b4264ffffffffff16021787556040518181526001600160a01b038916907f5777ca300dfe5bead41006fbce4389794dbc0ed8d6cccebfaf94630aa04184bc9060200160405180910390a2611616565b865464ffffffffff60d01b1916600160d01b4264ffffffffff16021787555b979650505050505050565b603454600090841580611632575082155b80611645575042846001600160801b0316145b80611659575080846001600160801b031610155b156116675785915050610461565b60008142116116765742611678565b815b9050600061168f826001600160801b038816611750565b9050610643886116be876116b86116a86012600a611e73565b6116b28d8861176b565b9061176b565b90611798565b90611331565b60006116d26012600a611e73565b6116e66116df8585611750565b869061176b565b61052d9190611e7f565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261174a9085906117a4565b50505050565b60008261175d8382611d23565b915081111561049457600080fd5b600082158061178f575081836117818282611ea1565b925061178d9083611e7f565b145b61049457600080fd5b60006105308284611e7f565b6117b6826001600160a01b031661192b565b6118025760405162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e7472616374006044820152606401610447565b600080836001600160a01b03168360405161181d9190611ec0565b6000604051808303816000865af19150503d806000811461185a576040519150601f19603f3d011682016040523d82523d6000602084013e61185f565b606091505b5091509150816118b15760405162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646044820152606401610447565b80511561174a57808060200190518101906118cc9190611efb565b61174a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610447565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610461575050151592915050565b80356001600160a01b038116811461197b57600080fd5b919050565b60006020828403121561199257600080fd5b61053082611964565b60008083601f8401126119ad57600080fd5b50813567ffffffffffffffff8111156119c557600080fd5b6020830191508360208260051b850101111561120f57600080fd5b600080600080606085870312156119f657600080fd5b843567ffffffffffffffff811115611a0d57600080fd5b611a198782880161199b565b90955093505060208501359150611a3260408601611964565b905092959194509250565b60008060408385031215611a5057600080fd5b611a5983611964565b9150611a6760208401611964565b90509250929050565b600060208284031215611a8257600080fd5b5035919050565b600080600060408486031215611a9e57600080fd5b833567ffffffffffffffff811115611ab557600080fd5b611ac18682870161199b565b909790965060209590950135949350505050565b600080600080600060808688031215611aed57600080fd5b853567ffffffffffffffff811115611b0457600080fd5b611b108882890161199b565b90965094505060208601359250611b2960408701611964565b9150611b3760608701611964565b90509295509295909350565b60008060008060408587031215611b5957600080fd5b843567ffffffffffffffff80821115611b7157600080fd5b611b7d8883890161199b565b90965094506020870135915080821115611b9657600080fd5b50611ba38782880161199b565b95989497509550505050565b600080600060408486031215611bc457600080fd5b833567ffffffffffffffff811115611bdb57600080fd5b611be78682870161199b565b9094509250611bfa905060208501611964565b90509250925092565b600080600080600060808688031215611c1b57600080fd5b611c2486611964565b94506020860135935060408601359250606086013567ffffffffffffffff80821115611c4f57600080fd5b818801915088601f830112611c6357600080fd5b813581811115611c7257600080fd5b896020828501011115611c8457600080fd5b9699959850939650602001949392505050565b60208082526015908201527427a7262cafa2a6a4a9a9a4a7a72fa6a0a720a3a2a960591b604082015260600190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611d1c57611d1c611cf2565b5060010190565b600082821015611d3557611d35611cf2565b500390565b600060208284031215611d4c57600080fd5b5051919050565b60008060408385031215611d6657600080fd5b505080516020909101519092909150565b60008219821115611d8a57611d8a611cf2565b500190565b600181815b80851115611dca578160001904821115611db057611db0611cf2565b80851615611dbd57918102915b93841c9390800290611d94565b509250929050565b600082611de157506001610494565b81611dee57506000610494565b8160018114611e045760028114611e0e57611e2a565b6001915050610494565b60ff841115611e1f57611e1f611cf2565b50506001821b610494565b5060208310610133831016604e8410600b8410161715611e4d575081810a610494565b611e578383611d8f565b8060001904821115611e6b57611e6b611cf2565b029392505050565b60006105308383611dd2565b600082611e9c57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611ebb57611ebb611cf2565b500290565b6000825160005b81811015611ee15760208186018101518583015201611ec7565b81811115611ef0576000828501525b509190910192915050565b600060208284031215611f0d57600080fd5b8151801515811461053057600080fdfea2646970667358221220cc85ad633b0ef4b11093644c81728af8ba700a4242e54c2194006d8be78d32e764736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c806399248ea7116100b8578063cc69afec1161007c578063cc69afec146102b7578063dde43cba1461034d578063e23ddec514610355578063f11b818814610366578063f5bb3e02146103d8578063f5cf673b146103eb57600080fd5b806399248ea7146102bf5780639ab99ddf146102e6578063aaf5eb68146102f9578063c4d66de814610313578063cbcbb5071461032657600080fd5b8063414853041161010a57806341485304146102275780636d34b96e1461023a57806374d945ec1461024d57806379f171b2146102915780638b599f26146102a4578063919cd40f146102b757600080fd5b80631652e7b714610147578063198fa81e146101b55780633111e7b3146101ec5780633373ee4c146101ff57806339ccbdd314610212575b600080fd5b610195610155366004611980565b6001600160a01b0316600090815260336020526040902054600160681b81046001600160681b039081169290821691600160d01b900464ffffffffff1690565b604080519384526020840192909252908201526060015b60405180910390f35b6101de6101c3366004611980565b6001600160a01b031660009081526035602052604090205490565b6040519081526020016101ac565b6101de6101fa3660046119e0565b6103fe565b6101de61020d366004611a3d565b610469565b610225610220366004611a70565b61049a565b005b6101de610235366004611a89565b61051d565b6101de610248366004611ad5565b610537565b61027961025b366004611980565b6001600160a01b039081166000908152603660205260409020541690565b6040516001600160a01b0390911681526020016101ac565b61022561029f366004611b43565b61064f565b6101de6102b2366004611baf565b6108f8565b6034546101de565b6102797f000000000000000000000000000000000000000000000000000000000000000081565b6102256102f4366004611c03565b610a8b565b610301601281565b60405160ff90911681526020016101ac565b610225610321366004611980565b610b24565b6102797f000000000000000000000000000000000000000000000000000000000000000081565b6101de600181565b6037546001600160a01b0316610279565b6103ab610374366004611980565b6033602052600090815260409020546001600160681b0380821691600160681b810490911690600160d01b900464ffffffffff1683565b604080516001600160681b03948516815293909216602084015264ffffffffff16908201526060016101ac565b6102256103e6366004611980565b610bf2565b6102256103f9366004611a3d565b610c84565b60006001600160a01b0382166104505760405162461bcd60e51b8152602060048201526012602482015271494e56414c49445f544f5f4144445245535360701b60448201526064015b60405180910390fd5b61045e858585333387610d23565b90505b949350505050565b6001600160a01b03808216600090815260336020908152604080832093861683526001909301905220545b92915050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104e25760405162461bcd60e51b815260040161044790611c97565b60348190556040518181527f1cc1849a6602c3e91f2088cadea4381cc5717f2f28584197060ed2ebb434c16f9060200160405180910390a150565b600061052d848484333333610d23565b90505b9392505050565b6001600160a01b0380831660009081526036602052604081205490913391859116821461059d5760405162461bcd60e51b815260206004820152601460248201527310d3105253515497d5539055551213d49256915160621b6044820152606401610447565b6001600160a01b0385166105ea5760405162461bcd60e51b8152602060048201526014602482015273494e56414c49445f555345525f4144445245535360601b6044820152606401610447565b6001600160a01b0384166106355760405162461bcd60e51b8152602060048201526012602482015271494e56414c49445f544f5f4144445245535360701b6044820152606401610447565b610643888888338989610d23565b98975050505050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106975760405162461bcd60e51b815260040161044790611c97565b8281146106de5760405162461bcd60e51b815260206004820152601560248201527424a72b20a624a22fa1a7a72324a3aaa920aa24a7a760591b6044820152606401610447565b60008367ffffffffffffffff8111156106f9576106f9611cc6565b60405190808252806020026020018201604052801561074457816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816107175790505b50905060005b848110156108e75783838281811061076457610764611cdc565b9050602002013584848381811061077d5761077d611cdc565b905060200201356001600160681b0316146107e65760405162461bcd60e51b8152602060048201526024808201527f496e646578206f766572666c6f7720617420656d697373696f6e73506572536560448201526318dbdb9960e21b6064820152608401610447565b8585828181106107f8576107f8611cdc565b905060200201602081019061080d9190611980565b82828151811061081f5761081f611cdc565b6020026020010151604001906001600160a01b031690816001600160a01b03168152505083838281811061085557610855611cdc565b9050602002013582828151811061086e5761086e611cdc565b60209081029190910101516001600160681b0390911690526108b586868381811061089b5761089b611cdc565b90506020020160208101906108b09190611980565b610fc9565b8282815181106108c7576108c7611cdc565b6020908102919091018101510152806108df81611d08565b91505061074a565b506108f18161102d565b5050505050565b6001600160a01b038116600090815260356020526040812054818467ffffffffffffffff81111561092b5761092b611cc6565b60405190808252806020026020018201604052801561098957816020015b610976604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b8152602001906001900390816109495790505b50905060005b85811015610a6c578686828181106109a9576109a9611cdc565b90506020020160208101906109be9190611980565b8282815181106109d0576109d0611cdc565b60209081029190910101516001600160a01b039091169052610a188787838181106109fd576109fd611cdc565b9050602002016020810190610a129190611980565b8661119c565b838381518110610a2a57610a2a611cdc565b6020026020010151602001848481518110610a4757610a47611cdc565b6020908102919091010151604001919091525280610a6481611d08565b91505061098f565b50610a81610a7a8583611216565b8390611331565b9695505050505050565b6000610a998633868861134c565b90508015610b1c576001600160a01b038616600090815260356020526040902054610ac49082611331565b6001600160a01b038716600081815260356020526040908190209290925590517f2468f9268c60ad90e2d49edb0032c8a001e733ae888b3ab8e982edf535be1a7690610b139084815260200190565b60405180910390a25b505050505050565b6000546001908111610b8f5760405162461bcd60e51b815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201526d195b881a5b9a5d1a585b1a5e995960921b6064820152608401610447565b60008190556001600160a01b038216610ba757600080fd5b603780546001600160a01b0319166001600160a01b0384169081179091556040517f28a48cbce43190d77247f342cf319b1607bff4ef716cf26b76cf7bb71baebaa590600090a25050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c3a5760405162461bcd60e51b815260040161044790611c97565b603780546001600160a01b0319166001600160a01b0383169081179091556040517f28a48cbce43190d77247f342cf319b1607bff4ef716cf26b76cf7bb71baebaa590600090a250565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ccc5760405162461bcd60e51b815260040161044790611c97565b6001600160a01b0382811660008181526036602052604080822080546001600160a01b0319169486169485179055517f4925eafc82d0c4d67889898eeed64b18488ab19811e61620f387026dec126a289190a35050565b600084610d3257506000610a81565b6001600160a01b03831660009081526035602052604090205480861115610f175760008767ffffffffffffffff811115610d6e57610d6e611cc6565b604051908082528060200260200182016040528015610dcc57816020015b610db9604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b815260200190600190039081610d8c5790505b50905060005b88811015610eaf57898982818110610dec57610dec611cdc565b9050602002016020810190610e019190611980565b828281518110610e1357610e13611cdc565b60209081029190910101516001600160a01b039091169052610e5b8a8a83818110610e4057610e40611cdc565b9050602002016020810190610e559190611980565b8761119c565b838381518110610e6d57610e6d611cdc565b6020026020010151602001848481518110610e8a57610e8a611cdc565b6020908102919091010151604001919091525280610ea781611d08565b915050610dd2565b506000610ebc868361140d565b90508015610f1457610ece8382611331565b9250856001600160a01b03167f2468f9268c60ad90e2d49edb0032c8a001e733ae888b3ab8e982edf535be1a7682604051610f0b91815260200190565b60405180910390a25b50505b80610f26576000915050610a81565b6000818711610f355786610f37565b815b9050610f438183611d23565b6001600160a01b038616600090815260356020526040902055610f668482611495565b856001600160a01b0316846001600160a01b0316866001600160a01b03167f5637d7f962248a7f05a7ab69eec6446e31f3d0a299d997f135a65c62806e789184604051610fb591815260200190565b60405180910390a498975050505050505050565b6000816001600160a01b031663b1bf962d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611009573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104949190611d3a565b60005b81518110156111985760006033600084848151811061105157611051611cdc565b6020026020010151604001516001600160a01b03166001600160a01b0316815260200190815260200160002090506110c483838151811061109457611094611cdc565b602002602001015160400151828585815181106110b3576110b3611cdc565b6020026020010151602001516114d0565b508282815181106110d7576110d7611cdc565b60209081029190910101515181546cffffffffffffffffffffffffff19166001600160681b03909116178155825183908390811061111757611117611cdc565b6020026020010151604001516001600160a01b03167f87fa03892a0556cb6b8f97e6d533a150d4d55fcbf275fff5fa003fa636bcc7fa84848151811061115f5761115f611cdc565b602090810291909101810151516040516001600160681b0390911681520160405180910390a2508061119081611d08565b915050611030565b5050565b604051630afbcdc960e01b81526001600160a01b0382811660048301526000918291851690630afbcdc9906024016040805180830381865afa1580156111e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120a9190611d53565b915091505b9250929050565b600080805b83518110156113295760006033600086848151811061123c5761123c611cdc565b602090810291909101810151516001600160a01b031682528101919091526040016000908120805487519193506112b791600160681b82046001600160681b039081169290811691600160d01b90910464ffffffffff16908a90889081106112a6576112a6611cdc565b602002602001015160400151611621565b905061131261130b8785815181106112d1576112d1611cdc565b602002602001015160200151838560010160008c6001600160a01b03166001600160a01b03168152602001908152602001600020546116c4565b8590611331565b93505050808061132190611d08565b91505061121b565b509392505050565b60008261133e8382611d77565b915081101561049457600080fd5b6001600160a01b03808416600090815260336020908152604080832093881683526001840190915281205490919082806113878885886114d0565b90508083146114015786156113a4576113a18782856116c4565b91505b6001600160a01b03808a1660008181526001870160205260409081902084905551918a16917fbb123b5c06d5408bbea3c4fef481578175cfb432e3b482c6186f02ed9086585b906113f89085815260200190565b60405180910390a35b50979650505050505050565b600080805b835181101561132957611481610a7a8686848151811061143457611434611cdc565b60200260200101516000015187858151811061145257611452611cdc565b60200260200101516020015188868151811061147057611470611cdc565b60200260200101516040015161134c565b91508061148d81611d08565b915050611412565b603754611198906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911684846116f0565b81546000906001600160681b03600160681b82048116919081169064ffffffffff600160d01b909104164281141561150d57829350505050610530565b600061151b84848489611621565b90508381146115f75780816001600160681b03161461156d5760405162461bcd60e51b815260206004820152600e60248201526d496e646578206f766572666c6f7760901b6044820152606401610447565b865471ffffffffffffffffffffffffffffffffffff60681b1916600160681b6001600160681b0383160264ffffffffff60d01b191617600160d01b4264ffffffffff16021787556040518181526001600160a01b038916907f5777ca300dfe5bead41006fbce4389794dbc0ed8d6cccebfaf94630aa04184bc9060200160405180910390a2611616565b865464ffffffffff60d01b1916600160d01b4264ffffffffff16021787555b979650505050505050565b603454600090841580611632575082155b80611645575042846001600160801b0316145b80611659575080846001600160801b031610155b156116675785915050610461565b60008142116116765742611678565b815b9050600061168f826001600160801b038816611750565b9050610643886116be876116b86116a86012600a611e73565b6116b28d8861176b565b9061176b565b90611798565b90611331565b60006116d26012600a611e73565b6116e66116df8585611750565b869061176b565b61052d9190611e7f565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261174a9085906117a4565b50505050565b60008261175d8382611d23565b915081111561049457600080fd5b600082158061178f575081836117818282611ea1565b925061178d9083611e7f565b145b61049457600080fd5b60006105308284611e7f565b6117b6826001600160a01b031661192b565b6118025760405162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e7472616374006044820152606401610447565b600080836001600160a01b03168360405161181d9190611ec0565b6000604051808303816000865af19150503d806000811461185a576040519150601f19603f3d011682016040523d82523d6000602084013e61185f565b606091505b5091509150816118b15760405162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646044820152606401610447565b80511561174a57808060200190518101906118cc9190611efb565b61174a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610447565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610461575050151592915050565b80356001600160a01b038116811461197b57600080fd5b919050565b60006020828403121561199257600080fd5b61053082611964565b60008083601f8401126119ad57600080fd5b50813567ffffffffffffffff8111156119c557600080fd5b6020830191508360208260051b850101111561120f57600080fd5b600080600080606085870312156119f657600080fd5b843567ffffffffffffffff811115611a0d57600080fd5b611a198782880161199b565b90955093505060208501359150611a3260408601611964565b905092959194509250565b60008060408385031215611a5057600080fd5b611a5983611964565b9150611a6760208401611964565b90509250929050565b600060208284031215611a8257600080fd5b5035919050565b600080600060408486031215611a9e57600080fd5b833567ffffffffffffffff811115611ab557600080fd5b611ac18682870161199b565b909790965060209590950135949350505050565b600080600080600060808688031215611aed57600080fd5b853567ffffffffffffffff811115611b0457600080fd5b611b108882890161199b565b90965094505060208601359250611b2960408701611964565b9150611b3760608701611964565b90509295509295909350565b60008060008060408587031215611b5957600080fd5b843567ffffffffffffffff80821115611b7157600080fd5b611b7d8883890161199b565b90965094506020870135915080821115611b9657600080fd5b50611ba38782880161199b565b95989497509550505050565b600080600060408486031215611bc457600080fd5b833567ffffffffffffffff811115611bdb57600080fd5b611be78682870161199b565b9094509250611bfa905060208501611964565b90509250925092565b600080600080600060808688031215611c1b57600080fd5b611c2486611964565b94506020860135935060408601359250606086013567ffffffffffffffff80821115611c4f57600080fd5b818801915088601f830112611c6357600080fd5b813581811115611c7257600080fd5b896020828501011115611c8457600080fd5b9699959850939650602001949392505050565b60208082526015908201527427a7262cafa2a6a4a9a9a4a7a72fa6a0a720a3a2a960591b604082015260600190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611d1c57611d1c611cf2565b5060010190565b600082821015611d3557611d35611cf2565b500390565b600060208284031215611d4c57600080fd5b5051919050565b60008060408385031215611d6657600080fd5b505080516020909101519092909150565b60008219821115611d8a57611d8a611cf2565b500190565b600181815b80851115611dca578160001904821115611db057611db0611cf2565b80851615611dbd57918102915b93841c9390800290611d94565b509250929050565b600082611de157506001610494565b81611dee57506000610494565b8160018114611e045760028114611e0e57611e2a565b6001915050610494565b60ff841115611e1f57611e1f611cf2565b50506001821b610494565b5060208310610133831016604e8410600b8410161715611e4d575081810a610494565b611e578383611d8f565b8060001904821115611e6b57611e6b611cf2565b029392505050565b60006105308383611dd2565b600082611e9c57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611ebb57611ebb611cf2565b500290565b6000825160005b81811015611ee15760208186018101518583015201611ec7565b81811115611ef0576000828501525b509190910192915050565b600060208284031215611f0d57600080fd5b8151801515811461053057600080fdfea2646970667358221220cc85ad633b0ef4b11093644c81728af8ba700a4242e54c2194006d8be78d32e764736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "DISTRIBUTION_END()": {
        "details": "for backwards compatibility with the previous DistributionManager used",
        "returns": {
          "_0": "The end of the distribution*"
        }
      },
      "claimRewards(address[],uint256,address)": {
        "details": "Claims reward for an user to the desired address, on all the assets of the lending pool, accumulating the pending rewards",
        "params": {
          "amount": "Amount of rewards to claim",
          "to": "Address that will be receiving the rewards"
        },
        "returns": {
          "_0": "Rewards claimed*"
        }
      },
      "claimRewardsOnBehalf(address[],uint256,address,address)": {
        "details": "Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must be whitelisted via \"allowClaimOnBehalf\" function by the RewardsAdmin role manager",
        "params": {
          "amount": "Amount of rewards to claim",
          "to": "Address that will be receiving the rewards",
          "user": "Address to check and claim rewards"
        },
        "returns": {
          "_0": "Rewards claimed*"
        }
      },
      "claimRewardsToSelf(address[],uint256)": {
        "details": "Claims reward for msg.sender, on all the assets of the lending pool, accumulating the pending rewards",
        "params": {
          "amount": "Amount of rewards to claim"
        },
        "returns": {
          "_0": "Rewards claimed*"
        }
      },
      "configureAssets(address[],uint256[])": {
        "details": "Configure assets for a certain rewards emission",
        "params": {
          "assets": "The assets to incentivize",
          "emissionsPerSecond": "The emission for each asset"
        }
      },
      "getAssetData(address)": {
        "details": "Returns the configuration of the distribution for a certain asset",
        "params": {
          "asset": "The address of the reference asset of the distribution"
        },
        "returns": {
          "_0": "The asset index, the emission per second and the last updated timestamp*"
        }
      },
      "getClaimer(address)": {
        "details": "Returns the whitelisted claimer for a certain address (0x0 if not set)",
        "params": {
          "user": "The address of the user"
        },
        "returns": {
          "_0": "The claimer address"
        }
      },
      "getDistributionEnd()": {
        "details": "Gets the end date for the distribution",
        "returns": {
          "_0": "The end of the distribution*"
        }
      },
      "getRewardsBalance(address[],address)": {
        "details": "Returns the total of rewards of an user, already accrued + not yet accrued",
        "params": {
          "user": "The address of the user"
        },
        "returns": {
          "_0": "The rewards*"
        }
      },
      "getRewardsVault()": {
        "details": "returns the current rewards vault contract",
        "returns": {
          "_0": "address"
        }
      },
      "getUserAssetData(address,address)": {
        "details": "Returns the data of an user on a distribution",
        "params": {
          "asset": "The address of the reference asset of the distribution",
          "user": "Address of the user"
        },
        "returns": {
          "_0": "The new index*"
        }
      },
      "getUserUnclaimedRewards(address)": {
        "details": "returns the unclaimed rewards of the user",
        "params": {
          "user": "the address of the user"
        },
        "returns": {
          "_0": "the unclaimed user rewards"
        }
      },
      "initialize(address)": {
        "details": "Initialize AaveIncentivesController",
        "params": {
          "rewardsVault": "rewards vault to pull ERC20 funds*"
        }
      },
      "setClaimer(address,address)": {
        "details": "Whitelists an address to claim the rewards on behalf of another address",
        "params": {
          "claimer": "The address of the claimer",
          "user": "The address of the user"
        }
      },
      "setDistributionEnd(uint256)": {
        "details": "Sets the end date for the distribution",
        "params": {
          "distributionEnd": "The end date timestamp*"
        }
      },
      "setRewardsVault(address)": {
        "details": "update the rewards vault address, only allowed by the Rewards admin",
        "params": {
          "rewardsVault": "The address of the rewards vault*"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3160,
        "contract": "contracts/incentives/OpenSkyPoolIncentivesControllerLender.sol:OpenSkyPoolIncentivesControllerLender",
        "label": "lastInitializedRevision",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3191,
        "contract": "contracts/incentives/OpenSkyPoolIncentivesControllerLender.sol:OpenSkyPoolIncentivesControllerLender",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1661,
        "contract": "contracts/incentives/OpenSkyPoolIncentivesControllerLender.sol:OpenSkyPoolIncentivesControllerLender",
        "label": "assets",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_struct(AssetData)1651_storage)"
      },
      {
        "astId": 1663,
        "contract": "contracts/incentives/OpenSkyPoolIncentivesControllerLender.sol:OpenSkyPoolIncentivesControllerLender",
        "label": "_distributionEnd",
        "offset": 0,
        "slot": "52",
        "type": "t_uint256"
      },
      {
        "astId": 1042,
        "contract": "contracts/incentives/OpenSkyPoolIncentivesControllerLender.sol:OpenSkyPoolIncentivesControllerLender",
        "label": "_usersUnclaimedRewards",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1046,
        "contract": "contracts/incentives/OpenSkyPoolIncentivesControllerLender.sol:OpenSkyPoolIncentivesControllerLender",
        "label": "_authorizedClaimers",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 840,
        "contract": "contracts/incentives/OpenSkyPoolIncentivesControllerLender.sol:OpenSkyPoolIncentivesControllerLender",
        "label": "_rewardsVault",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(AssetData)1651_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DistributionManager.AssetData)",
        "numberOfBytes": "32",
        "value": "t_struct(AssetData)1651_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AssetData)1651_storage": {
        "encoding": "inplace",
        "label": "struct DistributionManager.AssetData",
        "members": [
          {
            "astId": 1642,
            "contract": "contracts/incentives/OpenSkyPoolIncentivesControllerLender.sol:OpenSkyPoolIncentivesControllerLender",
            "label": "emissionPerSecond",
            "offset": 0,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 1644,
            "contract": "contracts/incentives/OpenSkyPoolIncentivesControllerLender.sol:OpenSkyPoolIncentivesControllerLender",
            "label": "index",
            "offset": 13,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 1646,
            "contract": "contracts/incentives/OpenSkyPoolIncentivesControllerLender.sol:OpenSkyPoolIncentivesControllerLender",
            "label": "lastUpdateTimestamp",
            "offset": 26,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 1650,
            "contract": "contracts/incentives/OpenSkyPoolIncentivesControllerLender.sol:OpenSkyPoolIncentivesControllerLender",
            "label": "users",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint104": {
        "encoding": "inplace",
        "label": "uint104",
        "numberOfBytes": "13"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      }
    }
  }
}