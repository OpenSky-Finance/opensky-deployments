{
  "address": "0xA04D98897A28FFe7AFeE0BEAE7B9E30c37a3C7D9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_settings",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ClaimERC1155Airdrop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimERC20Airdrop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "ClaimERC721Airdrop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "repayer",
          "type": "address"
        }
      ],
      "name": "End",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "EndLiquidation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "FlashClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "StartLiquidation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "enum DataTypes.LoanStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "UpdateStatus",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SETTINGS",
      "outputs": [
        {
          "internalType": "contract IOpenSkySettings",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "claimERC1155Airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimERC20Airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "claimERC721Airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "repayer",
          "type": "address"
        }
      ],
      "name": "end",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "endLiquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiverAddress",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "loanIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "flashClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getBorrowBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getBorrowInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getLoanData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "reserveId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "borrowRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "interestPerSecond",
              "type": "uint128"
            },
            {
              "internalType": "uint40",
              "name": "borrowBegin",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowDuration",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowOverdueTime",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "liquidatableTime",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "extendableTime",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowEnd",
              "type": "uint40"
            },
            {
              "internalType": "enum DataTypes.LoanStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct DataTypes.LoanData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getLoanId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getPenalty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getStatus",
      "outputs": [
        {
          "internalType": "enum DataTypes.LoanStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowRate",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "reserveId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "borrowRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "interestPerSecond",
              "type": "uint128"
            },
            {
              "internalType": "uint40",
              "name": "borrowBegin",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowDuration",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowOverdueTime",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "liquidatableTime",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "extendableTime",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowEnd",
              "type": "uint40"
            },
            {
              "internalType": "enum DataTypes.LoanStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct DataTypes.LoanData",
          "name": "loan",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "startLiquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBorrows",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userBorrows",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x92b8d5700d0c7cda65f94f90891039d713cbaf2daed87f4a8848ca4eae14f608",
  "receipt": {
    "to": null,
    "from": "0x218513C58A4781a5B88De6230caA29aBCe2Ccd75",
    "contractAddress": "0xA04D98897A28FFe7AFeE0BEAE7B9E30c37a3C7D9",
    "transactionIndex": 72,
    "gasUsed": "4689024",
    "logsBloom": "0x
    "blockHash": "0x76fd9163c09d28d4f5f1d553fa2eb89d071e998b392eb8379ea0a55dfbf686e3",
    "transactionHash": "0x92b8d5700d0c7cda65f94f90891039d713cbaf2daed87f4a8848ca4eae14f608",
    "logs": [
      {
        "transactionIndex": 72,
        "blockNumber": 29761394,
        "transactionHash": "0x92b8d5700d0c7cda65f94f90891039d713cbaf2daed87f4a8848ca4eae14f608",
        "address": "0xA04D98897A28FFe7AFeE0BEAE7B9E30c37a3C7D9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000218513c58a4781a5b88de6230caa29abce2ccd75"
        ],
        "data": "0x",
        "logIndex": 263,
        "blockHash": "0x76fd9163c09d28d4f5f1d553fa2eb89d071e998b392eb8379ea0a55dfbf686e3"
      },
      {
        "transactionIndex": 72,
        "blockNumber": 29761394,
        "transactionHash": "0x92b8d5700d0c7cda65f94f90891039d713cbaf2daed87f4a8848ca4eae14f608",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000218513c58a4781a5b88de6230caa29abce2ccd75",
          "0x000000000000000000000000bdbd4347b082d9d6bdf2da4555a37ce52a2e2120"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001f3c34647e60000000000000000000000000000000000000000000000000000429423f5d7d222e3000000000000000000000000000000000000000000001a773d560158f7416fb100000000000000000000000000000000000000000000000040a060af8fec22e3000000000000000000000000000000000000000000001a773f49c49f3f276fb1",
        "logIndex": 264,
        "blockHash": "0x76fd9163c09d28d4f5f1d553fa2eb89d071e998b392eb8379ea0a55dfbf686e3"
      }
    ],
    "blockNumber": 29761394,
    "cumulativeGasUsed": "14865667",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "OpenSky Loan",
    "OSL",
    "0x12D182BE71BF456353FBc3aeFdae4C98465D9ef5",
    "0x4Be1A297531665a0AdafdF004453C0f4b7eBBc1A"
  ],
  "solcInputHash": "597fe0c822de038e67f456c392a88115",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_settings\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ClaimERC1155Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimERC20Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"ClaimERC721Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"repayer\",\"type\":\"address\"}],\"name\":\"End\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"EndLiquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"FlashClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"StartLiquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum DataTypes.LoanStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"UpdateStatus\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SETTINGS\",\"outputs\":[{\"internalType\":\"contract IOpenSkySettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"claimERC1155Airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimERC20Airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"claimERC721Airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"repayer\",\"type\":\"address\"}],\"name\":\"end\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"endLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"loanIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"flashClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getBorrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getBorrowInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLoanData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"borrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"interestPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"uint40\",\"name\":\"borrowBegin\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowDuration\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowOverdueTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"liquidatableTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"extendableTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowEnd\",\"type\":\"uint40\"},{\"internalType\":\"enum DataTypes.LoanStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct DataTypes.LoanData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getLoanId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum DataTypes.LoanStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"borrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"interestPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"uint40\",\"name\":\"borrowBegin\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowDuration\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowOverdueTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"liquidatableTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"extendableTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowEnd\",\"type\":\"uint40\"},{\"internalType\":\"enum DataTypes.LoanStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct DataTypes.LoanData\",\"name\":\"loan\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"startLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBorrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"OpenSky Labs\",\"details\":\"The functions about handling loan are callable by the OpenSkyPool contract defined also in the OpenSkySettings*\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"claimERC1155Airdrop(address,address,uint256[],uint256[],bytes)\":{\"params\":{\"amounts\":\"The amount of the ERC1155 tokens\",\"data\":\"packed params to pass to the receiver as extra information*\",\"ids\":\"The ID of the ERC1155 token\",\"to\":\"The address which will receive the ERC1155 tokens\",\"token\":\"The address of the airdropped token\"}},\"claimERC20Airdrop(address,address,uint256)\":{\"params\":{\"amount\":\"The amount of the ERC20 token*\",\"to\":\"The address which will receive ERC20 token\",\"token\":\"The address of the airdropped token\"}},\"claimERC721Airdrop(address,address,uint256[])\":{\"params\":{\"ids\":\"The ID of the ERC721 token*\",\"to\":\"The address which will receive the ERC721 token\",\"token\":\"The address of the airdropped token\"}},\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_settings\":\"The address of the OpenSkySettings contract\",\"name\":\"The name of OpenSkyLoan NFT\",\"symbol\":\"The symbol of OpenSkyLoan NFT\"}},\"end(uint256,address,address)\":{\"params\":{\"onBehalfOf\":\"The address the repayer is repaying for\",\"repayer\":\"The address of the repayer*\",\"tokenId\":\"The ID of the loan\"}},\"endLiquidation(uint256)\":{\"params\":{\"tokenId\":\"The ID of the loan*\"}},\"flashClaim(address,uint256[],bytes)\":{\"details\":\"IMPORTANT There are security concerns for developers of flash loan receiver contracts that must be carefully considered\",\"params\":{\"loanIds\":\"The ID of loan being flash-borrowed\",\"params\":\"packed params to pass to the receiver as extra information*\",\"receiverAddress\":\"The address of the contract receiving the funds, implementing IOpenSkyFlashClaimReceiver interface\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getBorrowBalance(uint256)\":{\"params\":{\"tokenId\":\"The ID of the loan\"},\"returns\":{\"_0\":\"The borrow balance of the loan*\"}},\"getBorrowInterest(uint256)\":{\"params\":{\"tokenId\":\"The ID of the loan\"},\"returns\":{\"_0\":\"The borrow interest of the loan*\"}},\"getLoanData(uint256)\":{\"params\":{\"tokenId\":\"The ID of the loan\"},\"returns\":{\"_0\":\"The details of the loan*\"}},\"getPenalty(uint256)\":{\"params\":{\"tokenId\":\"The ID of the loan\"},\"returns\":{\"_0\":\"The penalty fee of the loan*\"}},\"getStatus(uint256)\":{\"params\":{\"tokenId\":\"The ID of the loan\"},\"returns\":{\"_0\":\"The status of the loan*\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint(uint256,address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of the loan\",\"borrowRate\":\"The borrow rate of the loan\",\"borrower\":\"The address of the borrower\",\"duration\":\"The duration of the loan\",\"nftAddress\":\"The contract address of the collateralized NFT \",\"nftTokenId\":\"The ID of the collateralized NFT\",\"reserveId\":\"The ID of the reserve\"},\"returns\":{\"loanId\":\"and loan data*\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"startLiquidation(uint256)\":{\"params\":{\"tokenId\":\"The ID of the defaulted loan*\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"getLoanId\":{\"params\":{\"nftAddress\":\"The address of the collateralized NFT\",\"tokenId\":\"The ID of the collateralized NFT\"},\"return\":\"The ID of the loan*\",\"returns\":{\"_0\":\"The ID of the loan*\"}}},\"title\":\"OpenSkyLoan contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimERC1155Airdrop(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Claim the ERC1155 token which has been airdropped to the loan contract\"},\"claimERC20Airdrop(address,address,uint256)\":{\"notice\":\"Claim the ERC20 token which has been airdropped to the loan contract\"},\"claimERC721Airdrop(address,address,uint256[])\":{\"notice\":\"Claim the ERC721 token which has been airdropped to the loan contract\"},\"end(uint256,address,address)\":{\"notice\":\"Terminates the loan\"},\"endLiquidation(uint256)\":{\"notice\":\"Ends liquidation of a loan that is fully settled\"},\"flashClaim(address,uint256[],bytes)\":{\"notice\":\"Allows smart contracts to access the collateralized NFT within one transaction, as long as the amount taken plus a fee is returned\"},\"getBorrowBalance(uint256)\":{\"notice\":\"Returns the borrow balance of a loan, including borrow interest\"},\"getBorrowInterest(uint256)\":{\"notice\":\"Returns the borrow interest of the loan\"},\"getLoanData(uint256)\":{\"notice\":\"Returns the loan data\"},\"getLoanId(address,uint256)\":{\"notice\":\"Returns the ID of the loan\"},\"getPenalty(uint256)\":{\"notice\":\"Returns the penalty fee of the loan\"},\"getStatus(uint256)\":{\"notice\":\"Returns the status of a loan\"},\"mint(uint256,address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Mints a loan NFT to user\"},\"startLiquidation(uint256)\":{\"notice\":\"Starts liquidation of the loan in default\"}},\"notice\":\"Implementation of the loan NFT for the OpenSky protocol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OpenSkyLoan.sol\":\"OpenSkyLoan\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x4716e860c041e651d2f2486399ea5a49ec12289e91b2763991a2fa3a70772acf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x8c578d9e30c8f2bb7ac01d108766df87d42b73d4d3638f01d494a894fe7c1f4b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x8756c97d6004b1ae21517a013bdec72fbf30be7852afb2f395871d280131b250\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/OpenSkyLoan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\\nimport '@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol';\\n\\nimport '@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\nimport './interfaces/IOpenSkyFlashClaimReceiver.sol';\\nimport './interfaces/IOpenSkyLoan.sol';\\nimport './interfaces/IOpenSkySettings.sol';\\nimport './interfaces/IACLManager.sol';\\nimport './interfaces/IOpenSkyNFTDescriptor.sol';\\nimport './libraries/types/DataTypes.sol';\\nimport './libraries/math/WadRayMath.sol';\\nimport './libraries/math/MathUtils.sol';\\nimport './libraries/math/PercentageMath.sol';\\nimport './libraries/helpers/Errors.sol';\\nimport './interfaces/IOpenSkyIncentivesController.sol';\\n\\n/**\\n * @title OpenSkyLoan contract\\n * @author OpenSky Labs\\n * @notice Implementation of the loan NFT for the OpenSky protocol\\n * @dev The functions about handling loan are callable by the OpenSkyPool contract defined also in the OpenSkySettings\\n **/\\ncontract OpenSkyLoan is Context, ERC721Enumerable, Ownable, ERC721Holder, ERC1155Holder, ReentrancyGuard, IOpenSkyLoan {\\n    using Counters for Counters.Counter;\\n    using PercentageMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using WadRayMath for uint128;\\n\\n\\n    mapping(uint256 => DataTypes.LoanData) internal _loans;\\n\\n    /// @inheritdoc IOpenSkyLoan\\n    mapping(address => mapping(uint256 => uint256)) public override getLoanId;\\n\\n    uint256 public totalBorrows;\\n\\n    mapping(address => uint256) public userBorrows;\\n\\n    Counters.Counter private _tokenIdTracker;\\n    IOpenSkySettings public immutable SETTINGS;\\n    \\n    address internal _pool;\\n\\n    modifier onlyPool(){\\n        require(_msgSender() == _pool, Errors.ACL_ONLY_POOL_CAN_CALL);\\n        _;\\n    }\\n\\n    modifier onlyAirdropOperator() {\\n        IACLManager ACLManager = IACLManager(SETTINGS.ACLManagerAddress());\\n        require(ACLManager.isAirdropOperator(_msgSender()), Errors.ACL_ONLY_AIRDROP_OPERATOR_CAN_CALL);\\n        _;\\n    }\\n\\n    modifier checkLoanExists(uint256 loanId) {\\n        require(_exists(loanId), Errors.LOAN_DOES_NOT_EXIST);\\n        _;\\n    }\\n    \\n    /**\\n     * @dev Constructor.\\n     * @param name The name of OpenSkyLoan NFT\\n     * @param symbol The symbol of OpenSkyLoan NFT\\n     * @param _settings The address of the OpenSkySettings contract\\n     */\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address _settings,\\n        address pool\\n    ) Ownable() ERC721(name, symbol) ReentrancyGuard() {\\n        SETTINGS = IOpenSkySettings(_settings);\\n        _pool = pool;\\n    }\\n\\n    struct BorrowLocalVars {\\n        uint40 borrowBegin;\\n        uint40 overdueTime;\\n        uint40 liquidatableTime;\\n        uint40 extendableTime;\\n        uint256 interestPerSecond;\\n    }\\n\\n    /// @inheritdoc IOpenSkyLoan\\n    function mint(\\n        uint256 reserveId,\\n        address borrower,\\n        address nftAddress,\\n        uint256 nftTokenId,\\n        uint256 amount,\\n        uint256 duration,\\n        uint256 borrowRate\\n    ) external override onlyPool returns (uint256 loanId, DataTypes.LoanData memory loan) {\\n        DataTypes.WhitelistInfo memory whitelistInfo = SETTINGS.getWhitelistDetail(reserveId, nftAddress);\\n        BorrowLocalVars memory vars;\\n\\n        vars.borrowBegin = uint40(block.timestamp);\\n        vars.overdueTime = uint40(block.timestamp + duration);\\n        vars.liquidatableTime = uint40(block.timestamp + duration + whitelistInfo.overdueDuration);\\n        // add setting config\\n        vars.extendableTime = uint40(block.timestamp + duration - whitelistInfo.extendableDuration);\\n\\n        vars.interestPerSecond = MathUtils.calculateBorrowInterestPerSecond(borrowRate, amount);\\n\\n        loan = DataTypes.LoanData({\\n            reserveId: reserveId,\\n            nftAddress: nftAddress,\\n            tokenId: nftTokenId,\\n            borrower: borrower,\\n            amount: amount,\\n            borrowBegin: vars.borrowBegin,\\n            borrowDuration: uint40(duration),\\n            borrowOverdueTime: vars.overdueTime,\\n            liquidatableTime: vars.liquidatableTime,\\n            borrowRate: uint128(borrowRate),\\n            interestPerSecond: uint128(vars.interestPerSecond),\\n            extendableTime: vars.extendableTime,\\n            borrowEnd: 0,\\n            status: DataTypes.LoanStatus.BORROWING\\n        });\\n        loanId = _mint(loan, borrower);\\n        IERC721(loan.nftAddress).approve(_pool, loan.tokenId);\\n\\n        getLoanId[nftAddress][nftTokenId] = loanId;\\n        emit Mint(loanId, borrower);\\n    }\\n\\n    function _mint(DataTypes.LoanData memory loanData, address recipient) internal returns (uint256 tokenId) {\\n        _tokenIdTracker.increment();\\n        tokenId = _tokenIdTracker.current();\\n        _safeMint(recipient, tokenId);\\n        _loans[tokenId] = loanData;\\n\\n        _triggerIncentive(loanData.borrower);\\n\\n        totalBorrows = totalBorrows + loanData.amount;\\n        userBorrows[loanData.borrower] = userBorrows[loanData.borrower] + loanData.amount;\\n    }\\n\\n    function _triggerIncentive(address borrower) internal {\\n        address incentiveControllerAddress = SETTINGS.incentiveControllerAddress();\\n        if (incentiveControllerAddress != address(0)) {\\n            IOpenSkyIncentivesController incentivesController = IOpenSkyIncentivesController(\\n                incentiveControllerAddress\\n            );\\n            incentivesController.handleAction(borrower, userBorrows[borrower], totalBorrows);\\n        }\\n    }\\n\\n    /// @inheritdoc IOpenSkyLoan\\n    function startLiquidation(uint256 tokenId) external override onlyPool checkLoanExists(tokenId) {\\n        _updateStatus(tokenId, DataTypes.LoanStatus.LIQUIDATING);\\n        _loans[tokenId].borrowEnd = uint40(block.timestamp);\\n\\n        address owner = ownerOf(tokenId);\\n        _triggerIncentive(owner);\\n\\n        userBorrows[owner] = userBorrows[owner] - _loans[tokenId].amount;\\n        totalBorrows = totalBorrows - _loans[tokenId].amount;\\n\\n        emit StartLiquidation(tokenId, _msgSender());\\n    }\\n\\n    /// @inheritdoc IOpenSkyLoan\\n    function endLiquidation(uint256 tokenId) external override onlyPool checkLoanExists(tokenId) {\\n        _burn(tokenId);\\n\\n        delete getLoanId[_loans[tokenId].nftAddress][_loans[tokenId].tokenId];\\n        delete _loans[tokenId];\\n\\n        emit EndLiquidation(tokenId, _msgSender());\\n    }\\n\\n    /// @inheritdoc IOpenSkyLoan\\n    function end(\\n        uint256 tokenId,\\n        address onBehalfOf,\\n        address repayer\\n    ) external override onlyPool checkLoanExists(tokenId) {\\n        require(ownerOf(tokenId) == onBehalfOf, Errors.LOAN_REPAYER_IS_NOT_OWNER);\\n\\n        if (_loans[tokenId].status != DataTypes.LoanStatus.LIQUIDATING) {\\n            address owner = ownerOf(tokenId);\\n            _triggerIncentive(owner);\\n\\n            userBorrows[owner] = userBorrows[owner] - _loans[tokenId].amount;\\n            totalBorrows = totalBorrows - _loans[tokenId].amount;\\n        }\\n\\n        _burn(tokenId);\\n\\n        delete getLoanId[_loans[tokenId].nftAddress][_loans[tokenId].tokenId];\\n        delete _loans[tokenId];\\n\\n        emit End(tokenId, onBehalfOf, repayer);\\n    }\\n\\n    /**\\n     * @notice Updates the status of a loan.\\n     * @param tokenId The id of the loan\\n     * @param status The status of the loan will be set\\n     **/\\n    function _updateStatus(uint256 tokenId, DataTypes.LoanStatus status) internal {\\n        DataTypes.LoanData storage loanData = _loans[tokenId];\\n        require(loanData.status != DataTypes.LoanStatus.LIQUIDATING, Errors.LOAN_LIQUIDATING_STATUS_CAN_NOT_BE_UPDATED);\\n        require(loanData.status != status, Errors.LOAN_SET_STATUS_ERROR);\\n        loanData.status = status;\\n        emit UpdateStatus(tokenId, status);\\n    }\\n\\n    /**\\n     * @notice Transfers the loan between two users. Calls the function of the incentives controller contract.\\n     * @param from The source address\\n     * @param to The destination address\\n     * @param tokenId The id of the loan\\n     **/\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._transfer(from, to, tokenId);\\n\\n        DataTypes.LoanStatus status = getStatus(tokenId);\\n        if (status == DataTypes.LoanStatus.BORROWING || status == DataTypes.LoanStatus.EXTENDABLE) {\\n            address incentiveControllerAddress = SETTINGS.incentiveControllerAddress();\\n            DataTypes.LoanData memory loanData = _loans[tokenId];\\n            if (incentiveControllerAddress != address(0)) {\\n                IOpenSkyIncentivesController incentivesController = IOpenSkyIncentivesController(\\n                    incentiveControllerAddress\\n                );\\n                incentivesController.handleAction(from, userBorrows[from], totalBorrows);\\n                if (from != to) {\\n                    incentivesController.handleAction(to, userBorrows[to], totalBorrows);\\n                }\\n            }\\n            userBorrows[from] = userBorrows[from] - loanData.amount;\\n            userBorrows[to] = userBorrows[to] + loanData.amount;\\n        }\\n    }\\n\\n    /// @inheritdoc IOpenSkyLoan\\n    function getLoanData(uint256 tokenId) external view override checkLoanExists(tokenId) returns (DataTypes.LoanData memory) {\\n        DataTypes.LoanData memory loan = _loans[tokenId];\\n        loan.status = getStatus(tokenId);\\n        return loan;\\n    }\\n\\n    /// @inheritdoc IOpenSkyLoan\\n    function getBorrowInterest(uint256 tokenId) public view override checkLoanExists(tokenId) returns (uint256) {\\n        DataTypes.LoanData memory loan = _loans[tokenId];\\n        uint256 endTime = loan.borrowEnd > 0 ? loan.borrowEnd : block.timestamp;\\n        return loan.interestPerSecond.rayMul(endTime - loan.borrowBegin);\\n    }\\n\\n    /// @inheritdoc IOpenSkyLoan\\n    function getStatus(uint256 tokenId) public view override checkLoanExists(tokenId) returns (DataTypes.LoanStatus) {\\n        DataTypes.LoanData memory loan = _loans[tokenId];\\n        DataTypes.LoanStatus status = _loans[tokenId].status;\\n        if (status == DataTypes.LoanStatus.BORROWING) {\\n            if (loan.liquidatableTime < block.timestamp) {\\n                status = DataTypes.LoanStatus.LIQUIDATABLE;\\n            } else if (loan.borrowOverdueTime < block.timestamp) {\\n                status = DataTypes.LoanStatus.OVERDUE;\\n            } else if (loan.extendableTime < block.timestamp) {\\n                status = DataTypes.LoanStatus.EXTENDABLE;\\n            }\\n        }\\n        return status;\\n    }\\n\\n    /// @inheritdoc IOpenSkyLoan\\n    function getBorrowBalance(uint256 tokenId) external view override checkLoanExists(tokenId) returns (uint256) {\\n        return _loans[tokenId].amount + getBorrowInterest(tokenId);\\n    }\\n\\n    /// @inheritdoc IOpenSkyLoan\\n    function getPenalty(uint256 tokenId) external view override checkLoanExists(tokenId) returns (uint256) {\\n        DataTypes.LoanStatus status = getStatus(tokenId);\\n        DataTypes.LoanData memory loan = _loans[tokenId];\\n        uint256 penalty = 0;\\n        if (status == DataTypes.LoanStatus.BORROWING) {\\n            penalty = loan.amount.percentMul(SETTINGS.prepaymentFeeFactor());\\n        } else if (status == DataTypes.LoanStatus.OVERDUE) {\\n            penalty = loan.amount.percentMul(SETTINGS.overdueLoanFeeFactor());\\n        }\\n        return penalty;\\n    }\\n\\n    /// @inheritdoc IOpenSkyLoan\\n    function flashClaim(\\n        address receiverAddress,\\n        uint256[] calldata loanIds,\\n        bytes calldata params\\n    ) external override nonReentrant {\\n        uint256 i;\\n        IOpenSkyFlashClaimReceiver receiver = IOpenSkyFlashClaimReceiver(receiverAddress);\\n        // !!!CAUTION: receiver contract may reentry mint, burn, flashclaim again\\n\\n        // only loan owner can do flashclaim\\n        address[] memory nftAddresses = new address[](loanIds.length);\\n        uint256[] memory tokenIds = new uint256[](loanIds.length);\\n        for (i = 0; i < loanIds.length; i++) {\\n            require(ownerOf(loanIds[i]) == _msgSender(), Errors.LOAN_CALLER_IS_NOT_OWNER);\\n            DataTypes.LoanStatus status = getStatus(loanIds[i]);\\n            require(\\n                status != DataTypes.LoanStatus.LIQUIDATABLE && status != DataTypes.LoanStatus.LIQUIDATING,\\n                Errors.FLASHCLAIM_STATUS_ERROR\\n            );\\n            DataTypes.LoanData memory loan = _loans[loanIds[i]];\\n            nftAddresses[i] = loan.nftAddress;\\n            tokenIds[i] = loan.tokenId;\\n        }\\n\\n        // step 1: moving underlying asset forward to receiver contract\\n        for (i = 0; i < loanIds.length; i++) {\\n            IERC721(nftAddresses[i]).safeTransferFrom(address(this), receiverAddress, tokenIds[i]);\\n        }\\n\\n        // setup 2: execute receiver contract, doing something like airdrop\\n        require(\\n            receiver.executeOperation(nftAddresses, tokenIds, _msgSender(), address(this), params),\\n            Errors.FLASHCLAIM_EXECUTOR_ERROR\\n        );\\n\\n        // setup 3: moving underlying asset backward from receiver contract\\n        for (i = 0; i < loanIds.length; i++) {\\n            IERC721(nftAddresses[i]).safeTransferFrom(receiverAddress, address(this), tokenIds[i]);\\n            emit FlashClaim(receiverAddress, _msgSender(), nftAddresses[i], tokenIds[i]);\\n        }\\n    }\\n\\n    /// @inheritdoc IOpenSkyLoan\\n    function claimERC20Airdrop(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external override onlyAirdropOperator {\\n        // make sure that params are checked in admin contract\\n        IERC20(token).safeTransfer(to, amount);\\n        emit ClaimERC20Airdrop(token, to, amount);\\n    }\\n\\n    /// @inheritdoc IOpenSkyLoan\\n    function claimERC721Airdrop(\\n        address token,\\n        address to,\\n        uint256[] calldata ids\\n    ) external override onlyAirdropOperator {\\n        // make sure that params are checked in admin contract\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            require(getLoanId[token][ids[i]] == 0, Errors.LOAN_COLLATERAL_NFT_CAN_NOT_BE_CLAIMED);\\n            IERC721(token).safeTransferFrom(address(this), to, ids[i]);\\n        }\\n        emit ClaimERC721Airdrop(token, to, ids);\\n    }\\n\\n    /// @inheritdoc IOpenSkyLoan\\n    function claimERC1155Airdrop(\\n        address token,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external override onlyAirdropOperator {\\n        // make sure that params are checked in admin contract\\n        IERC1155(token).safeBatchTransferFrom(address(this), to, ids, amounts, data);\\n        emit ClaimERC1155Airdrop(token, to, ids, amounts, data);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC1155Receiver, IERC165, ERC721Enumerable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        if (SETTINGS.loanDescriptorAddress() != address(0)) {\\n            return IOpenSkyNFTDescriptor(SETTINGS.loanDescriptorAddress()).tokenURI(tokenId);\\n        } else {\\n            return '';\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fc5ff07829deb94758ce3f8545895e80803fe33beb9316dbe13a403749e201d\",\"license\":\"MIT\"},\"contracts/interfaces/IACLManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IACLManager {\\n    function addEmergencyAdmin(address admin) external;\\n    \\n    function isEmergencyAdmin(address admin) external view returns (bool);\\n    \\n    function removeEmergencyAdmin(address admin) external;\\n    \\n    function addGovernance(address admin) external;\\n    \\n    function isGovernance(address admin) external view returns (bool);\\n\\n    function removeGovernance(address admin) external;\\n\\n    function addPoolAdmin(address admin) external;\\n\\n    function isPoolAdmin(address admin) external view returns (bool);\\n\\n    function removePoolAdmin(address admin) external;\\n\\n    function addLiquidationOperator(address address_) external;\\n\\n    function isLiquidationOperator(address address_) external view returns (bool);\\n\\n    function removeLiquidationOperator(address address_) external;\\n\\n    function addAirdropOperator(address address_) external;\\n\\n    function isAirdropOperator(address address_) external view returns (bool);\\n\\n    function removeAirdropOperator(address address_) external;\\n}\\n\",\"keccak256\":\"0x0e77d3bdc88ba10cd78a9a80350bbf0d4120a1d0ac7c7911bef8c8cb389cf42f\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyFlashClaimReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IOpenSkyFlashClaimReceiver {\\n    function executeOperation(\\n        address[] calldata nftAddresses,\\n        uint256[] calldata tokenIds,\\n        address initiator,\\n        address operator,\\n        bytes calldata params\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x20c9cbf82dc555a3e1f468dc755742af0dedb3ab5165b975b473e55870d0fbe4\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\ninterface IOpenSkyIncentivesController {\\n    function handleAction(\\n        address account,\\n        uint256 userBalance,\\n        uint256 totalSupply\\n    ) external;\\n\\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to,\\n        bool stake\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x54643871d96144866e7076d90687f730352afca73a363cc108b2cedfa7c197c8\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyLoan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '../libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IOpenSkyLoan\\n * @author OpenSky Labs\\n * @notice Defines the basic interface for OpenSkyLoan.  This loan NFT is composable and can be used in other DeFi protocols \\n **/\\ninterface IOpenSkyLoan is IERC721 {\\n\\n    /**\\n     * @dev Emitted on mint()\\n     * @param tokenId The ID of the loan\\n     * @param recipient The address that will receive the loan NFT\\n     **/\\n    event Mint(uint256 indexed tokenId, address indexed recipient);\\n\\n    /**\\n     * @dev Emitted on end()\\n     * @param tokenId The ID of the loan\\n     * @param onBehalfOf The address the repayer is repaying for\\n     * @param repayer The address of the user initiating the repayment()\\n     **/\\n    event End(uint256 indexed tokenId, address indexed onBehalfOf, address indexed repayer);\\n\\n    /**\\n     * @dev Emitted on startLiquidation()\\n     * @param tokenId The ID of the loan\\n     * @param liquidator The address of the liquidator\\n     **/\\n    event StartLiquidation(uint256 indexed tokenId, address indexed liquidator);\\n\\n    /**\\n     * @dev Emitted on endLiquidation()\\n     * @param tokenId The ID of the loan\\n     * @param liquidator The address of the liquidator\\n     **/\\n    event EndLiquidation(uint256 indexed tokenId, address indexed liquidator);\\n\\n    /**\\n     * @dev Emitted on updateStatus()\\n     * @param tokenId The ID of the loan\\n     * @param status The status of loan\\n     **/\\n    event UpdateStatus(uint256 indexed tokenId, DataTypes.LoanStatus indexed status);\\n\\n    /**\\n     * @dev Emitted on flashClaim()\\n     * @param receiver The address of the flash loan receiver contract\\n     * @param sender The address that will receive tokens\\n     * @param nftAddress The address of the collateralized NFT\\n     * @param tokenId The ID of collateralized NFT\\n     **/\\n    event FlashClaim(address indexed receiver, address sender, address indexed nftAddress, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted on claimERC20Airdrop()\\n     * @param token The address of the ERC20 token\\n     * @param to The address that will receive the ERC20 tokens\\n     * @param amount The amount of the tokens\\n     **/\\n    event ClaimERC20Airdrop(address indexed token, address indexed to, uint256 amount);\\n\\n    /**\\n     * @dev Emitted on claimERC721Airdrop()\\n     * @param token The address of ERC721 token\\n     * @param to The address that will receive the eRC721 tokens\\n     * @param ids The ID of the token\\n     **/\\n    event ClaimERC721Airdrop(address indexed token, address indexed to, uint256[] ids);\\n\\n    /**\\n     * @dev Emitted on claimERC1155Airdrop()\\n     * @param token The address of the ERC1155 token\\n     * @param to The address that will receive the ERC1155 tokens\\n     * @param ids The ID of the token\\n     * @param amounts The amount of the tokens\\n     * @param data packed params to pass to the receiver as extra information\\n     **/\\n    event ClaimERC1155Airdrop(address indexed token, address indexed to, uint256[] ids, uint256[] amounts, bytes data);\\n\\n    /**\\n     * @notice Mints a loan NFT to user\\n     * @param reserveId The ID of the reserve\\n     * @param borrower The address of the borrower\\n     * @param nftAddress The contract address of the collateralized NFT \\n     * @param nftTokenId The ID of the collateralized NFT\\n     * @param amount The amount of the loan\\n     * @param duration The duration of the loan\\n     * @param borrowRate The borrow rate of the loan\\n     * @return loanId and loan data\\n     **/\\n    function mint(\\n        uint256 reserveId,\\n        address borrower,\\n        address nftAddress,\\n        uint256 nftTokenId,\\n        uint256 amount,\\n        uint256 duration,\\n        uint256 borrowRate\\n    ) external returns (uint256 loanId, DataTypes.LoanData memory loan);\\n\\n    /**\\n     * @notice Starts liquidation of the loan in default\\n     * @param tokenId The ID of the defaulted loan\\n     **/\\n    function startLiquidation(uint256 tokenId) external;\\n\\n    /**\\n     * @notice Ends liquidation of a loan that is fully settled\\n     * @param tokenId The ID of the loan\\n     **/\\n    function endLiquidation(uint256 tokenId) external;\\n\\n    /**\\n     * @notice Terminates the loan\\n     * @param tokenId The ID of the loan\\n     * @param onBehalfOf The address the repayer is repaying for\\n     * @param repayer The address of the repayer\\n     **/\\n    function end(uint256 tokenId, address onBehalfOf, address repayer) external;\\n    \\n    /**\\n     * @notice Returns the loan data\\n     * @param tokenId The ID of the loan\\n     * @return The details of the loan\\n     **/\\n    function getLoanData(uint256 tokenId) external view returns (DataTypes.LoanData calldata);\\n\\n    /**\\n     * @notice Returns the status of a loan\\n     * @param tokenId The ID of the loan\\n     * @return The status of the loan\\n     **/\\n    function getStatus(uint256 tokenId) external view returns (DataTypes.LoanStatus);\\n\\n    /**\\n     * @notice Returns the borrow interest of the loan\\n     * @param tokenId The ID of the loan\\n     * @return The borrow interest of the loan\\n     **/\\n    function getBorrowInterest(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the borrow balance of a loan, including borrow interest\\n     * @param tokenId The ID of the loan\\n     * @return The borrow balance of the loan\\n     **/\\n    function getBorrowBalance(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the penalty fee of the loan\\n     * @param tokenId The ID of the loan\\n     * @return The penalty fee of the loan\\n     **/\\n    function getPenalty(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the ID of the loan\\n     * @param nftAddress The address of the collateralized NFT\\n     * @param tokenId The ID of the collateralized NFT\\n     * @return The ID of the loan\\n     **/\\n    function getLoanId(address nftAddress, uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Allows smart contracts to access the collateralized NFT within one transaction,\\n     * as long as the amount taken plus a fee is returned\\n     * @dev IMPORTANT There are security concerns for developers of flash loan receiver contracts that must be carefully considered\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IOpenSkyFlashClaimReceiver interface\\n     * @param loanIds The ID of loan being flash-borrowed\\n     * @param params packed params to pass to the receiver as extra information\\n     **/\\n    function flashClaim(\\n        address receiverAddress,\\n        uint256[] calldata loanIds,\\n        bytes calldata params\\n    ) external;\\n\\n    /**\\n     * @notice Claim the ERC20 token which has been airdropped to the loan contract\\n     * @param token The address of the airdropped token\\n     * @param to The address which will receive ERC20 token\\n     * @param amount The amount of the ERC20 token\\n     **/\\n    function claimERC20Airdrop(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Claim the ERC721 token which has been airdropped to the loan contract\\n     * @param token The address of the airdropped token\\n     * @param to The address which will receive the ERC721 token\\n     * @param ids The ID of the ERC721 token\\n     **/\\n    function claimERC721Airdrop(\\n        address token,\\n        address to,\\n        uint256[] calldata ids\\n    ) external;\\n\\n    /**\\n     * @notice Claim the ERC1155 token which has been airdropped to the loan contract\\n     * @param token The address of the airdropped token\\n     * @param to The address which will receive the ERC1155 tokens\\n     * @param ids The ID of the ERC1155 token\\n     * @param amounts The amount of the ERC1155 tokens\\n     * @param data packed params to pass to the receiver as extra information\\n     **/\\n    function claimERC1155Airdrop(\\n        address token,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xac386c73607e7b408e702f0946d474834bed10fa50d862a0e8cd062e457207ce\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyNFTDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IOpenSkyNFTDescriptor {\\n    function tokenURI(uint256 reserveId)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0x1fb58d86a90c029c42c8a58bf2bff4f3457d761544959facb174b5fe03c599cc\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkySettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\nimport '../libraries/types/DataTypes.sol';\\n\\ninterface IOpenSkySettings {\\n    event InitPoolAddress(address operator, address address_);\\n    event InitLoanAddress(address operator, address address_);\\n    event InitVaultFactoryAddress(address operator, address address_);\\n    event InitIncentiveControllerAddress(address operator, address address_);\\n    event InitWETHGatewayAddress(address operator, address address_);\\n    event InitPunkGatewayAddress(address operator, address address_);\\n    event InitDaoVaultAddress(address operator, address address_);\\n\\n    event AddToWhitelist(address operator, uint256 reserveId, address nft);\\n    event RemoveFromWhitelist(address operator, uint256 reserveId, address nft);\\n    event SetReserveFactor(address operator, uint256 factor);\\n    event SetPrepaymentFeeFactor(address operator, uint256 factor);\\n    event SetOverdueLoanFeeFactor(address operator, uint256 factor);\\n    event SetMoneyMarketAddress(address operator, address address_);\\n    event SetTreasuryAddress(address operator, address address_);\\n    event SetACLManagerAddress(address operator, address address_);\\n    event SetLoanDescriptorAddress(address operator, address address_);\\n    event SetNftPriceOracleAddress(address operator, address address_);\\n    event SetInterestRateStrategyAddress(address operator, address address_);\\n    event AddLiquidator(address operator, address address_);\\n    event RemoveLiquidator(address operator, address address_);\\n\\n    function poolAddress() external view returns (address);\\n\\n    function loanAddress() external view returns (address);\\n\\n    function vaultFactoryAddress() external view returns (address);\\n\\n    function incentiveControllerAddress() external view returns (address);\\n\\n    function wethGatewayAddress() external view returns (address);\\n\\n    function punkGatewayAddress() external view returns (address);\\n\\n    function inWhitelist(uint256 reserveId, address nft) external view returns (bool);\\n\\n    function getWhitelistDetail(uint256 reserveId, address nft) external view returns (DataTypes.WhitelistInfo memory);\\n\\n    function reserveFactor() external view returns (uint256); // treasury ratio\\n\\n    function MAX_RESERVE_FACTOR() external view returns (uint256);\\n\\n    function prepaymentFeeFactor() external view returns (uint256);\\n\\n    function overdueLoanFeeFactor() external view returns (uint256);\\n\\n    function moneyMarketAddress() external view returns (address);\\n\\n    function treasuryAddress() external view returns (address);\\n\\n    function daoVaultAddress() external view returns (address);\\n\\n    function ACLManagerAddress() external view returns (address);\\n\\n    function loanDescriptorAddress() external view returns (address);\\n\\n    function nftPriceOracleAddress() external view returns (address);\\n\\n    function interestRateStrategyAddress() external view returns (address);\\n    \\n    function isLiquidator(address liquidator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd5c1c2468464891b3ce379c8a03bc21c2c67fcf0c7493e3b35fd573fa21ea448\",\"license\":\"MIT\"},\"contracts/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    \\n    // common\\n    string public constant MATH_MULTIPLICATION_OVERFLOW = '100';\\n    string public constant MATH_ADDITION_OVERFLOW = '101';\\n    string public constant MATH_DIVISION_BY_ZERO = '102';\\n\\n    string public constant ETH_TRANSFER_FAILED = '110';\\n    string public constant RECEIVE_NOT_ALLOWED = '111';\\n    string public constant FALLBACK_NOT_ALLOWED = '112';\\n\\n    // settings/acl\\n    string public constant ACL_ONLY_GOVERNANCE_CAN_CALL = '200';\\n    string public constant ACL_ONLY_EMERGENCY_ADMIN_CAN_CALL = '201';\\n    string public constant ACL_ONLY_POOL_ADMIN_CAN_CALL = '202';\\n    string public constant ACL_ONLY_LIQUIDATOR_CAN_CALL = '203';\\n    string public constant ACL_ONLY_AIRDROP_OPERATOR_CAN_CALL = '204';\\n    string public constant ACL_ONLY_POOL_CAN_CALL = '205';\\n\\n    // lending & borrowing \\n    // reserve\\n    string public constant RESERVE_DOES_NOT_EXIST = '300';\\n    string public constant RESERVE_LIQUIDITY_INSUFFICIENT = '301';\\n    string public constant RESERVE_INDEX_OVERFLOW = '302';\\n    string public constant RESERVE_SWITCH_MONEY_MARKET_STATE_ERROR = '303';\\n    string public constant RESERVE_TREASURY_FACTOR_NOT_ALLOWED = '304';\\n    string public constant RESERVE_TOKEN_CAN_NOT_BE_CLAIMED = '305';\\n\\n    // token\\n    string public constant AMOUNT_SCALED_IS_ZERO = '310';\\n    string public constant AMOUNT_TRANSFER_OVERFLOW = '311';\\n    \\n    //deposit\\n    string public constant DEPOSIT_AMOUNT_SHOULD_BE_BIGGER_THAN_ZERO = '320';\\n\\n    // withdraw\\n    string public constant WITHDRAW_AMOUNT_NOT_ALLOWED = '321';\\n    string public constant WITHDRAW_LIQUIDITY_NOT_SUFFICIENT = '322';\\n\\n    // borrow\\n    string public constant BORROW_DURATION_NOT_ALLOWED = '330';\\n    string public constant BORROW_AMOUNT_EXCEED_BORROW_LIMIT = '331';\\n    string public constant NFT_ADDRESS_IS_NOT_IN_WHITELIST = '332';\\n\\n    // repay\\n    string public constant REPAY_STATUS_ERROR = '333';\\n    string public constant REPAY_MSG_VALUE_ERROR = '334';\\n\\n    // extend\\n    string public constant EXTEND_STATUS_ERROR = '335';\\n    string public constant EXTEND_MSG_VALUE_ERROR = '336';\\n\\n    // liquidate\\n    string public constant START_LIQUIDATION_STATUS_ERROR = '360';\\n    string public constant END_LIQUIDATION_STATUS_ERROR = '361';\\n    string public constant END_LIQUIDATION_AMOUNT_ERROR = '362';\\n\\n    // loan\\n    string public constant LOAN_DOES_NOT_EXIST = '400';\\n    string public constant LOAN_SET_STATUS_ERROR = '401';\\n    string public constant LOAN_REPAYER_IS_NOT_OWNER = '402';\\n    string public constant LOAN_LIQUIDATING_STATUS_CAN_NOT_BE_UPDATED = '403';\\n    string public constant LOAN_CALLER_IS_NOT_OWNER = '404';\\n    string public constant LOAN_COLLATERAL_NFT_CAN_NOT_BE_CLAIMED = '405';\\n\\n    string public constant FLASHCLAIM_EXECUTOR_ERROR = '410';\\n    string public constant FLASHCLAIM_STATUS_ERROR = '411';\\n\\n    // money market\\n    string public constant MONEY_MARKET_DEPOSIT_AMOUNT_NOT_ALLOWED = '500';\\n    string public constant MONEY_MARKET_WITHDRAW_AMOUNT_NOT_ALLOWED = '501';\\n    string public constant MONEY_MARKET_APPROVAL_FAILED = '502';\\n    string public constant MONEY_MARKET_DELEGATE_CALL_ERROR = '503';\\n    string public constant MONEY_MARKET_REQUIRE_DELEGATE_CALL = '504';\\n\\n    // price oracle\\n    string public constant PRICE_ORACLE_HAS_NO_PRICE_FEED = '600';\\n    string public constant PRICE_ORACLE_INCORRECT_TIMESTAMP = '601';\\n    string public constant PRICE_ORACLE_PARAMS_ERROR = '602';\\n}\\n\",\"keccak256\":\"0x56d90f525ba934c8c5de3ba8028441ac11ad5130f660b0720d18c1280561c0b4\",\"license\":\"MIT\"},\"contracts/libraries/math/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {WadRayMath} from './WadRayMath.sol';\\n\\nlibrary MathUtils {\\n    using WadRayMath for uint256;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n     * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate linearly accumulated during the timeDelta, in ray\\n     **/\\n\\n    function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp) external view returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 timeDifference = block.timestamp - (uint256(lastUpdateTimestamp));\\n\\n        return (rate * timeDifference) / SECONDS_PER_YEAR + WadRayMath.ray();\\n    }\\n\\n    function calculateBorrowInterest(\\n        uint256 borrowRate,\\n        uint256 amount,\\n        uint256 duration\\n    ) external pure returns (uint256) {\\n        return amount.rayMul(borrowRate.rayMul(duration).rayDiv(SECONDS_PER_YEAR));\\n    }\\n\\n    function calculateBorrowInterestPerSecond(uint256 borrowRate, uint256 amount) external pure returns (uint256) {\\n        return amount.rayMul(borrowRate).rayDiv(SECONDS_PER_YEAR);\\n    }\\n\\n    function calculateLoanSupplyRate(\\n        uint256 availableLiquidity,\\n        uint256 totalBorrows,\\n        uint256 borrowRate\\n    ) external pure returns (uint256 loanSupplyRate, uint256 utilizationRate) {\\n        utilizationRate = (totalBorrows == 0 && availableLiquidity == 0)\\n            ? 0\\n            : totalBorrows.rayDiv(availableLiquidity + totalBorrows);\\n        loanSupplyRate = utilizationRate.rayMul(borrowRate);\\n    }\\n}\\n\",\"keccak256\":\"0xe06262969c3e10f221573fd7bfdf3a89942957b5d957a6110cb5e933d2bdbff6\",\"license\":\"MIT\"},\"contracts/libraries/math/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../helpers/Errors.sol';\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded half up\\n **/\\n\\nlibrary PercentageMath {\\n  uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\n  uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\n\\n  /**\\n   * @dev Executes a percentage multiplication\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The percentage of value\\n   **/\\n  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    if (value == 0 || percentage == 0) {\\n      return 0;\\n    }\\n\\n    require(\\n      value <= (type(uint256).max - HALF_PERCENT) / percentage,\\n      Errors.MATH_MULTIPLICATION_OVERFLOW\\n    );\\n\\n    return (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\\n  }\\n\\n  /**\\n   * @dev Executes a percentage division\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The value divided the percentage\\n   **/\\n  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    require(percentage != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfPercentage = percentage / 2;\\n\\n    require(\\n      value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR,\\n      Errors.MATH_MULTIPLICATION_OVERFLOW\\n    );\\n\\n    return (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\n  }\\n}\\n\",\"keccak256\":\"0xe8333e1a929245e4198f87645eae3fc8749e8e29f505427b38ec8ca035434953\",\"license\":\"MIT\"},\"contracts/libraries/math/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {Errors} from '../helpers/Errors.sol';\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @return One ray, 1e27\\n     **/\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    /**\\n     * @return One wad, 1e18\\n     **/\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e27/2\\n     **/\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e18/2\\n     **/\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     **/\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfWAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * b + halfWAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     **/\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * WAD + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfRAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * b + halfRAY) / RAY;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, truncating the mantissa\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMulTruncate(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return (a * b) / RAY;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * RAY + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, truncating the mantissa\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDivTruncate(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        return (a * RAY) / b;\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @param a Ray\\n     * @return a casted to wad, rounded half up to the nearest wad\\n     **/\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n        uint256 result = halfRatio + a;\\n        require(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\\n\\n        return result / WAD_RAY_RATIO;\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @param a Wad\\n     * @return a converted in ray\\n     **/\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        uint256 result = a * WAD_RAY_RATIO;\\n        require(result / WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4bf6b9a00c5e9938726d173f11b56de8edd92e17593e4dfa61a3ce7336756c6b\",\"license\":\"MIT\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        uint256 reserveId;\\n        address underlyingAsset;\\n        address oTokenAddress;\\n        address moneyMarketAddress;\\n        uint128 lastSupplyIndex;\\n        uint256 borrowingInterestPerSecond;\\n        uint256 lastMoneyMarketBalance;\\n        uint40 lastUpdateTimestamp;\\n        uint256 totalBorrows;\\n        address interestModelAddress;\\n        uint256 treasuryFactor;\\n        bool isMoneyMarketOn;\\n    }\\n\\n    struct LoanData {\\n        uint256 reserveId;\\n        address nftAddress;\\n        uint256 tokenId;\\n        address borrower;\\n        uint256 amount;\\n        uint128 borrowRate;\\n        uint128 interestPerSecond;\\n        uint40 borrowBegin;\\n        uint40 borrowDuration;\\n        uint40 borrowOverdueTime;\\n        uint40 liquidatableTime;\\n        uint40 extendableTime;\\n        uint40 borrowEnd;\\n        LoanStatus status;\\n    }\\n\\n    enum LoanStatus {\\n        NONE,\\n        BORROWING,\\n        EXTENDABLE,\\n        OVERDUE,\\n        LIQUIDATABLE,\\n        LIQUIDATING\\n    }\\n\\n    struct WhitelistInfo {\\n        bool enabled;\\n        string name;\\n        string symbol;\\n        uint256 LTV;\\n        uint256 minBorrowDuration;\\n        uint256 maxBorrowDuration;\\n        uint256 extendableDuration;\\n        uint256 overdueDuration;\\n    }\\n}\\n\",\"keccak256\":\"0x487cd1dedb3146da46144bc8f0e5b970c5173efa8c19700184b8207c1ee3fc55\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "$f742c272e27921345744ab659e4a493fb5$__90630c2de09090604401602060405180830381865af4158015611ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0a9190614f0e565b816080018181525050604051806101c001604052808c81526020018a6001600160a01b031681526020018981526020018b6001600160a01b03168152602001888152602001866001600160801b0316815260200182608001516001600160801b03168152602001826000015164ffffffffff1681526020018764ffffffffff168152602001826020015164ffffffffff168152602001826040015164ffffffffff168152602001826060015164ffffffffff168152602001600064ffffffffff16815260200160016005811115611de357611de36146c7565b90529250611df1838b6134d4565b6020840151601154604080870151905163095ea7b360e01b81526001600160a01b0392831660048201526024810191909152929650169063095ea7b390604401600060405180830381600087803b158015611e4b57600080fd5b505af1158015611e5f573d6000803e3d6000fd5b505050506001600160a01b038981166000908152600d602090815260408083208c845290915280822087905551918c169186917ff3cea5493d790af0133817606f7350a91d7f154ea52eaa79d179d4d231e5010291a3505097509795505050505050565b600a546001600160a01b03163314611f1d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610654565b611f2760006136eb565b565b606060018054610c9590614d20565b600081611f4481612d0a565b6040518060400160405280600381526020016203430360ec1b81525090611f7e5760405162461bcd60e51b81526004016106549190614495565b506000611f8a8461160c565b6000858152600c6020908152604080832081516101c0810183528154815260018201546001600160a01b039081169482019490945260028201549281019290925260038101549092166060820152600482015460808201526005808301546001600160801b0380821660a0850152600160801b9091041660c0830152600683015464ffffffffff80821660e0850152600160281b82048116610100850152600160501b82048116610120850152600160781b82048116610140850152600160a01b82048116610160850152600160c81b820416610180840152949550929390926101a0840191600160f01b900460ff169081111561208a5761208a6146c7565b600581111561209b5761209b6146c7565b9052509050600060018360058111156120b6576120b66146c7565b14156121535761214c7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ce87179f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561211d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121419190614f0e565b60808401519061373d565b905061107b565b6003836005811115612167576121676146c7565b141561107b576121ce7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d7a5a9d36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561211d573d6000803e3d6000fd5b9695505050505050565b6011546001600160a01b0316336001600160a01b0316146040518060400160405280600381526020016232303560e81b815250906122295760405162461bcd60e51b81526004016106549190614495565b508061223481612d0a565b6040518060400160405280600381526020016203430360ec1b8152509061226e5760405162461bcd60e51b81526004016106549190614495565b5061227a8260056137c7565b6000828152600c60205260408120600601805464ffffffffff60c81b1916600160c81b4264ffffffffff16021790556122b283611991565b90506122bd81613315565b6000838152600c60209081526040808320600401546001600160a01b0385168452600f909252909120546122f19190614d55565b6001600160a01b0382166000908152600f6020908152604080832093909355858252600c90522060040154600e546123299190614d55565b600e55604051339084907f59173af14430de8eac2adf90a01b6fa0f9309c0a43c38c2d0757fecd34be291590600090a3505050565b6001600160a01b0382163314156123b75760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610654565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61242d3383612e51565b6124495760405162461bcd60e51b815260040161065490614d6c565b61245584848484613911565b50505050565b606060006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166397dfa0d16040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ea9190614dbd565b6001600160a01b0316146125ec577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166397dfa0d16040518163ffffffff1660e01b8152600401602060405180830381865afa158015612556573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257a9190614dbd565b6001600160a01b031663c87b56dd836040518263ffffffff1660e01b81526004016125a791815260200190565b600060405180830381865afa1580156125c4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105ff9190810190614f27565b505060408051602081019091526000815290565b919050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015612665573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126899190614dbd565b90506001600160a01b038116639078c85a336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156126df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127039190614d03565b604051806040016040528060038152602001620c8c0d60ea1b8152509061273d5760405162461bcd60e51b81526004016106549190614495565b5060005b8281101561286d576001600160a01b0386166000908152600d602052604081209085858481811061277457612774614bcf565b905060200201358152602001908152602001600020546000146040518060400160405280600381526020016234303560e81b815250906127c75760405162461bcd60e51b81526004016106549190614495565b50856001600160a01b03166342842e0e30878787868181106127eb576127eb614bcf565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561284257600080fd5b505af1158015612856573d6000803e3d6000fd5b50505050808061286590614bfb565b915050612741565b50836001600160a01b0316856001600160a01b03167f6c6b18e67b757c02ba92ef0f54038fc2135767acf9bef174b8780835ff45582285856040516128b3929190614f91565b60405180910390a35050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015612922573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129469190614dbd565b90506001600160a01b038116639078c85a336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561299c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129c09190614d03565b604051806040016040528060038152602001620c8c0d60ea1b815250906129fa5760405162461bcd60e51b81526004016106549190614495565b50604051631759616b60e11b81526001600160a01b038a1690632eb2c2d690612a359030908c908c908c908c908c908c908c90600401614fa5565b600060405180830381600087803b158015612a4f57600080fd5b505af1158015612a63573d6000803e3d6000fd5b50505050876001600160a01b0316896001600160a01b03167fc8144f7a11a69e58de79275b3e7420b4942b4e8318a0e0aa9ccb457c60387b02898989898989604051612ab496959493929190614ffa565b60405180910390a3505050505050505050565b6011546001600160a01b0316336001600160a01b0316146040518060400160405280600381526020016232303560e81b81525090612b185760405162461bcd60e51b81526004016106549190614495565b5080612b2381612d0a565b6040518060400160405280600381526020016203430360ec1b81525090612b5d5760405162461bcd60e51b81526004016106549190614495565b50612b678261342d565b6000828152600c602081815260408084206001810180546001600160a01b03168652600d845282862060028301805488529085528387208790558887529490935284815582546001600160a01b0319908116909355928490556003830180549092169091556004820183905560058201839055600690910180546001600160f81b031916905551339184917ffd2b5951436d1ea366069166d930e14be3feb38021ab9cb0269ba75b3db9af8c9190a35050565b600a546001600160a01b03163314612c745760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610654565b6001600160a01b038116612cd95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610654565b612ce2816136eb565b50565b60006001600160e01b03198216630271189760e51b14806105ff57506105ff82613944565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612d5c82611991565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000821580612da2575081155b15612daf575060006105ff565b81612dc760026b033b2e3c9fd0803ce8000000615043565b612dd390600019614d55565b612ddd9190615043565b8311156040518060400160405280600381526020016203130360ec1b81525090612e1a5760405162461bcd60e51b81526004016106549190614495565b506b033b2e3c9fd0803ce8000000612e33600282615043565b612e3d8486615065565b612e479190614dda565b611a749190615043565b6000612e5c82612d0a565b612ebd5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610654565b6000612ec883611991565b9050806001600160a01b0316846001600160a01b03161480612f035750836001600160a01b0316612ef884610d18565b6001600160a01b0316145b80610ebf57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16610ebf565b612f42838383613969565b6000612f4d8261160c565b90506001816005811115612f6357612f636146c7565b1480612f8057506002816005811115612f7e57612f7e6146c7565b145b156124555760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636d6a723c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612fe5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130099190614dbd565b6000848152600c6020908152604080832081516101c0810183528154815260018201546001600160a01b039081169482019490945260028201549281019290925260038101549092166060820152600482015460808201526005808301546001600160801b0380821660a0850152600160801b9091041660c0830152600683015464ffffffffff80821660e0850152600160281b82048116610100850152600160501b82048116610120850152600160781b82048116610140850152600160a01b82048116610160850152600160c81b820416610180840152949550929390926101a0840191600160f01b900460ff1690811115613109576131096146c7565b600581111561311a5761311a6146c7565b90525090506001600160a01b03821615613243576001600160a01b038681166000818152600f60205260409081902054600e5491516318c39f1760e11b815260048101939093526024830152604482015283918216906331873e2e90606401600060405180830381600087803b15801561319357600080fd5b505af11580156131a7573d6000803e3d6000fd5b50505050856001600160a01b0316876001600160a01b031614613241576001600160a01b038681166000818152600f60205260409081902054600e5491516318c39f1760e11b8152600481019390935260248301526044820152908216906331873e2e90606401600060405180830381600087803b15801561322857600080fd5b505af115801561323c573d6000803e3d6000fd5b505050505b505b60808101516001600160a01b0387166000908152600f602052604090205461326b9190614d55565b6001600160a01b038088166000908152600f6020526040808220939093556080840151918816815291909120546132a29190614dda565b6001600160a01b0386166000908152600f6020526040902055505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610eb1908490613b14565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636d6a723c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613375573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133999190614dbd565b90506001600160a01b03811615613429576001600160a01b038281166000818152600f60205260409081902054600e5491516318c39f1760e11b815260048101939093526024830152604482015282918216906331873e2e90606401600060405180830381600087803b15801561340f57600080fd5b505af1158015613423573d6000803e3d6000fd5b50505050505b5050565b600061343882611991565b905061344681600084613be6565b613451600083612d27565b6001600160a01b038116600090815260036020526040812080546001929061347a908490614d55565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60006134e4601080546001019055565b506010546134f28282613c9e565b6000818152600c602090815260409182902085518155908501516001820180546001600160a01b039283166001600160a01b0319918216179091559286015160028301556060860151600383018054919092169316929092179091556080840151600482015560a084015160c08501516001600160801b03908116600160801b0291161760058083019190915560e08501516006830180546101008801516101208901516101408a01516101608b01516101808c015164ffffffffff908116600160c81b0264ffffffffff60c81b19928216600160a01b029290921669ffffffffffffffffffff60a01b19938216600160781b0264ffffffffff60781b19958316600160501b029590951669ffffffffffffffffffff60501b19968316600160281b0269ffffffffffffffffffff199098169290991691909117959095179390931695909517179390931617919091178082556101a087015187949390929160ff60f01b191690600160f01b908490811115613670576136706146c7565b02179055509050506136858360600151613315565b8260800151600e546136979190614dda565b600e55608083015160608401516001600160a01b03166000908152600f60205260409020546136c69190614dda565b6060909301516001600160a01b03166000908152600f60205260409020929092555090565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600082158061374a575081155b15613757575060006105ff565b816137656002612710615043565b61377190600019614d55565b61377b9190615043565b8311156040518060400160405280600381526020016203130360ec1b815250906137b85760405162461bcd60e51b81526004016106549190614495565b50612710612e33600282615043565b6000828152600c6020526040902060056006820154600160f01b900460ff1660058111156137f7576137f76146c7565b14156040518060400160405280600381526020016234303360e81b815250906138335760405162461bcd60e51b81526004016106549190614495565b50816005811115613846576138466146c7565b6006820154600160f01b900460ff166005811115613866576138666146c7565b14156040518060400160405280600381526020016234303160e81b815250906138a25760405162461bcd60e51b81526004016106549190614495565b5060068101805483919060ff60f01b1916600160f01b8360058111156138ca576138ca6146c7565b02179055508160058111156138e1576138e16146c7565b60405184907f1ec5c05690dbdf3fe6eeaa13c3026d2706bba8ff773391bf70f15b407fb1658890600090a3505050565b61391c848484612f37565b61392884848484613cb8565b6124555760405162461bcd60e51b815260040161065490615084565b60006001600160e01b0319821663780e9d6360e01b14806105ff57506105ff82613db3565b826001600160a01b031661397c82611991565b6001600160a01b0316146139e45760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610654565b6001600160a01b038216613a465760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610654565b613a51838383613be6565b613a5c600082612d27565b6001600160a01b0383166000908152600360205260408120805460019290613a85908490614d55565b90915550506001600160a01b0382166000908152600360205260408120805460019290613ab3908490614dda565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000613b69826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613e039092919063ffffffff16565b805190915015610eb15780806020019051810190613b879190614d03565b610eb15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610654565b6001600160a01b038316613c4157613c3c81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b613c64565b816001600160a01b0316836001600160a01b031614613c6457613c648382613e12565b6001600160a01b038216613c7b57610eb181613eaf565b826001600160a01b0316826001600160a01b031614610eb157610eb18282613f5e565b613429828260405180602001604052806000815250613fa2565b60006001600160a01b0384163b15613dab57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613cfc9033908990889088906004016150d6565b6020604051808303816000875af1925050508015613d37575060408051601f3d908101601f19168201909252613d3491810190615109565b60015b613d91573d808015613d65576040519150601f19603f3d011682016040523d82523d6000602084013e613d6a565b606091505b508051613d895760405162461bcd60e51b815260040161065490615084565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610ebf565b506001610ebf565b60006001600160e01b031982166380ac58cd60e01b1480613de457506001600160e01b03198216635b5e139f60e01b145b806105ff57506301ffc9a760e01b6001600160e01b03198316146105ff565b6060610ebf8484600085613fd5565b60006001613e1f84611a7b565b613e299190614d55565b600083815260076020526040902054909150808214613e7c576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090613ec190600190614d55565b60008381526009602052604081205460088054939450909284908110613ee957613ee9614bcf565b906000526020600020015490508060088381548110613f0a57613f0a614bcf565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480613f4257613f42615126565b6001900381819060005260206000200160009055905550505050565b6000613f6983611a7b565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b613fac83836140fd565b613fb96000848484613cb8565b610eb15760405162461bcd60e51b815260040161065490615084565b6060824710156140365760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610654565b843b6140845760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610654565b600080866001600160a01b031685876040516140a0919061513c565b60006040518083038185875af1925050503d80600081146140dd576040519150601f19603f3d011682016040523d82523d6000602084013e6140e2565b606091505b50915091506140f282828661423c565b979650505050505050565b6001600160a01b0382166141535760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610654565b61415c81612d0a565b156141a95760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610654565b6141b560008383613be6565b6001600160a01b03821660009081526003602052604081208054600192906141de908490614dda565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6060831561424b575081611a74565b82511561425b5782518084602001fd5b8160405162461bcd60e51b81526004016106549190614495565b604080516101c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081018290526101808101829052906101a082015290565b6001600160e01b031981168114612ce257600080fd5b60006020828403121561430f57600080fd5b8135611a74816142e7565b6001600160a01b0381168114612ce257600080fd5b60008083601f84011261434157600080fd5b5081356001600160401b0381111561435857600080fd5b6020830191508360208260051b850101111561437357600080fd5b9250929050565b60008083601f84011261438c57600080fd5b5081356001600160401b038111156143a357600080fd5b60208301915083602082850101111561437357600080fd5b6000806000806000606086880312156143d357600080fd5b85356143de8161431a565b945060208601356001600160401b03808211156143fa57600080fd5b61440689838a0161432f565b9096509450604088013591508082111561441f57600080fd5b5061442c8882890161437a565b969995985093965092949392505050565b60005b83811015614458578181015183820152602001614440565b838111156124555750506000910152565b6000815180845261448181602086016020860161443d565b601f01601f19169290920160200192915050565b602081526000611a746020830184614469565b6000602082840312156144ba57600080fd5b5035919050565b600080604083850312156144d457600080fd5b82356144df8161431a565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60405161010081016001600160401b0381118282101715614526576145266144ed565b60405290565b604051601f8201601f191681016001600160401b0381118282101715614554576145546144ed565b604052919050565b60006001600160401b03821115614575576145756144ed565b50601f01601f191660200190565b600082601f83011261459457600080fd5b81356145a76145a28261455c565b61452c565b8181528460208386010111156145bc57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156145ef57600080fd5b84356145fa8161431a565b9350602085013561460a8161431a565b92506040850135915060608501356001600160401b0381111561462c57600080fd5b61463887828801614583565b91505092959194509250565b60008060006060848603121561465957600080fd5b83356146648161431a565b925060208401356146748161431a565b929592945050506040919091013590565b60008060006060848603121561469a57600080fd5b8335925060208401356146ac8161431a565b915060408401356146bc8161431a565b809150509250925092565b634e487b7160e01b600052602160045260246000fd5b600681106146fb57634e487b7160e01b600052602160045260246000fd5b9052565b602081016105ff82846146dd565b80518252602081015161472b60208401826001600160a01b03169052565b5060408101516040830152606081015161475060608401826001600160a01b03169052565b506080810151608083015260a081015161477560a08401826001600160801b03169052565b5060c081015161479060c08401826001600160801b03169052565b5060e08101516147a960e084018264ffffffffff169052565b506101008181015164ffffffffff9081169184019190915261012080830151821690840152610140808301518216908401526101608083015182169084015261018080830151909116908301526101a080820151612455828501826146dd565b6101c081016105ff828461470d565b60006020828403121561482a57600080fd5b8135611a748161431a565b600080600080600080600060e0888a03121561485057600080fd5b8735965060208801356148628161431a565b955060408801356148728161431a565b969995985095966060810135965060808101359560a0820135955060c0909101359350915050565b8281526101e08101611a74602083018461470d565b8015158114612ce257600080fd5b600080604083850312156148d057600080fd5b82356148db8161431a565b915060208301356148eb816148af565b809150509250929050565b600082601f83011261490757600080fd5b813560206001600160401b03821115614922576149226144ed565b8160051b61493182820161452c565b928352848101820192828101908785111561494b57600080fd5b83870192505b848310156140f257823582529183019190830190614951565b600080600080600060a0868803121561498257600080fd5b853561498d8161431a565b9450602086013561499d8161431a565b935060408601356001600160401b03808211156149b957600080fd5b6149c589838a016148f6565b945060608801359150808211156149db57600080fd5b6149e789838a016148f6565b935060808801359150808211156149fd57600080fd5b50614a0a88828901614583565b9150509295509295909350565b60008060008060608587031215614a2d57600080fd5b8435614a388161431a565b93506020850135614a488161431a565b925060408501356001600160401b03811115614a6357600080fd5b614a6f8782880161432f565b95989497509550505050565b60008060008060008060008060a0898b031215614a9757600080fd5b8835614aa28161431a565b97506020890135614ab28161431a565b965060408901356001600160401b0380821115614ace57600080fd5b614ada8c838d0161432f565b909850965060608b0135915080821115614af357600080fd5b614aff8c838d0161432f565b909650945060808b0135915080821115614b1857600080fd5b50614b258b828c0161437a565b999c989b5096995094979396929594505050565b60008060408385031215614b4c57600080fd5b8235614b578161431a565b915060208301356148eb8161431a565b600080600080600060a08688031215614b7f57600080fd5b8535614b8a8161431a565b94506020860135614b9a8161431a565b9350604086013592506060860135915060808601356001600160401b03811115614bc357600080fd5b614a0a88828901614583565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415614c0f57614c0f614be5565b5060010190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60a0808252875190820181905260009060209060c0840190828b01845b82811015614c815781516001600160a01b031684529284019290840190600101614c5c565b5050508381038285015288518082528983019183019060005b81811015614cb657835183529284019291840191600101614c9a565b50506001600160a01b03891660408601526001600160a01b03881660608601528481036080860152614ce9818789614c16565b9b9a5050505050505050505050565b8051612600816148af565b600060208284031215614d1557600080fd5b8151611a74816148af565b600181811c90821680614d3457607f821691505b6020821081141561108057634e487b7160e01b600052602260045260246000fd5b600082821015614d6757614d67614be5565b500390565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600060208284031215614dcf57600080fd5b8151611a748161431a565b60008219821115614ded57614ded614be5565b500190565b600082601f830112614e0357600080fd5b8151614e116145a28261455c565b818152846020838601011115614e2657600080fd5b610ebf82602083016020870161443d565b600060208284031215614e4957600080fd5b81516001600160401b0380821115614e6057600080fd5b908301906101008286031215614e7557600080fd5b614e7d614503565b614e8683614cf8565b8152602083015182811115614e9a57600080fd5b614ea687828601614df2565b602083015250604083015182811115614ebe57600080fd5b614eca87828601614df2565b604083015250606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e082015280935050505092915050565b600060208284031215614f2057600080fd5b5051919050565b600060208284031215614f3957600080fd5b81516001600160401b03811115614f4f57600080fd5b610ebf84828501614df2565b81835260006001600160fb1b03831115614f7457600080fd5b8260051b8083602087013760009401602001938452509192915050565b602081526000610ebf602083018486614f5b565b6001600160a01b0389811682528816602082015260a060408201819052600090614fd2908301888a614f5b565b8281036060840152614fe5818789614f5b565b90508281036080840152614ce9818587614c16565b60608152600061500e60608301888a614f5b565b8281036020840152615021818789614f5b565b90508281036040840152615036818587614c16565b9998505050505050505050565b60008261506057634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561507f5761507f614be5565b500290565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906121ce90830184614469565b60006020828403121561511b57600080fd5b8151611a74816142e7565b634e487b7160e01b600052603160045260246000fd5b6000825161514e81846020870161443d565b919091019291505056fea26469706673582212209cdb3c92cf5ad9ff5091cb4b63dcacc60dfe5e6b348384736c4fc6f70c7f070664736f6c634300080a0033",
  "libraries": {
    "MathUtils": "0x703EeF551575F5A57b49CEfBb958Fc9614206F33"
  },
  "devdoc": {
    "author": "OpenSky Labs",
    "details": "The functions about handling loan are callable by the OpenSkyPool contract defined also in the OpenSkySettings*",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "claimERC1155Airdrop(address,address,uint256[],uint256[],bytes)": {
        "params": {
          "amounts": "The amount of the ERC1155 tokens",
          "data": "packed params to pass to the receiver as extra information*",
          "ids": "The ID of the ERC1155 token",
          "to": "The address which will receive the ERC1155 tokens",
          "token": "The address of the airdropped token"
        }
      },
      "claimERC20Airdrop(address,address,uint256)": {
        "params": {
          "amount": "The amount of the ERC20 token*",
          "to": "The address which will receive ERC20 token",
          "token": "The address of the airdropped token"
        }
      },
      "claimERC721Airdrop(address,address,uint256[])": {
        "params": {
          "ids": "The ID of the ERC721 token*",
          "to": "The address which will receive the ERC721 token",
          "token": "The address of the airdropped token"
        }
      },
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_settings": "The address of the OpenSkySettings contract",
          "name": "The name of OpenSkyLoan NFT",
          "symbol": "The symbol of OpenSkyLoan NFT"
        }
      },
      "end(uint256,address,address)": {
        "params": {
          "onBehalfOf": "The address the repayer is repaying for",
          "repayer": "The address of the repayer*",
          "tokenId": "The ID of the loan"
        }
      },
      "endLiquidation(uint256)": {
        "params": {
          "tokenId": "The ID of the loan*"
        }
      },
      "flashClaim(address,uint256[],bytes)": {
        "details": "IMPORTANT There are security concerns for developers of flash loan receiver contracts that must be carefully considered",
        "params": {
          "loanIds": "The ID of loan being flash-borrowed",
          "params": "packed params to pass to the receiver as extra information*",
          "receiverAddress": "The address of the contract receiving the funds, implementing IOpenSkyFlashClaimReceiver interface"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getBorrowBalance(uint256)": {
        "params": {
          "tokenId": "The ID of the loan"
        },
        "returns": {
          "_0": "The borrow balance of the loan*"
        }
      },
      "getBorrowInterest(uint256)": {
        "params": {
          "tokenId": "The ID of the loan"
        },
        "returns": {
          "_0": "The borrow interest of the loan*"
        }
      },
      "getLoanData(uint256)": {
        "params": {
          "tokenId": "The ID of the loan"
        },
        "returns": {
          "_0": "The details of the loan*"
        }
      },
      "getPenalty(uint256)": {
        "params": {
          "tokenId": "The ID of the loan"
        },
        "returns": {
          "_0": "The penalty fee of the loan*"
        }
      },
      "getStatus(uint256)": {
        "params": {
          "tokenId": "The ID of the loan"
        },
        "returns": {
          "_0": "The status of the loan*"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint(uint256,address,address,uint256,uint256,uint256,uint256)": {
        "params": {
          "amount": "The amount of the loan",
          "borrowRate": "The borrow rate of the loan",
          "borrower": "The address of the borrower",
          "duration": "The duration of the loan",
          "nftAddress": "The contract address of the collateralized NFT ",
          "nftTokenId": "The ID of the collateralized NFT",
          "reserveId": "The ID of the reserve"
        },
        "returns": {
          "loanId": "and loan data*"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "startLiquidation(uint256)": {
        "params": {
          "tokenId": "The ID of the defaulted loan*"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "getLoanId": {
        "params": {
          "nftAddress": "The address of the collateralized NFT",
          "tokenId": "The ID of the collateralized NFT"
        },
        "return": "The ID of the loan*",
        "returns": {
          "_0": "The ID of the loan*"
        }
      }
    },
    "title": "OpenSkyLoan contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimERC1155Airdrop(address,address,uint256[],uint256[],bytes)": {
        "notice": "Claim the ERC1155 token which has been airdropped to the loan contract"
      },
      "claimERC20Airdrop(address,address,uint256)": {
        "notice": "Claim the ERC20 token which has been airdropped to the loan contract"
      },
      "claimERC721Airdrop(address,address,uint256[])": {
        "notice": "Claim the ERC721 token which has been airdropped to the loan contract"
      },
      "end(uint256,address,address)": {
        "notice": "Terminates the loan"
      },
      "endLiquidation(uint256)": {
        "notice": "Ends liquidation of a loan that is fully settled"
      },
      "flashClaim(address,uint256[],bytes)": {
        "notice": "Allows smart contracts to access the collateralized NFT within one transaction, as long as the amount taken plus a fee is returned"
      },
      "getBorrowBalance(uint256)": {
        "notice": "Returns the borrow balance of a loan, including borrow interest"
      },
      "getBorrowInterest(uint256)": {
        "notice": "Returns the borrow interest of the loan"
      },
      "getLoanData(uint256)": {
        "notice": "Returns the loan data"
      },
      "getLoanId(address,uint256)": {
        "notice": "Returns the ID of the loan"
      },
      "getPenalty(uint256)": {
        "notice": "Returns the penalty fee of the loan"
      },
      "getStatus(uint256)": {
        "notice": "Returns the status of a loan"
      },
      "mint(uint256,address,address,uint256,uint256,uint256,uint256)": {
        "notice": "Mints a loan NFT to user"
      },
      "startLiquidation(uint256)": {
        "notice": "Starts liquidation of the loan in default"
      }
    },
    "notice": "Implementation of the loan NFT for the OpenSky protocol",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4564,
        "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 4566,
        "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 4570,
        "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4574,
        "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4578,
        "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4584,
        "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5503,
        "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 5507,
        "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5510,
        "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 5514,
        "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 387,
        "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 1379,
        "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
        "label": "_status",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 8763,
        "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
        "label": "_loans",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(LoanData)21566_storage)"
      },
      {
        "astId": 8771,
        "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
        "label": "getLoanId",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 8773,
        "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
        "label": "totalBorrows",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 8777,
        "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
        "label": "userBorrows",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8780,
        "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
        "label": "_tokenIdTracker",
        "offset": 0,
        "slot": "16",
        "type": "t_struct(Counter)6236_storage"
      },
      {
        "astId": 8785,
        "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
        "label": "_pool",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(LoanStatus)21573": {
        "encoding": "inplace",
        "label": "enum DataTypes.LoanStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(LoanData)21566_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DataTypes.LoanData)",
        "numberOfBytes": "32",
        "value": "t_struct(LoanData)21566_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)6236_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 6235,
            "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(LoanData)21566_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.LoanData",
        "members": [
          {
            "astId": 21538,
            "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
            "label": "reserveId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 21540,
            "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
            "label": "nftAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 21542,
            "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
            "label": "tokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 21544,
            "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
            "label": "borrower",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 21546,
            "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
            "label": "amount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 21548,
            "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
            "label": "borrowRate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint128"
          },
          {
            "astId": 21550,
            "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
            "label": "interestPerSecond",
            "offset": 16,
            "slot": "5",
            "type": "t_uint128"
          },
          {
            "astId": 21552,
            "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
            "label": "borrowBegin",
            "offset": 0,
            "slot": "6",
            "type": "t_uint40"
          },
          {
            "astId": 21554,
            "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
            "label": "borrowDuration",
            "offset": 5,
            "slot": "6",
            "type": "t_uint40"
          },
          {
            "astId": 21556,
            "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
            "label": "borrowOverdueTime",
            "offset": 10,
            "slot": "6",
            "type": "t_uint40"
          },
          {
            "astId": 21558,
            "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
            "label": "liquidatableTime",
            "offset": 15,
            "slot": "6",
            "type": "t_uint40"
          },
          {
            "astId": 21560,
            "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
            "label": "extendableTime",
            "offset": 20,
            "slot": "6",
            "type": "t_uint40"
          },
          {
            "astId": 21562,
            "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
            "label": "borrowEnd",
            "offset": 25,
            "slot": "6",
            "type": "t_uint40"
          },
          {
            "astId": 21565,
            "contract": "contracts/OpenSkyLoan.sol:OpenSkyLoan",
            "label": "status",
            "offset": 30,
            "slot": "6",
            "type": "t_enum(LoanStatus)21573"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      }
    }
  }
}