{
  "address": "0x4e520BDA73aB18f666716C8288621cB1848F857a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optimalUtilizationRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rateSlope1_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rateSlope2_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseBorrowRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "baseRate",
          "type": "uint256"
        }
      ],
      "name": "SetBaseBorrowRate",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EXCESS_UTILIZATION_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPTIMAL_UTILIZATION_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        }
      ],
      "name": "getBaseBorrowRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDeposits",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBorrows",
          "type": "uint256"
        }
      ],
      "name": "getBorrowRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rateSlope1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rateSlope2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "setBaseBorrowRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4b948e4c548d075cc169c44c536bee3519baa77e39aef2d018e9dd9bc0d293f6",
  "receipt": {
    "to": null,
    "from": "0x218513C58A4781a5B88De6230caA29aBCe2Ccd75",
    "contractAddress": "0x4e520BDA73aB18f666716C8288621cB1848F857a",
    "transactionIndex": 64,
    "gasUsed": "562333",
    "logsBloom": "0x
    "blockHash": "0x9e92a3bfae42bdc131eac87cc8e94639fc87530d862250b00712a35d9a16e863",
    "transactionHash": "0x4b948e4c548d075cc169c44c536bee3519baa77e39aef2d018e9dd9bc0d293f6",
    "logs": [
      {
        "transactionIndex": 64,
        "blockNumber": 29179361,
        "transactionHash": "0x4b948e4c548d075cc169c44c536bee3519baa77e39aef2d018e9dd9bc0d293f6",
        "address": "0x4e520BDA73aB18f666716C8288621cB1848F857a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000218513c58a4781a5b88de6230caa29abce2ccd75"
        ],
        "data": "0x",
        "logIndex": 237,
        "blockHash": "0x9e92a3bfae42bdc131eac87cc8e94639fc87530d862250b00712a35d9a16e863"
      },
      {
        "transactionIndex": 64,
        "blockNumber": 29179361,
        "transactionHash": "0x4b948e4c548d075cc169c44c536bee3519baa77e39aef2d018e9dd9bc0d293f6",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000218513c58a4781a5b88de6230caa29abce2ccd75",
          "0x000000000000000000000000127685d6dd6683085da4b6a041efcef1681e5c9c"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000063e3f1b774fac60000000000000000000000000000000000000000000000002ec957dd0399814b000000000000000000000000000000000000000000000ad4a05bc9949c717a0d0000000000000000000000000000000000000000000000002e6573eb4c248685000000000000000000000000000000000000000000000ad4a0bfad8653e674d3",
        "logIndex": 238,
        "blockHash": "0x9e92a3bfae42bdc131eac87cc8e94639fc87530d862250b00712a35d9a16e863"
      }
    ],
    "blockNumber": 29179361,
    "cumulativeGasUsed": "6423481",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "800000000000000000000000000",
    "80000000000000000000000000",
    "1000000000000000000000000000",
    "40000000000000000000000000"
  ],
  "solcInputHash": "903b6e0b7a82abf3fd1d087256b904a8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optimalUtilizationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateSlope1_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateSlope2_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseBorrowRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"baseRate\",\"type\":\"uint256\"}],\"name\":\"SetBaseBorrowRate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EXCESS_UTILIZATION_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPTIMAL_UTILIZATION_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"getBaseBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"getBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateSlope1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateSlope2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setBaseBorrowRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"OpenSky Labs\",\"details\":\"The model of interest rate is based on 2 slopes, one before the `OPTIMAL_USAGE_RATIO` point of usage and another from that one to 100%.*\",\"kind\":\"dev\",\"methods\":{\"getBaseBorrowRate(uint256)\":{\"params\":{\"reserveId\":\"The id of the reserve\"},\"returns\":{\"_0\":\"The borrow rate, expressed in ray*\"}},\"getBorrowRate(uint256,uint256,uint256)\":{\"params\":{\"reserveId\":\"The id of the reserve\",\"totalBorrows\":\"The total borrows amount of the reserve\",\"totalDeposits\":\"The total deposits amount of the reserve\"},\"returns\":{\"_0\":\"The borrow rate, expressed in ray*\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBaseBorrowRate(uint256,uint256)\":{\"params\":{\"rate\":\"The rate will be set*\",\"reserveId\":\"The id of the reserve\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"OpenSkyInterestRateStrategy contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getBaseBorrowRate(uint256)\":{\"notice\":\"Returns the base borrow rate of a reserve\"},\"getBorrowRate(uint256,uint256,uint256)\":{\"notice\":\"Returns the borrow rate of a reserve\"},\"setBaseBorrowRate(uint256,uint256)\":{\"notice\":\"Sets the base borrow rate of a reserve\"}},\"notice\":\"Implements the calculation of the interest rates depending on the reserve state\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OpenSkyInterestRateStrategy.sol\":\"OpenSkyInterestRateStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/OpenSkyInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport './interfaces/IOpenSkyInterestRateStrategy.sol';\\nimport './interfaces/IOpenSkySettings.sol';\\nimport './libraries/math/WadRayMath.sol';\\nimport './libraries/math/PercentageMath.sol';\\n\\n/**\\n * @title OpenSkyInterestRateStrategy contract\\n * @author OpenSky Labs\\n * @notice Implements the calculation of the interest rates depending on the reserve state\\n * @dev The model of interest rate is based on 2 slopes, one before the `OPTIMAL_USAGE_RATIO`\\n * point of usage and another from that one to 100%.\\n **/\\ncontract OpenSkyInterestRateStrategy is IOpenSkyInterestRateStrategy, Ownable {\\n    using WadRayMath for uint256;\\n    using SafeMath for uint256;\\n    using PercentageMath for uint256;\\n\\n    uint256 public immutable OPTIMAL_UTILIZATION_RATE; \\n    uint256 public immutable EXCESS_UTILIZATION_RATE; \\n\\n    // Slope of the stable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n    uint256 internal immutable _rateSlope1;\\n\\n    // Slope of the stable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n    uint256 internal immutable _rateSlope2;\\n\\n    uint256 internal immutable _baseBorrowRate;\\n\\n    mapping(uint256 => uint256) internal _baseBorrowRates;\\n    \\n    constructor(\\n        uint256 optimalUtilizationRate,\\n        uint256 rateSlope1_,\\n        uint256 rateSlope2_,\\n        uint256 baseBorrowRate\\n    ) Ownable() {\\n        OPTIMAL_UTILIZATION_RATE = optimalUtilizationRate;\\n        EXCESS_UTILIZATION_RATE = WadRayMath.ray().sub(optimalUtilizationRate);\\n        _rateSlope1 = rateSlope1_;\\n        _rateSlope2 = rateSlope2_;\\n        _baseBorrowRate = baseBorrowRate;\\n    }\\n\\n    function rateSlope1() external view returns (uint256) {\\n        return _rateSlope1;\\n    }\\n\\n    function rateSlope2() external view returns (uint256) {\\n        return _rateSlope2;\\n    }\\n\\n    /**\\n     * @notice Sets the base borrow rate of a reserve\\n     * @param reserveId The id of the reserve\\n     * @param rate The rate will be set\\n     **/\\n    function setBaseBorrowRate(uint256 reserveId, uint256 rate) external onlyOwner {\\n        _baseBorrowRates[reserveId] = rate;\\n        emit SetBaseBorrowRate(reserveId, rate);\\n    }\\n\\n    /**\\n     * @notice Returns the base borrow rate of a reserve\\n     * @param reserveId The id of the reserve\\n     * @return The borrow rate, expressed in ray\\n     **/\\n    function getBaseBorrowRate(uint256 reserveId) public view returns (uint256) {\\n        return _baseBorrowRates[reserveId] > 0 ? _baseBorrowRates[reserveId] : _baseBorrowRate;\\n    }\\n\\n    /// @inheritdoc IOpenSkyInterestRateStrategy\\n    function getBorrowRate(uint256 reserveId, uint256 totalDeposits, uint256 totalBorrows) external override view returns (uint256) {\\n        uint256 utilizationRate = totalBorrows == 0 ? 0 : totalBorrows.rayDiv(totalDeposits);\\n        uint256 currentBorrowRate = 0;\\n        uint256 baseBorrowRate = getBaseBorrowRate(reserveId);\\n        if (utilizationRate > OPTIMAL_UTILIZATION_RATE) {\\n            uint256 excessUtilizationRateRatio = utilizationRate.sub(OPTIMAL_UTILIZATION_RATE).rayDiv(EXCESS_UTILIZATION_RATE);\\n            currentBorrowRate = baseBorrowRate.add(_rateSlope1).add(\\n                _rateSlope2.rayMul(excessUtilizationRateRatio)\\n            );\\n        } else {\\n            currentBorrowRate = baseBorrowRate.add(\\n                _rateSlope1.rayMul(utilizationRate).rayDiv(OPTIMAL_UTILIZATION_RATE)\\n            );\\n        }\\n        return currentBorrowRate;\\n    }\\n}\\n\",\"keccak256\":\"0x7cdcc43fc22628d280f1b313e581497411a053b904761f353e337d91104a6e4e\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IOpenSkyInterestRateStrategy\\n * @author OpenSky Labs\\n * @notice Interface for the calculation of the interest rates\\n */\\ninterface IOpenSkyInterestRateStrategy {\\n    /**\\n     * @dev Emitted on setBaseBorrowRate()\\n     * @param reserveId The id of the reserve\\n     * @param baseRate The base rate has been set\\n     **/\\n    event SetBaseBorrowRate(\\n        uint256 indexed reserveId,\\n        uint256 indexed baseRate\\n    );\\n\\n    /**\\n     * @notice Returns the borrow rate of a reserve\\n     * @param reserveId The id of the reserve\\n     * @param totalDeposits The total deposits amount of the reserve\\n     * @param totalBorrows The total borrows amount of the reserve\\n     * @return The borrow rate, expressed in ray\\n     **/\\n    function getBorrowRate(uint256 reserveId, uint256 totalDeposits, uint256 totalBorrows) external view returns (uint256); \\n}\\n\",\"keccak256\":\"0xfa5ff4ed50344092c9559d27b9318c0804c03ff464b6989fc2743d5e61b42252\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkySettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\nimport '../libraries/types/DataTypes.sol';\\n\\ninterface IOpenSkySettings {\\n    event InitPoolAddress(address operator, address address_);\\n    event InitLoanAddress(address operator, address address_);\\n    event InitVaultFactoryAddress(address operator, address address_);\\n    event InitIncentiveControllerAddress(address operator, address address_);\\n    event InitWETHGatewayAddress(address operator, address address_);\\n    event InitPunkGatewayAddress(address operator, address address_);\\n\\n    event AddToWhitelist(address operator, uint256 reserveId, address nft);\\n    event RemoveFromWhitelist(address operator, uint256 reserveId, address nft);\\n    event SetReserveFactor(address operator, uint256 factor);\\n    event SetPrepaymentFeeFactor(address operator, uint256 factor);\\n    event SetOverdueLoanFeeFactor(address operator, uint256 factor);\\n    event SetMoneyMarketAddress(address operator, address address_);\\n    event SetTreasuryAddress(address operator, address address_);\\n    event SetDaoVaultAddress(address operator, address address_);\\n    event SetACLManagerAddress(address operator, address address_);\\n    event SetLoanDescriptorAddress(address operator, address address_);\\n    event SetNftPriceOracleAddress(address operator, address address_);\\n    event SetInterestRateStrategyAddress(address operator, address address_);\\n    event AddLiquidator(address operator, address address_);\\n    event RemoveLiquidator(address operator, address address_);\\n\\n    function poolAddress() external view returns (address);\\n\\n    function loanAddress() external view returns (address);\\n\\n    function vaultFactoryAddress() external view returns (address);\\n\\n    function incentiveControllerAddress() external view returns (address);\\n\\n    function wethGatewayAddress() external view returns (address);\\n\\n    function punkGatewayAddress() external view returns (address);\\n\\n    function inWhitelist(uint256 reserveId, address nft) external view returns (bool);\\n\\n    function getWhitelistDetail(uint256 reserveId, address nft) external view returns (DataTypes.WhitelistInfo memory);\\n\\n    function reserveFactor() external view returns (uint256); // treasury ratio\\n\\n    function MAX_RESERVE_FACTOR() external view returns (uint256);\\n\\n    function prepaymentFeeFactor() external view returns (uint256);\\n\\n    function overdueLoanFeeFactor() external view returns (uint256);\\n\\n    function moneyMarketAddress() external view returns (address);\\n\\n    function treasuryAddress() external view returns (address);\\n\\n    function daoVaultAddress() external view returns (address);\\n\\n    function ACLManagerAddress() external view returns (address);\\n\\n    function loanDescriptorAddress() external view returns (address);\\n\\n    function nftPriceOracleAddress() external view returns (address);\\n\\n    function interestRateStrategyAddress() external view returns (address);\\n    \\n    function isLiquidator(address liquidator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd6d7e8c1b7751de0f65d85310c1e2d8274b74c7e3dc74920ea2546b65d8f659f\",\"license\":\"MIT\"},\"contracts/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    \\n    // common\\n    string public constant MATH_MULTIPLICATION_OVERFLOW = '100';\\n    string public constant MATH_ADDITION_OVERFLOW = '101';\\n    string public constant MATH_DIVISION_BY_ZERO = '102';\\n\\n    string public constant ETH_TRANSFER_FAILED = '110';\\n    string public constant RECEIVE_NOT_ALLOWED = '111';\\n    string public constant FALLBACK_NOT_ALLOWED = '112';\\n\\n    // settings/acl\\n    string public constant ACL_ONLY_GOVERNANCE_CAN_CALL = '200';\\n    string public constant ACL_ONLY_EMERGENCY_ADMIN_CAN_CALL = '201';\\n    string public constant ACL_ONLY_POOL_ADMIN_CAN_CALL = '202';\\n    string public constant ACL_ONLY_LIQUIDATOR_CAN_CALL = '203';\\n    string public constant ACL_ONLY_LIQUIDATION_OPERATOR_CAN_CALL = '204';\\n    string public constant ACL_ONLY_AIRDROP_OPERATOR_CAN_CALL = '205';\\n    string public constant ACL_ONLY_POOL_CAN_CALL = '206';\\n\\n    // lending & borrowing \\n    // reserve\\n    string public constant RESERVE_DOES_NOT_EXIST = '300';\\n    string public constant RESERVE_LIQUIDITY_INSUFFICIENT = '301';\\n    string public constant RESERVE_INDEX_OVERFLOW = '302';\\n    string public constant RESERVE_SWITCH_MONEY_MARKET_STATE_ERROR = '303';\\n\\n    // token\\n    string public constant AMOUNT_SCALED_IS_ZERO = '310';\\n    string public constant AMOUNT_TRANSFER_OWERFLOW = '311';\\n    \\n    //deposit\\n    string public constant DEPOSIT_AMOUNT_SHOULD_BE_BIGGER_THAN_ZERO = '320';\\n\\n    // withdraw\\n    string public constant WITHDRAW_AMOUNT_NOT_ALLOWED = '321';\\n    string public constant WITHDRAW_LIQUIDITY_NOT_SUFFIENCE = '322';\\n\\n    // borrow\\n    string public constant BORROW_DURATION_NOT_ALLOWED = '330';\\n    string public constant BORROW_AMOUNT_EXCEED_BORROW_LIMIT = '331';\\n    string public constant NFT_ADDRESS_IS_NOT_IN_WHITELIST = '332';\\n\\n    // repay\\n    string public constant REPAY_STATUS_ERROR = '333';\\n    string public constant REPAY_AMOUNT_NOT_ENOUGH = '334';\\n\\n    // extend\\n    string public constant EXTEND_STATUS_ERROR = '335';\\n    string public constant EXTEND_MSG_VALUE_ERROR = '336';\\n\\n    // liquidate\\n    string public constant START_LIQUIDATION_STATUS_ERROR = '360';\\n    string public constant END_LIQUIDATION_STATUS_ERROR = '361';\\n    string public constant END_LIQUIDATION_AMOUNT_ERROR = '362';\\n\\n    // loan\\n    string public constant LOAN_DOES_NOT_EXIST = '400';\\n    string public constant LOAN_SET_STATUS_ERROR = '401';\\n    string public constant LOAN_REPAYER_IS_NOT_OWNER = '402';\\n    string public constant LOAN_LIQUIDATING_STATUS_CAN_NOT_BE_UPDATED = '403';\\n    string public constant LOAN_CALLER_IS_NOT_OWNER = '404';\\n    string public constant LOAN_COLLATERAL_NFT_CAN_NOT_BE_CLAIMED = '405';\\n\\n    string public constant FLASH_CLAIM_EXECUTOR_ERROR = '410';\\n    string public constant FLASH_CLAIM_STATUS_ERROR = '411';\\n\\n    // money market\\n    string public constant MONEY_MARKET_DEPOSIT_AMOUNT_ALLOWED = '500';\\n    string public constant MONEY_MARKET_WITHDRAW_AMOUNT_NOT_ALLOWED = '501';\\n    string public constant MONEY_MARKET_APPROVAL_FAILED = '502';\\n    string public constant MONEY_MARKET_DELEGATE_CALL_ERROR = '503';\\n\\n    // price oracle\\n    string public constant PRICE_ORACLE_ROUND_INTERVAL_CAN_NOT_BE_0 = '600';\\n    string public constant PRICE_ORACLE_HAS_NO_PRICE_FEED = '601';\\n    string public constant PRICE_ORACLE_INCORRECT_TIMESTAMP = '602';\\n    string public constant PRICE_ORACLE_PARAMS_ERROR = '603';\\n}\\n\",\"keccak256\":\"0x0f14f9c13c9fe6dcca2379449db7e6f1a20c236113548432d0351bacc71df76f\",\"license\":\"MIT\"},\"contracts/libraries/math/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../helpers/Errors.sol';\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded half up\\n **/\\n\\nlibrary PercentageMath {\\n  uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\n  uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\n\\n  /**\\n   * @dev Executes a percentage multiplication\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The percentage of value\\n   **/\\n  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    if (value == 0 || percentage == 0) {\\n      return 0;\\n    }\\n\\n    require(\\n      value <= (type(uint256).max - HALF_PERCENT) / percentage,\\n      Errors.MATH_MULTIPLICATION_OVERFLOW\\n    );\\n\\n    return (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\\n  }\\n\\n  /**\\n   * @dev Executes a percentage division\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The value divided the percentage\\n   **/\\n  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    require(percentage != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfPercentage = percentage / 2;\\n\\n    require(\\n      value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR,\\n      Errors.MATH_MULTIPLICATION_OVERFLOW\\n    );\\n\\n    return (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\n  }\\n}\\n\",\"keccak256\":\"0xe8333e1a929245e4198f87645eae3fc8749e8e29f505427b38ec8ca035434953\",\"license\":\"MIT\"},\"contracts/libraries/math/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {Errors} from '../helpers/Errors.sol';\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @return One ray, 1e27\\n     **/\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    /**\\n     * @return One wad, 1e18\\n     **/\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e27/2\\n     **/\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e18/2\\n     **/\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     **/\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfWAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * b + halfWAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     **/\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * WAD + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfRAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * b + halfRAY) / RAY;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, truncating the mantissa\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMulTruncate(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return (a * b) / RAY;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * RAY + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, truncating the mantissa\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDivTruncate(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        return (a * RAY) / b;\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @param a Ray\\n     * @return a casted to wad, rounded half up to the nearest wad\\n     **/\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n        uint256 result = halfRatio + a;\\n        require(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\\n\\n        return result / WAD_RAY_RATIO;\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @param a Wad\\n     * @return a converted in ray\\n     **/\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        uint256 result = a * WAD_RAY_RATIO;\\n        require(result / WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4bf6b9a00c5e9938726d173f11b56de8edd92e17593e4dfa61a3ce7336756c6b\",\"license\":\"MIT\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        uint256 reserveId;\\n        address underlyingAsset;\\n        address oTokenAddress;\\n        address moneyMarketAddress;\\n        uint128 lastSupplyIndex;\\n        uint256 borrowingInterestPerSecond;\\n        uint256 lastMoneyMarketBalance;\\n        uint40 lastUpdateTimestamp;\\n        uint256 totalBorrows;\\n        address interestModelAddress;\\n        uint256 treasuryFactor;\\n        bool isMoneyMarketOn;\\n    }\\n\\n    struct LoanData {\\n        uint256 reserveId;\\n        address nftAddress;\\n        uint256 tokenId;\\n        address borrower;\\n        uint256 amount;\\n        uint128 borrowRate;\\n        uint128 interestPerSecond;\\n        uint40 borrowBegin;\\n        uint40 borrowDuration;\\n        uint40 borrowOverdueTime;\\n        uint40 liquidatableTime;\\n        uint40 extendableTime;\\n        uint40 borrowEnd;\\n        LoanStatus status;\\n    }\\n\\n    enum LoanStatus {\\n        NONE,\\n        BORROWING,\\n        EXTENDABLE,\\n        OVERDUE,\\n        LIQUIDATABLE,\\n        LIQUIDATING\\n    }\\n\\n    struct WhitelistInfo {\\n        bool enabled;\\n        string name;\\n        string symbol;\\n        uint256 LTV;\\n        uint256 minBorrowDuration;\\n        uint256 maxBorrowDuration;\\n        uint256 extendableDuration;\\n        uint256 overdueDuration;\\n    }\\n}\\n\",\"keccak256\":\"0x487cd1dedb3146da46144bc8f0e5b970c5173efa8c19700184b8207c1ee3fc55\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61012060405234801561001157600080fd5b50604051610a79380380610a79833981016040819052610030916100f2565b6100393361007f565b8360808181525050610069846100576100cf60201b6104c81760201c565b6100df60201b6104d81790919060201c565b60a05260c09290925260e052610100525061014d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6b033b2e3c9fd0803ce800000090565b60006100eb8284610128565b9392505050565b6000806000806080858703121561010857600080fd5b505082516020840151604085015160609095015191969095509092509050565b60008282101561014857634e487b7160e01b600052601160045260246000fd5b500390565b60805160a05160c05160e051610100516108b96101c0600039600061034b01526000818160f2015261027401526000818161012b0152818161029f01526102fd01526000818160ce015261021b01526000818161018c015281816101ee0152818161024001526102d901526108b96000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80635a049f75116100665780635a049f751461014f578063715018a6146101645780638da5cb5b1461016c578063a15f30ac14610187578063f2fde38b146101ae57600080fd5b806315f24053146100a357806317319873146100c95780631eedf5c7146100f057806331f7266e146101165780635454a4b614610129575b600080fd5b6100b66100b13660046106e3565b6101c1565b6040519081526020015b60405180910390f35b6100b67f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000006100b6565b6100b661012436600461070f565b610336565b7f00000000000000000000000000000000000000000000000000000000000000006100b6565b61016261015d366004610728565b610385565b005b6101626103f7565b6000546040516001600160a01b0390911681526020016100c0565b6100b67f000000000000000000000000000000000000000000000000000000000000000081565b6101626101bc36600461074a565b61042d565b60008082156101d9576101d483856104eb565b6101dc565b60005b90506000806101ea87610336565b90507f00000000000000000000000000000000000000000000000000000000000000008311156102d157600061026a7f0000000000000000000000000000000000000000000000000000000000000000610264867f00000000000000000000000000000000000000000000000000000000000000006104d8565b906104eb565b90506102c96102997f0000000000000000000000000000000000000000000000000000000000000000836105cb565b6102c3847f0000000000000000000000000000000000000000000000000000000000000000610687565b90610687565b92505061032c565b6103296103227f00000000000000000000000000000000000000000000000000000000000000006102647f0000000000000000000000000000000000000000000000000000000000000000876105cb565b8290610687565b91505b5095945050505050565b60008181526001602052604081205461036f577f000000000000000000000000000000000000000000000000000000000000000061037f565b6000828152600160205260409020545b92915050565b6000546001600160a01b031633146103b85760405162461bcd60e51b81526004016103af90610773565b60405180910390fd5b60008281526001602052604080822083905551829184917fb480dd30c13dbdecac56fd16523f3ad0317da81f9e3b63ce3a041b007c38b5069190a35050565b6000546001600160a01b031633146104215760405162461bcd60e51b81526004016103af90610773565b61042b6000610693565b565b6000546001600160a01b031633146104575760405162461bcd60e51b81526004016103af90610773565b6001600160a01b0381166104bc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103af565b6104c581610693565b50565b6b033b2e3c9fd0803ce800000090565b60006104e482846107be565b9392505050565b60408051808201909152600381526218981960e91b6020820152600090826105265760405162461bcd60e51b81526004016103af91906107d5565b50600061053460028461082a565b90506b033b2e3c9fd0803ce800000061054f826000196107be565b610559919061082a565b8411156040518060400160405280600381526020016203130360ec1b815250906105965760405162461bcd60e51b81526004016103af91906107d5565b5082816105af6b033b2e3c9fd0803ce80000008761084c565b6105b9919061086b565b6105c3919061082a565b949350505050565b60008215806105d8575081155b156105e55750600061037f565b816105fd60026b033b2e3c9fd0803ce800000061082a565b610609906000196107be565b610613919061082a565b8311156040518060400160405280600381526020016203130360ec1b815250906106505760405162461bcd60e51b81526004016103af91906107d5565b506b033b2e3c9fd0803ce800000061066960028261082a565b610673848661084c565b61067d919061086b565b6104e4919061082a565b60006104e4828461086b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000606084860312156106f857600080fd5b505081359360208301359350604090920135919050565b60006020828403121561072157600080fd5b5035919050565b6000806040838503121561073b57600080fd5b50508035926020909101359150565b60006020828403121561075c57600080fd5b81356001600160a01b03811681146104e457600080fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000828210156107d0576107d06107a8565b500390565b600060208083528351808285015260005b81811015610802578581018301518582016040015282016107e6565b81811115610814576000604083870101525b50601f01601f1916929092016040019392505050565b60008261084757634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610866576108666107a8565b500290565b6000821982111561087e5761087e6107a8565b50019056fea2646970667358221220c4211a7fa73d822d9debfce9bf4b9f5c53b9313ac95a277cc03f46f87a96c05c64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80635a049f75116100665780635a049f751461014f578063715018a6146101645780638da5cb5b1461016c578063a15f30ac14610187578063f2fde38b146101ae57600080fd5b806315f24053146100a357806317319873146100c95780631eedf5c7146100f057806331f7266e146101165780635454a4b614610129575b600080fd5b6100b66100b13660046106e3565b6101c1565b6040519081526020015b60405180910390f35b6100b67f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000006100b6565b6100b661012436600461070f565b610336565b7f00000000000000000000000000000000000000000000000000000000000000006100b6565b61016261015d366004610728565b610385565b005b6101626103f7565b6000546040516001600160a01b0390911681526020016100c0565b6100b67f000000000000000000000000000000000000000000000000000000000000000081565b6101626101bc36600461074a565b61042d565b60008082156101d9576101d483856104eb565b6101dc565b60005b90506000806101ea87610336565b90507f00000000000000000000000000000000000000000000000000000000000000008311156102d157600061026a7f0000000000000000000000000000000000000000000000000000000000000000610264867f00000000000000000000000000000000000000000000000000000000000000006104d8565b906104eb565b90506102c96102997f0000000000000000000000000000000000000000000000000000000000000000836105cb565b6102c3847f0000000000000000000000000000000000000000000000000000000000000000610687565b90610687565b92505061032c565b6103296103227f00000000000000000000000000000000000000000000000000000000000000006102647f0000000000000000000000000000000000000000000000000000000000000000876105cb565b8290610687565b91505b5095945050505050565b60008181526001602052604081205461036f577f000000000000000000000000000000000000000000000000000000000000000061037f565b6000828152600160205260409020545b92915050565b6000546001600160a01b031633146103b85760405162461bcd60e51b81526004016103af90610773565b60405180910390fd5b60008281526001602052604080822083905551829184917fb480dd30c13dbdecac56fd16523f3ad0317da81f9e3b63ce3a041b007c38b5069190a35050565b6000546001600160a01b031633146104215760405162461bcd60e51b81526004016103af90610773565b61042b6000610693565b565b6000546001600160a01b031633146104575760405162461bcd60e51b81526004016103af90610773565b6001600160a01b0381166104bc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103af565b6104c581610693565b50565b6b033b2e3c9fd0803ce800000090565b60006104e482846107be565b9392505050565b60408051808201909152600381526218981960e91b6020820152600090826105265760405162461bcd60e51b81526004016103af91906107d5565b50600061053460028461082a565b90506b033b2e3c9fd0803ce800000061054f826000196107be565b610559919061082a565b8411156040518060400160405280600381526020016203130360ec1b815250906105965760405162461bcd60e51b81526004016103af91906107d5565b5082816105af6b033b2e3c9fd0803ce80000008761084c565b6105b9919061086b565b6105c3919061082a565b949350505050565b60008215806105d8575081155b156105e55750600061037f565b816105fd60026b033b2e3c9fd0803ce800000061082a565b610609906000196107be565b610613919061082a565b8311156040518060400160405280600381526020016203130360ec1b815250906106505760405162461bcd60e51b81526004016103af91906107d5565b506b033b2e3c9fd0803ce800000061066960028261082a565b610673848661084c565b61067d919061086b565b6104e4919061082a565b60006104e4828461086b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000606084860312156106f857600080fd5b505081359360208301359350604090920135919050565b60006020828403121561072157600080fd5b5035919050565b6000806040838503121561073b57600080fd5b50508035926020909101359150565b60006020828403121561075c57600080fd5b81356001600160a01b03811681146104e457600080fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000828210156107d0576107d06107a8565b500390565b600060208083528351808285015260005b81811015610802578581018301518582016040015282016107e6565b81811115610814576000604083870101525b50601f01601f1916929092016040019392505050565b60008261084757634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610866576108666107a8565b500290565b6000821982111561087e5761087e6107a8565b50019056fea2646970667358221220c4211a7fa73d822d9debfce9bf4b9f5c53b9313ac95a277cc03f46f87a96c05c64736f6c634300080a0033",
  "libraries": {
    "PercentageMath": "0xa22eF7fA838086378C1bae4aB77915407a126D9d"
  },
  "devdoc": {
    "author": "OpenSky Labs",
    "details": "The model of interest rate is based on 2 slopes, one before the `OPTIMAL_USAGE_RATIO` point of usage and another from that one to 100%.*",
    "kind": "dev",
    "methods": {
      "getBaseBorrowRate(uint256)": {
        "params": {
          "reserveId": "The id of the reserve"
        },
        "returns": {
          "_0": "The borrow rate, expressed in ray*"
        }
      },
      "getBorrowRate(uint256,uint256,uint256)": {
        "params": {
          "reserveId": "The id of the reserve",
          "totalBorrows": "The total borrows amount of the reserve",
          "totalDeposits": "The total deposits amount of the reserve"
        },
        "returns": {
          "_0": "The borrow rate, expressed in ray*"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setBaseBorrowRate(uint256,uint256)": {
        "params": {
          "rate": "The rate will be set*",
          "reserveId": "The id of the reserve"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "OpenSkyInterestRateStrategy contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getBaseBorrowRate(uint256)": {
        "notice": "Returns the base borrow rate of a reserve"
      },
      "getBorrowRate(uint256,uint256,uint256)": {
        "notice": "Returns the borrow rate of a reserve"
      },
      "setBaseBorrowRate(uint256,uint256)": {
        "notice": "Sets the base borrow rate of a reserve"
      }
    },
    "notice": "Implements the calculation of the interest rates depending on the reserve state",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 387,
        "contract": "contracts/OpenSkyInterestRateStrategy.sol:OpenSkyInterestRateStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8476,
        "contract": "contracts/OpenSkyInterestRateStrategy.sol:OpenSkyInterestRateStrategy",
        "label": "_baseBorrowRates",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}