{
  "address": "0xa3DBE89106f053542dc77548F0e285Ebdd9e0587",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optimalUtilizationRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rateSlope1_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rateSlope2_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseBorrowRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "baseRate",
          "type": "uint256"
        }
      ],
      "name": "SetBaseBorrowRate",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EXCESS_UTILIZATION_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPTIMAL_UTILIZATION_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        }
      ],
      "name": "getBaseBorrowRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDeposits",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBorrows",
          "type": "uint256"
        }
      ],
      "name": "getBorrowRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rateSlope1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rateSlope2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "setBaseBorrowRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x978bc9cf8bbbebfcfbf2c9a17f8c1ff659f90fa4628bec1aa26b9b64aaa82349",
  "receipt": {
    "to": null,
    "from": "0x218513C58A4781a5B88De6230caA29aBCe2Ccd75",
    "contractAddress": "0xa3DBE89106f053542dc77548F0e285Ebdd9e0587",
    "transactionIndex": 23,
    "gasUsed": "556867",
    "logsBloom": "0x
    "blockHash": "0x4fe20db366563b02744bc68a954569c413bf1dc49073e652dbd34485191468d2",
    "transactionHash": "0x978bc9cf8bbbebfcfbf2c9a17f8c1ff659f90fa4628bec1aa26b9b64aaa82349",
    "logs": [
      {
        "transactionIndex": 23,
        "blockNumber": 30354872,
        "transactionHash": "0x978bc9cf8bbbebfcfbf2c9a17f8c1ff659f90fa4628bec1aa26b9b64aaa82349",
        "address": "0xa3DBE89106f053542dc77548F0e285Ebdd9e0587",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000218513c58a4781a5b88de6230caa29abce2ccd75"
        ],
        "data": "0x",
        "logIndex": 122,
        "blockHash": "0x4fe20db366563b02744bc68a954569c413bf1dc49073e652dbd34485191468d2"
      },
      {
        "transactionIndex": 23,
        "blockNumber": 30354872,
        "transactionHash": "0x978bc9cf8bbbebfcfbf2c9a17f8c1ff659f90fa4628bec1aa26b9b64aaa82349",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000218513c58a4781a5b88de6230caa29abce2ccd75",
          "0x000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000946111a3acd7850000000000000000000000000000000000000000000000001ab3fd83adf5b0bf0000000000000000000000000000000000000000000003b6abc138b351432b720000000000000000000000000000000000000000000000001a1f9c720a48d93a0000000000000000000000000000000000000000000003b6ac5599c4f4f002f7",
        "logIndex": 123,
        "blockHash": "0x4fe20db366563b02744bc68a954569c413bf1dc49073e652dbd34485191468d2"
      }
    ],
    "blockNumber": 30354872,
    "cumulativeGasUsed": "5429514",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "800000000000000000000000000",
    "80000000000000000000000000",
    "1000000000000000000000000000",
    "40000000000000000000000000"
  ],
  "solcInputHash": "fb80df0c083f4166f8e17cc8f4ebb48d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optimalUtilizationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateSlope1_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateSlope2_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseBorrowRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"baseRate\",\"type\":\"uint256\"}],\"name\":\"SetBaseBorrowRate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EXCESS_UTILIZATION_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPTIMAL_UTILIZATION_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"getBaseBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"getBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateSlope1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateSlope2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setBaseBorrowRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"OpenSky Labs\",\"details\":\"The model of interest rate is based on 2 slopes, one before the `OPTIMAL_UTILIZATION_RATE` point of usage and another from that one to 100%.*\",\"kind\":\"dev\",\"methods\":{\"getBaseBorrowRate(uint256)\":{\"params\":{\"reserveId\":\"The id of the reserve\"},\"returns\":{\"_0\":\"The borrow rate, expressed in ray*\"}},\"getBorrowRate(uint256,uint256,uint256)\":{\"params\":{\"reserveId\":\"The id of the reserve\",\"totalBorrows\":\"The total borrows amount of the reserve\",\"totalDeposits\":\"The total deposits amount of the reserve\"},\"returns\":{\"_0\":\"The borrow rate, expressed in ray*\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBaseBorrowRate(uint256,uint256)\":{\"params\":{\"rate\":\"The rate to be set*\",\"reserveId\":\"The id of the reserve\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"OpenSkyInterestRateStrategy contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getBaseBorrowRate(uint256)\":{\"notice\":\"Returns the base borrow rate of a reserve\"},\"getBorrowRate(uint256,uint256,uint256)\":{\"notice\":\"Returns the borrow rate of a reserve\"},\"setBaseBorrowRate(uint256,uint256)\":{\"notice\":\"Sets the base borrow rate of a reserve\"}},\"notice\":\"Implements the calculation of the interest rates depending on the reserve state\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OpenSkyInterestRateStrategy.sol\":\"OpenSkyInterestRateStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/OpenSkyInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './interfaces/IOpenSkyInterestRateStrategy.sol';\\nimport './libraries/math/WadRayMath.sol';\\nimport './libraries/math/PercentageMath.sol';\\n\\n/**\\n * @title OpenSkyInterestRateStrategy contract\\n * @author OpenSky Labs\\n * @notice Implements the calculation of the interest rates depending on the reserve state\\n * @dev The model of interest rate is based on 2 slopes, one before the `OPTIMAL_UTILIZATION_RATE`\\n * point of usage and another from that one to 100%.\\n **/\\ncontract OpenSkyInterestRateStrategy is IOpenSkyInterestRateStrategy, Ownable {\\n    using WadRayMath for uint256;\\n    using PercentageMath for uint256;\\n\\n    uint256 public immutable OPTIMAL_UTILIZATION_RATE; \\n    uint256 public immutable EXCESS_UTILIZATION_RATE; \\n\\n    // Slope of the stable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n    uint256 internal immutable _rateSlope1;\\n\\n    // Slope of the stable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n    uint256 internal immutable _rateSlope2;\\n\\n    uint256 internal immutable _baseBorrowRate;\\n\\n    mapping(uint256 => uint256) internal _baseBorrowRates;\\n    \\n    constructor(\\n        uint256 optimalUtilizationRate,\\n        uint256 rateSlope1_,\\n        uint256 rateSlope2_,\\n        uint256 baseBorrowRate\\n    ) Ownable() {\\n        OPTIMAL_UTILIZATION_RATE = optimalUtilizationRate;\\n        EXCESS_UTILIZATION_RATE = WadRayMath.ray() - optimalUtilizationRate;\\n        _rateSlope1 = rateSlope1_;\\n        _rateSlope2 = rateSlope2_;\\n        _baseBorrowRate = baseBorrowRate;\\n    }\\n\\n    function rateSlope1() external view returns (uint256) {\\n        return _rateSlope1;\\n    }\\n\\n    function rateSlope2() external view returns (uint256) {\\n        return _rateSlope2;\\n    }\\n\\n    /**\\n     * @notice Sets the base borrow rate of a reserve\\n     * @param reserveId The id of the reserve\\n     * @param rate The rate to be set\\n     **/\\n    function setBaseBorrowRate(uint256 reserveId, uint256 rate) external onlyOwner {\\n        _baseBorrowRates[reserveId] = rate;\\n        emit SetBaseBorrowRate(reserveId, rate);\\n    }\\n\\n    /**\\n     * @notice Returns the base borrow rate of a reserve\\n     * @param reserveId The id of the reserve\\n     * @return The borrow rate, expressed in ray\\n     **/\\n    function getBaseBorrowRate(uint256 reserveId) public view returns (uint256) {\\n        return _baseBorrowRates[reserveId] > 0 ? _baseBorrowRates[reserveId] : _baseBorrowRate;\\n    }\\n\\n    /// @inheritdoc IOpenSkyInterestRateStrategy\\n    function getBorrowRate(uint256 reserveId, uint256 totalDeposits, uint256 totalBorrows) external override view returns (uint256) {\\n        uint256 utilizationRate = totalBorrows == 0 ? 0 : totalBorrows.rayDiv(totalDeposits);\\n        uint256 currentBorrowRate = 0;\\n        uint256 baseBorrowRate = getBaseBorrowRate(reserveId);\\n        if (utilizationRate > OPTIMAL_UTILIZATION_RATE) {\\n            uint256 excessUtilizationRateRatio = (utilizationRate - OPTIMAL_UTILIZATION_RATE).rayDiv(EXCESS_UTILIZATION_RATE);\\n            currentBorrowRate = baseBorrowRate + _rateSlope1 + _rateSlope2.rayMul(excessUtilizationRateRatio);\\n        } else {\\n            currentBorrowRate = baseBorrowRate + _rateSlope1.rayMul(utilizationRate).rayDiv(OPTIMAL_UTILIZATION_RATE);\\n        }\\n        return currentBorrowRate;\\n    }\\n}\\n\",\"keccak256\":\"0xce8b7080dd978c33d741032a35fb6cae5ba5c4874f64c06553dc22697d8b5262\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IOpenSkyInterestRateStrategy\\n * @author OpenSky Labs\\n * @notice Interface for the calculation of the interest rates\\n */\\ninterface IOpenSkyInterestRateStrategy {\\n    /**\\n     * @dev Emitted on setBaseBorrowRate()\\n     * @param reserveId The id of the reserve\\n     * @param baseRate The base rate has been set\\n     **/\\n    event SetBaseBorrowRate(\\n        uint256 indexed reserveId,\\n        uint256 indexed baseRate\\n    );\\n\\n    /**\\n     * @notice Returns the borrow rate of a reserve\\n     * @param reserveId The id of the reserve\\n     * @param totalDeposits The total deposits amount of the reserve\\n     * @param totalBorrows The total borrows amount of the reserve\\n     * @return The borrow rate, expressed in ray\\n     **/\\n    function getBorrowRate(uint256 reserveId, uint256 totalDeposits, uint256 totalBorrows) external view returns (uint256); \\n}\\n\",\"keccak256\":\"0xfa5ff4ed50344092c9559d27b9318c0804c03ff464b6989fc2743d5e61b42252\",\"license\":\"MIT\"},\"contracts/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    // common\\n    string public constant MATH_MULTIPLICATION_OVERFLOW = '100';\\n    string public constant MATH_ADDITION_OVERFLOW = '101';\\n    string public constant MATH_DIVISION_BY_ZERO = '102';\\n\\n    string public constant ETH_TRANSFER_FAILED = '110';\\n    string public constant RECEIVE_NOT_ALLOWED = '111';\\n    string public constant FALLBACK_NOT_ALLOWED = '112';\\n    string public constant APPROVAL_FAILED = '113';\\n\\n    // setting/factor\\n    string public constant SETTING_ZERO_ADDRESS_NOT_ALLOWED = '115';\\n    string public constant SETTING_RESERVE_FACTOR_NOT_ALLOWED = '116';\\n    string public constant SETTING_WHITELIST_INVALID_RESERVE_ID = '117';\\n    string public constant SETTING_WHITELIST_NFT_ADDRESS_IS_ZERO = '118';\\n\\n    // settings/acl\\n    string public constant ACL_ONLY_GOVERNANCE_CAN_CALL = '200';\\n    string public constant ACL_ONLY_EMERGENCY_ADMIN_CAN_CALL = '201';\\n    string public constant ACL_ONLY_POOL_ADMIN_CAN_CALL = '202';\\n    string public constant ACL_ONLY_LIQUIDATOR_CAN_CALL = '203';\\n    string public constant ACL_ONLY_AIRDROP_OPERATOR_CAN_CALL = '204';\\n    string public constant ACL_ONLY_POOL_CAN_CALL = '205';\\n\\n    // lending & borrowing\\n    // reserve\\n    string public constant RESERVE_DOES_NOT_EXIST = '300';\\n    string public constant RESERVE_LIQUIDITY_INSUFFICIENT = '301';\\n    string public constant RESERVE_INDEX_OVERFLOW = '302';\\n    string public constant RESERVE_SWITCH_MONEY_MARKET_STATE_ERROR = '303';\\n    string public constant RESERVE_TREASURY_FACTOR_NOT_ALLOWED = '304';\\n    string public constant RESERVE_TOKEN_CAN_NOT_BE_CLAIMED = '305';\\n\\n    // token\\n    string public constant AMOUNT_SCALED_IS_ZERO = '310';\\n    string public constant AMOUNT_TRANSFER_OVERFLOW = '311';\\n\\n    //deposit\\n    string public constant DEPOSIT_AMOUNT_SHOULD_BE_BIGGER_THAN_ZERO = '320';\\n\\n    // withdraw\\n    string public constant WITHDRAW_AMOUNT_NOT_ALLOWED = '321';\\n    string public constant WITHDRAW_LIQUIDITY_NOT_SUFFICIENT = '322';\\n\\n    // borrow\\n    string public constant BORROW_DURATION_NOT_ALLOWED = '330';\\n    string public constant BORROW_AMOUNT_EXCEED_BORROW_LIMIT = '331';\\n    string public constant NFT_ADDRESS_IS_NOT_IN_WHITELIST = '332';\\n\\n    // repay\\n    string public constant REPAY_STATUS_ERROR = '333';\\n    string public constant REPAY_MSG_VALUE_ERROR = '334';\\n\\n    // extend\\n    string public constant EXTEND_STATUS_ERROR = '335';\\n    string public constant EXTEND_MSG_VALUE_ERROR = '336';\\n\\n    // liquidate\\n    string public constant START_LIQUIDATION_STATUS_ERROR = '360';\\n    string public constant END_LIQUIDATION_STATUS_ERROR = '361';\\n    string public constant END_LIQUIDATION_AMOUNT_ERROR = '362';\\n\\n    // loan\\n    string public constant LOAN_DOES_NOT_EXIST = '400';\\n    string public constant LOAN_SET_STATUS_ERROR = '401';\\n    string public constant LOAN_REPAYER_IS_NOT_OWNER = '402';\\n    string public constant LOAN_LIQUIDATING_STATUS_CAN_NOT_BE_UPDATED = '403';\\n    string public constant LOAN_CALLER_IS_NOT_OWNER = '404';\\n    string public constant LOAN_COLLATERAL_NFT_CAN_NOT_BE_CLAIMED = '405';\\n\\n    string public constant FLASHCLAIM_EXECUTOR_ERROR = '410';\\n    string public constant FLASHCLAIM_STATUS_ERROR = '411';\\n\\n    // money market\\n    string public constant MONEY_MARKET_DEPOSIT_AMOUNT_NOT_ALLOWED = '500';\\n    string public constant MONEY_MARKET_WITHDRAW_AMOUNT_NOT_ALLOWED = '501';\\n    string public constant MONEY_MARKET_APPROVAL_FAILED = '502';\\n    string public constant MONEY_MARKET_DELEGATE_CALL_ERROR = '503';\\n    string public constant MONEY_MARKET_REQUIRE_DELEGATE_CALL = '504';\\n    string public constant MONEY_MARKET_WITHDRAW_AMOUNT_NOT_MATCH = '505';\\n\\n    // price oracle\\n    string public constant PRICE_ORACLE_HAS_NO_PRICE_FEED = '600';\\n    string public constant PRICE_ORACLE_INCORRECT_TIMESTAMP = '601';\\n    string public constant PRICE_ORACLE_PARAMS_ERROR = '602';\\n}\\n\",\"keccak256\":\"0x2eaba20dfb74594e9602bd1ae11dcfc510e2e337969ad435065102ea3fbc0c15\",\"license\":\"MIT\"},\"contracts/libraries/math/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../helpers/Errors.sol';\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded half up\\n **/\\n\\nlibrary PercentageMath {\\n  uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\n  uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\n\\n  /**\\n   * @dev Executes a percentage multiplication\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The percentage of value\\n   **/\\n  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    if (value == 0 || percentage == 0) {\\n      return 0;\\n    }\\n\\n    require(\\n      value <= (type(uint256).max - HALF_PERCENT) / percentage,\\n      Errors.MATH_MULTIPLICATION_OVERFLOW\\n    );\\n\\n    return (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\\n  }\\n\\n  /**\\n   * @dev Executes a percentage division\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The value divided the percentage\\n   **/\\n  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    require(percentage != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfPercentage = percentage / 2;\\n\\n    require(\\n      value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR,\\n      Errors.MATH_MULTIPLICATION_OVERFLOW\\n    );\\n\\n    return (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\n  }\\n}\\n\",\"keccak256\":\"0xe8333e1a929245e4198f87645eae3fc8749e8e29f505427b38ec8ca035434953\",\"license\":\"MIT\"},\"contracts/libraries/math/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {Errors} from '../helpers/Errors.sol';\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @return One ray, 1e27\\n     **/\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    /**\\n     * @return One wad, 1e18\\n     **/\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e27/2\\n     **/\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e18/2\\n     **/\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     **/\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfWAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * b + halfWAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     **/\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * WAD + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfRAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * b + halfRAY) / RAY;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, truncating the mantissa\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMulTruncate(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return (a * b) / RAY;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * RAY + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, truncating the mantissa\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDivTruncate(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        return (a * RAY) / b;\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @param a Ray\\n     * @return a casted to wad, rounded half up to the nearest wad\\n     **/\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n        uint256 result = halfRatio + a;\\n        require(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\\n\\n        return result / WAD_RAY_RATIO;\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @param a Wad\\n     * @return a converted in ray\\n     **/\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        uint256 result = a * WAD_RAY_RATIO;\\n        require(result / WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4bf6b9a00c5e9938726d173f11b56de8edd92e17593e4dfa61a3ce7336756c6b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61012060405234801561001157600080fd5b50604051610a44380380610a44833981016040819052610030916100d4565b61003933610074565b8360808181525050836100546100c460201b6104c91760201c565b61005e919061010a565b60a05260c09290925260e052610100525061012f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6b033b2e3c9fd0803ce800000090565b600080600080608085870312156100ea57600080fd5b505082516020840151604085015160609095015191969095509092509050565b60008282101561012a57634e487b7160e01b600052601160045260246000fd5b500390565b60805160a05160c05160e051610100516108a26101a2600039600061034c01526000818160f2015261027101526000818161012b0152818161029b01526102fb01526000818160ce015261021b01526000818161018c015281816101ee0152818161023f01526102d701526108a26000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80635a049f75116100665780635a049f751461014f578063715018a6146101645780638da5cb5b1461016c578063a15f30ac14610187578063f2fde38b146101ae57600080fd5b806315f24053146100a357806317319873146100c95780631eedf5c7146100f057806331f7266e146101165780635454a4b614610129575b600080fd5b6100b66100b13660046106cc565b6101c1565b6040519081526020015b60405180910390f35b6100b67f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000006100b6565b6100b66101243660046106f8565b610337565b7f00000000000000000000000000000000000000000000000000000000000000006100b6565b61016261015d366004610711565b610386565b005b6101626103f8565b6000546040516001600160a01b0390911681526020016100c0565b6100b67f000000000000000000000000000000000000000000000000000000000000000081565b6101626101bc366004610733565b61042e565b60008082156101d9576101d483856104d9565b6101dc565b60005b90506000806101ea87610337565b90507f00000000000000000000000000000000000000000000000000000000000000008311156102d257600061026a7f00000000000000000000000000000000000000000000000000000000000000006102647f000000000000000000000000000000000000000000000000000000000000000087610772565b906104d9565b90506102967f0000000000000000000000000000000000000000000000000000000000000000826105b9565b6102c07f000000000000000000000000000000000000000000000000000000000000000084610789565b6102ca9190610789565b92505061032d565b6103207f00000000000000000000000000000000000000000000000000000000000000006102647f0000000000000000000000000000000000000000000000000000000000000000866105b9565b61032a9082610789565b91505b5095945050505050565b600081815260016020526040812054610370577f0000000000000000000000000000000000000000000000000000000000000000610380565b6000828152600160205260409020545b92915050565b6000546001600160a01b031633146103b95760405162461bcd60e51b81526004016103b0906107a1565b60405180910390fd5b60008281526001602052604080822083905551829184917fb480dd30c13dbdecac56fd16523f3ad0317da81f9e3b63ce3a041b007c38b5069190a35050565b6000546001600160a01b031633146104225760405162461bcd60e51b81526004016103b0906107a1565b61042c600061067c565b565b6000546001600160a01b031633146104585760405162461bcd60e51b81526004016103b0906107a1565b6001600160a01b0381166104bd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103b0565b6104c68161067c565b50565b6b033b2e3c9fd0803ce800000090565b60408051808201909152600381526218981960e91b6020820152600090826105145760405162461bcd60e51b81526004016103b091906107d6565b50600061052260028461082b565b90506b033b2e3c9fd0803ce800000061053d82600019610772565b610547919061082b565b8411156040518060400160405280600381526020016203130360ec1b815250906105845760405162461bcd60e51b81526004016103b091906107d6565b50828161059d6b033b2e3c9fd0803ce80000008761084d565b6105a79190610789565b6105b1919061082b565b949350505050565b60008215806105c6575081155b156105d357506000610380565b816105eb60026b033b2e3c9fd0803ce800000061082b565b6105f790600019610772565b610601919061082b565b8311156040518060400160405280600381526020016203130360ec1b8152509061063e5760405162461bcd60e51b81526004016103b091906107d6565b506b033b2e3c9fd0803ce800000061065760028261082b565b610661848661084d565b61066b9190610789565b610675919061082b565b9392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000606084860312156106e157600080fd5b505081359360208301359350604090920135919050565b60006020828403121561070a57600080fd5b5035919050565b6000806040838503121561072457600080fd5b50508035926020909101359150565b60006020828403121561074557600080fd5b81356001600160a01b038116811461067557600080fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156107845761078461075c565b500390565b6000821982111561079c5761079c61075c565b500190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208083528351808285015260005b81811015610803578581018301518582016040015282016107e7565b81811115610815576000604083870101525b50601f01601f1916929092016040019392505050565b60008261084857634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156108675761086761075c565b50029056fea26469706673582212205a0389a4255d570d05632a7edf4414bc5c461ddd58e85952d7f0acdf86bf0b8c64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80635a049f75116100665780635a049f751461014f578063715018a6146101645780638da5cb5b1461016c578063a15f30ac14610187578063f2fde38b146101ae57600080fd5b806315f24053146100a357806317319873146100c95780631eedf5c7146100f057806331f7266e146101165780635454a4b614610129575b600080fd5b6100b66100b13660046106cc565b6101c1565b6040519081526020015b60405180910390f35b6100b67f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000006100b6565b6100b66101243660046106f8565b610337565b7f00000000000000000000000000000000000000000000000000000000000000006100b6565b61016261015d366004610711565b610386565b005b6101626103f8565b6000546040516001600160a01b0390911681526020016100c0565b6100b67f000000000000000000000000000000000000000000000000000000000000000081565b6101626101bc366004610733565b61042e565b60008082156101d9576101d483856104d9565b6101dc565b60005b90506000806101ea87610337565b90507f00000000000000000000000000000000000000000000000000000000000000008311156102d257600061026a7f00000000000000000000000000000000000000000000000000000000000000006102647f000000000000000000000000000000000000000000000000000000000000000087610772565b906104d9565b90506102967f0000000000000000000000000000000000000000000000000000000000000000826105b9565b6102c07f000000000000000000000000000000000000000000000000000000000000000084610789565b6102ca9190610789565b92505061032d565b6103207f00000000000000000000000000000000000000000000000000000000000000006102647f0000000000000000000000000000000000000000000000000000000000000000866105b9565b61032a9082610789565b91505b5095945050505050565b600081815260016020526040812054610370577f0000000000000000000000000000000000000000000000000000000000000000610380565b6000828152600160205260409020545b92915050565b6000546001600160a01b031633146103b95760405162461bcd60e51b81526004016103b0906107a1565b60405180910390fd5b60008281526001602052604080822083905551829184917fb480dd30c13dbdecac56fd16523f3ad0317da81f9e3b63ce3a041b007c38b5069190a35050565b6000546001600160a01b031633146104225760405162461bcd60e51b81526004016103b0906107a1565b61042c600061067c565b565b6000546001600160a01b031633146104585760405162461bcd60e51b81526004016103b0906107a1565b6001600160a01b0381166104bd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103b0565b6104c68161067c565b50565b6b033b2e3c9fd0803ce800000090565b60408051808201909152600381526218981960e91b6020820152600090826105145760405162461bcd60e51b81526004016103b091906107d6565b50600061052260028461082b565b90506b033b2e3c9fd0803ce800000061053d82600019610772565b610547919061082b565b8411156040518060400160405280600381526020016203130360ec1b815250906105845760405162461bcd60e51b81526004016103b091906107d6565b50828161059d6b033b2e3c9fd0803ce80000008761084d565b6105a79190610789565b6105b1919061082b565b949350505050565b60008215806105c6575081155b156105d357506000610380565b816105eb60026b033b2e3c9fd0803ce800000061082b565b6105f790600019610772565b610601919061082b565b8311156040518060400160405280600381526020016203130360ec1b8152509061063e5760405162461bcd60e51b81526004016103b091906107d6565b506b033b2e3c9fd0803ce800000061065760028261082b565b610661848661084d565b61066b9190610789565b610675919061082b565b9392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000606084860312156106e157600080fd5b505081359360208301359350604090920135919050565b60006020828403121561070a57600080fd5b5035919050565b6000806040838503121561072457600080fd5b50508035926020909101359150565b60006020828403121561074557600080fd5b81356001600160a01b038116811461067557600080fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156107845761078461075c565b500390565b6000821982111561079c5761079c61075c565b500190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208083528351808285015260005b81811015610803578581018301518582016040015282016107e7565b81811115610815576000604083870101525b50601f01601f1916929092016040019392505050565b60008261084857634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156108675761086761075c565b50029056fea26469706673582212205a0389a4255d570d05632a7edf4414bc5c461ddd58e85952d7f0acdf86bf0b8c64736f6c634300080a0033",
  "libraries": {
    "PercentageMath": "0x9Ac06e13c5f1521B9f2D4cb66Bca18dF7665d88b"
  },
  "devdoc": {
    "author": "OpenSky Labs",
    "details": "The model of interest rate is based on 2 slopes, one before the `OPTIMAL_UTILIZATION_RATE` point of usage and another from that one to 100%.*",
    "kind": "dev",
    "methods": {
      "getBaseBorrowRate(uint256)": {
        "params": {
          "reserveId": "The id of the reserve"
        },
        "returns": {
          "_0": "The borrow rate, expressed in ray*"
        }
      },
      "getBorrowRate(uint256,uint256,uint256)": {
        "params": {
          "reserveId": "The id of the reserve",
          "totalBorrows": "The total borrows amount of the reserve",
          "totalDeposits": "The total deposits amount of the reserve"
        },
        "returns": {
          "_0": "The borrow rate, expressed in ray*"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setBaseBorrowRate(uint256,uint256)": {
        "params": {
          "rate": "The rate to be set*",
          "reserveId": "The id of the reserve"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "OpenSkyInterestRateStrategy contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getBaseBorrowRate(uint256)": {
        "notice": "Returns the base borrow rate of a reserve"
      },
      "getBorrowRate(uint256,uint256,uint256)": {
        "notice": "Returns the borrow rate of a reserve"
      },
      "setBaseBorrowRate(uint256,uint256)": {
        "notice": "Sets the base borrow rate of a reserve"
      }
    },
    "notice": "Implements the calculation of the interest rates depending on the reserve state",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 387,
        "contract": "contracts/OpenSkyInterestRateStrategy.sol:OpenSkyInterestRateStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8538,
        "contract": "contracts/OpenSkyInterestRateStrategy.sol:OpenSkyInterestRateStrategy",
        "label": "_baseBorrowRates",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}