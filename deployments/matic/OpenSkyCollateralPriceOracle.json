{
  "address": "0x66FB12B8E6cBA774917a1bE1B355357641511cF0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IOpenSkySettings",
          "name": "settings",
          "type": "address"
        },
        {
          "internalType": "contract IOpenSkyPriceAggregator",
          "name": "priceAggregator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roundInterval",
          "type": "uint256"
        }
      ],
      "name": "SetRoundInterval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeInterval",
          "type": "uint256"
        }
      ],
      "name": "SetTimeInterval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "UpdatePrice",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SETTINGS",
      "outputs": [
        {
          "internalType": "contract IOpenSkySettings",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        }
      ],
      "name": "getLatestRoundId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPriceData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "roundId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cumulativePrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct OpenSkyCollateralPriceOracle.NFTPriceData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        }
      ],
      "name": "getPriceFeedLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "roundInterval",
          "type": "uint256"
        }
      ],
      "name": "getTwapPriceByRoundInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timeInterval",
          "type": "uint256"
        }
      ],
      "name": "getTwapPriceByTimeInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nftPriceFeedMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cumulativePrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceAggregator",
          "type": "address"
        }
      ],
      "name": "setPriceAggregator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundInterval",
          "type": "uint256"
        }
      ],
      "name": "setRoundInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timeInterval",
          "type": "uint256"
        }
      ],
      "name": "setTimeInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "updatePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "nftAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "updatePrices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xce5698f7ea1fdd61f5b125828878a113496931d359f1476b4bbf5d0b8191dd36",
  "receipt": {
    "to": null,
    "from": "0x218513C58A4781a5B88De6230caA29aBCe2Ccd75",
    "contractAddress": "0x66FB12B8E6cBA774917a1bE1B355357641511cF0",
    "transactionIndex": 49,
    "gasUsed": "1166042",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000008000000000000000000000008000000000000000000000000000000080000000000000000000000000800001000000040000000100000000000000000000020000400000000000000800000000000000000080000000000000400000000000000000000000000400000000000000000000000000000000080000200000000000000000001000000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000100000000020000000000000000000000000000000000001000002000000000000000000100000",
    "blockHash": "0x7e960501a00891844e6dfc319d61d5bd0cdbaee5b866e6f9c46b04c1a6c3fb0d",
    "transactionHash": "0xce5698f7ea1fdd61f5b125828878a113496931d359f1476b4bbf5d0b8191dd36",
    "logs": [
      {
        "transactionIndex": 49,
        "blockNumber": 29761310,
        "transactionHash": "0xce5698f7ea1fdd61f5b125828878a113496931d359f1476b4bbf5d0b8191dd36",
        "address": "0x66FB12B8E6cBA774917a1bE1B355357641511cF0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000218513c58a4781a5b88de6230caa29abce2ccd75"
        ],
        "data": "0x",
        "logIndex": 201,
        "blockHash": "0x7e960501a00891844e6dfc319d61d5bd0cdbaee5b866e6f9c46b04c1a6c3fb0d"
      },
      {
        "transactionIndex": 49,
        "blockNumber": 29761310,
        "transactionHash": "0xce5698f7ea1fdd61f5b125828878a113496931d359f1476b4bbf5d0b8191dd36",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000218513c58a4781a5b88de6230caa29abce2ccd75",
          "0x000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0"
        ],
        "data": "0x000000000000000000000000000000000000000000000000007c4745483c0db4000000000000000000000000000000000000000000000000452eef7d991d26b800000000000000000000000000000000000000000000020be8fddebe826c3c1400000000000000000000000000000000000000000000000044b2a83850e1190400000000000000000000000000000000000000000000020be97a2603caa849c8",
        "logIndex": 202,
        "blockHash": "0x7e960501a00891844e6dfc319d61d5bd0cdbaee5b866e6f9c46b04c1a6c3fb0d"
      }
    ],
    "blockNumber": 29761310,
    "cumulativeGasUsed": "10089849",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x12D182BE71BF456353FBc3aeFdae4C98465D9ef5",
    "0x0000000000000000000000000000000000000000"
  ],
  "solcInputHash": "597fe0c822de038e67f456c392a88115",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IOpenSkySettings\",\"name\":\"settings\",\"type\":\"address\"},{\"internalType\":\"contract IOpenSkyPriceAggregator\",\"name\":\"priceAggregator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundInterval\",\"type\":\"uint256\"}],\"name\":\"SetRoundInterval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeInterval\",\"type\":\"uint256\"}],\"name\":\"SetTimeInterval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"UpdatePrice\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SETTINGS\",\"outputs\":[{\"internalType\":\"contract IOpenSkySettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"name\":\"getLatestRoundId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPriceData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumulativePrice\",\"type\":\"uint256\"}],\"internalType\":\"struct OpenSkyCollateralPriceOracle.NFTPriceData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"name\":\"getPriceFeedLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"roundInterval\",\"type\":\"uint256\"}],\"name\":\"getTwapPriceByRoundInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeInterval\",\"type\":\"uint256\"}],\"name\":\"getTwapPriceByTimeInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftPriceFeedMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumulativePrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceAggregator\",\"type\":\"address\"}],\"name\":\"setPriceAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundInterval\",\"type\":\"uint256\"}],\"name\":\"setRoundInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeInterval\",\"type\":\"uint256\"}],\"name\":\"setTimeInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"nftAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"updatePrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"OpenSky Labs\",\"details\":\"Implements logics of the collateral price oracle for the OpenSky protocol*\",\"kind\":\"dev\",\"methods\":{\"getLatestRoundId(address)\":{\"params\":{\"nftAddress\":\"The address of the NFT\"},\"returns\":{\"_0\":\"The latest round id*\"}},\"getPrice(uint256,address,uint256)\":{\"params\":{\"nftAddress\":\"The address of the NFT\",\"reserveId\":\"The id of the reserve\",\"tokenId\":\"The id of the NFT\"},\"returns\":{\"_0\":\"The price of the NFT*\"}},\"getPriceData(address,uint256)\":{\"params\":{\"index\":\"The index of the feed\",\"nftAddress\":\"The address of the NFT\"},\"returns\":{\"_0\":\"The data of the price feed*\"}},\"getPriceFeedLength(address)\":{\"params\":{\"nftAddress\":\"The address of the NFT\"},\"returns\":{\"length\":\"The count of price feeds*\"}},\"getTwapPriceByRoundInterval(address,uint256)\":{\"params\":{\"nftAddress\":\"The address of the NFT\",\"roundInterval\":\"The round interval\"},\"returns\":{\"_0\":\"The price of the NFT*\"}},\"getTwapPriceByTimeInterval(address,uint256)\":{\"params\":{\"nftAddress\":\"The address of the NFT\",\"timeInterval\":\"The time interval\"},\"returns\":{\"_0\":\"The price of the NFT*\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setRoundInterval(uint256)\":{\"params\":{\"roundInterval\":\"The round interval will be set*\"}},\"setTimeInterval(uint256)\":{\"params\":{\"timeInterval\":\"The time interval will be set*\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePrice(address,uint256,uint256)\":{\"params\":{\"nftAddress\":\"The address of the NFT\",\"price\":\"The price of the NFT\",\"timestamp\":\"The timestamp when the price happened*\"}},\"updatePrices(address[],uint256[],uint256)\":{\"params\":{\"nftAddresses\":\"Addresses of NFT collections\",\"prices\":\"Floor prices of NFT collections\",\"timestamp\":\"The timestamp when prices happened*\"}}},\"title\":\"OpenSkyCollateralPriceOracle contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getLatestRoundId(address)\":{\"notice\":\"Returns the latest round id of the particular NFT\"},\"getPrice(uint256,address,uint256)\":{\"notice\":\"Returns the NFT price in ETH\"},\"getPriceData(address,uint256)\":{\"notice\":\"Returns the data of the particular price feed\"},\"getPriceFeedLength(address)\":{\"notice\":\"Returns the count of price feeds about the particular NFT\"},\"getTwapPriceByRoundInterval(address,uint256)\":{\"notice\":\"Returns the TWAP price of NFT during the particular round interval\"},\"getTwapPriceByTimeInterval(address,uint256)\":{\"notice\":\"Returns the TWAP price of NFT during the particular time interval\"},\"setRoundInterval(uint256)\":{\"notice\":\"Sets round interval that is used for calculating TWAP price\"},\"setTimeInterval(uint256)\":{\"notice\":\"Sets time interval that is used for calculating TWAP price\"},\"updatePrice(address,uint256,uint256)\":{\"notice\":\"Updates the floor price of the NFT collection\"},\"updatePrices(address[],uint256[],uint256)\":{\"notice\":\"Updates floor prices of NFT collections\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OpenSkyCollateralPriceOracle.sol\":\"OpenSkyCollateralPriceOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/OpenSkyCollateralPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './interfaces/IOpenSkyCollateralPriceOracle.sol';\\nimport './interfaces/IOpenSkySettings.sol';\\nimport './libraries/helpers/Errors.sol';\\nimport './interfaces/IOpenSkyPriceAggregator.sol';\\n\\n/**\\n * @title OpenSkyCollateralPriceOracle contract\\n * @author OpenSky Labs\\n * @dev Implements logics of the collateral price oracle for the OpenSky protocol\\n **/\\ncontract OpenSkyCollateralPriceOracle is Ownable, IOpenSkyCollateralPriceOracle {\\n    IOpenSkySettings public immutable SETTINGS;\\n\\n    mapping(address => NFTPriceData[]) public nftPriceFeedMap;\\n\\n    IOpenSkyPriceAggregator private _priceAggregator;\\n\\n    uint256 internal _roundInterval;\\n    uint256 internal _timeInterval;\\n\\n    struct NFTPriceData {\\n        uint256 roundId;\\n        uint256 price;\\n        uint256 timestamp;\\n        uint256 cumulativePrice;\\n    }\\n\\n    constructor(IOpenSkySettings settings, IOpenSkyPriceAggregator priceAggregator) Ownable() {\\n        SETTINGS = settings;\\n        _priceAggregator = priceAggregator;\\n    }\\n\\n    function setPriceAggregator(address priceAggregator) external onlyOwner {\\n        _priceAggregator = IOpenSkyPriceAggregator(priceAggregator);\\n    }\\n\\n    /// @inheritdoc IOpenSkyCollateralPriceOracle\\n    function updatePrice(\\n        address nftAddress,\\n        uint256 price,\\n        uint256 timestamp\\n    ) public override onlyOwner {\\n        NFTPriceData[] storage prices = nftPriceFeedMap[nftAddress];\\n        NFTPriceData memory latestPriceData = prices.length > 0\\n            ? prices[prices.length - 1]\\n            : NFTPriceData({roundId: 0, price: 0, timestamp: 0, cumulativePrice: 0});\\n        require(timestamp > latestPriceData.timestamp, Errors.PRICE_ORACLE_INCORRECT_TIMESTAMP);\\n        uint256 cumulativePrice = latestPriceData.timestamp > 0\\n            ? latestPriceData.cumulativePrice + (timestamp - latestPriceData.timestamp) * latestPriceData.price\\n            : 0;\\n        uint256 roundId = latestPriceData.roundId + 1;\\n        NFTPriceData memory data = NFTPriceData({\\n            price: price,\\n            timestamp: timestamp,\\n            roundId: roundId,\\n            cumulativePrice: cumulativePrice\\n        });\\n        prices.push(data);\\n\\n        emit UpdatePrice(nftAddress, price, timestamp, roundId);\\n    }\\n\\n    /**\\n     * @notice Updates floor prices of NFT collections\\n     * @param nftAddresses Addresses of NFT collections\\n     * @param prices Floor prices of NFT collections\\n     * @param timestamp The timestamp when prices happened\\n     **/\\n    function updatePrices(\\n        address[] memory nftAddresses,\\n        uint256[] memory prices,\\n        uint256 timestamp\\n    ) external onlyOwner {\\n        require(nftAddresses.length == prices.length, Errors.PRICE_ORACLE_PARAMS_ERROR);\\n        for (uint256 i = 0; i < nftAddresses.length; i++) {\\n            updatePrice(nftAddresses[i], prices[i], timestamp);\\n        }\\n    }\\n\\n    /// @inheritdoc IOpenSkyCollateralPriceOracle\\n    function setRoundInterval(uint256 roundInterval) external override onlyOwner {\\n        _roundInterval = roundInterval;\\n        emit SetRoundInterval(_msgSender(), roundInterval);\\n    }\\n\\n    /// @inheritdoc IOpenSkyCollateralPriceOracle\\n    function setTimeInterval(uint256 timeInterval) external override onlyOwner {\\n        _timeInterval = timeInterval;\\n        emit SetTimeInterval(_msgSender(), timeInterval);\\n    }\\n\\n    /// @inheritdoc IOpenSkyCollateralPriceOracle\\n    function getPrice(\\n        uint256 reserveId,\\n        address nftAddress,\\n        uint256 tokenId\\n    ) external view override returns (uint256) {\\n        if (!SETTINGS.inWhitelist(reserveId, nftAddress)) {\\n            return 0;\\n        }\\n        if (address(_priceAggregator) == address(0)) {\\n            return _getPrice(nftAddress);\\n        } else {\\n            uint256 price = _priceAggregator.getAssetPrice(nftAddress);\\n            return price > 0 ? price : _getPrice(nftAddress);\\n        }\\n    }\\n\\n    function _getPrice(address nftAddress) internal view returns (uint256) {\\n        if (_timeInterval > 0) {\\n            return getTwapPriceByTimeInterval(nftAddress, _timeInterval);\\n        } else {\\n            return getTwapPriceByRoundInterval(nftAddress, _roundInterval);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the TWAP price of NFT during the particular round interval\\n     * @param nftAddress The address of the NFT\\n     * @param roundInterval The round interval\\n     * @return The price of the NFT\\n     **/\\n    function getTwapPriceByRoundInterval(address nftAddress, uint256 roundInterval) public view returns (uint256) {\\n        uint256 priceFeedLength = getPriceFeedLength(nftAddress);\\n        if (priceFeedLength == 0) {\\n            return 0;\\n        }\\n        uint256 currentRound = priceFeedLength - 1;\\n        NFTPriceData memory currentPriceData = nftPriceFeedMap[nftAddress][currentRound];\\n        if (roundInterval == 0 || priceFeedLength == 1) {\\n            return currentPriceData.price;\\n        }\\n        uint256 previousRound = currentRound > roundInterval ? currentRound - roundInterval : 0;\\n        NFTPriceData memory previousPriceData = nftPriceFeedMap[nftAddress][previousRound];\\n        return\\n            (currentPriceData.price *\\n                (block.timestamp - currentPriceData.timestamp) +\\n                currentPriceData.cumulativePrice -\\n                previousPriceData.cumulativePrice) / (block.timestamp - previousPriceData.timestamp);\\n    }\\n\\n    /**\\n     * @notice Returns the TWAP price of NFT during the particular time interval\\n     * @param nftAddress The address of the NFT\\n     * @param timeInterval The time interval\\n     * @return The price of the NFT\\n     **/\\n    function getTwapPriceByTimeInterval(address nftAddress, uint256 timeInterval) public view returns (uint256) {\\n        uint256 priceFeedLength = getPriceFeedLength(nftAddress);\\n        if (priceFeedLength == 0) {\\n            return 0;\\n        }\\n\\n        NFTPriceData memory currentPriceData = nftPriceFeedMap[nftAddress][priceFeedLength - 1];\\n        uint256 baseTimestamp = block.timestamp - timeInterval;\\n\\n        if (currentPriceData.timestamp <= baseTimestamp) {\\n            return currentPriceData.price;\\n        }\\n\\n        NFTPriceData memory firstPriceData = nftPriceFeedMap[nftAddress][0];\\n        if (firstPriceData.timestamp >= baseTimestamp) {\\n            return\\n                (currentPriceData.price *\\n                    (block.timestamp - currentPriceData.timestamp) +\\n                    (currentPriceData.cumulativePrice - firstPriceData.cumulativePrice)) /\\n                (block.timestamp - firstPriceData.timestamp);\\n        }\\n\\n        uint256 roundIndex = priceFeedLength - 1;\\n        NFTPriceData storage basePriceData = nftPriceFeedMap[nftAddress][roundIndex];\\n\\n        while (roundIndex > 0 && basePriceData.timestamp > baseTimestamp) {\\n            basePriceData = nftPriceFeedMap[nftAddress][--roundIndex];\\n        }\\n\\n        uint256 cumulativePrice = currentPriceData.price *\\n            (block.timestamp - currentPriceData.timestamp) +\\n            (currentPriceData.cumulativePrice - basePriceData.cumulativePrice);\\n        cumulativePrice -= basePriceData.price * (baseTimestamp - basePriceData.timestamp);\\n        return cumulativePrice / timeInterval;\\n    }\\n\\n    /**\\n     * @notice Returns the data of the particular price feed\\n     * @param nftAddress The address of the NFT\\n     * @param index The index of the feed\\n     * @return The data of the price feed\\n     **/\\n    function getPriceData(address nftAddress, uint256 index) external view returns (NFTPriceData memory) {\\n        return nftPriceFeedMap[nftAddress][index];\\n    }\\n\\n    /**\\n     * @notice Returns the count of price feeds about the particular NFT\\n     * @param nftAddress The address of the NFT\\n     * @return length The count of price feeds\\n     **/\\n    function getPriceFeedLength(address nftAddress) public view returns (uint256 length) {\\n        return nftPriceFeedMap[nftAddress].length;\\n    }\\n\\n    /**\\n     * @notice Returns the latest round id of the particular NFT\\n     * @param nftAddress The address of the NFT\\n     * @return The latest round id\\n     **/\\n    function getLatestRoundId(address nftAddress) external view returns (uint256) {\\n        uint256 len = getPriceFeedLength(nftAddress);\\n        if (len == 0) {\\n            return 0;\\n        }\\n        return nftPriceFeedMap[nftAddress][len - 1].roundId;\\n    }\\n}\\n\",\"keccak256\":\"0x2f51ba870ab13c92b52f01ef62edfe06dc2178fe83b74d3fd62cf4368986f1f6\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyCollateralPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IOpenSkyPriceOracle\\n * @author OpenSky Labs\\n * @notice Defines the basic interface for a price oracle.\\n **/\\ninterface IOpenSkyCollateralPriceOracle {\\n    /**\\n     * @dev Emitted on setRoundInterval()\\n     * @param operator The address of the operator\\n     * @param roundInterval The round interval\\n     **/\\n    event SetRoundInterval(address indexed operator, uint256 roundInterval);\\n\\n    /**\\n     * @dev Emitted on setTimeInterval()\\n     * @param operator The address of the operator\\n     * @param timeInterval The time interval\\n     **/\\n    event SetTimeInterval(address indexed operator, uint256 timeInterval);\\n\\n    /**\\n     * @dev Emitted on updatePrice()\\n     * @param nftAddress The address of the NFT\\n     * @param price The price of the NFT\\n     * @param timestamp The timestamp when the price happened\\n     * @param roundId The round id\\n     **/\\n    event UpdatePrice(address indexed nftAddress, uint256 price, uint256 timestamp, uint256 roundId);\\n\\n    /**\\n     * @notice Sets round interval that is used for calculating TWAP price\\n     * @param roundInterval The round interval will be set\\n     **/\\n    function setRoundInterval(uint256 roundInterval) external;\\n\\n    /**\\n     * @notice Sets time interval that is used for calculating TWAP price\\n     * @param timeInterval The time interval will be set\\n     **/\\n    function setTimeInterval(uint256 timeInterval) external;\\n\\n    /**\\n     * @notice Returns the NFT price in ETH\\n     * @param reserveId The id of the reserve\\n     * @param nftAddress The address of the NFT\\n     * @param tokenId The id of the NFT\\n     * @return The price of the NFT\\n     **/\\n    function getPrice(uint256 reserveId, address nftAddress, uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Updates the floor price of the NFT collection\\n     * @param nftAddress The address of the NFT\\n     * @param price The price of the NFT\\n     * @param timestamp The timestamp when the price happened\\n     **/\\n    function updatePrice(address nftAddress, uint256 price, uint256 timestamp) external;\\n}\\n\",\"keccak256\":\"0xaa7369c8430c9d0f02a3538613ac96459fddfe78321b0e0ca3496ec83a2f4ceb\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyPriceAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IOpenSkyPriceAggregator {\\n    event SetAggregator(address indexed asset, address indexed aggregator);\\n\\n    function getAssetPrice(address nftAddress) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x65b26e4b63b54a8157ca0fd57bed0b663c9eacfd0ffb4318cdb78ded35cd9b38\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkySettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\nimport '../libraries/types/DataTypes.sol';\\n\\ninterface IOpenSkySettings {\\n    event InitPoolAddress(address operator, address address_);\\n    event InitLoanAddress(address operator, address address_);\\n    event InitVaultFactoryAddress(address operator, address address_);\\n    event InitIncentiveControllerAddress(address operator, address address_);\\n    event InitWETHGatewayAddress(address operator, address address_);\\n    event InitPunkGatewayAddress(address operator, address address_);\\n    event InitDaoVaultAddress(address operator, address address_);\\n\\n    event AddToWhitelist(address operator, uint256 reserveId, address nft);\\n    event RemoveFromWhitelist(address operator, uint256 reserveId, address nft);\\n    event SetReserveFactor(address operator, uint256 factor);\\n    event SetPrepaymentFeeFactor(address operator, uint256 factor);\\n    event SetOverdueLoanFeeFactor(address operator, uint256 factor);\\n    event SetMoneyMarketAddress(address operator, address address_);\\n    event SetTreasuryAddress(address operator, address address_);\\n    event SetACLManagerAddress(address operator, address address_);\\n    event SetLoanDescriptorAddress(address operator, address address_);\\n    event SetNftPriceOracleAddress(address operator, address address_);\\n    event SetInterestRateStrategyAddress(address operator, address address_);\\n    event AddLiquidator(address operator, address address_);\\n    event RemoveLiquidator(address operator, address address_);\\n\\n    function poolAddress() external view returns (address);\\n\\n    function loanAddress() external view returns (address);\\n\\n    function vaultFactoryAddress() external view returns (address);\\n\\n    function incentiveControllerAddress() external view returns (address);\\n\\n    function wethGatewayAddress() external view returns (address);\\n\\n    function punkGatewayAddress() external view returns (address);\\n\\n    function inWhitelist(uint256 reserveId, address nft) external view returns (bool);\\n\\n    function getWhitelistDetail(uint256 reserveId, address nft) external view returns (DataTypes.WhitelistInfo memory);\\n\\n    function reserveFactor() external view returns (uint256); // treasury ratio\\n\\n    function MAX_RESERVE_FACTOR() external view returns (uint256);\\n\\n    function prepaymentFeeFactor() external view returns (uint256);\\n\\n    function overdueLoanFeeFactor() external view returns (uint256);\\n\\n    function moneyMarketAddress() external view returns (address);\\n\\n    function treasuryAddress() external view returns (address);\\n\\n    function daoVaultAddress() external view returns (address);\\n\\n    function ACLManagerAddress() external view returns (address);\\n\\n    function loanDescriptorAddress() external view returns (address);\\n\\n    function nftPriceOracleAddress() external view returns (address);\\n\\n    function interestRateStrategyAddress() external view returns (address);\\n    \\n    function isLiquidator(address liquidator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd5c1c2468464891b3ce379c8a03bc21c2c67fcf0c7493e3b35fd573fa21ea448\",\"license\":\"MIT\"},\"contracts/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    \\n    // common\\n    string public constant MATH_MULTIPLICATION_OVERFLOW = '100';\\n    string public constant MATH_ADDITION_OVERFLOW = '101';\\n    string public constant MATH_DIVISION_BY_ZERO = '102';\\n\\n    string public constant ETH_TRANSFER_FAILED = '110';\\n    string public constant RECEIVE_NOT_ALLOWED = '111';\\n    string public constant FALLBACK_NOT_ALLOWED = '112';\\n\\n    // settings/acl\\n    string public constant ACL_ONLY_GOVERNANCE_CAN_CALL = '200';\\n    string public constant ACL_ONLY_EMERGENCY_ADMIN_CAN_CALL = '201';\\n    string public constant ACL_ONLY_POOL_ADMIN_CAN_CALL = '202';\\n    string public constant ACL_ONLY_LIQUIDATOR_CAN_CALL = '203';\\n    string public constant ACL_ONLY_AIRDROP_OPERATOR_CAN_CALL = '204';\\n    string public constant ACL_ONLY_POOL_CAN_CALL = '205';\\n\\n    // lending & borrowing \\n    // reserve\\n    string public constant RESERVE_DOES_NOT_EXIST = '300';\\n    string public constant RESERVE_LIQUIDITY_INSUFFICIENT = '301';\\n    string public constant RESERVE_INDEX_OVERFLOW = '302';\\n    string public constant RESERVE_SWITCH_MONEY_MARKET_STATE_ERROR = '303';\\n    string public constant RESERVE_TREASURY_FACTOR_NOT_ALLOWED = '304';\\n    string public constant RESERVE_TOKEN_CAN_NOT_BE_CLAIMED = '305';\\n\\n    // token\\n    string public constant AMOUNT_SCALED_IS_ZERO = '310';\\n    string public constant AMOUNT_TRANSFER_OVERFLOW = '311';\\n    \\n    //deposit\\n    string public constant DEPOSIT_AMOUNT_SHOULD_BE_BIGGER_THAN_ZERO = '320';\\n\\n    // withdraw\\n    string public constant WITHDRAW_AMOUNT_NOT_ALLOWED = '321';\\n    string public constant WITHDRAW_LIQUIDITY_NOT_SUFFICIENT = '322';\\n\\n    // borrow\\n    string public constant BORROW_DURATION_NOT_ALLOWED = '330';\\n    string public constant BORROW_AMOUNT_EXCEED_BORROW_LIMIT = '331';\\n    string public constant NFT_ADDRESS_IS_NOT_IN_WHITELIST = '332';\\n\\n    // repay\\n    string public constant REPAY_STATUS_ERROR = '333';\\n    string public constant REPAY_MSG_VALUE_ERROR = '334';\\n\\n    // extend\\n    string public constant EXTEND_STATUS_ERROR = '335';\\n    string public constant EXTEND_MSG_VALUE_ERROR = '336';\\n\\n    // liquidate\\n    string public constant START_LIQUIDATION_STATUS_ERROR = '360';\\n    string public constant END_LIQUIDATION_STATUS_ERROR = '361';\\n    string public constant END_LIQUIDATION_AMOUNT_ERROR = '362';\\n\\n    // loan\\n    string public constant LOAN_DOES_NOT_EXIST = '400';\\n    string public constant LOAN_SET_STATUS_ERROR = '401';\\n    string public constant LOAN_REPAYER_IS_NOT_OWNER = '402';\\n    string public constant LOAN_LIQUIDATING_STATUS_CAN_NOT_BE_UPDATED = '403';\\n    string public constant LOAN_CALLER_IS_NOT_OWNER = '404';\\n    string public constant LOAN_COLLATERAL_NFT_CAN_NOT_BE_CLAIMED = '405';\\n\\n    string public constant FLASHCLAIM_EXECUTOR_ERROR = '410';\\n    string public constant FLASHCLAIM_STATUS_ERROR = '411';\\n\\n    // money market\\n    string public constant MONEY_MARKET_DEPOSIT_AMOUNT_NOT_ALLOWED = '500';\\n    string public constant MONEY_MARKET_WITHDRAW_AMOUNT_NOT_ALLOWED = '501';\\n    string public constant MONEY_MARKET_APPROVAL_FAILED = '502';\\n    string public constant MONEY_MARKET_DELEGATE_CALL_ERROR = '503';\\n    string public constant MONEY_MARKET_REQUIRE_DELEGATE_CALL = '504';\\n\\n    // price oracle\\n    string public constant PRICE_ORACLE_HAS_NO_PRICE_FEED = '600';\\n    string public constant PRICE_ORACLE_INCORRECT_TIMESTAMP = '601';\\n    string public constant PRICE_ORACLE_PARAMS_ERROR = '602';\\n}\\n\",\"keccak256\":\"0x56d90f525ba934c8c5de3ba8028441ac11ad5130f660b0720d18c1280561c0b4\",\"license\":\"MIT\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        uint256 reserveId;\\n        address underlyingAsset;\\n        address oTokenAddress;\\n        address moneyMarketAddress;\\n        uint128 lastSupplyIndex;\\n        uint256 borrowingInterestPerSecond;\\n        uint256 lastMoneyMarketBalance;\\n        uint40 lastUpdateTimestamp;\\n        uint256 totalBorrows;\\n        address interestModelAddress;\\n        uint256 treasuryFactor;\\n        bool isMoneyMarketOn;\\n    }\\n\\n    struct LoanData {\\n        uint256 reserveId;\\n        address nftAddress;\\n        uint256 tokenId;\\n        address borrower;\\n        uint256 amount;\\n        uint128 borrowRate;\\n        uint128 interestPerSecond;\\n        uint40 borrowBegin;\\n        uint40 borrowDuration;\\n        uint40 borrowOverdueTime;\\n        uint40 liquidatableTime;\\n        uint40 extendableTime;\\n        uint40 borrowEnd;\\n        LoanStatus status;\\n    }\\n\\n    enum LoanStatus {\\n        NONE,\\n        BORROWING,\\n        EXTENDABLE,\\n        OVERDUE,\\n        LIQUIDATABLE,\\n        LIQUIDATING\\n    }\\n\\n    struct WhitelistInfo {\\n        bool enabled;\\n        string name;\\n        string symbol;\\n        uint256 LTV;\\n        uint256 minBorrowDuration;\\n        uint256 maxBorrowDuration;\\n        uint256 extendableDuration;\\n        uint256 overdueDuration;\\n    }\\n}\\n\",\"keccak256\":\"0x487cd1dedb3146da46144bc8f0e5b970c5173efa8c19700184b8207c1ee3fc55\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051620014be380380620014be833981016040819052610031916100ca565b61003a33610062565b6001600160a01b03918216608052600280546001600160a01b03191691909216179055610104565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146100c757600080fd5b50565b600080604083850312156100dd57600080fd5b82516100e8816100b2565b60208401519092506100f9816100b2565b809150509250929050565b6080516113976200012760003960008181610237015261056e01526113976000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806398f5ec8911610097578063c1c060eb11610066578063c1c060eb1461026c578063e57d6fb71461027f578063ef1d95b114610292578063f2fde38b146102bb57600080fd5b806398f5ec891461020c5780639f8d01cf1461021f578063ade97ab514610232578063be0aa10a1461025957600080fd5b8063715018a6116100d3578063715018a61461016657806371da42321461016e5780638da5cb5b146101b45780638e1db39d146101d957600080fd5b806325423a1b146101055780632ef9bb561461011a5780635070e8371461014057806350d16d9f14610153575b600080fd5b610118610113366004610f52565b6102ce565b005b61012d610128366004610f82565b61033f565b6040519081526020015b60405180910390f35b61011861014e366004610fac565b6104f9565b61012d610161366004610fc7565b610545565b61011861069b565b61018161017c366004610f82565b6106d1565b60405161013791908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610137565b6101ec6101e7366004610f82565b61076f565b604080519485526020850193909352918301526060820152608001610137565b61012d61021a366004610fac565b6107b5565b61012d61022d366004610f82565b61082c565b6101c17f000000000000000000000000000000000000000000000000000000000000000081565b610118610267366004610f52565b610af5565b61011861027a3660046110d2565b610b56565b61011861028d36600461119b565b610c21565b61012d6102a0366004610fac565b6001600160a01b031660009081526001602052604090205490565b6101186102c9366004610fac565b610e3f565b6000546001600160a01b031633146103015760405162461bcd60e51b81526004016102f8906111ce565b60405180910390fd5b600481905560405181815233907fabf6e8b581c7c5a11408b7883dda70fe166c01b7de024145c52b9ce65e65c297906020015b60405180910390a250565b6001600160a01b038216600090815260016020526040812054806103675760009150506104f3565b6000610374600183611219565b6001600160a01b038616600090815260016020526040812080549293509091839081106103a3576103a3611230565b9060005260206000209060040201604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905084600014806103f55750826001145b15610408576020015192506104f3915050565b6000858311610418576000610422565b6104228684611219565b6001600160a01b0388166000908152600160205260408120805492935090918390811061045157610451611230565b906000526020600020906004020160405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090508060400151426104a49190611219565b816060015184606001518560400151426104be9190611219565b86602001516104cd9190611246565b6104d79190611265565b6104e19190611219565b6104eb919061127d565b955050505050505b92915050565b6000546001600160a01b031633146105235760405162461bcd60e51b81526004016102f8906111ce565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6040516346296c6960e01b8152600481018490526001600160a01b0383811660248301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906346296c6990604401602060405180830381865afa1580156105b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105db919061129f565b6105e757506000610694565b6002546001600160a01b03166106075761060083610eda565b9050610694565b60025460405163b3596f0760e01b81526001600160a01b038581166004830152600092169063b3596f0790602401602060405180830381865afa158015610652573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067691906112c1565b90506000811161068e5761068984610eda565b610690565b805b9150505b9392505050565b6000546001600160a01b031633146106c55760405162461bcd60e51b81526004016102f8906111ce565b6106cf6000610f02565b565b6106fc6040518060800160405280600081526020016000815260200160008152602001600081525090565b6001600160a01b038316600090815260016020526040902080548390811061072657610726611230565b9060005260206000209060040201604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905092915050565b6001602052816000526040600020818154811061078b57600080fd5b60009182526020909120600490910201805460018201546002830154600390930154919450925084565b6001600160a01b038116600090815260016020526040812054806107dc5750600092915050565b6001600160a01b0383166000908152600160208190526040909120906108029083611219565b8154811061081257610812611230565b906000526020600020906004020160000154915050919050565b6001600160a01b038216600090815260016020526040812054806108545760009150506104f3565b6001600160a01b03841660009081526001602081905260408220906108799084611219565b8154811061088957610889611230565b600091825260208083206040805160808101825260049094029091018054845260018101549284019290925260028201549083015260030154606082015291506108d38542611219565b9050808260400151116108ee57506020015191506104f39050565b6001600160a01b03861660009081526001602052604081208054829061091657610916611230565b90600052602060002090600402016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050818160400151106109c45760408101516109739042611219565b816060015184606001516109879190611219565b60408501516109969042611219565b85602001516109a59190611246565b6109af9190611265565b6109b9919061127d565b9450505050506104f3565b60006109d1600186611219565b6001600160a01b03891660009081526001602052604081208054929350909183908110610a0057610a00611230565b906000526020600020906004020190505b600082118015610a245750838160020154115b15610a72576001600160a01b0389166000908152600160205260409020610a4a836112da565b92508281548110610a5d57610a5d611230565b90600052602060002090600402019050610a11565b600081600301548660600151610a889190611219565b6040870151610a979042611219565b8760200151610aa69190611246565b610ab09190611265565b9050816002015485610ac29190611219565b8260010154610ad19190611246565b610adb9082611219565b9050610ae7898261127d565b9a9950505050505050505050565b6000546001600160a01b03163314610b1f5760405162461bcd60e51b81526004016102f8906111ce565b600381905560405181815233907f42d5fb6bd1c891b48042adc0b0ccf42f2234cf96b305fc788634ab7e049a057390602001610334565b6000546001600160a01b03163314610b805760405162461bcd60e51b81526004016102f8906111ce565b8151835114604051806040016040528060038152602001621b181960e91b81525090610bbf5760405162461bcd60e51b81526004016102f891906112f1565b5060005b8351811015610c1b57610c09848281518110610be157610be1611230565b6020026020010151848381518110610bfb57610bfb611230565b602002602001015184610c21565b80610c1381611346565b915050610bc3565b50505050565b6000546001600160a01b03163314610c4b5760405162461bcd60e51b81526004016102f8906111ce565b6001600160a01b03831660009081526001602052604081208054909190610c965760405180608001604052806000815260200160008152602001600081526020016000815250610cf8565b81548290610ca690600190611219565b81548110610cb657610cb6611230565b90600052602060002090600402016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250505b9050806040015183116040518060400160405280600381526020016236303160e81b81525090610d3b5760405162461bcd60e51b81526004016102f891906112f1565b50600080826040015111610d50576000610d7d565b60208201516040830151610d649086611219565b610d6e9190611246565b8260600151610d7d9190611265565b8251909150600090610d90906001611265565b6040805160808101825282815260208082018a81528284018a815260608085018981528b5460018082018e5560008e8152879020885160049093020191825594519481019490945591516002840155905160039092019190915583518b81529182018a9052928101849052929350916001600160a01b038a16917f4d6cdc4bf30d671bff4fa58d357739401159d387074fda59c92b40a7872fd9ed910160405180910390a25050505050505050565b6000546001600160a01b03163314610e695760405162461bcd60e51b81526004016102f8906111ce565b6001600160a01b038116610ece5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f8565b610ed781610f02565b50565b60045460009015610ef1576104f38260045461082c565b6104f38260035461033f565b919050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610f6457600080fd5b5035919050565b80356001600160a01b0381168114610efd57600080fd5b60008060408385031215610f9557600080fd5b610f9e83610f6b565b946020939093013593505050565b600060208284031215610fbe57600080fd5b61069482610f6b565b600080600060608486031215610fdc57600080fd5b83359250610fec60208501610f6b565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561103b5761103b610ffc565b604052919050565b600067ffffffffffffffff82111561105d5761105d610ffc565b5060051b60200190565b600082601f83011261107857600080fd5b8135602061108d61108883611043565b611012565b82815260059290921b840181019181810190868411156110ac57600080fd5b8286015b848110156110c757803583529183019183016110b0565b509695505050505050565b6000806000606084860312156110e757600080fd5b833567ffffffffffffffff808211156110ff57600080fd5b818601915086601f83011261111357600080fd5b8135602061112361108883611043565b82815260059290921b8401810191818101908a84111561114257600080fd5b948201945b838610156111675761115886610f6b565b82529482019490820190611147565b9750508701359250508082111561117d57600080fd5b5061118a86828701611067565b925050604084013590509250925092565b6000806000606084860312156111b057600080fd5b6111b984610f6b565b95602085013595506040909401359392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008282101561122b5761122b611203565b500390565b634e487b7160e01b600052603260045260246000fd5b600081600019048311821515161561126057611260611203565b500290565b6000821982111561127857611278611203565b500190565b60008261129a57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156112b157600080fd5b8151801515811461069457600080fd5b6000602082840312156112d357600080fd5b5051919050565b6000816112e9576112e9611203565b506000190190565b600060208083528351808285015260005b8181101561131e57858101830151858201604001528201611302565b81811115611330576000604083870101525b50601f01601f1916929092016040019392505050565b600060001982141561135a5761135a611203565b506001019056fea264697066735822122057b1c36ba36b183f9a8fe380dbd299f1d822f2ca1b7cf402d104cc520a69509064736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c806398f5ec8911610097578063c1c060eb11610066578063c1c060eb1461026c578063e57d6fb71461027f578063ef1d95b114610292578063f2fde38b146102bb57600080fd5b806398f5ec891461020c5780639f8d01cf1461021f578063ade97ab514610232578063be0aa10a1461025957600080fd5b8063715018a6116100d3578063715018a61461016657806371da42321461016e5780638da5cb5b146101b45780638e1db39d146101d957600080fd5b806325423a1b146101055780632ef9bb561461011a5780635070e8371461014057806350d16d9f14610153575b600080fd5b610118610113366004610f52565b6102ce565b005b61012d610128366004610f82565b61033f565b6040519081526020015b60405180910390f35b61011861014e366004610fac565b6104f9565b61012d610161366004610fc7565b610545565b61011861069b565b61018161017c366004610f82565b6106d1565b60405161013791908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610137565b6101ec6101e7366004610f82565b61076f565b604080519485526020850193909352918301526060820152608001610137565b61012d61021a366004610fac565b6107b5565b61012d61022d366004610f82565b61082c565b6101c17f000000000000000000000000000000000000000000000000000000000000000081565b610118610267366004610f52565b610af5565b61011861027a3660046110d2565b610b56565b61011861028d36600461119b565b610c21565b61012d6102a0366004610fac565b6001600160a01b031660009081526001602052604090205490565b6101186102c9366004610fac565b610e3f565b6000546001600160a01b031633146103015760405162461bcd60e51b81526004016102f8906111ce565b60405180910390fd5b600481905560405181815233907fabf6e8b581c7c5a11408b7883dda70fe166c01b7de024145c52b9ce65e65c297906020015b60405180910390a250565b6001600160a01b038216600090815260016020526040812054806103675760009150506104f3565b6000610374600183611219565b6001600160a01b038616600090815260016020526040812080549293509091839081106103a3576103a3611230565b9060005260206000209060040201604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905084600014806103f55750826001145b15610408576020015192506104f3915050565b6000858311610418576000610422565b6104228684611219565b6001600160a01b0388166000908152600160205260408120805492935090918390811061045157610451611230565b906000526020600020906004020160405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090508060400151426104a49190611219565b816060015184606001518560400151426104be9190611219565b86602001516104cd9190611246565b6104d79190611265565b6104e19190611219565b6104eb919061127d565b955050505050505b92915050565b6000546001600160a01b031633146105235760405162461bcd60e51b81526004016102f8906111ce565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6040516346296c6960e01b8152600481018490526001600160a01b0383811660248301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906346296c6990604401602060405180830381865afa1580156105b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105db919061129f565b6105e757506000610694565b6002546001600160a01b03166106075761060083610eda565b9050610694565b60025460405163b3596f0760e01b81526001600160a01b038581166004830152600092169063b3596f0790602401602060405180830381865afa158015610652573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067691906112c1565b90506000811161068e5761068984610eda565b610690565b805b9150505b9392505050565b6000546001600160a01b031633146106c55760405162461bcd60e51b81526004016102f8906111ce565b6106cf6000610f02565b565b6106fc6040518060800160405280600081526020016000815260200160008152602001600081525090565b6001600160a01b038316600090815260016020526040902080548390811061072657610726611230565b9060005260206000209060040201604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905092915050565b6001602052816000526040600020818154811061078b57600080fd5b60009182526020909120600490910201805460018201546002830154600390930154919450925084565b6001600160a01b038116600090815260016020526040812054806107dc5750600092915050565b6001600160a01b0383166000908152600160208190526040909120906108029083611219565b8154811061081257610812611230565b906000526020600020906004020160000154915050919050565b6001600160a01b038216600090815260016020526040812054806108545760009150506104f3565b6001600160a01b03841660009081526001602081905260408220906108799084611219565b8154811061088957610889611230565b600091825260208083206040805160808101825260049094029091018054845260018101549284019290925260028201549083015260030154606082015291506108d38542611219565b9050808260400151116108ee57506020015191506104f39050565b6001600160a01b03861660009081526001602052604081208054829061091657610916611230565b90600052602060002090600402016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050818160400151106109c45760408101516109739042611219565b816060015184606001516109879190611219565b60408501516109969042611219565b85602001516109a59190611246565b6109af9190611265565b6109b9919061127d565b9450505050506104f3565b60006109d1600186611219565b6001600160a01b03891660009081526001602052604081208054929350909183908110610a0057610a00611230565b906000526020600020906004020190505b600082118015610a245750838160020154115b15610a72576001600160a01b0389166000908152600160205260409020610a4a836112da565b92508281548110610a5d57610a5d611230565b90600052602060002090600402019050610a11565b600081600301548660600151610a889190611219565b6040870151610a979042611219565b8760200151610aa69190611246565b610ab09190611265565b9050816002015485610ac29190611219565b8260010154610ad19190611246565b610adb9082611219565b9050610ae7898261127d565b9a9950505050505050505050565b6000546001600160a01b03163314610b1f5760405162461bcd60e51b81526004016102f8906111ce565b600381905560405181815233907f42d5fb6bd1c891b48042adc0b0ccf42f2234cf96b305fc788634ab7e049a057390602001610334565b6000546001600160a01b03163314610b805760405162461bcd60e51b81526004016102f8906111ce565b8151835114604051806040016040528060038152602001621b181960e91b81525090610bbf5760405162461bcd60e51b81526004016102f891906112f1565b5060005b8351811015610c1b57610c09848281518110610be157610be1611230565b6020026020010151848381518110610bfb57610bfb611230565b602002602001015184610c21565b80610c1381611346565b915050610bc3565b50505050565b6000546001600160a01b03163314610c4b5760405162461bcd60e51b81526004016102f8906111ce565b6001600160a01b03831660009081526001602052604081208054909190610c965760405180608001604052806000815260200160008152602001600081526020016000815250610cf8565b81548290610ca690600190611219565b81548110610cb657610cb6611230565b90600052602060002090600402016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250505b9050806040015183116040518060400160405280600381526020016236303160e81b81525090610d3b5760405162461bcd60e51b81526004016102f891906112f1565b50600080826040015111610d50576000610d7d565b60208201516040830151610d649086611219565b610d6e9190611246565b8260600151610d7d9190611265565b8251909150600090610d90906001611265565b6040805160808101825282815260208082018a81528284018a815260608085018981528b5460018082018e5560008e8152879020885160049093020191825594519481019490945591516002840155905160039092019190915583518b81529182018a9052928101849052929350916001600160a01b038a16917f4d6cdc4bf30d671bff4fa58d357739401159d387074fda59c92b40a7872fd9ed910160405180910390a25050505050505050565b6000546001600160a01b03163314610e695760405162461bcd60e51b81526004016102f8906111ce565b6001600160a01b038116610ece5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f8565b610ed781610f02565b50565b60045460009015610ef1576104f38260045461082c565b6104f38260035461033f565b919050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610f6457600080fd5b5035919050565b80356001600160a01b0381168114610efd57600080fd5b60008060408385031215610f9557600080fd5b610f9e83610f6b565b946020939093013593505050565b600060208284031215610fbe57600080fd5b61069482610f6b565b600080600060608486031215610fdc57600080fd5b83359250610fec60208501610f6b565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561103b5761103b610ffc565b604052919050565b600067ffffffffffffffff82111561105d5761105d610ffc565b5060051b60200190565b600082601f83011261107857600080fd5b8135602061108d61108883611043565b611012565b82815260059290921b840181019181810190868411156110ac57600080fd5b8286015b848110156110c757803583529183019183016110b0565b509695505050505050565b6000806000606084860312156110e757600080fd5b833567ffffffffffffffff808211156110ff57600080fd5b818601915086601f83011261111357600080fd5b8135602061112361108883611043565b82815260059290921b8401810191818101908a84111561114257600080fd5b948201945b838610156111675761115886610f6b565b82529482019490820190611147565b9750508701359250508082111561117d57600080fd5b5061118a86828701611067565b925050604084013590509250925092565b6000806000606084860312156111b057600080fd5b6111b984610f6b565b95602085013595506040909401359392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008282101561122b5761122b611203565b500390565b634e487b7160e01b600052603260045260246000fd5b600081600019048311821515161561126057611260611203565b500290565b6000821982111561127857611278611203565b500190565b60008261129a57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156112b157600080fd5b8151801515811461069457600080fd5b6000602082840312156112d357600080fd5b5051919050565b6000816112e9576112e9611203565b506000190190565b600060208083528351808285015260005b8181101561131e57858101830151858201604001528201611302565b81811115611330576000604083870101525b50601f01601f1916929092016040019392505050565b600060001982141561135a5761135a611203565b506001019056fea264697066735822122057b1c36ba36b183f9a8fe380dbd299f1d822f2ca1b7cf402d104cc520a69509064736f6c634300080a0033",
  "devdoc": {
    "author": "OpenSky Labs",
    "details": "Implements logics of the collateral price oracle for the OpenSky protocol*",
    "kind": "dev",
    "methods": {
      "getLatestRoundId(address)": {
        "params": {
          "nftAddress": "The address of the NFT"
        },
        "returns": {
          "_0": "The latest round id*"
        }
      },
      "getPrice(uint256,address,uint256)": {
        "params": {
          "nftAddress": "The address of the NFT",
          "reserveId": "The id of the reserve",
          "tokenId": "The id of the NFT"
        },
        "returns": {
          "_0": "The price of the NFT*"
        }
      },
      "getPriceData(address,uint256)": {
        "params": {
          "index": "The index of the feed",
          "nftAddress": "The address of the NFT"
        },
        "returns": {
          "_0": "The data of the price feed*"
        }
      },
      "getPriceFeedLength(address)": {
        "params": {
          "nftAddress": "The address of the NFT"
        },
        "returns": {
          "length": "The count of price feeds*"
        }
      },
      "getTwapPriceByRoundInterval(address,uint256)": {
        "params": {
          "nftAddress": "The address of the NFT",
          "roundInterval": "The round interval"
        },
        "returns": {
          "_0": "The price of the NFT*"
        }
      },
      "getTwapPriceByTimeInterval(address,uint256)": {
        "params": {
          "nftAddress": "The address of the NFT",
          "timeInterval": "The time interval"
        },
        "returns": {
          "_0": "The price of the NFT*"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setRoundInterval(uint256)": {
        "params": {
          "roundInterval": "The round interval will be set*"
        }
      },
      "setTimeInterval(uint256)": {
        "params": {
          "timeInterval": "The time interval will be set*"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updatePrice(address,uint256,uint256)": {
        "params": {
          "nftAddress": "The address of the NFT",
          "price": "The price of the NFT",
          "timestamp": "The timestamp when the price happened*"
        }
      },
      "updatePrices(address[],uint256[],uint256)": {
        "params": {
          "nftAddresses": "Addresses of NFT collections",
          "prices": "Floor prices of NFT collections",
          "timestamp": "The timestamp when prices happened*"
        }
      }
    },
    "title": "OpenSkyCollateralPriceOracle contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getLatestRoundId(address)": {
        "notice": "Returns the latest round id of the particular NFT"
      },
      "getPrice(uint256,address,uint256)": {
        "notice": "Returns the NFT price in ETH"
      },
      "getPriceData(address,uint256)": {
        "notice": "Returns the data of the particular price feed"
      },
      "getPriceFeedLength(address)": {
        "notice": "Returns the count of price feeds about the particular NFT"
      },
      "getTwapPriceByRoundInterval(address,uint256)": {
        "notice": "Returns the TWAP price of NFT during the particular round interval"
      },
      "getTwapPriceByTimeInterval(address,uint256)": {
        "notice": "Returns the TWAP price of NFT during the particular time interval"
      },
      "setRoundInterval(uint256)": {
        "notice": "Sets round interval that is used for calculating TWAP price"
      },
      "setTimeInterval(uint256)": {
        "notice": "Sets time interval that is used for calculating TWAP price"
      },
      "updatePrice(address,uint256,uint256)": {
        "notice": "Updates the floor price of the NFT collection"
      },
      "updatePrices(address[],uint256[],uint256)": {
        "notice": "Updates floor prices of NFT collections"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 387,
        "contract": "contracts/OpenSkyCollateralPriceOracle.sol:OpenSkyCollateralPriceOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7862,
        "contract": "contracts/OpenSkyCollateralPriceOracle.sol:OpenSkyCollateralPriceOracle",
        "label": "nftPriceFeedMap",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_struct(NFTPriceData)7878_storage)dyn_storage)"
      },
      {
        "astId": 7865,
        "contract": "contracts/OpenSkyCollateralPriceOracle.sol:OpenSkyCollateralPriceOracle",
        "label": "_priceAggregator",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IOpenSkyPriceAggregator)19292"
      },
      {
        "astId": 7867,
        "contract": "contracts/OpenSkyCollateralPriceOracle.sol:OpenSkyCollateralPriceOracle",
        "label": "_roundInterval",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7869,
        "contract": "contracts/OpenSkyCollateralPriceOracle.sol:OpenSkyCollateralPriceOracle",
        "label": "_timeInterval",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(NFTPriceData)7878_storage)dyn_storage": {
        "base": "t_struct(NFTPriceData)7878_storage",
        "encoding": "dynamic_array",
        "label": "struct OpenSkyCollateralPriceOracle.NFTPriceData[]",
        "numberOfBytes": "32"
      },
      "t_contract(IOpenSkyPriceAggregator)19292": {
        "encoding": "inplace",
        "label": "contract IOpenSkyPriceAggregator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(NFTPriceData)7878_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct OpenSkyCollateralPriceOracle.NFTPriceData[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(NFTPriceData)7878_storage)dyn_storage"
      },
      "t_struct(NFTPriceData)7878_storage": {
        "encoding": "inplace",
        "label": "struct OpenSkyCollateralPriceOracle.NFTPriceData",
        "members": [
          {
            "astId": 7871,
            "contract": "contracts/OpenSkyCollateralPriceOracle.sol:OpenSkyCollateralPriceOracle",
            "label": "roundId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7873,
            "contract": "contracts/OpenSkyCollateralPriceOracle.sol:OpenSkyCollateralPriceOracle",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7875,
            "contract": "contracts/OpenSkyCollateralPriceOracle.sol:OpenSkyCollateralPriceOracle",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7877,
            "contract": "contracts/OpenSkyCollateralPriceOracle.sol:OpenSkyCollateralPriceOracle",
            "label": "cumulativePrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}