{
  "address": "0xBcE48c15D47D93A3bbb6a5fd1847DF1Cb61369dC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "SETTINGS_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "PUNK_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "WPUNK_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "WETH_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "BorrowETH",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Received",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "RepayETH",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PUNK",
      "outputs": [
        {
          "internalType": "contract ICryptoPunk",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SETTINGS",
      "outputs": [
        {
          "internalType": "contract IOpenSkySettings",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WPUNK",
      "outputs": [
        {
          "internalType": "contract IWrappedPunk",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WPUNK_PROXY_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        }
      ],
      "name": "borrowETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "repayETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xac6f33db24d9e5b484dfd4cfff4852ff6bb44c52d42530b39ba2cc21aa7773cd",
  "receipt": {
    "to": null,
    "from": "0x218513C58A4781a5B88De6230caA29aBCe2Ccd75",
    "contractAddress": "0xBcE48c15D47D93A3bbb6a5fd1847DF1Cb61369dC",
    "transactionIndex": 47,
    "gasUsed": "2135983",
    "logsBloom": "0x
    "blockHash": "0x61a3676edb77688f2dadd396c03b1ee2ec71780ba78ac33432ab45b407a55a87",
    "transactionHash": "0xac6f33db24d9e5b484dfd4cfff4852ff6bb44c52d42530b39ba2cc21aa7773cd",
    "logs": [
      {
        "transactionIndex": 47,
        "blockNumber": 29179441,
        "transactionHash": "0xac6f33db24d9e5b484dfd4cfff4852ff6bb44c52d42530b39ba2cc21aa7773cd",
        "address": "0x8733DA97F42c13885Bcd88129492D7900728a3dA",
        "topics": [
          "0x3623f8bd4da9524cfaa08c81b8194f759ca625e8d761f4cc2cea23e63d3f4b12"
        ],
        "data": "0x000000000000000000000000bce48c15d47d93a3bbb6a5fd1847df1cb61369dc000000000000000000000000ccaaa8e46d009059ccd8bc1c6bdbc805ec92f448",
        "logIndex": 227,
        "blockHash": "0x61a3676edb77688f2dadd396c03b1ee2ec71780ba78ac33432ab45b407a55a87"
      },
      {
        "transactionIndex": 47,
        "blockNumber": 29179441,
        "transactionHash": "0xac6f33db24d9e5b484dfd4cfff4852ff6bb44c52d42530b39ba2cc21aa7773cd",
        "address": "0x8733DA97F42c13885Bcd88129492D7900728a3dA",
        "topics": [
          "0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
          "0x000000000000000000000000bce48c15d47d93a3bbb6a5fd1847df1cb61369dc",
          "0x000000000000000000000000f3bc6651efb2eda164282804939d4ca16311ca87"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 228,
        "blockHash": "0x61a3676edb77688f2dadd396c03b1ee2ec71780ba78ac33432ab45b407a55a87"
      },
      {
        "transactionIndex": 47,
        "blockNumber": 29179441,
        "transactionHash": "0xac6f33db24d9e5b484dfd4cfff4852ff6bb44c52d42530b39ba2cc21aa7773cd",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000218513c58a4781a5b88de6230caa29abce2ccd75",
          "0x000000000000000000000000c6869257205e20c2a43cb31345db534aecb49f6e"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000101a17bf760213f0000000000000000000000000000000000000000000000002502f5deadddcec0000000000000000000000000000000000000000000001952e96f03fa5e80bcdc00000000000000000000000000000000000000000000000024015462b67dad81000000000000000000000000000000000000000000001952ea70a57655e0de1b",
        "logIndex": 229,
        "blockHash": "0x61a3676edb77688f2dadd396c03b1ee2ec71780ba78ac33432ab45b407a55a87"
      }
    ],
    "blockNumber": 29179441,
    "cumulativeGasUsed": "8144319",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x57528D98c3a8762c78f4D02a89CBc0Eaf77FD322",
    "0xe88409A6A31576c42dCb06659E1Fa3D718Bc0815",
    "0x8733DA97F42c13885Bcd88129492D7900728a3dA",
    "0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270"
  ],
  "solcInputHash": "903b6e0b7a82abf3fd1d087256b904a8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"SETTINGS_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"PUNK_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"WPUNK_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"WETH_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"BorrowETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"RepayETH\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PUNK\",\"outputs\":[{\"internalType\":\"contract ICryptoPunk\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SETTINGS\",\"outputs\":[{\"internalType\":\"contract IOpenSkySettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WPUNK\",\"outputs\":[{\"internalType\":\"contract IWrappedPunk\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WPUNK_PROXY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"borrowETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"repayETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"repay(uint256)\":{\"notice\":\"Only loan NFT owner can repay\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/misc/OpenSkyPunkGateway.sol\":\"OpenSkyPunkGateway\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x8756c97d6004b1ae21517a013bdec72fbf30be7852afb2f395871d280131b250\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/dependencies/cryptopunk/ICryptoPunk.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\ninterface ICryptoPunk {\\n    function balanceOf(address account) external view returns (uint256);\\n    function punkIndexToAddress(uint256 punkIndex) external returns (address);\\n    function punksOfferedForSale(uint256 punkIndex) external returns (bool, uint256, address, uint256, address);\\n    function buyPunk(uint punkIndex) external payable;\\n    function transferPunk(address to, uint punkIndex) external;\\n}\\n\",\"keccak256\":\"0x40c8f3a51b314d88b249a4f8e8197d923fd246c2a5f0f8d087190e4c869d4cca\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/cryptopunk/IWrappedPunk.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IWrappedPunk is IERC721 {\\n    function punkContract() external view returns (address);\\n    function mint(uint256 punkIndex) external;\\n    function burn(uint256 punkIndex) external;\\n    function registerProxy() external;\\n    function proxyInfo(address user) external returns (address proxy);\\n}\\n\",\"keccak256\":\"0xf5eefde577fbfcb124be8a3505d97f75128147550d1f1a143b42fce06f0138c0\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/weth/IWETH.sol\":{\"content\":\"pragma solidity 0.8.10;\\n\\ninterface IWETH {\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x58e84c715a8587d2685d905f79018c85ff42b628f5a8ca4c115342dea17053ab\"},\"contracts/interfaces/IOpenSkyLoan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '../libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IOpenSkyLoan\\n * @author OpenSky Labs\\n * @notice Defines the basic interface for OpenSkyLoan.  This loan NFT is composable and can be used in other DeFi protocols \\n **/\\ninterface IOpenSkyLoan is IERC721 {\\n\\n    /**\\n     * @dev Emitted on mint()\\n     * @param tokenId The ID of the loan\\n     * @param recipient The address that will receive the loan NFT\\n     **/\\n    event Mint(uint256 indexed tokenId, address indexed recipient);\\n\\n    /**\\n     * @dev Emitted on end()\\n     * @param tokenId The ID of the loan\\n     * @param onBehalfOf The address the repayer is repaying for\\n     * @param repayer The address of the user initiating the repayment()\\n     **/\\n    event End(uint256 indexed tokenId, address indexed onBehalfOf, address indexed repayer);\\n\\n    /**\\n     * @dev Emitted on startLiquidation()\\n     * @param tokenId The ID of the loan\\n     * @param liquidator The address of the liquidator\\n     **/\\n    event StartLiquidation(uint256 indexed tokenId, address indexed liquidator);\\n\\n    /**\\n     * @dev Emitted on endLiquidation()\\n     * @param tokenId The ID of the loan\\n     * @param liquidator The address of the liquidator\\n     **/\\n    event EndLiquidation(uint256 indexed tokenId, address indexed liquidator);\\n\\n    /**\\n     * @dev Emitted on updateStatus()\\n     * @param tokenId The ID of the loan\\n     * @param status The status of loan\\n     **/\\n    event UpdateStatus(uint256 indexed tokenId, DataTypes.LoanStatus indexed status);\\n\\n    /**\\n     * @dev Emitted on flashClaim()\\n     * @param receiver The address of the flash loan receiver contract\\n     * @param sender The address that will receive tokens\\n     * @param nftAddress The address of the collateralized NFT\\n     * @param tokenId The ID of collateralized NFT\\n     **/\\n    event FlashClaim(address indexed receiver, address sender, address indexed nftAddress, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted on claimERC20Airdrop()\\n     * @param token The address of the ERC20 token\\n     * @param to The address that will receive the ERC20 tokens\\n     * @param amount The amount of the tokens\\n     **/\\n    event ClaimERC20Airdrop(address indexed token, address indexed to, uint256 amount);\\n\\n    /**\\n     * @dev Emitted on claimERC721Airdrop()\\n     * @param token The address of ERC721 token\\n     * @param to The address that will receive the eRC721 tokens\\n     * @param ids The ID of the token\\n     **/\\n    event ClaimERC721Airdrop(address indexed token, address indexed to, uint256[] ids);\\n\\n    /**\\n     * @dev Emitted on claimERC1155Airdrop()\\n     * @param token The address of the ERC1155 token\\n     * @param to The address that will receive the ERC1155 tokens\\n     * @param ids The ID of the token\\n     * @param amounts The amount of the tokens\\n     * @param data packed params to pass to the receiver as extra information\\n     **/\\n    event ClaimERC1155Airdrop(address indexed token, address indexed to, uint256[] ids, uint256[] amounts, bytes data);\\n\\n    /**\\n     * @notice Mints a loan NFT to user\\n     * @param reserveId The ID of the reserve\\n     * @param borrower The address of the borrower\\n     * @param nftAddress The contract address of the collateralized NFT \\n     * @param nftTokenId The ID of the collateralized NFT\\n     * @param amount The amount of the loan\\n     * @param duration The duration of the loan\\n     * @param borrowRate The borrow rate of the loan\\n     * @return loanId and loan data\\n     **/\\n    function mint(\\n        uint256 reserveId,\\n        address borrower,\\n        address nftAddress,\\n        uint256 nftTokenId,\\n        uint256 amount,\\n        uint256 duration,\\n        uint256 borrowRate\\n    ) external returns (uint256 loanId, DataTypes.LoanData memory loan);\\n\\n    /**\\n     * @notice Starts liquidation of the loan in default\\n     * @param tokenId The ID of the defaulted loan\\n     **/\\n    function startLiquidation(uint256 tokenId) external;\\n\\n    /**\\n     * @notice Ends liquidation of a loan that is fully settled\\n     * @param tokenId The ID of the loan\\n     **/\\n    function endLiquidation(uint256 tokenId) external;\\n\\n    /**\\n     * @notice Terminates the loan\\n     * @param tokenId The ID of the loan\\n     * @param onBehalfOf The address the repayer is repaying for\\n     * @param repayer The address of the repayer\\n     **/\\n    function end(uint256 tokenId, address onBehalfOf, address repayer) external;\\n    \\n    /**\\n     * @notice Returns the loan data\\n     * @param tokenId The ID of the loan\\n     * @return The details of the loan\\n     **/\\n    function getLoanData(uint256 tokenId) external view returns (DataTypes.LoanData calldata);\\n\\n    /**\\n     * @notice Returns the status of a loan\\n     * @param tokenId The ID of the loan\\n     * @return The status of the loan\\n     **/\\n    function getStatus(uint256 tokenId) external view returns (DataTypes.LoanStatus);\\n\\n    /**\\n     * @notice Returns the borrow interest of the loan\\n     * @param tokenId The ID of the loan\\n     * @return The borrow interest of the loan\\n     **/\\n    function getBorrowInterest(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the borrow balance of a loan, including borrow interest\\n     * @param tokenId The ID of the loan\\n     * @return The borrow balance of the loan\\n     **/\\n    function getBorrowBalance(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the penalty fee of the loan\\n     * @param tokenId The ID of the loan\\n     * @return The penalty fee of the loan\\n     **/\\n    function getPenalty(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the ID of the loan\\n     * @param nftAddress The address of the collateralized NFT\\n     * @param tokenId The ID of the collateralized NFT\\n     * @return The ID of the loan\\n     **/\\n    function getLoanId(address nftAddress, uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Allows smart contracts to access the collateralized NFT within one transaction,\\n     * as long as the amount taken plus a fee is returned\\n     * @dev IMPORTANT There are security concerns for developers of flash loan receiver contracts that must be carefully considered\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashClaimReceiver interface\\n     * @param loanIds The ID of loan being flash-borrowed\\n     * @param params packed params to pass to the receiver as extra information\\n     **/\\n    function flashClaim(\\n        address receiverAddress,\\n        uint256[] calldata loanIds,\\n        bytes calldata params\\n    ) external;\\n\\n    /**\\n     * @notice Claim the ERC20 token which has been airdropped to the loan contract\\n     * @param token The address of the airdropped token\\n     * @param to The address which will receive ERC20 token\\n     * @param amount The amount of the ERC20 token\\n     **/\\n    function claimERC20Airdrop(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Claim the ERC721 token which has been airdropped to the loan contract\\n     * @param token The address of the airdropped token\\n     * @param to The address which will receive the ERC721 token\\n     * @param ids The ID of the ERC721 token\\n     **/\\n    function claimERC721Airdrop(\\n        address token,\\n        address to,\\n        uint256[] calldata ids\\n    ) external;\\n\\n    /**\\n     * @notice Claim the ERC1155 token which has been airdropped to the loan contract\\n     * @param token The address of the airdropped token\\n     * @param to The address which will receive the ERC1155 tokens\\n     * @param ids The ID of the ERC1155 token\\n     * @param amounts The amount of the ERC1155 tokens\\n     * @param data packed params to pass to the receiver as extra information\\n     **/\\n    function claimERC1155Airdrop(\\n        address token,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4d0669835c9c7fbe82344de1f78a578092a26282a146ef69b350ce52a543fb8d\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IOpenSkyPool\\n * @author OpenSky Labs\\n * @notice Defines the basic interface for an OpenSky Pool.\\n **/\\n\\ninterface IOpenSkyPool {\\n    /*\\n     * @dev Emitted on create()\\n     * @param reserveId The ID of the reserve\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param oTokenAddress The address of the oToken\\n     * @param name The name to use for oToken\\n     * @param symbol The symbol to use for oToken\\n     */\\n    event Create(uint256 indexed reserveId, address indexed underlyingAsset, address indexed oTokenAddress, string name, string symbol);\\n\\n    /*\\n     * @dev Emitted on setTreasuryFactor()\\n     * @param reserveId The ID of the reserve\\n     * @param factor The new treasury factor of the reserve\\n     */\\n    event SetTreasuryFactor(uint256 indexed reserveId, uint256 factor);\\n\\n    /*\\n     * @dev Emitted on setInterestModelAddress()\\n     * @param reserveId The ID of the reserve\\n     * @param interestModelAddress The address of the interest model contract\\n     */\\n    event SetInterestModelAddress(uint256 indexed reserveId, address interestModelAddress);\\n\\n    /*\\n     * @dev Emitted on openMoneyMarket()\\n     * @param reserveId The ID of the reserve\\n     */\\n    event OpenMoneyMarket(uint256 reserveId);\\n\\n    /*\\n     * @dev Emitted on closeMoneyMarket()\\n     * @param reserveId The ID of the reserve\\n     */\\n    event CloseMoneyMarket(uint256 reserveId);\\n\\n    /*\\n     * @dev Emitted on deposit()\\n     * @param reserveId The ID of the reserve\\n     * @param user The address that will receive the oTokens\\n     * @param amount The amount of ETH to be deposited\\n     * @param referralCode integrators are assigned a referral code and can potentially receive rewards\\n     * 0 if the action is executed directly by the user, without any intermediaries\\n     */\\n    event Deposit(uint256 indexed reserveId, address indexed user, uint256 amount, uint256 indexed referralCode);\\n\\n    /*\\n     * @dev Emitted on withdraw()\\n     * @param reserveId The ID of the reserve\\n     * @param user The address initiating the withdrawal(), owner of oTokens\\n     * @param amount The amount to be withdrawn\\n     */\\n    event Withdraw(uint256 indexed reserveId, address indexed user, uint256 amount);\\n\\n    /*\\n     * @dev Emitted on borrow()\\n     * @param reserveId The ID of the reserve\\n     * @param user The address initiating the withdrawal(), owner of oTokens\\n     * @param onBehalfOf The address that will receive the ETH and the loan NFT\\n     * @param loanId The loan ID\\n     */\\n    event Borrow(\\n        uint256 indexed reserveId,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 indexed loanId\\n    );\\n\\n    /*\\n     * @dev Emitted on repay()\\n     * @param reserveId The ID of the reserve\\n     * @param repayer The address initiating the repayment()\\n     * @param onBehalfOf The address that will receive the pledged NFT\\n     * @param loanId The ID of the loan\\n     * @param repayAmount The borrow balance of the loan when it was repaid\\n     * @param penalty The penalty of the loan for either early or overdue repayment\\n     */\\n    event Repay(\\n        uint256 indexed reserveId,\\n        address repayer,\\n        address indexed onBehalfOf,\\n        uint256 indexed loanId,\\n        uint256 repayAmount,\\n        uint256 penalty\\n    );\\n\\n    /*\\n     * @dev Emitted on extend()\\n     * @param reserveId The ID of the reserve\\n     * @param user  The address initiating the extend()\\n     * @param oldLoanId The ID of the old loan\\n     * @param newLoanId The ID of the new loan\\n     */\\n    event Extend(uint256 indexed reserveId, address indexed user, uint256 indexed oldLoanId, uint256 newLoanId);\\n\\n    /*\\n     * @dev Emitted on startLiquidation()\\n     * @param reserveId The ID of the reserve\\n     * @param loanId The ID of the loan\\n     * @param nftAddress The address of the NFT used as collateral\\n     * @param tokenId The ID of the NFT used as collateral\\n     * @param operator The address initiating startLiquidation()\\n     */\\n    event StartLiquidation(\\n        uint256 indexed reserveId,\\n        uint256 indexed loanId,\\n        address indexed nftAddress,\\n        uint256 tokenId,\\n        address operator\\n    );\\n\\n    /*\\n     * @dev Emitted on endLiquidation()\\n     * @param reserveId The ID of the reserve\\n     * @param loanId The ID of the loan\\n     * @param nftAddress The address of the NFT used as collateral\\n     * @param tokenId The ID of the NFT used as collateral\\n     * @param operator\\n     * @param repayAmount The amount used to repay, must be equal to or greater than the borrowBalance, excess part will be shared by all the lenders\\n     * @param borrowBalance The borrow balance of the loan\\n     */\\n    event EndLiquidation(\\n        uint256 indexed reserveId,\\n        uint256 indexed loanId,\\n        address indexed nftAddress,\\n        uint256 tokenId,\\n        address operator,\\n        uint256 repayAmount,\\n        uint256 borrowBalance\\n    );\\n\\n    /**\\n     * @notice Creates a reserve\\n     * @dev Only callable by the pool admin role\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param name The name of the oToken\\n     * @param symbol The symbol for the oToken\\n     **/\\n    function create(address underlyingAsset, string memory name, string memory symbol) external;\\n\\n    /**\\n     * @notice Updates the treasury factor of a reserve\\n     * @dev Only callable by the pool admin role\\n     * @param reserveId The ID of the reserve\\n     * @param factor The new treasury factor of the reserve\\n     **/\\n    function setTreasuryFactor(uint256 reserveId, uint256 factor) external;\\n\\n    /**\\n     * @notice Updates the interest model address of a reserve\\n     * @dev Only callable by the pool admin role\\n     * @param reserveId The ID of the reserve\\n     * @param interestModelAddress The new address of the interest model contract\\n     **/\\n    function setInterestModelAddress(uint256 reserveId, address interestModelAddress) external;\\n\\n    /**\\n     * @notice Open the money market\\n     * @dev Only callable by the emergency admin role\\n     * @param reserveId The ID of the reserve\\n     **/\\n    function openMoneyMarket(uint256 reserveId) external;\\n\\n    /**\\n     * @notice Close the money market\\n     * @dev Only callable by the emergency admin role\\n     * @param reserveId The ID of the reserve\\n     **/\\n    function closeMoneyMarket(uint256 reserveId) external;\\n\\n    /**\\n     * @dev Deposits ETH into the reserve.\\n     * @param reserveId The ID of the reserve\\n     * @param referralCode integrators are assigned a referral code and can potentially receive rewards\\n     **/\\n    function deposit(uint256 reserveId, uint256 amount, address onBehalfOf, uint256 referralCode) external;\\n\\n    /**\\n     * @dev withdraws the ETH from reserve.\\n     * @param reserveId The ID of the reserve\\n     * @param amount amount of oETH to withdraw and receive native ETH\\n     **/\\n    function withdraw(uint256 reserveId, uint256 amount, address onBehalfOf) external;\\n\\n    /**\\n     * @dev Borrows ETH from reserve using an NFT as collateral and will receive a loan NFT as receipt.\\n     * @param reserveId The ID of the reserve\\n     * @param amount amount of ETH user will borrow\\n     * @param duration The desired duration of the loan\\n     * @param nftAddress The collateral NFT address\\n     * @param tokenId The ID of the NFT\\n     * @param onBehalfOf address of the user who will receive ETH and loan NFT.\\n     **/\\n    function borrow(\\n        uint256 reserveId,\\n        uint256 amount,\\n        uint256 duration,\\n        address nftAddress,\\n        uint256 tokenId,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Repays a loan, as a result the corresponding loan NFT owner will receive the collateralized NFT.\\n     * @param loanId The ID of the loan the user will repay\\n     */\\n    function repay(uint256 loanId) external returns (uint256);\\n\\n    /**\\n     * @dev Extends creates a new loan and terminates the old loan.\\n     * @param loanId The loan ID to extend\\n     * @param amount The amount of ERC20 token the user will borrow in the new loan\\n     * @param duration The selected duration the user will borrow in the new loan\\n     * @param onBehalfOf The address will borrow in the new loan\\n     **/\\n    function extend(\\n        uint256 loanId,\\n        uint256 amount,\\n        uint256 duration,\\n        address onBehalfOf\\n    ) external returns (uint256, uint256);\\n\\n    /**\\n     * @dev Starts liquidation for a loan when it's in LIQUIDATABLE status\\n     * @param loanId The ID of the loan which will be liquidated\\n     */\\n    function startLiquidation(uint256 loanId) external;\\n\\n    /**\\n     * @dev Completes liquidation for a loan which will be repaid.\\n     * @param loanId The ID of the liquidated loan that will be repaid.\\n     * @param amount The amount of the token that will be repaid.\\n     */\\n    function endLiquidation(uint256 loanId, uint256 amount) external;\\n\\n    /**\\n     * @dev Returns the state of the reserve\\n     * @param reserveId The ID of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getReserveData(uint256 reserveId) external view returns (DataTypes.ReserveData memory);\\n\\n    /**\\n     * @dev Returns the normalized income of the reserve\\n     * @param reserveId The ID of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(uint256 reserveId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the remaining liquidity of the reserve\\n     * @param reserveId The ID of the reserve\\n     * @return The reserve's withdrawable balance\\n     */\\n    function getAvailableLiquidity(uint256 reserveId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the instantaneous borrow limit value of a special NFT\\n     * @param nftAddress The address of the NFT\\n     * @param tokenId The ID of the NFT\\n     * @return The NFT's borrow limit\\n     */\\n    function getBorrowLimitByOracle(\\n        uint256 reserveId,\\n        address nftAddress,\\n        uint256 tokenId\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the sum of all users borrow balances include borrow interest accrued\\n     * @param reserveId The ID of the reserve\\n     * @return The total borrow balance of the reserve\\n     */\\n    function getTotalBorrowBalance(uint256 reserveId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns TVL (total value locked) of the reserve.\\n     * @param reserveId The ID of the reserve\\n     * @return The reserve's TVL\\n     */\\n    function getTVL(uint256 reserveId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x974b21114e5e77e5d788d81ec195be9967302b71b9d15336da9c3bfd7c6ff546\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyPunkGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IOpenSkyPunkGateway {\\n    event Borrow(\\n        uint256 indexed reserveId,\\n        address indexed user,\\n        uint256 amount,\\n        uint256 duration,\\n        uint256 punkIndex,\\n        uint256 loanId\\n    );\\n    event Repay(uint256 indexed reserveId, address indexed user, uint256 punkIndex, uint256 loanId);\\n\\n    event BorrowETH(\\n        uint256 indexed reserveId,\\n        address indexed user,\\n        uint256 amount,\\n        uint256 duration,\\n        uint256 punkIndex,\\n        uint256 loanId\\n    );\\n    event RepayETH(uint256 indexed reserveId, address indexed user, uint256 punkIndex, uint256 loanId);\\n\\n    function borrow(\\n        uint256 reserveId,\\n        uint256 amount,\\n        uint256 duration,\\n        uint256 punkIndex\\n    ) external;\\n\\n    function repay(uint256 loanId) external;\\n\\n    function borrowETH(\\n        uint256 reserveId,\\n        uint256 amount,\\n        uint256 duration,\\n        uint256 punkIndex\\n    ) external;\\n\\n    function repayETH(uint256 loanId) external payable;\\n}\\n\",\"keccak256\":\"0x81d4ce56a76ac33775130a4933a29d21e4220bfa72a6254f9ad831a43a1a083e\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkySettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\nimport '../libraries/types/DataTypes.sol';\\n\\ninterface IOpenSkySettings {\\n    event InitPoolAddress(address operator, address address_);\\n    event InitLoanAddress(address operator, address address_);\\n    event InitVaultFactoryAddress(address operator, address address_);\\n    event InitIncentiveControllerAddress(address operator, address address_);\\n    event InitWETHGatewayAddress(address operator, address address_);\\n    event InitPunkGatewayAddress(address operator, address address_);\\n\\n    event AddToWhitelist(address operator, uint256 reserveId, address nft);\\n    event RemoveFromWhitelist(address operator, uint256 reserveId, address nft);\\n    event SetReserveFactor(address operator, uint256 factor);\\n    event SetPrepaymentFeeFactor(address operator, uint256 factor);\\n    event SetOverdueLoanFeeFactor(address operator, uint256 factor);\\n    event SetMoneyMarketAddress(address operator, address address_);\\n    event SetTreasuryAddress(address operator, address address_);\\n    event SetDaoVaultAddress(address operator, address address_);\\n    event SetACLManagerAddress(address operator, address address_);\\n    event SetLoanDescriptorAddress(address operator, address address_);\\n    event SetNftPriceOracleAddress(address operator, address address_);\\n    event SetInterestRateStrategyAddress(address operator, address address_);\\n    event AddLiquidator(address operator, address address_);\\n    event RemoveLiquidator(address operator, address address_);\\n\\n    function poolAddress() external view returns (address);\\n\\n    function loanAddress() external view returns (address);\\n\\n    function vaultFactoryAddress() external view returns (address);\\n\\n    function incentiveControllerAddress() external view returns (address);\\n\\n    function wethGatewayAddress() external view returns (address);\\n\\n    function punkGatewayAddress() external view returns (address);\\n\\n    function inWhitelist(uint256 reserveId, address nft) external view returns (bool);\\n\\n    function getWhitelistDetail(uint256 reserveId, address nft) external view returns (DataTypes.WhitelistInfo memory);\\n\\n    function reserveFactor() external view returns (uint256); // treasury ratio\\n\\n    function MAX_RESERVE_FACTOR() external view returns (uint256);\\n\\n    function prepaymentFeeFactor() external view returns (uint256);\\n\\n    function overdueLoanFeeFactor() external view returns (uint256);\\n\\n    function moneyMarketAddress() external view returns (address);\\n\\n    function treasuryAddress() external view returns (address);\\n\\n    function daoVaultAddress() external view returns (address);\\n\\n    function ACLManagerAddress() external view returns (address);\\n\\n    function loanDescriptorAddress() external view returns (address);\\n\\n    function nftPriceOracleAddress() external view returns (address);\\n\\n    function interestRateStrategyAddress() external view returns (address);\\n    \\n    function isLiquidator(address liquidator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd6d7e8c1b7751de0f65d85310c1e2d8274b74c7e3dc74920ea2546b65d8f659f\",\"license\":\"MIT\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        uint256 reserveId;\\n        address underlyingAsset;\\n        address oTokenAddress;\\n        address moneyMarketAddress;\\n        uint128 lastSupplyIndex;\\n        uint256 borrowingInterestPerSecond;\\n        uint256 lastMoneyMarketBalance;\\n        uint40 lastUpdateTimestamp;\\n        uint256 totalBorrows;\\n        address interestModelAddress;\\n        uint256 treasuryFactor;\\n        bool isMoneyMarketOn;\\n    }\\n\\n    struct LoanData {\\n        uint256 reserveId;\\n        address nftAddress;\\n        uint256 tokenId;\\n        address borrower;\\n        uint256 amount;\\n        uint128 borrowRate;\\n        uint128 interestPerSecond;\\n        uint40 borrowBegin;\\n        uint40 borrowDuration;\\n        uint40 borrowOverdueTime;\\n        uint40 liquidatableTime;\\n        uint40 extendableTime;\\n        uint40 borrowEnd;\\n        LoanStatus status;\\n    }\\n\\n    enum LoanStatus {\\n        NONE,\\n        BORROWING,\\n        EXTENDABLE,\\n        OVERDUE,\\n        LIQUIDATABLE,\\n        LIQUIDATING\\n    }\\n\\n    struct WhitelistInfo {\\n        bool enabled;\\n        string name;\\n        string symbol;\\n        uint256 LTV;\\n        uint256 minBorrowDuration;\\n        uint256 maxBorrowDuration;\\n        uint256 extendableDuration;\\n        uint256 overdueDuration;\\n    }\\n}\\n\",\"keccak256\":\"0x487cd1dedb3146da46144bc8f0e5b970c5173efa8c19700184b8207c1ee3fc55\",\"license\":\"MIT\"},\"contracts/misc/OpenSkyPunkGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport '../dependencies/cryptopunk/ICryptoPunk.sol';\\nimport '../dependencies/cryptopunk/IWrappedPunk.sol';\\nimport '../dependencies/weth/IWETH.sol';\\n\\nimport '../libraries/types/DataTypes.sol';\\nimport '../interfaces/IOpenSkySettings.sol';\\nimport '../interfaces/IOpenSkyPool.sol';\\nimport '../interfaces/IOpenSkyLoan.sol';\\nimport '../interfaces/IOpenSkyPunkGateway.sol';\\n\\ncontract OpenSkyPunkGateway is Context, ERC721Holder, IOpenSkyPunkGateway {\\n    using SafeERC20 for IERC20;\\n\\n    IOpenSkySettings public immutable SETTINGS;\\n    ICryptoPunk public immutable PUNK;\\n    IWrappedPunk public immutable WPUNK;\\n    IWETH public immutable WETH;\\n\\n    address public WPUNK_PROXY_ADDRESS;\\n\\n    constructor(\\n        address SETTINGS_,\\n        address PUNK_,\\n        address WPUNK_,\\n        address WETH_\\n    ) {\\n        SETTINGS = IOpenSkySettings(SETTINGS_);\\n        PUNK = ICryptoPunk(PUNK_);\\n        WPUNK = IWrappedPunk(WPUNK_);\\n        WETH = IWETH(WETH_);\\n\\n        WPUNK.registerProxy();\\n        WPUNK_PROXY_ADDRESS = WPUNK.proxyInfo(address(this));\\n\\n        IERC721(address(WPUNK)).setApprovalForAll(SETTINGS.poolAddress(), true);\\n    }\\n\\n    function borrow(\\n        uint256 reserveId,\\n        uint256 amount,\\n        uint256 duration,\\n        uint256 punkIndex\\n    ) external override {\\n        address underlyingAsset = IOpenSkyPool(SETTINGS.poolAddress()).getReserveData(reserveId).underlyingAsset;\\n\\n        _borrow(reserveId, amount, duration, punkIndex);\\n        IERC20(underlyingAsset).safeTransfer(_msgSender(), amount);\\n    }\\n\\n    function borrowETH(\\n        uint256 reserveId,\\n        uint256 amount,\\n        uint256 duration,\\n        uint256 punkIndex\\n    ) external {\\n        address underlyingAsset = IOpenSkyPool(SETTINGS.poolAddress()).getReserveData(reserveId).underlyingAsset;\\n        require(underlyingAsset == address(WETH), 'BORROW_ETH_RESERVE_ASSET_NOT_MATCH');\\n\\n        uint256 loanId = _borrow(reserveId, amount, duration, punkIndex);\\n\\n        WETH.withdraw(amount);\\n        _safeTransferETH(_msgSender(), amount);\\n\\n        emit BorrowETH(reserveId, _msgSender(), amount, duration, punkIndex, loanId);\\n    }\\n\\n    /// @notice Only loan NFT owner can repay\\n    function repay(uint256 loanId) external override {\\n        IOpenSkyLoan loanNFT = IOpenSkyLoan(SETTINGS.loanAddress());\\n        DataTypes.LoanData memory loanData = loanNFT.getLoanData(loanId);\\n        address underlyingAsset = IOpenSkyPool(SETTINGS.poolAddress())\\n            .getReserveData(loanData.reserveId)\\n            .underlyingAsset;\\n        uint256 borrowBalance = loanNFT.getBorrowBalance(loanId);\\n\\n        require(IERC20(underlyingAsset).balanceOf(_msgSender()) >= borrowBalance, 'REPAY_UNDERLYINGASSET_NOT_ENOUGH');\\n\\n        IERC20(underlyingAsset).safeTransferFrom(_msgSender(), address(this), borrowBalance);\\n\\n        _repay(loanId, loanData, underlyingAsset, borrowBalance);\\n    }\\n\\n    function repayETH(uint256 loanId) external payable {\\n        IOpenSkyLoan loanNFT = IOpenSkyLoan(SETTINGS.loanAddress());\\n        DataTypes.LoanData memory loanData = loanNFT.getLoanData(loanId);\\n\\n        address underlyingAsset = IOpenSkyPool(SETTINGS.poolAddress())\\n            .getReserveData(loanData.reserveId)\\n            .underlyingAsset;\\n        require(underlyingAsset == address(WETH), 'REPAY_ETH_RESERVE_ASSET_NOT_MATCH');\\n\\n        uint256 borrowBalance = loanNFT.getBorrowBalance(loanId);\\n\\n        require(msg.value >= borrowBalance, 'REPAY_ETH_NOT_ENOUGH');\\n\\n        address owner = IERC721(SETTINGS.loanAddress()).ownerOf(loanId);\\n        require(_msgSender() == owner, 'REPAY_USER_NOT_OWN_THE_LOAN');\\n        require(loanData.nftAddress == address(WPUNK), 'REPAY_NOT_A_PUNK_LOAN');\\n\\n        // prepare weth\\n        WETH.deposit{value: borrowBalance}();\\n\\n        _repay(loanId, loanData, underlyingAsset, borrowBalance);\\n\\n        if (msg.value > borrowBalance) {\\n            _safeTransferETH(_msgSender(), msg.value - borrowBalance);\\n        }\\n\\n        emit RepayETH(loanData.reserveId, _msgSender(), loanData.tokenId, loanId);\\n    }\\n\\n    function _borrow(\\n        uint256 reserveId,\\n        uint256 amount,\\n        uint256 duration,\\n        uint256 punkIndex\\n    ) internal returns (uint256) {\\n        address owner = PUNK.punkIndexToAddress(punkIndex);\\n        require(owner == _msgSender(), 'DEPOSIT_PUNK_NOT_OWNER_OF_PUNK');\\n\\n        // deposit punk\\n        PUNK.buyPunk(punkIndex);\\n        PUNK.transferPunk(WPUNK_PROXY_ADDRESS, punkIndex);\\n        WPUNK.mint(punkIndex);\\n\\n        // borrow\\n        uint256 loanId = IOpenSkyPool(SETTINGS.poolAddress()).borrow(\\n            reserveId,\\n            amount,\\n            duration,\\n            address(WPUNK),\\n            punkIndex,\\n            _msgSender()\\n        );\\n        emit Borrow(reserveId, owner, amount, duration, punkIndex, loanId);\\n        return loanId;\\n    }\\n\\n    function _repay(\\n        uint256 loanId,\\n        DataTypes.LoanData memory loanData,\\n        address underlyingAsset,\\n        uint256 borrowBalance\\n    ) internal {\\n        address owner = IERC721(SETTINGS.loanAddress()).ownerOf(loanId);\\n        require(_msgSender() == owner, 'REPAY_USER_NOT_OWN_THE_LOAN');\\n        require(loanData.nftAddress == address(WPUNK), 'REPAY_NOT_A_PUNK_LOAN');\\n\\n        // approve underlyingAsset\\n        IERC20(underlyingAsset).approve(SETTINGS.poolAddress(), borrowBalance);\\n\\n        IOpenSkyPool(SETTINGS.poolAddress()).repay(loanId);\\n\\n        // withdrawPunk\\n        WPUNK.burn(loanData.tokenId);\\n        PUNK.transferPunk(owner, loanData.tokenId);\\n\\n        emit Repay(loanData.reserveId, _msgSender(), loanData.tokenId, loanId);\\n    }\\n\\n    function _safeTransferETH(address recipient, uint256 amount) internal {\\n        (bool success, ) = recipient.call{value: amount}('');\\n        require(success, 'ETH_TRANSFER_FAILED');\\n    }\\n\\n    event Received(address, uint256);\\n\\n    receive() external payable {\\n        emit Received(msg.sender, msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0xcf381b4189b6c8be78c5d7e229584597a360f80851ec4d6105700c97a964b690\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b50604051620024b8380380620024b883398101604081905262000035916200023f565b6001600160a01b0380851660805283811660a05282811660c081905290821660e05260408051636eec0fc160e11b8152905163ddd81f829160048082019260009290919082900301818387803b1580156200008f57600080fd5b505af1158015620000a4573d6000803e3d6000fd5b505060c051604051631538f65960e31b81523060048201526001600160a01b03909116925063a9c7b2c891506024016020604051808303816000875af1158015620000f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200011991906200029c565b6000806101000a8154816001600160a01b0302191690836001600160a01b0316021790555060c0516001600160a01b031663a22cb4656080516001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000190573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001b691906200029c565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260016024820152604401600060405180830381600087803b158015620001ff57600080fd5b505af115801562000214573d6000803e3d6000fd5b5050505050505050620002c1565b80516001600160a01b03811681146200023a57600080fd5b919050565b600080600080608085870312156200025657600080fd5b620002618562000222565b9350620002716020860162000222565b9250620002816040860162000222565b9150620002916060860162000222565b905092959194509250565b600060208284031215620002af57600080fd5b620002ba8262000222565b9392505050565b60805160a05160c05160e051612115620003a360003960008181610215015281816105b6015281816108c401528181610dee0152610e9f015260008181610249015281816108470152818161115b015281816112720152818161151501526117a20152600081816101a101528181610f7f0152818161105c015281816110e7015261183201526000818161027d015281816102a3015281816103c4015281816104ba015281816106fd015281816109ac01528181610aa201528181610cf7015281816111c5015281816113cb015281816115a1015261169501526121156000f3fe6080604052600436106100955760003560e01c8063371fd8e611610059578063371fd8e6146101c3578063900f60ba146101e3578063ad5c464814610203578063add9cf0314610237578063ade97ab51461026b57600080fd5b8063111d9482146100d9578063150b7a02146100fb5780632247463e14610144578063268b463d14610157578063296f76b31461018f57600080fd5b366100d457604080513381523460208201527f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874910160405180910390a1005b600080fd5b3480156100e557600080fd5b506100f96100f4366004611c15565b61029f565b005b34801561010757600080fd5b50610126610116366004611cf4565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020015b60405180910390f35b6100f9610152366004611db8565b6103c0565b34801561016357600080fd5b50600054610177906001600160a01b031681565b6040516001600160a01b03909116815260200161013b565b34801561019b57600080fd5b506101777f000000000000000000000000000000000000000000000000000000000000000081565b3480156101cf57600080fd5b506100f96101de366004611db8565b6109a8565b3480156101ef57600080fd5b506100f96101fe366004611c15565b610cf3565b34801561020f57600080fd5b506101777f000000000000000000000000000000000000000000000000000000000000000081565b34801561024357600080fd5b506101777f000000000000000000000000000000000000000000000000000000000000000081565b34801561027757600080fd5b506101777f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103239190611de1565b6001600160a01b03166391541e05866040518263ffffffff1660e01b815260040161035091815260200190565b61018060405180830381865afa15801561036e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103929190611e43565b6020015190506103a485858585610f5c565b506103b96001600160a01b038216338661135f565b5050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166335bc868a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610420573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104449190611de1565b60405163622fe39f60e01b8152600481018490529091506000906001600160a01b0383169063622fe39f906024016101c060405180830381865afa158015610490573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b49190611f1b565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610516573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053a9190611de1565b82516040516391541e0560e01b81526001600160a01b0392909216916391541e059161056c9160040190815260200190565b61018060405180830381865afa15801561058a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ae9190611e43565b6020015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316146106445760405162461bcd60e51b815260206004820152602160248201527f52455041595f4554485f524553455256455f41535345545f4e4f545f4d4154436044820152600960fb1b60648201526084015b60405180910390fd5b604051636b52b36560e01b8152600481018590526000906001600160a01b03851690636b52b36590602401602060405180830381865afa15801561068c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b0919061200b565b9050803410156106f95760405162461bcd60e51b81526020600482015260146024820152730a48aa082b2be8aa890be9c9ea8be8a9c9eaa8e960631b604482015260640161063b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166335bc868a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077d9190611de1565b6001600160a01b0316636352211e876040518263ffffffff1660e01b81526004016107aa91815260200190565b602060405180830381865afa1580156107c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107eb9190611de1565b9050336001600160a01b038216146108455760405162461bcd60e51b815260206004820152601b60248201527f52455041595f555345525f4e4f545f4f574e5f5448455f4c4f414e0000000000604482015260640161063b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031684602001516001600160a01b0316146108c25760405162461bcd60e51b81526020600482015260156024820152742922a820acafa727aa2fa0afa82aa725afa627a0a760591b604482015260640161063b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561091d57600080fd5b505af1158015610931573d6000803e3d6000fd5b5050505050610942868585856113c7565b8134111561095d5761095d336109588434612024565b6118f2565b83516040808601518151908152602081018990523392917f58a95140c905d05fa474061eeec893aa434dab2bc58eaa7b48056fce4996e18b91015b60405180910390a3505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166335bc868a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2c9190611de1565b60405163622fe39f60e01b8152600481018490529091506000906001600160a01b0383169063622fe39f906024016101c060405180830381865afa158015610a78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9c9190611f1b565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b229190611de1565b82516040516391541e0560e01b81526001600160a01b0392909216916391541e0591610b549160040190815260200190565b61018060405180830381865afa158015610b72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b969190611e43565b60200151604051636b52b36560e01b8152600481018690529091506000906001600160a01b03851690636b52b36590602401602060405180830381865afa158015610be5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c09919061200b565b9050806001600160a01b0383166370a08231336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610c60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c84919061200b565b1015610cd25760405162461bcd60e51b815260206004820181905260248201527f52455041595f554e4445524c59494e4741535345545f4e4f545f454e4f554748604482015260640161063b565b610ce76001600160a01b03831633308461198b565b6103b9858484846113c7565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d779190611de1565b6001600160a01b03166391541e05866040518263ffffffff1660e01b8152600401610da491815260200190565b61018060405180830381865afa158015610dc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de69190611e43565b6020015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614610e785760405162461bcd60e51b815260206004820152602260248201527f424f52524f575f4554485f524553455256455f41535345545f4e4f545f4d4154604482015261086960f31b606482015260840161063b565b6000610e8686868686610f5c565b604051632e1a7d4d60e01b8152600481018790529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015610eeb57600080fd5b505af1158015610eff573d6000803e3d6000fd5b50505050610f13610f0d3390565b866118f2565b604080518681526020810186905290810184905260608101829052339087907fd0f65229433ec4eae01027a1d44f915a610fadee0436aad3533c78340c7dfb9590608001610998565b604051630b02f02d60e31b81526004810182905260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906358178168906024016020604051808303816000875af1158015610fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fec9190611de1565b90506001600160a01b03811633146110465760405162461bcd60e51b815260206004820152601e60248201527f4445504f5349545f50554e4b5f4e4f545f4f574e45525f4f465f50554e4b0000604482015260640161063b565b60405163104c9fd360e31b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638264fe9890602401600060405180830381600087803b1580156110a857600080fd5b505af11580156110bc573d6000803e3d6000fd5b50506000546040516322dca8bb60e21b81526001600160a01b039182166004820152602481018790527f00000000000000000000000000000000000000000000000000000000000000009091169250638b72a2ec9150604401600060405180830381600087803b15801561112f57600080fd5b505af1158015611143573d6000803e3d6000fd5b505060405163140e25ad60e31b8152600481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063a0712d689150602401600060405180830381600087803b1580156111a957600080fd5b505af11580156111bd573d6000803e3d6000fd5b5050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015611221573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112459190611de1565b6040805163f668a9c560e01b8152600481018a905260248101899052604481018890526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166064830152608482018890523360a48301529151929091169163f668a9c59160c48082019260209290919082900301816000875af11580156112d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fd919061200b565b6040805188815260208101889052908101869052606081018290529091506001600160a01b0383169088907f8022857986a1f6403c350b6ffd0f3ceef7b305fe08e1bc74b0841f4d41d3a92d9060800160405180910390a39695505050505050565b6040516001600160a01b0383166024820152604481018290526113c290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526119c9565b505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166335bc868a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611427573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144b9190611de1565b6001600160a01b0316636352211e866040518263ffffffff1660e01b815260040161147891815260200190565b602060405180830381865afa158015611495573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b99190611de1565b9050336001600160a01b038216146115135760405162461bcd60e51b815260206004820152601b60248201527f52455041595f555345525f4e4f545f4f574e5f5448455f4c4f414e0000000000604482015260640161063b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031684602001516001600160a01b0316146115905760405162461bcd60e51b81526020600482015260156024820152742922a820acafa727aa2fa0afa82aa725afa627a0a760591b604482015260640161063b565b826001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116219190611de1565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303816000875af115801561166e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116929190612049565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117159190611de1565b6001600160a01b031663371fd8e6866040518263ffffffff1660e01b815260040161174291815260200190565b6020604051808303816000875af1158015611761573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611785919061200b565b506040848101519051630852cd8d60e31b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906342966c6890602401600060405180830381600087803b1580156117ee57600080fd5b505af1158015611802573d6000803e3d6000fd5b5050505060408481015190516322dca8bb60e21b81526001600160a01b03838116600483015260248201929092527f000000000000000000000000000000000000000000000000000000000000000090911690638b72a2ec90604401600060405180830381600087803b15801561187857600080fd5b505af115801561188c573d6000803e3d6000fd5b505050506118973390565b6001600160a01b031684600001517f4e209d95368098bc8c8a8b0010964bca5d6789b67388238d3a2bad8e236e54b08660400151886040516118e3929190918252602082015260400190565b60405180910390a35050505050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461193f576040519150601f19603f3d011682016040523d82523d6000602084013e611944565b606091505b50509050806113c25760405162461bcd60e51b815260206004820152601360248201527211551217d514905394d1915497d19052531151606a1b604482015260640161063b565b6040516001600160a01b03808516602483015283166044820152606481018290526119c39085906323b872dd60e01b9060840161138b565b50505050565b6000611a1e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611a9b9092919063ffffffff16565b8051909150156113c25780806020019051810190611a3c9190612049565b6113c25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161063b565b6060611aaa8484600085611ab4565b90505b9392505050565b606082471015611b155760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161063b565b843b611b635760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161063b565b600080866001600160a01b03168587604051611b7f9190612090565b60006040518083038185875af1925050503d8060008114611bbc576040519150601f19603f3d011682016040523d82523d6000602084013e611bc1565b606091505b5091509150611bd1828286611bdc565b979650505050505050565b60608315611beb575081611aad565b825115611bfb5782518084602001fd5b8160405162461bcd60e51b815260040161063b91906120ac565b60008060008060808587031215611c2b57600080fd5b5050823594602084013594506040840135936060013592509050565b6001600160a01b0381168114611c5c57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff81118282101715611c9957611c99611c5f565b60405290565b6040516101c0810167ffffffffffffffff81118282101715611c9957611c99611c5f565b604051601f8201601f1916810167ffffffffffffffff81118282101715611cec57611cec611c5f565b604052919050565b60008060008060808587031215611d0a57600080fd5b8435611d1581611c47565b9350602085810135611d2681611c47565b935060408601359250606086013567ffffffffffffffff80821115611d4a57600080fd5b818801915088601f830112611d5e57600080fd5b813581811115611d7057611d70611c5f565b611d82601f8201601f19168501611cc3565b91508082528984828501011115611d9857600080fd5b808484018584013760008482840101525080935050505092959194509250565b600060208284031215611dca57600080fd5b5035919050565b8051611ddc81611c47565b919050565b600060208284031215611df357600080fd5b8151611aad81611c47565b80516fffffffffffffffffffffffffffffffff81168114611ddc57600080fd5b805164ffffffffff81168114611ddc57600080fd5b80518015158114611ddc57600080fd5b60006101808284031215611e5657600080fd5b611e5e611c75565b82518152611e6e60208401611dd1565b6020820152611e7f60408401611dd1565b6040820152611e9060608401611dd1565b6060820152611ea160808401611dfe565b608082015260a083015160a082015260c083015160c0820152611ec660e08401611e1e565b60e08201526101008381015190820152610120611ee4818501611dd1565b908201526101408381015190820152610160611f01818501611e33565b908201529392505050565b805160068110611ddc57600080fd5b60006101c08284031215611f2e57600080fd5b611f36611c9f565b82518152611f4660208401611dd1565b602082015260408301516040820152611f6160608401611dd1565b606082015260808301516080820152611f7c60a08401611dfe565b60a0820152611f8d60c08401611dfe565b60c0820152611f9e60e08401611e1e565b60e0820152610100611fb1818501611e1e565b90820152610120611fc3848201611e1e565b90820152610140611fd5848201611e1e565b90820152610160611fe7848201611e1e565b90820152610180611ff9848201611e1e565b908201526101a0611f01848201611f0c565b60006020828403121561201d57600080fd5b5051919050565b60008282101561204457634e487b7160e01b600052601160045260246000fd5b500390565b60006020828403121561205b57600080fd5b611aad82611e33565b60005b8381101561207f578181015183820152602001612067565b838111156119c35750506000910152565b600082516120a2818460208701612064565b9190910192915050565b60208152600082518060208401526120cb816040850160208701612064565b601f01601f1916919091016040019291505056fea26469706673582212205f2204c19e610ef10a999eda856368df87ca374cb43f2be4efb4ea446ba55bb364736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106100955760003560e01c8063371fd8e611610059578063371fd8e6146101c3578063900f60ba146101e3578063ad5c464814610203578063add9cf0314610237578063ade97ab51461026b57600080fd5b8063111d9482146100d9578063150b7a02146100fb5780632247463e14610144578063268b463d14610157578063296f76b31461018f57600080fd5b366100d457604080513381523460208201527f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874910160405180910390a1005b600080fd5b3480156100e557600080fd5b506100f96100f4366004611c15565b61029f565b005b34801561010757600080fd5b50610126610116366004611cf4565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020015b60405180910390f35b6100f9610152366004611db8565b6103c0565b34801561016357600080fd5b50600054610177906001600160a01b031681565b6040516001600160a01b03909116815260200161013b565b34801561019b57600080fd5b506101777f000000000000000000000000000000000000000000000000000000000000000081565b3480156101cf57600080fd5b506100f96101de366004611db8565b6109a8565b3480156101ef57600080fd5b506100f96101fe366004611c15565b610cf3565b34801561020f57600080fd5b506101777f000000000000000000000000000000000000000000000000000000000000000081565b34801561024357600080fd5b506101777f000000000000000000000000000000000000000000000000000000000000000081565b34801561027757600080fd5b506101777f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103239190611de1565b6001600160a01b03166391541e05866040518263ffffffff1660e01b815260040161035091815260200190565b61018060405180830381865afa15801561036e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103929190611e43565b6020015190506103a485858585610f5c565b506103b96001600160a01b038216338661135f565b5050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166335bc868a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610420573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104449190611de1565b60405163622fe39f60e01b8152600481018490529091506000906001600160a01b0383169063622fe39f906024016101c060405180830381865afa158015610490573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b49190611f1b565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610516573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053a9190611de1565b82516040516391541e0560e01b81526001600160a01b0392909216916391541e059161056c9160040190815260200190565b61018060405180830381865afa15801561058a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ae9190611e43565b6020015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316146106445760405162461bcd60e51b815260206004820152602160248201527f52455041595f4554485f524553455256455f41535345545f4e4f545f4d4154436044820152600960fb1b60648201526084015b60405180910390fd5b604051636b52b36560e01b8152600481018590526000906001600160a01b03851690636b52b36590602401602060405180830381865afa15801561068c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b0919061200b565b9050803410156106f95760405162461bcd60e51b81526020600482015260146024820152730a48aa082b2be8aa890be9c9ea8be8a9c9eaa8e960631b604482015260640161063b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166335bc868a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077d9190611de1565b6001600160a01b0316636352211e876040518263ffffffff1660e01b81526004016107aa91815260200190565b602060405180830381865afa1580156107c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107eb9190611de1565b9050336001600160a01b038216146108455760405162461bcd60e51b815260206004820152601b60248201527f52455041595f555345525f4e4f545f4f574e5f5448455f4c4f414e0000000000604482015260640161063b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031684602001516001600160a01b0316146108c25760405162461bcd60e51b81526020600482015260156024820152742922a820acafa727aa2fa0afa82aa725afa627a0a760591b604482015260640161063b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561091d57600080fd5b505af1158015610931573d6000803e3d6000fd5b5050505050610942868585856113c7565b8134111561095d5761095d336109588434612024565b6118f2565b83516040808601518151908152602081018990523392917f58a95140c905d05fa474061eeec893aa434dab2bc58eaa7b48056fce4996e18b91015b60405180910390a3505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166335bc868a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2c9190611de1565b60405163622fe39f60e01b8152600481018490529091506000906001600160a01b0383169063622fe39f906024016101c060405180830381865afa158015610a78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9c9190611f1b565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b229190611de1565b82516040516391541e0560e01b81526001600160a01b0392909216916391541e0591610b549160040190815260200190565b61018060405180830381865afa158015610b72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b969190611e43565b60200151604051636b52b36560e01b8152600481018690529091506000906001600160a01b03851690636b52b36590602401602060405180830381865afa158015610be5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c09919061200b565b9050806001600160a01b0383166370a08231336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610c60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c84919061200b565b1015610cd25760405162461bcd60e51b815260206004820181905260248201527f52455041595f554e4445524c59494e4741535345545f4e4f545f454e4f554748604482015260640161063b565b610ce76001600160a01b03831633308461198b565b6103b9858484846113c7565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d779190611de1565b6001600160a01b03166391541e05866040518263ffffffff1660e01b8152600401610da491815260200190565b61018060405180830381865afa158015610dc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de69190611e43565b6020015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614610e785760405162461bcd60e51b815260206004820152602260248201527f424f52524f575f4554485f524553455256455f41535345545f4e4f545f4d4154604482015261086960f31b606482015260840161063b565b6000610e8686868686610f5c565b604051632e1a7d4d60e01b8152600481018790529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015610eeb57600080fd5b505af1158015610eff573d6000803e3d6000fd5b50505050610f13610f0d3390565b866118f2565b604080518681526020810186905290810184905260608101829052339087907fd0f65229433ec4eae01027a1d44f915a610fadee0436aad3533c78340c7dfb9590608001610998565b604051630b02f02d60e31b81526004810182905260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906358178168906024016020604051808303816000875af1158015610fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fec9190611de1565b90506001600160a01b03811633146110465760405162461bcd60e51b815260206004820152601e60248201527f4445504f5349545f50554e4b5f4e4f545f4f574e45525f4f465f50554e4b0000604482015260640161063b565b60405163104c9fd360e31b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638264fe9890602401600060405180830381600087803b1580156110a857600080fd5b505af11580156110bc573d6000803e3d6000fd5b50506000546040516322dca8bb60e21b81526001600160a01b039182166004820152602481018790527f00000000000000000000000000000000000000000000000000000000000000009091169250638b72a2ec9150604401600060405180830381600087803b15801561112f57600080fd5b505af1158015611143573d6000803e3d6000fd5b505060405163140e25ad60e31b8152600481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063a0712d689150602401600060405180830381600087803b1580156111a957600080fd5b505af11580156111bd573d6000803e3d6000fd5b5050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015611221573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112459190611de1565b6040805163f668a9c560e01b8152600481018a905260248101899052604481018890526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166064830152608482018890523360a48301529151929091169163f668a9c59160c48082019260209290919082900301816000875af11580156112d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fd919061200b565b6040805188815260208101889052908101869052606081018290529091506001600160a01b0383169088907f8022857986a1f6403c350b6ffd0f3ceef7b305fe08e1bc74b0841f4d41d3a92d9060800160405180910390a39695505050505050565b6040516001600160a01b0383166024820152604481018290526113c290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526119c9565b505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166335bc868a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611427573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144b9190611de1565b6001600160a01b0316636352211e866040518263ffffffff1660e01b815260040161147891815260200190565b602060405180830381865afa158015611495573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b99190611de1565b9050336001600160a01b038216146115135760405162461bcd60e51b815260206004820152601b60248201527f52455041595f555345525f4e4f545f4f574e5f5448455f4c4f414e0000000000604482015260640161063b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031684602001516001600160a01b0316146115905760405162461bcd60e51b81526020600482015260156024820152742922a820acafa727aa2fa0afa82aa725afa627a0a760591b604482015260640161063b565b826001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116219190611de1565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303816000875af115801561166e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116929190612049565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117159190611de1565b6001600160a01b031663371fd8e6866040518263ffffffff1660e01b815260040161174291815260200190565b6020604051808303816000875af1158015611761573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611785919061200b565b506040848101519051630852cd8d60e31b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906342966c6890602401600060405180830381600087803b1580156117ee57600080fd5b505af1158015611802573d6000803e3d6000fd5b5050505060408481015190516322dca8bb60e21b81526001600160a01b03838116600483015260248201929092527f000000000000000000000000000000000000000000000000000000000000000090911690638b72a2ec90604401600060405180830381600087803b15801561187857600080fd5b505af115801561188c573d6000803e3d6000fd5b505050506118973390565b6001600160a01b031684600001517f4e209d95368098bc8c8a8b0010964bca5d6789b67388238d3a2bad8e236e54b08660400151886040516118e3929190918252602082015260400190565b60405180910390a35050505050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461193f576040519150601f19603f3d011682016040523d82523d6000602084013e611944565b606091505b50509050806113c25760405162461bcd60e51b815260206004820152601360248201527211551217d514905394d1915497d19052531151606a1b604482015260640161063b565b6040516001600160a01b03808516602483015283166044820152606481018290526119c39085906323b872dd60e01b9060840161138b565b50505050565b6000611a1e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611a9b9092919063ffffffff16565b8051909150156113c25780806020019051810190611a3c9190612049565b6113c25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161063b565b6060611aaa8484600085611ab4565b90505b9392505050565b606082471015611b155760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161063b565b843b611b635760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161063b565b600080866001600160a01b03168587604051611b7f9190612090565b60006040518083038185875af1925050503d8060008114611bbc576040519150601f19603f3d011682016040523d82523d6000602084013e611bc1565b606091505b5091509150611bd1828286611bdc565b979650505050505050565b60608315611beb575081611aad565b825115611bfb5782518084602001fd5b8160405162461bcd60e51b815260040161063b91906120ac565b60008060008060808587031215611c2b57600080fd5b5050823594602084013594506040840135936060013592509050565b6001600160a01b0381168114611c5c57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff81118282101715611c9957611c99611c5f565b60405290565b6040516101c0810167ffffffffffffffff81118282101715611c9957611c99611c5f565b604051601f8201601f1916810167ffffffffffffffff81118282101715611cec57611cec611c5f565b604052919050565b60008060008060808587031215611d0a57600080fd5b8435611d1581611c47565b9350602085810135611d2681611c47565b935060408601359250606086013567ffffffffffffffff80821115611d4a57600080fd5b818801915088601f830112611d5e57600080fd5b813581811115611d7057611d70611c5f565b611d82601f8201601f19168501611cc3565b91508082528984828501011115611d9857600080fd5b808484018584013760008482840101525080935050505092959194509250565b600060208284031215611dca57600080fd5b5035919050565b8051611ddc81611c47565b919050565b600060208284031215611df357600080fd5b8151611aad81611c47565b80516fffffffffffffffffffffffffffffffff81168114611ddc57600080fd5b805164ffffffffff81168114611ddc57600080fd5b80518015158114611ddc57600080fd5b60006101808284031215611e5657600080fd5b611e5e611c75565b82518152611e6e60208401611dd1565b6020820152611e7f60408401611dd1565b6040820152611e9060608401611dd1565b6060820152611ea160808401611dfe565b608082015260a083015160a082015260c083015160c0820152611ec660e08401611e1e565b60e08201526101008381015190820152610120611ee4818501611dd1565b908201526101408381015190820152610160611f01818501611e33565b908201529392505050565b805160068110611ddc57600080fd5b60006101c08284031215611f2e57600080fd5b611f36611c9f565b82518152611f4660208401611dd1565b602082015260408301516040820152611f6160608401611dd1565b606082015260808301516080820152611f7c60a08401611dfe565b60a0820152611f8d60c08401611dfe565b60c0820152611f9e60e08401611e1e565b60e0820152610100611fb1818501611e1e565b90820152610120611fc3848201611e1e565b90820152610140611fd5848201611e1e565b90820152610160611fe7848201611e1e565b90820152610180611ff9848201611e1e565b908201526101a0611f01848201611f0c565b60006020828403121561201d57600080fd5b5051919050565b60008282101561204457634e487b7160e01b600052601160045260246000fd5b500390565b60006020828403121561205b57600080fd5b611aad82611e33565b60005b8381101561207f578181015183820152602001612067565b838111156119c35750506000910152565b600082516120a2818460208701612064565b9190910192915050565b60208152600082518060208401526120cb816040850160208701612064565b601f01601f1916919091016040019291505056fea26469706673582212205f2204c19e610ef10a999eda856368df87ca374cb43f2be4efb4ea446ba55bb364736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "repay(uint256)": {
        "notice": "Only loan NFT owner can repay"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22123,
        "contract": "contracts/misc/OpenSkyPunkGateway.sol:OpenSkyPunkGateway",
        "label": "WPUNK_PROXY_ADDRESS",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}