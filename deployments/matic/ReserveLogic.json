{
  "address": "0xf13a69F5611049fE39842c5F0b46c9B327FC12D8",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "reserveId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "underlyingAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "moneyMarketAddress",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "lastSupplyIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "borrowingInterestPerSecond",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastMoneyMarketBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "lastUpdateTimestamp",
              "type": "uint40"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrows",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "interestModelAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "treasuryFactor",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isMoneyMarketOn",
              "type": "bool"
            }
          ],
          "internalType": "struct DataTypes.ReserveData",
          "name": "reserve",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "liquidityAmountToAdd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidityAmountToRemove",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmountToAdd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmountToRemove",
          "type": "uint256"
        }
      ],
      "name": "getBorrowRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "reserveId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "underlyingAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "moneyMarketAddress",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "lastSupplyIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "borrowingInterestPerSecond",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastMoneyMarketBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "lastUpdateTimestamp",
              "type": "uint40"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrows",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "interestModelAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "treasuryFactor",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isMoneyMarketOn",
              "type": "bool"
            }
          ],
          "internalType": "struct DataTypes.ReserveData",
          "name": "reserve",
          "type": "tuple"
        }
      ],
      "name": "getTVL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "reserveId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "underlyingAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "moneyMarketAddress",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "lastSupplyIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "borrowingInterestPerSecond",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastMoneyMarketBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "lastUpdateTimestamp",
              "type": "uint40"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrows",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "interestModelAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "treasuryFactor",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isMoneyMarketOn",
              "type": "bool"
            }
          ],
          "internalType": "struct DataTypes.ReserveData",
          "name": "reserve",
          "type": "tuple"
        }
      ],
      "name": "getTotalBorrowBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3d4e8bf0f35b0b35b87fda9b182c4a721081b71aed69fb125f48ed3d7719a84a",
  "receipt": {
    "to": null,
    "from": "0x218513C58A4781a5B88De6230caA29aBCe2Ccd75",
    "contractAddress": "0xf13a69F5611049fE39842c5F0b46c9B327FC12D8",
    "transactionIndex": 51,
    "gasUsed": "1446663",
    "logsBloom": "0x
    "blockHash": "0x0d83ac44fb724b78eaa95abd772bf75b357495a741a2a73589ceafcd554c0522",
    "transactionHash": "0x3d4e8bf0f35b0b35b87fda9b182c4a721081b71aed69fb125f48ed3d7719a84a",
    "logs": [
      {
        "transactionIndex": 51,
        "blockNumber": 29179355,
        "transactionHash": "0x3d4e8bf0f35b0b35b87fda9b182c4a721081b71aed69fb125f48ed3d7719a84a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000218513c58a4781a5b88de6230caa29abce2ccd75",
          "0x000000000000000000000000127685d6dd6683085da4b6a041efcef1681e5c9c"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000cd954b17c7e59e0000000000000000000000000000000000000000000000002f96ed281c96714b000000000000000000000000000000000000000000000ad4731ad48fd559afd70000000000000000000000000000000000000000000000002ec957dd04ce8bad000000000000000000000000000000000000000000000ad473e869daed219575",
        "logIndex": 238,
        "blockHash": "0x0d83ac44fb724b78eaa95abd772bf75b357495a741a2a73589ceafcd554c0522"
      }
    ],
    "blockNumber": 29179355,
    "cumulativeGasUsed": "7313153",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "903b6e0b7a82abf3fd1d087256b904a8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"moneyMarketAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"lastSupplyIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"borrowingInterestPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastMoneyMarketBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"interestModelAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"treasuryFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMoneyMarketOn\",\"type\":\"bool\"}],\"internalType\":\"struct DataTypes.ReserveData\",\"name\":\"reserve\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAmountToAdd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAmountToRemove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountToAdd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountToRemove\",\"type\":\"uint256\"}],\"name\":\"getBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"moneyMarketAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"lastSupplyIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"borrowingInterestPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastMoneyMarketBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"interestModelAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"treasuryFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMoneyMarketOn\",\"type\":\"bool\"}],\"internalType\":\"struct DataTypes.ReserveData\",\"name\":\"reserve\",\"type\":\"tuple\"}],\"name\":\"getTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"moneyMarketAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"lastSupplyIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"borrowingInterestPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastMoneyMarketBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"interestModelAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"treasuryFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMoneyMarketOn\",\"type\":\"bool\"}],\"internalType\":\"struct DataTypes.ReserveData\",\"name\":\"reserve\",\"type\":\"tuple\"}],\"name\":\"getTotalBorrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"OpenSky Labs\",\"kind\":\"dev\",\"methods\":{\"borrow(DataTypes.ReserveData storage,DataTypes.LoanData)\":{\"details\":\"Implements the borrow feature.\",\"params\":{\"loan\":\"the loan data*\"}},\"deposit(DataTypes.ReserveData storage,address,uint256,address)\":{\"details\":\"Implements the deposit feature.\",\"params\":{\"amount\":\"The amount of deposit\",\"onBehalfOf\":\"The address that will receive otokens*\",\"sender\":\"The address that called deposit function\"}},\"endLiquidation(DataTypes.ReserveData storage,uint256,uint256)\":{\"details\":\"Implements the start liquidation feature.\",\"params\":{\"amount\":\"The amount of token paid\",\"borrowBalance\":\"The borrow balance of loan*\"}},\"extend(DataTypes.ReserveData storage,DataTypes.LoanData,DataTypes.LoanData,uint256,uint256,uint256,uint256)\":{\"details\":\"Implements the extend feature.\",\"params\":{\"additionalIncome\":\"The additional income*\",\"borrowInterestOfOldLoan\":\"The borrow interest of old loan\",\"ethIn\":\"The amount of ETH that will be deposited\",\"ethOut\":\"The amount of ETH that will be withdrawn\",\"newLoan\":\"The data of new loan\",\"oldLoan\":\"The data of old loan\"}},\"getBorrowRate(DataTypes.ReserveData,uint256,uint256,uint256,uint256)\":{\"details\":\"Returns the borrow rate of the reserve\",\"params\":{\"borrowAmountToAdd\":\"The borrow amount will be added\",\"borrowAmountToRemove\":\"The borrow amount will be removed\",\"liquidityAmountToAdd\":\"The liquidity amount will be added\",\"liquidityAmountToRemove\":\"The liquidity amount will be removed\",\"reserve\":\"The reserve object\"},\"returns\":{\"_0\":\"The borrow rate*\"}},\"getNormalizedIncome(DataTypes.ReserveData storage)\":{\"details\":\"Returns the ongoing normalized income for the reserve A value of 1e27 means there is no income. As time passes, the income is accrued A value of 2*1e27 means for each unit of asset one unit of income has been accrued\",\"params\":{\"reserve\":\"The reserve object\"},\"returns\":{\"_0\":\"The normalized income. expressed in ray*\"}},\"getTVL(DataTypes.ReserveData)\":{\"details\":\"Returns the total value locked (TVL) of the reserve\",\"params\":{\"reserve\":\"The reserve object\"},\"returns\":{\"_0\":\"The total value locked (TVL)*\"}},\"getTotalBorrowBalance(DataTypes.ReserveData)\":{\"details\":\"Returns the total borrow balance of the reserve\",\"params\":{\"reserve\":\"The reserve object\"},\"returns\":{\"_0\":\"The total borrow balance*\"}},\"repay(DataTypes.ReserveData storage,DataTypes.LoanData,uint256,uint256)\":{\"details\":\"Implements the repay function.\",\"params\":{\"amount\":\"The amount that will be repaid, including penalty\",\"borrowBalance\":\"The borrow balance*\",\"loan\":\"The loan data\"}},\"startLiquidation(DataTypes.ReserveData storage,DataTypes.LoanData)\":{\"details\":\"Implements liquidation mechanism.\",\"params\":{\"loan\":\"Loan data*\"}},\"withdraw(DataTypes.ReserveData storage,address,uint256,address)\":{\"details\":\"Implements the withdrawal feature.\",\"params\":{\"amount\":\"The withdrawal amount\",\"onBehalfOf\":\"The address that will receive token*\",\"sender\":\"The address that called withdraw function\"}}},\"title\":\"ReserveLogic library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Implements the logic to update the reserves state\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/ReserveLogic.sol\":\"ReserveLogic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IOpenSkyInterestRateStrategy\\n * @author OpenSky Labs\\n * @notice Interface for the calculation of the interest rates\\n */\\ninterface IOpenSkyInterestRateStrategy {\\n    /**\\n     * @dev Emitted on setBaseBorrowRate()\\n     * @param reserveId The id of the reserve\\n     * @param baseRate The base rate has been set\\n     **/\\n    event SetBaseBorrowRate(\\n        uint256 indexed reserveId,\\n        uint256 indexed baseRate\\n    );\\n\\n    /**\\n     * @notice Returns the borrow rate of a reserve\\n     * @param reserveId The id of the reserve\\n     * @param totalDeposits The total deposits amount of the reserve\\n     * @param totalBorrows The total borrows amount of the reserve\\n     * @return The borrow rate, expressed in ray\\n     **/\\n    function getBorrowRate(uint256 reserveId, uint256 totalDeposits, uint256 totalBorrows) external view returns (uint256); \\n}\\n\",\"keccak256\":\"0xfa5ff4ed50344092c9559d27b9318c0804c03ff464b6989fc2743d5e61b42252\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyMoneyMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IOpenSkyMoneyMarket {\\n\\n    function depositCall(address asset, uint256 amount) external;\\n\\n    function withdrawCall(address asset, uint256 amount, address to) external;\\n\\n    function getBalance(address asset, address account) external view returns (uint256);\\n\\n    function getSupplyRate(address asset) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x9c3b3b2e6aeb86e7a5239e1f2f3c194ecac4c500e46cf73073139e1606757729\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyOToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IOpenSkyOToken is IERC20 {\\n    function mint(\\n        address account,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n\\n    function burn(\\n        address account,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n    \\n    function mintToTreasury(uint256 amount, uint256 index) external;\\n  \\n    function deposit(uint256 amount) external;\\n  \\n    function withdraw(uint256 amount, address to) external;\\n    \\n    function scaledBalanceOf(address account) external view returns (uint256);\\n  \\n    function principleBalanceOf(address account) external view returns (uint256);\\n  \\n    function scaledTotalSupply() external view returns (uint256);\\n  \\n    function principleTotalSupply() external view returns (uint256);\\n\\n    function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x999edb49f9e71bc8f73e1230f353d9c432154c1ca910a63c93c3148e5933778e\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyReserveVaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IOpenSkyReserveVaultFactory {\\n    function create(\\n        uint256 reserveId,\\n        string memory name,\\n        string memory symbol,\\n        address underlyingAsset\\n    ) external returns (address oTokenAddress);\\n}\\n\",\"keccak256\":\"0x542e8865ca424d1e6fca2a4cbb29cd7b99bf6d8c2a24559524ef56bc6d3b14a7\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkySettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\nimport '../libraries/types/DataTypes.sol';\\n\\ninterface IOpenSkySettings {\\n    event InitPoolAddress(address operator, address address_);\\n    event InitLoanAddress(address operator, address address_);\\n    event InitVaultFactoryAddress(address operator, address address_);\\n    event InitIncentiveControllerAddress(address operator, address address_);\\n    event InitWETHGatewayAddress(address operator, address address_);\\n    event InitPunkGatewayAddress(address operator, address address_);\\n\\n    event AddToWhitelist(address operator, uint256 reserveId, address nft);\\n    event RemoveFromWhitelist(address operator, uint256 reserveId, address nft);\\n    event SetReserveFactor(address operator, uint256 factor);\\n    event SetPrepaymentFeeFactor(address operator, uint256 factor);\\n    event SetOverdueLoanFeeFactor(address operator, uint256 factor);\\n    event SetMoneyMarketAddress(address operator, address address_);\\n    event SetTreasuryAddress(address operator, address address_);\\n    event SetDaoVaultAddress(address operator, address address_);\\n    event SetACLManagerAddress(address operator, address address_);\\n    event SetLoanDescriptorAddress(address operator, address address_);\\n    event SetNftPriceOracleAddress(address operator, address address_);\\n    event SetInterestRateStrategyAddress(address operator, address address_);\\n    event AddLiquidator(address operator, address address_);\\n    event RemoveLiquidator(address operator, address address_);\\n\\n    function poolAddress() external view returns (address);\\n\\n    function loanAddress() external view returns (address);\\n\\n    function vaultFactoryAddress() external view returns (address);\\n\\n    function incentiveControllerAddress() external view returns (address);\\n\\n    function wethGatewayAddress() external view returns (address);\\n\\n    function punkGatewayAddress() external view returns (address);\\n\\n    function inWhitelist(uint256 reserveId, address nft) external view returns (bool);\\n\\n    function getWhitelistDetail(uint256 reserveId, address nft) external view returns (DataTypes.WhitelistInfo memory);\\n\\n    function reserveFactor() external view returns (uint256); // treasury ratio\\n\\n    function MAX_RESERVE_FACTOR() external view returns (uint256);\\n\\n    function prepaymentFeeFactor() external view returns (uint256);\\n\\n    function overdueLoanFeeFactor() external view returns (uint256);\\n\\n    function moneyMarketAddress() external view returns (address);\\n\\n    function treasuryAddress() external view returns (address);\\n\\n    function daoVaultAddress() external view returns (address);\\n\\n    function ACLManagerAddress() external view returns (address);\\n\\n    function loanDescriptorAddress() external view returns (address);\\n\\n    function nftPriceOracleAddress() external view returns (address);\\n\\n    function interestRateStrategyAddress() external view returns (address);\\n    \\n    function isLiquidator(address liquidator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd6d7e8c1b7751de0f65d85310c1e2d8274b74c7e3dc74920ea2546b65d8f659f\",\"license\":\"MIT\"},\"contracts/libraries/ReserveLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport './types/DataTypes.sol';\\nimport './helpers/Errors.sol';\\nimport './math/WadRayMath.sol';\\nimport './math/PercentageMath.sol';\\nimport './math/MathUtils.sol';\\n\\nimport '../interfaces/IOpenSkySettings.sol';\\nimport '../interfaces/IOpenSkyReserveVaultFactory.sol';\\nimport '../interfaces/IOpenSkyInterestRateStrategy.sol';\\nimport '../interfaces/IOpenSkyOToken.sol';\\nimport '../interfaces/IOpenSkyMoneyMarket.sol';\\n\\n/**\\n * @title ReserveLogic library\\n * @author OpenSky Labs\\n * @notice Implements the logic to update the reserves state\\n */\\nlibrary ReserveLogic {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n    using PercentageMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Implements the deposit feature.\\n     * @param sender The address that called deposit function\\n     * @param amount The amount of deposit\\n     * @param onBehalfOf The address that will receive otokens\\n     **/\\n    function deposit(\\n        DataTypes.ReserveData storage reserve,\\n        address sender,\\n        uint256 amount,\\n        address onBehalfOf\\n    ) public {\\n        updateState(reserve, 0);\\n\\n        updateLastMoneyMarketBalance(reserve, amount, 0);\\n\\n        IOpenSkyOToken oToken = IOpenSkyOToken(reserve.oTokenAddress);\\n        oToken.mint(onBehalfOf, amount, reserve.lastSupplyIndex);\\n\\n        IERC20(reserve.underlyingAsset).safeTransferFrom(sender, reserve.oTokenAddress, amount);\\n        oToken.deposit(amount);\\n    }\\n\\n    /**\\n     * @dev Implements the withdrawal feature.\\n     * @param sender The address that called withdraw function\\n     * @param amount The withdrawal amount\\n     * @param onBehalfOf The address that will receive token\\n     **/\\n    function withdraw(\\n        DataTypes.ReserveData storage reserve,\\n        address sender,\\n        uint256 amount,\\n        address onBehalfOf\\n    ) public {\\n        updateState(reserve, 0);\\n\\n        updateLastMoneyMarketBalance(reserve, 0, amount);\\n\\n        IOpenSkyOToken oToken = IOpenSkyOToken(reserve.oTokenAddress);\\n        oToken.burn(sender, amount, reserve.lastSupplyIndex);\\n        oToken.withdraw(amount, onBehalfOf);\\n    }\\n\\n    /**\\n     * @dev Implements the borrow feature.\\n     * @param loan the loan data\\n     **/\\n    function borrow(DataTypes.ReserveData storage reserve, DataTypes.LoanData memory loan) public {\\n        updateState(reserve, 0);\\n        updateInterestPerSecond(reserve, loan.interestPerSecond, 0);\\n        updateLastMoneyMarketBalance(reserve, 0, loan.amount);\\n\\n        IOpenSkyOToken oToken = IOpenSkyOToken(reserve.oTokenAddress);\\n        // oToken.withdraw(loan.amount, loan.borrower);\\n        oToken.withdraw(loan.amount, msg.sender);\\n\\n        reserve.totalBorrows = reserve.totalBorrows.add(loan.amount);\\n    }\\n\\n    /**\\n     * @dev Implements the repay function.\\n     * @param loan The loan data\\n     * @param amount The amount that will be repaid, including penalty\\n     * @param borrowBalance The borrow balance\\n     **/\\n    function repay(\\n        DataTypes.ReserveData storage reserve,\\n        DataTypes.LoanData memory loan,\\n        uint256 amount,\\n        uint256 borrowBalance\\n    ) public {\\n        updateState(reserve, amount.sub(borrowBalance));\\n        updateInterestPerSecond(reserve, 0, loan.interestPerSecond);\\n        updateLastMoneyMarketBalance(reserve, amount, 0);\\n\\n        IOpenSkyOToken oToken = IOpenSkyOToken(reserve.oTokenAddress);\\n\\n        IERC20(reserve.underlyingAsset).safeTransferFrom(msg.sender, reserve.oTokenAddress, amount);\\n        oToken.deposit(amount);\\n\\n        reserve.totalBorrows = reserve.totalBorrows > borrowBalance ? reserve.totalBorrows - borrowBalance : 0;\\n    }\\n\\n    /**\\n     * @dev Implements the extend feature.\\n     * @param oldLoan The data of old loan\\n     * @param newLoan The data of new loan\\n     * @param borrowInterestOfOldLoan The borrow interest of old loan\\n     * @param ethIn The amount of ETH that will be deposited\\n     * @param ethOut The amount of ETH that will be withdrawn\\n     * @param additionalIncome The additional income\\n     **/\\n    function extend(\\n        DataTypes.ReserveData storage reserve,\\n        DataTypes.LoanData memory oldLoan,\\n        DataTypes.LoanData memory newLoan,\\n        uint256 borrowInterestOfOldLoan,\\n        uint256 ethIn,\\n        uint256 ethOut,\\n        uint256 additionalIncome\\n    ) public {\\n        updateState(reserve, additionalIncome);\\n        updateInterestPerSecond(reserve, newLoan.interestPerSecond, oldLoan.interestPerSecond);\\n        updateLastMoneyMarketBalance(reserve, ethIn, ethOut);\\n\\n        IOpenSkyOToken oToken = IOpenSkyOToken(reserve.oTokenAddress);\\n        if (ethIn > 0) {\\n            IERC20(reserve.underlyingAsset).safeTransferFrom(msg.sender, reserve.oTokenAddress, ethIn);\\n            oToken.deposit(ethIn);\\n        }\\n        if (ethOut > 0) oToken.withdraw(ethOut, newLoan.borrower);\\n\\n        uint256 sum1 = reserve.totalBorrows.add(newLoan.amount);\\n        uint256 sum2 = oldLoan.amount.add(borrowInterestOfOldLoan);\\n        reserve.totalBorrows = sum1 > sum2 ? sum1 - sum2 : 0;\\n    }\\n\\n    /**\\n     * @dev Implements liquidation mechanism.\\n     * @param loan Loan data\\n     **/\\n    function startLiquidation(DataTypes.ReserveData storage reserve, DataTypes.LoanData memory loan) public {\\n        updateState(reserve, 0);\\n        updateLastMoneyMarketBalance(reserve, 0, 0);\\n        updateInterestPerSecond(reserve, 0, loan.interestPerSecond);\\n    }\\n\\n    /**\\n     * @dev Implements the start liquidation feature.\\n     * @param amount The amount of token paid\\n     * @param borrowBalance The borrow balance of loan\\n     **/\\n    function endLiquidation(\\n        DataTypes.ReserveData storage reserve,\\n        uint256 amount,\\n        uint256 borrowBalance\\n    ) public {\\n        updateState(reserve, amount.sub(borrowBalance));\\n        updateLastMoneyMarketBalance(reserve, amount, 0);\\n\\n        IERC20(reserve.underlyingAsset).safeTransferFrom(msg.sender, reserve.oTokenAddress, amount);\\n        IOpenSkyOToken oToken = IOpenSkyOToken(reserve.oTokenAddress);\\n        oToken.deposit(amount);\\n\\n        reserve.totalBorrows = reserve.totalBorrows > borrowBalance ? reserve.totalBorrows - borrowBalance : 0;\\n    }\\n\\n    /**\\n     * @dev Updates the liquidity cumulative index and total borrows\\n     * @param reserve The reserve object\\n     * @param additionalIncome The additional income\\n     **/\\n    function updateState(DataTypes.ReserveData storage reserve, uint256 additionalIncome) internal {\\n        (\\n            uint256 newIndex,\\n            uint256 usersIncome,\\n            uint256 treasuryIncome,\\n            uint256 borrowingInterestDelta,\\n\\n        ) = calculateIncome(reserve, additionalIncome);\\n\\n        require(newIndex <= type(uint128).max, Errors.RESERVE_INDEX_OVERFLOW);\\n        reserve.lastSupplyIndex = uint128(newIndex);\\n\\n        // treasury\\n        treasuryIncome = treasuryIncome.div(WadRayMath.ray());\\n        if (treasuryIncome > 0) {\\n            IOpenSkyOToken(reserve.oTokenAddress).mintToTreasury(treasuryIncome, reserve.lastSupplyIndex);\\n        }\\n\\n        reserve.totalBorrows = reserve.totalBorrows.add(borrowingInterestDelta.div(WadRayMath.ray()));\\n        reserve.lastUpdateTimestamp = uint40(block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Updates the interest per second, when borrowing and repaying\\n     * @param reserve The reserve object\\n     * @param amountToAdd The amount to be added\\n     * @param amountToRemove The amount to be subtracted\\n     **/\\n    function updateInterestPerSecond(\\n        DataTypes.ReserveData storage reserve,\\n        uint256 amountToAdd,\\n        uint256 amountToRemove\\n    ) internal {\\n        reserve.borrowingInterestPerSecond = reserve.borrowingInterestPerSecond.add(amountToAdd).sub(amountToRemove);\\n    }\\n\\n    /**\\n     * @dev Updates last money market balance, after updating the liquidity cumulative index.\\n     * @param reserve The reserve object\\n     * @param amountToAdd The amount to be added\\n     * @param amountToRemove The amount to be subtracted\\n     **/\\n    function updateLastMoneyMarketBalance(\\n        DataTypes.ReserveData storage reserve,\\n        uint256 amountToAdd,\\n        uint256 amountToRemove\\n    ) internal {\\n        uint256 moneyMarketBalance = getMoneyMarketBalance(reserve);\\n        reserve.lastMoneyMarketBalance = moneyMarketBalance.add(amountToAdd).sub(amountToRemove);\\n    }\\n\\n    function openMoneyMarket(\\n        DataTypes.ReserveData storage reserve\\n    ) internal {\\n        reserve.isMoneyMarketOn = true;\\n\\n        uint256 amount = IERC20(reserve.underlyingAsset).balanceOf(reserve.oTokenAddress);\\n        IOpenSkyOToken(reserve.oTokenAddress).deposit(amount);\\n    }\\n\\n    function closeMoneyMarket(\\n        DataTypes.ReserveData storage reserve\\n    ) internal {\\n        address oTokenAddress = reserve.oTokenAddress;\\n        uint256 amount = IOpenSkyMoneyMarket(reserve.moneyMarketAddress).getBalance(reserve.underlyingAsset, oTokenAddress);\\n        IOpenSkyOToken(oTokenAddress).withdraw(amount, oTokenAddress);\\n\\n        reserve.isMoneyMarketOn = false;\\n    }\\n\\n    /**\\n     * @dev Updates last money market balance, after updating the liquidity cumulative index.\\n     * @param reserve The reserve object\\n     * @param additionalIncome The amount to be added\\n     * @return newIndex The new liquidity cumulative index from the last update\\n     * @return usersIncome The user's income from the last update\\n     * @return treasuryIncome The treasury income from the last update\\n     * @return borrowingInterestDelta The treasury income from the last update\\n     * @return moneyMarketDelta The money market income from the last update\\n     **/\\n    function calculateIncome(DataTypes.ReserveData memory reserve, uint256 additionalIncome)\\n        internal\\n        view\\n        returns (\\n            uint256 newIndex,\\n            uint256 usersIncome,\\n            uint256 treasuryIncome,\\n            uint256 borrowingInterestDelta,\\n            uint256 moneyMarketDelta\\n        )\\n    {\\n        moneyMarketDelta = getMoneyMarketDelta(reserve).mul(WadRayMath.ray());\\n        borrowingInterestDelta = getBorrowingInterestDelta(reserve);\\n        // ray\\n        uint256 totalIncome = additionalIncome.mul(WadRayMath.ray()).add(moneyMarketDelta).add(borrowingInterestDelta);\\n        treasuryIncome = totalIncome.percentMul(reserve.treasuryFactor);\\n        usersIncome = totalIncome.sub(treasuryIncome);\\n\\n        // index\\n        newIndex = reserve.lastSupplyIndex;\\n        uint256 scaledTotalSupply = IOpenSkyOToken(reserve.oTokenAddress).scaledTotalSupply();\\n        if (scaledTotalSupply > 0) {\\n            newIndex = usersIncome.div(scaledTotalSupply).add(reserve.lastSupplyIndex);\\n        }\\n\\n        return (newIndex, usersIncome, treasuryIncome, borrowingInterestDelta, moneyMarketDelta);\\n    }\\n\\n    /**\\n     * @dev Returns the ongoing normalized income for the reserve\\n     * A value of 1e27 means there is no income. As time passes, the income is accrued\\n     * A value of 2*1e27 means for each unit of asset one unit of income has been accrued\\n     * @param reserve The reserve object\\n     * @return The normalized income. expressed in ray\\n     **/\\n    function getNormalizedIncome(DataTypes.ReserveData storage reserve) public view returns (uint256) {\\n        (uint256 newIndex, , , , ) = calculateIncome(reserve, 0);\\n        return newIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the available liquidity of the reserve\\n     * @param reserve The reserve object\\n     * @return The available liquidity\\n     **/\\n    function getMoneyMarketBalance(DataTypes.ReserveData memory reserve) internal view returns (uint256) {\\n        if (reserve.isMoneyMarketOn) {\\n            return IOpenSkyMoneyMarket(reserve.moneyMarketAddress).getBalance(reserve.underlyingAsset, reserve.oTokenAddress);\\n        } else {\\n            return IERC20(reserve.underlyingAsset).balanceOf(reserve.oTokenAddress);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the money market income of the reserve from the last update\\n     * @param reserve The reserve object\\n     * @return The income from money market\\n     **/\\n    function getMoneyMarketDelta(DataTypes.ReserveData memory reserve) internal view returns (uint256) {\\n        uint256 timeDelta = uint256(block.timestamp).sub(reserve.lastUpdateTimestamp);\\n\\n        if (timeDelta == 0) return 0;\\n\\n        if (reserve.lastMoneyMarketBalance == 0) return 0;\\n\\n        // get MoneyMarketBalance\\n        uint256 currentMoneyMarketBalance = getMoneyMarketBalance(reserve);\\n        if (currentMoneyMarketBalance < reserve.lastMoneyMarketBalance) return 0;\\n\\n        return currentMoneyMarketBalance.sub(reserve.lastMoneyMarketBalance);\\n    }\\n\\n    /**\\n     * @dev Returns the borrow interest income of the reserve from the last update\\n     * @param reserve The reserve object\\n     * @return The income from the NFT loan\\n     **/\\n    function getBorrowingInterestDelta(DataTypes.ReserveData memory reserve) internal view returns (uint256) {\\n        uint256 timeDelta = uint256(block.timestamp).sub(reserve.lastUpdateTimestamp);\\n        if (timeDelta == 0) return 0;\\n        return reserve.borrowingInterestPerSecond.mul(timeDelta);\\n    }\\n\\n    /**\\n     * @dev Returns the total borrow balance of the reserve\\n     * @param reserve The reserve object\\n     * @return The total borrow balance\\n     **/\\n    function getTotalBorrowBalance(DataTypes.ReserveData memory reserve) public view returns (uint256) {\\n        return reserve.totalBorrows.add(getBorrowingInterestDelta(reserve).div(WadRayMath.ray()));\\n    }\\n\\n    /**\\n     * @dev Returns the total value locked (TVL) of the reserve\\n     * @param reserve The reserve object\\n     * @return The total value locked (TVL)\\n     **/\\n    function getTVL(DataTypes.ReserveData memory reserve) public view returns (uint256) {\\n        (, , uint256 treasuryIncome, , ) = calculateIncome(reserve, 0);\\n        return treasuryIncome.div(WadRayMath.RAY).add(IOpenSkyOToken(reserve.oTokenAddress).totalSupply());\\n    }\\n\\n    /**\\n     * @dev Returns the borrow rate of the reserve\\n     * @param reserve The reserve object\\n     * @param liquidityAmountToAdd The liquidity amount will be added\\n     * @param liquidityAmountToRemove The liquidity amount will be removed\\n     * @param borrowAmountToAdd The borrow amount will be added\\n     * @param borrowAmountToRemove The borrow amount will be removed\\n     * @return The borrow rate\\n     **/\\n    function getBorrowRate(\\n        DataTypes.ReserveData memory reserve,\\n        uint256 liquidityAmountToAdd,\\n        uint256 liquidityAmountToRemove,\\n        uint256 borrowAmountToAdd,\\n        uint256 borrowAmountToRemove\\n    ) public view returns (uint256) {\\n        uint256 liquidity = getMoneyMarketBalance(reserve);\\n        uint256 totalBorrowBalance = getTotalBorrowBalance(reserve);\\n        return\\n            IOpenSkyInterestRateStrategy(reserve.interestModelAddress).getBorrowRate(\\n                reserve.reserveId,\\n                liquidity.add(totalBorrowBalance).add(liquidityAmountToAdd).sub(liquidityAmountToRemove),\\n                totalBorrowBalance.add(borrowAmountToAdd).sub(borrowAmountToRemove)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xb30264b051bcc6e7a0e7ca3dfe7a44b9db4ce9a4c92593df07438e7314032292\",\"license\":\"MIT\"},\"contracts/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    \\n    // common\\n    string public constant MATH_MULTIPLICATION_OVERFLOW = '100';\\n    string public constant MATH_ADDITION_OVERFLOW = '101';\\n    string public constant MATH_DIVISION_BY_ZERO = '102';\\n\\n    string public constant ETH_TRANSFER_FAILED = '110';\\n    string public constant RECEIVE_NOT_ALLOWED = '111';\\n    string public constant FALLBACK_NOT_ALLOWED = '112';\\n\\n    // settings/acl\\n    string public constant ACL_ONLY_GOVERNANCE_CAN_CALL = '200';\\n    string public constant ACL_ONLY_EMERGENCY_ADMIN_CAN_CALL = '201';\\n    string public constant ACL_ONLY_POOL_ADMIN_CAN_CALL = '202';\\n    string public constant ACL_ONLY_LIQUIDATOR_CAN_CALL = '203';\\n    string public constant ACL_ONLY_LIQUIDATION_OPERATOR_CAN_CALL = '204';\\n    string public constant ACL_ONLY_AIRDROP_OPERATOR_CAN_CALL = '205';\\n    string public constant ACL_ONLY_POOL_CAN_CALL = '206';\\n\\n    // lending & borrowing \\n    // reserve\\n    string public constant RESERVE_DOES_NOT_EXIST = '300';\\n    string public constant RESERVE_LIQUIDITY_INSUFFICIENT = '301';\\n    string public constant RESERVE_INDEX_OVERFLOW = '302';\\n    string public constant RESERVE_SWITCH_MONEY_MARKET_STATE_ERROR = '303';\\n\\n    // token\\n    string public constant AMOUNT_SCALED_IS_ZERO = '310';\\n    string public constant AMOUNT_TRANSFER_OWERFLOW = '311';\\n    \\n    //deposit\\n    string public constant DEPOSIT_AMOUNT_SHOULD_BE_BIGGER_THAN_ZERO = '320';\\n\\n    // withdraw\\n    string public constant WITHDRAW_AMOUNT_NOT_ALLOWED = '321';\\n    string public constant WITHDRAW_LIQUIDITY_NOT_SUFFIENCE = '322';\\n\\n    // borrow\\n    string public constant BORROW_DURATION_NOT_ALLOWED = '330';\\n    string public constant BORROW_AMOUNT_EXCEED_BORROW_LIMIT = '331';\\n    string public constant NFT_ADDRESS_IS_NOT_IN_WHITELIST = '332';\\n\\n    // repay\\n    string public constant REPAY_STATUS_ERROR = '333';\\n    string public constant REPAY_AMOUNT_NOT_ENOUGH = '334';\\n\\n    // extend\\n    string public constant EXTEND_STATUS_ERROR = '335';\\n    string public constant EXTEND_MSG_VALUE_ERROR = '336';\\n\\n    // liquidate\\n    string public constant START_LIQUIDATION_STATUS_ERROR = '360';\\n    string public constant END_LIQUIDATION_STATUS_ERROR = '361';\\n    string public constant END_LIQUIDATION_AMOUNT_ERROR = '362';\\n\\n    // loan\\n    string public constant LOAN_DOES_NOT_EXIST = '400';\\n    string public constant LOAN_SET_STATUS_ERROR = '401';\\n    string public constant LOAN_REPAYER_IS_NOT_OWNER = '402';\\n    string public constant LOAN_LIQUIDATING_STATUS_CAN_NOT_BE_UPDATED = '403';\\n    string public constant LOAN_CALLER_IS_NOT_OWNER = '404';\\n    string public constant LOAN_COLLATERAL_NFT_CAN_NOT_BE_CLAIMED = '405';\\n\\n    string public constant FLASH_CLAIM_EXECUTOR_ERROR = '410';\\n    string public constant FLASH_CLAIM_STATUS_ERROR = '411';\\n\\n    // money market\\n    string public constant MONEY_MARKET_DEPOSIT_AMOUNT_ALLOWED = '500';\\n    string public constant MONEY_MARKET_WITHDRAW_AMOUNT_NOT_ALLOWED = '501';\\n    string public constant MONEY_MARKET_APPROVAL_FAILED = '502';\\n    string public constant MONEY_MARKET_DELEGATE_CALL_ERROR = '503';\\n\\n    // price oracle\\n    string public constant PRICE_ORACLE_ROUND_INTERVAL_CAN_NOT_BE_0 = '600';\\n    string public constant PRICE_ORACLE_HAS_NO_PRICE_FEED = '601';\\n    string public constant PRICE_ORACLE_INCORRECT_TIMESTAMP = '602';\\n    string public constant PRICE_ORACLE_PARAMS_ERROR = '603';\\n}\\n\",\"keccak256\":\"0x0f14f9c13c9fe6dcca2379449db7e6f1a20c236113548432d0351bacc71df76f\",\"license\":\"MIT\"},\"contracts/libraries/math/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport {WadRayMath} from './WadRayMath.sol';\\n\\nlibrary MathUtils {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n     * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate linearly accumulated during the timeDelta, in ray\\n     **/\\n\\n    function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp) external view returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 timeDifference = block.timestamp.sub(uint256(lastUpdateTimestamp));\\n\\n        return (rate.mul(timeDifference) / SECONDS_PER_YEAR).add(WadRayMath.ray());\\n    }\\n\\n    function calculateBorrowInterest(\\n        uint256 borrowRate,\\n        uint256 amount,\\n        uint256 duration\\n    ) external pure returns (uint256) {\\n        return amount.rayMul(borrowRate.rayMul(duration).rayDiv(SECONDS_PER_YEAR));\\n    }\\n\\n    function calculateBorrowInterestPerSecond(uint256 borrowRate, uint256 amount) external pure returns (uint256) {\\n        return amount.rayMul(borrowRate).rayDiv(SECONDS_PER_YEAR);\\n    }\\n\\n    function calculateLoanSupplyRate(\\n        uint256 availableLiquidity,\\n        uint256 totalBorrows,\\n        uint256 borrowRate\\n    ) external pure returns (uint256 loanSupplyRate, uint256 utilizationRate) {\\n        utilizationRate = (totalBorrows == 0 && availableLiquidity == 0)\\n            ? 0\\n            : totalBorrows.rayDiv(availableLiquidity.add(totalBorrows));\\n        loanSupplyRate = utilizationRate.rayMul(borrowRate);\\n    }\\n}\\n\",\"keccak256\":\"0x7885d4c4b6562f8591dacff0c550916530e362574b8ed229c86594a6edfc3c42\",\"license\":\"MIT\"},\"contracts/libraries/math/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../helpers/Errors.sol';\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded half up\\n **/\\n\\nlibrary PercentageMath {\\n  uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\n  uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\n\\n  /**\\n   * @dev Executes a percentage multiplication\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The percentage of value\\n   **/\\n  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    if (value == 0 || percentage == 0) {\\n      return 0;\\n    }\\n\\n    require(\\n      value <= (type(uint256).max - HALF_PERCENT) / percentage,\\n      Errors.MATH_MULTIPLICATION_OVERFLOW\\n    );\\n\\n    return (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\\n  }\\n\\n  /**\\n   * @dev Executes a percentage division\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The value divided the percentage\\n   **/\\n  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    require(percentage != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfPercentage = percentage / 2;\\n\\n    require(\\n      value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR,\\n      Errors.MATH_MULTIPLICATION_OVERFLOW\\n    );\\n\\n    return (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\n  }\\n}\\n\",\"keccak256\":\"0xe8333e1a929245e4198f87645eae3fc8749e8e29f505427b38ec8ca035434953\",\"license\":\"MIT\"},\"contracts/libraries/math/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {Errors} from '../helpers/Errors.sol';\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @return One ray, 1e27\\n     **/\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    /**\\n     * @return One wad, 1e18\\n     **/\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e27/2\\n     **/\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e18/2\\n     **/\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     **/\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfWAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * b + halfWAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     **/\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * WAD + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfRAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * b + halfRAY) / RAY;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, truncating the mantissa\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMulTruncate(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return (a * b) / RAY;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * RAY + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, truncating the mantissa\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDivTruncate(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        return (a * RAY) / b;\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @param a Ray\\n     * @return a casted to wad, rounded half up to the nearest wad\\n     **/\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n        uint256 result = halfRatio + a;\\n        require(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\\n\\n        return result / WAD_RAY_RATIO;\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @param a Wad\\n     * @return a converted in ray\\n     **/\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        uint256 result = a * WAD_RAY_RATIO;\\n        require(result / WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4bf6b9a00c5e9938726d173f11b56de8edd92e17593e4dfa61a3ce7336756c6b\",\"license\":\"MIT\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        uint256 reserveId;\\n        address underlyingAsset;\\n        address oTokenAddress;\\n        address moneyMarketAddress;\\n        uint128 lastSupplyIndex;\\n        uint256 borrowingInterestPerSecond;\\n        uint256 lastMoneyMarketBalance;\\n        uint40 lastUpdateTimestamp;\\n        uint256 totalBorrows;\\n        address interestModelAddress;\\n        uint256 treasuryFactor;\\n        bool isMoneyMarketOn;\\n    }\\n\\n    struct LoanData {\\n        uint256 reserveId;\\n        address nftAddress;\\n        uint256 tokenId;\\n        address borrower;\\n        uint256 amount;\\n        uint128 borrowRate;\\n        uint128 interestPerSecond;\\n        uint40 borrowBegin;\\n        uint40 borrowDuration;\\n        uint40 borrowOverdueTime;\\n        uint40 liquidatableTime;\\n        uint40 extendableTime;\\n        uint40 borrowEnd;\\n        LoanStatus status;\\n    }\\n\\n    enum LoanStatus {\\n        NONE,\\n        BORROWING,\\n        EXTENDABLE,\\n        OVERDUE,\\n        LIQUIDATABLE,\\n        LIQUIDATING\\n    }\\n\\n    struct WhitelistInfo {\\n        bool enabled;\\n        string name;\\n        string symbol;\\n        uint256 LTV;\\n        uint256 minBorrowDuration;\\n        uint256 maxBorrowDuration;\\n        uint256 extendableDuration;\\n        uint256 overdueDuration;\\n    }\\n}\\n\",\"keccak256\":\"0x487cd1dedb3146da46144bc8f0e5b970c5173efa8c19700184b8207c1ee3fc55\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61193761003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100b35760003560e01c8063564f0dfb1161007b578063564f0dfb1461015f578063738a264e1461017257806395705c5f14610192578063c81b34ee146101b2578063dfdafca3146101c5578063fe981a4f146101d857600080fd5b80630fbb49c4146100b85780631858ace8146100da578063328eb491146100fa578063395e90551461011f578063543daabe1461013f575b600080fd5b8180156100c457600080fd5b506100d86100d3366004611528565b6101f8565b005b8180156100e657600080fd5b506100d86100f5366004611591565b610397565b61010d61010836600461169b565b610457565b60405190815260200160405180910390f35b81801561012b57600080fd5b506100d861013a3660046116b8565b61048d565b81801561014b57600080fd5b506100d861015a366004611591565b61058d565b61010d61016d3660046116fe565b6105c1565b81801561017e57600080fd5b506100d861018d366004611717565b610686565b81801561019e57600080fd5b506100d86101ad366004611743565b61075a565b61010d6101c036600461169b565b61083b565b61010d6101d3366004611782565b6108db565b8180156101e457600080fd5b506100d86101f33660046116b8565b6109ae565b6102028782610a96565b610227878660c001516001600160801b03168860c001516001600160801b0316610cad565b610232878484610cd5565b60028701546001600160a01b031683156102c45760028801546001890154610269916001600160a01b039182169133911687610da9565b60405163b6b55f2560e01b8152600481018590526001600160a01b0382169063b6b55f2590602401600060405180830381600087803b1580156102ab57600080fd5b505af11580156102bf573d6000803e3d6000fd5b505050505b8215610331576060860151604051627b8a6760e11b8152600481018590526001600160a01b0391821660248201529082169062f714ce90604401600060405180830381600087803b15801561031857600080fd5b505af115801561032c573d6000803e3d6000fd5b505050505b600061034e87608001518a60080154610e0990919063ffffffff16565b90506000610369878a60800151610e0990919063ffffffff16565b9050808211610379576000610383565b61038381836117e0565b8a6008018190555050505050505050505050565b6103a2826000610a96565b6103bb828260c001516001600160801b03166000610cad565b6103cb8260008360800151610cd5565b60028201546080820151604051627b8a6760e11b815260048101919091523360248201526001600160a01b0390911690819062f714ce90604401600060405180830381600087803b15801561041f57600080fd5b505af1158015610433573d6000803e3d6000fd5b505050506080820151600884015461044a91610e09565b8360080181905550505050565b600061048761047b6b033b2e3c9fd0803ce800000061047585610e15565b90610e55565b61010084015190610e09565b92915050565b610498846000610a96565b6104a484600084610cd5565b6002840154600480860154604051637a94c56560e11b81526001600160a01b0387811693820193909352602481018690526001600160801b039091166044820152911690819063f5298aca90606401600060405180830381600087803b15801561050d57600080fd5b505af1158015610521573d6000803e3d6000fd5b5050604051627b8a6760e11b8152600481018690526001600160a01b0385811660248301528416925062f714ce91506044015b600060405180830381600087803b15801561056e57600080fd5b505af1158015610582573d6000803e3d6000fd5b505050505050505050565b610598826000610a96565b6105a482600080610cd5565b6105bd8260008360c001516001600160801b0316610cad565b5050565b60408051610180810182528254815260018301546001600160a01b039081166020830152600284015481169282019290925260038301548216606082015260048301546001600160801b03166080820152600583015460a0820152600683015460c0820152600783015464ffffffffff1660e082015260088301546101008201526009830154909116610120820152600a820154610140820152600b82015460ff161515610160820152600090819061067a9082610e61565b50929695505050505050565b610699836106948484610f84565b610a96565b6106a583836000610cd5565b600283015460018401546106c8916001600160a01b039182169133911685610da9565b600283015460405163b6b55f2560e01b8152600481018490526001600160a01b0390911690819063b6b55f2590602401600060405180830381600087803b15801561071257600080fd5b505af1158015610726573d6000803e3d6000fd5b505050508184600801541161073c57600061074c565b81846008015461074c91906117e0565b846008018190555050505050565b610768846106948484610f84565b6107818460008560c001516001600160801b0316610cad565b61078d84836000610cd5565b600284015460018501546001600160a01b03918216916107b09116338386610da9565b60405163b6b55f2560e01b8152600481018490526001600160a01b0382169063b6b55f2590602401600060405180830381600087803b1580156107f257600080fd5b505af1158015610806573d6000803e3d6000fd5b505050508185600801541161081c57600061082c565b81856008015461082c91906117e0565b85600801819055505050505050565b600080610849836000610e61565b5050925050506108d483604001516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b891906117f7565b6108ce836b033b2e3c9fd0803ce8000000610e55565b90610e09565b9392505050565b6000806108e787610f90565b905060006108f488610457565b61012089015189519192506001600160a01b0316906315f2405390610927896109218c6108ce8989610e09565b90610f84565b61093588610921878c610e09565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401602060405180830381865afa15801561097e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a291906117f7565b98975050505050505050565b6109b9846000610a96565b6109c584836000610cd5565b6002840154600480860154604051630ab714fb60e11b81526001600160a01b0385811693820193909352602481018690526001600160801b039091166044820152911690819063156e29f690606401600060405180830381600087803b158015610a2e57600080fd5b505af1158015610a42573d6000803e3d6000fd5b50505060028601546001870154610a6992506001600160a01b039081169187911686610da9565b60405163b6b55f2560e01b8152600481018490526001600160a01b0382169063b6b55f2590602401610554565b60408051610180810182528354815260018401546001600160a01b039081166020830152600285015481169282019290925260038401548216606082015260048401546001600160801b03166080820152600584015460a0820152600684015460c0820152600784015464ffffffffff1660e082015260088401546101008201526009840154909116610120820152600a830154610140820152600b83015460ff161515610160820152600090819081908190610b539086610e61565b5060408051808201909152600381526219981960e91b6020820152939750919550935091506001600160801b03851115610ba95760405162461bcd60e51b8152600401610ba0919061183c565b60405180910390fd5b506004860180546fffffffffffffffffffffffffffffffff19166001600160801b038616179055610be86b033b2e3c9fd0803ce80000005b8390610e55565b91508115610c64576002860154600480880154604051637df5bd3b60e01b81529182018590526001600160801b031660248201526001600160a01b0390911690637df5bd3b90604401600060405180830381600087803b158015610c4b57600080fd5b505af1158015610c5f573d6000803e3d6000fd5b505050505b610c87610c7c6b033b2e3c9fd0803ce8000000610be1565b600888015490610e09565b60088701555050506007909201805464ffffffffff19164264ffffffffff161790555050565b610cc881610921848660050154610e0990919063ffffffff16565b8360050181905550505050565b60408051610180810182528454815260018501546001600160a01b039081166020830152600286015481169282019290925260038501548216606082015260048501546001600160801b03166080820152600585015460a0820152600685015460c0820152600785015464ffffffffff1660e082015260088501546101008201526009850154909116610120820152600a840154610140820152600b84015460ff161515610160820152600090610d8b90610f90565b9050610d9b826109218386610e09565b846006018190555050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610e0390859061105c565b50505050565b60006108d4828461186f565b600080610e368360e0015164ffffffffff1642610f8490919063ffffffff16565b905080610e465750600092915050565b60a08301516108d49082611133565b60006108d48284611887565b600080808080610e866b033b2e3c9fd0803ce8000000610e808961113f565b90611133565b9050610e9187610e15565b91506000610eb1836108ce84818b6b033b2e3c9fd0803ce8000000611133565b9050610ecb886101400151826111bd90919063ffffffff16565b9350610ed78185610f84565b945087608001516001600160801b03169550600088604001516001600160a01b031663b1bf962d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5191906117f7565b90508015610f78576080890151610f75906001600160801b03166108ce8884610e55565b96505b50509295509295909350565b60006108d482846117e0565b60008161016001511561101f5760608201516020830151604080850151905163d4fac45d60e01b81526001600160a01b039283166004820152908216602482015291169063d4fac45d906044015b602060405180830381865afa158015610ffb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048791906117f7565b602082015160408084015190516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401610fde565b919050565b60006110b1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112659092919063ffffffff16565b80519091501561112e57808060200190518101906110cf91906118a9565b61112e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610ba0565b505050565b60006108d482846118c6565b6000806111608360e0015164ffffffffff1642610f8490919063ffffffff16565b9050806111705750600092915050565b60c08301516111825750600092915050565b600061118d84610f90565b90508360c001518110156111a5575060009392505050565b60c08401516111b5908290610f84565b949350505050565b60008215806111ca575081155b156111d757506000610487565b816111e56002612710611887565b6111f1906000196117e0565b6111fb9190611887565b8311156040518060400160405280600381526020016203130360ec1b815250906112385760405162461bcd60e51b8152600401610ba0919061183c565b50612710611247600282611887565b61125184866118c6565b61125b919061186f565b6108d49190611887565b60606111b5848460008585843b6112be5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ba0565b600080866001600160a01b031685876040516112da91906118e5565b60006040518083038185875af1925050503d8060008114611317576040519150601f19603f3d011682016040523d82523d6000602084013e61131c565b606091505b509150915061132c828286611337565b979650505050505050565b606083156113465750816108d4565b8251156113565782518084602001fd5b8160405162461bcd60e51b8152600401610ba0919061183c565b6040516101c0810167ffffffffffffffff811182821017156113a257634e487b7160e01b600052604160045260246000fd5b60405290565b604051610180810167ffffffffffffffff811182821017156113a257634e487b7160e01b600052604160045260246000fd5b80356001600160a01b038116811461105757600080fd5b80356001600160801b038116811461105757600080fd5b803564ffffffffff8116811461105757600080fd5b80356006811061105757600080fd5b60006101c0828403121561143f57600080fd5b611447611370565b905081358152611459602083016113da565b602082015260408201356040820152611474606083016113da565b60608201526080820135608082015261148f60a083016113f1565b60a08201526114a060c083016113f1565b60c08201526114b160e08301611408565b60e08201526101006114c4818401611408565b908201526101206114d6838201611408565b908201526101406114e8838201611408565b908201526101606114fa838201611408565b9082015261018061150c838201611408565b908201526101a061151e83820161141d565b9082015292915050565b6000806000806000806000610420888a03121561154457600080fd5b873596506115558960208a0161142c565b9550611565896101e08a0161142c565b969995985095966103a081013596506103c0810135956103e08201359550610400909101359350915050565b6000806101e083850312156115a557600080fd5b823591506115b6846020850161142c565b90509250929050565b80151581146115cd57600080fd5b50565b8035611057816115bf565b600061018082840312156115ee57600080fd5b6115f66113a8565b905081358152611608602083016113da565b6020820152611619604083016113da565b604082015261162a606083016113da565b606082015261163b608083016113f1565b608082015260a082013560a082015260c082013560c082015261166060e08301611408565b60e0820152610100828101359082015261012061167e8184016113da565b90820152610140828101359082015261016061151e8184016115d0565b600061018082840312156116ae57600080fd5b6108d483836115db565b600080600080608085870312156116ce57600080fd5b843593506116de602086016113da565b9250604085013591506116f3606086016113da565b905092959194509250565b60006020828403121561171057600080fd5b5035919050565b60008060006060848603121561172c57600080fd5b505081359360208301359350604090920135919050565b600080600080610220858703121561175a57600080fd5b8435935061176b866020870161142c565b93969395505050506101e082013591610200013590565b6000806000806000610200868803121561179b57600080fd5b6117a587876115db565b9761018087013597506101a0870135966101c081013596506101e00135945092505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156117f2576117f26117ca565b500390565b60006020828403121561180957600080fd5b5051919050565b60005b8381101561182b578181015183820152602001611813565b83811115610e035750506000910152565b602081526000825180602084015261185b816040850160208701611810565b601f01601f19169190910160400192915050565b60008219821115611882576118826117ca565b500190565b6000826118a457634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156118bb57600080fd5b81516108d4816115bf565b60008160001904831182151516156118e0576118e06117ca565b500290565b600082516118f7818460208701611810565b919091019291505056fea2646970667358221220ea68b14c1bfc368dd90e7a07c0153bc655d88fd777987895a769cda1bc9467b964736f6c634300080a0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100b35760003560e01c8063564f0dfb1161007b578063564f0dfb1461015f578063738a264e1461017257806395705c5f14610192578063c81b34ee146101b2578063dfdafca3146101c5578063fe981a4f146101d857600080fd5b80630fbb49c4146100b85780631858ace8146100da578063328eb491146100fa578063395e90551461011f578063543daabe1461013f575b600080fd5b8180156100c457600080fd5b506100d86100d3366004611528565b6101f8565b005b8180156100e657600080fd5b506100d86100f5366004611591565b610397565b61010d61010836600461169b565b610457565b60405190815260200160405180910390f35b81801561012b57600080fd5b506100d861013a3660046116b8565b61048d565b81801561014b57600080fd5b506100d861015a366004611591565b61058d565b61010d61016d3660046116fe565b6105c1565b81801561017e57600080fd5b506100d861018d366004611717565b610686565b81801561019e57600080fd5b506100d86101ad366004611743565b61075a565b61010d6101c036600461169b565b61083b565b61010d6101d3366004611782565b6108db565b8180156101e457600080fd5b506100d86101f33660046116b8565b6109ae565b6102028782610a96565b610227878660c001516001600160801b03168860c001516001600160801b0316610cad565b610232878484610cd5565b60028701546001600160a01b031683156102c45760028801546001890154610269916001600160a01b039182169133911687610da9565b60405163b6b55f2560e01b8152600481018590526001600160a01b0382169063b6b55f2590602401600060405180830381600087803b1580156102ab57600080fd5b505af11580156102bf573d6000803e3d6000fd5b505050505b8215610331576060860151604051627b8a6760e11b8152600481018590526001600160a01b0391821660248201529082169062f714ce90604401600060405180830381600087803b15801561031857600080fd5b505af115801561032c573d6000803e3d6000fd5b505050505b600061034e87608001518a60080154610e0990919063ffffffff16565b90506000610369878a60800151610e0990919063ffffffff16565b9050808211610379576000610383565b61038381836117e0565b8a6008018190555050505050505050505050565b6103a2826000610a96565b6103bb828260c001516001600160801b03166000610cad565b6103cb8260008360800151610cd5565b60028201546080820151604051627b8a6760e11b815260048101919091523360248201526001600160a01b0390911690819062f714ce90604401600060405180830381600087803b15801561041f57600080fd5b505af1158015610433573d6000803e3d6000fd5b505050506080820151600884015461044a91610e09565b8360080181905550505050565b600061048761047b6b033b2e3c9fd0803ce800000061047585610e15565b90610e55565b61010084015190610e09565b92915050565b610498846000610a96565b6104a484600084610cd5565b6002840154600480860154604051637a94c56560e11b81526001600160a01b0387811693820193909352602481018690526001600160801b039091166044820152911690819063f5298aca90606401600060405180830381600087803b15801561050d57600080fd5b505af1158015610521573d6000803e3d6000fd5b5050604051627b8a6760e11b8152600481018690526001600160a01b0385811660248301528416925062f714ce91506044015b600060405180830381600087803b15801561056e57600080fd5b505af1158015610582573d6000803e3d6000fd5b505050505050505050565b610598826000610a96565b6105a482600080610cd5565b6105bd8260008360c001516001600160801b0316610cad565b5050565b60408051610180810182528254815260018301546001600160a01b039081166020830152600284015481169282019290925260038301548216606082015260048301546001600160801b03166080820152600583015460a0820152600683015460c0820152600783015464ffffffffff1660e082015260088301546101008201526009830154909116610120820152600a820154610140820152600b82015460ff161515610160820152600090819061067a9082610e61565b50929695505050505050565b610699836106948484610f84565b610a96565b6106a583836000610cd5565b600283015460018401546106c8916001600160a01b039182169133911685610da9565b600283015460405163b6b55f2560e01b8152600481018490526001600160a01b0390911690819063b6b55f2590602401600060405180830381600087803b15801561071257600080fd5b505af1158015610726573d6000803e3d6000fd5b505050508184600801541161073c57600061074c565b81846008015461074c91906117e0565b846008018190555050505050565b610768846106948484610f84565b6107818460008560c001516001600160801b0316610cad565b61078d84836000610cd5565b600284015460018501546001600160a01b03918216916107b09116338386610da9565b60405163b6b55f2560e01b8152600481018490526001600160a01b0382169063b6b55f2590602401600060405180830381600087803b1580156107f257600080fd5b505af1158015610806573d6000803e3d6000fd5b505050508185600801541161081c57600061082c565b81856008015461082c91906117e0565b85600801819055505050505050565b600080610849836000610e61565b5050925050506108d483604001516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b891906117f7565b6108ce836b033b2e3c9fd0803ce8000000610e55565b90610e09565b9392505050565b6000806108e787610f90565b905060006108f488610457565b61012089015189519192506001600160a01b0316906315f2405390610927896109218c6108ce8989610e09565b90610f84565b61093588610921878c610e09565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401602060405180830381865afa15801561097e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a291906117f7565b98975050505050505050565b6109b9846000610a96565b6109c584836000610cd5565b6002840154600480860154604051630ab714fb60e11b81526001600160a01b0385811693820193909352602481018690526001600160801b039091166044820152911690819063156e29f690606401600060405180830381600087803b158015610a2e57600080fd5b505af1158015610a42573d6000803e3d6000fd5b50505060028601546001870154610a6992506001600160a01b039081169187911686610da9565b60405163b6b55f2560e01b8152600481018490526001600160a01b0382169063b6b55f2590602401610554565b60408051610180810182528354815260018401546001600160a01b039081166020830152600285015481169282019290925260038401548216606082015260048401546001600160801b03166080820152600584015460a0820152600684015460c0820152600784015464ffffffffff1660e082015260088401546101008201526009840154909116610120820152600a830154610140820152600b83015460ff161515610160820152600090819081908190610b539086610e61565b5060408051808201909152600381526219981960e91b6020820152939750919550935091506001600160801b03851115610ba95760405162461bcd60e51b8152600401610ba0919061183c565b60405180910390fd5b506004860180546fffffffffffffffffffffffffffffffff19166001600160801b038616179055610be86b033b2e3c9fd0803ce80000005b8390610e55565b91508115610c64576002860154600480880154604051637df5bd3b60e01b81529182018590526001600160801b031660248201526001600160a01b0390911690637df5bd3b90604401600060405180830381600087803b158015610c4b57600080fd5b505af1158015610c5f573d6000803e3d6000fd5b505050505b610c87610c7c6b033b2e3c9fd0803ce8000000610be1565b600888015490610e09565b60088701555050506007909201805464ffffffffff19164264ffffffffff161790555050565b610cc881610921848660050154610e0990919063ffffffff16565b8360050181905550505050565b60408051610180810182528454815260018501546001600160a01b039081166020830152600286015481169282019290925260038501548216606082015260048501546001600160801b03166080820152600585015460a0820152600685015460c0820152600785015464ffffffffff1660e082015260088501546101008201526009850154909116610120820152600a840154610140820152600b84015460ff161515610160820152600090610d8b90610f90565b9050610d9b826109218386610e09565b846006018190555050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610e0390859061105c565b50505050565b60006108d4828461186f565b600080610e368360e0015164ffffffffff1642610f8490919063ffffffff16565b905080610e465750600092915050565b60a08301516108d49082611133565b60006108d48284611887565b600080808080610e866b033b2e3c9fd0803ce8000000610e808961113f565b90611133565b9050610e9187610e15565b91506000610eb1836108ce84818b6b033b2e3c9fd0803ce8000000611133565b9050610ecb886101400151826111bd90919063ffffffff16565b9350610ed78185610f84565b945087608001516001600160801b03169550600088604001516001600160a01b031663b1bf962d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5191906117f7565b90508015610f78576080890151610f75906001600160801b03166108ce8884610e55565b96505b50509295509295909350565b60006108d482846117e0565b60008161016001511561101f5760608201516020830151604080850151905163d4fac45d60e01b81526001600160a01b039283166004820152908216602482015291169063d4fac45d906044015b602060405180830381865afa158015610ffb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048791906117f7565b602082015160408084015190516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401610fde565b919050565b60006110b1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112659092919063ffffffff16565b80519091501561112e57808060200190518101906110cf91906118a9565b61112e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610ba0565b505050565b60006108d482846118c6565b6000806111608360e0015164ffffffffff1642610f8490919063ffffffff16565b9050806111705750600092915050565b60c08301516111825750600092915050565b600061118d84610f90565b90508360c001518110156111a5575060009392505050565b60c08401516111b5908290610f84565b949350505050565b60008215806111ca575081155b156111d757506000610487565b816111e56002612710611887565b6111f1906000196117e0565b6111fb9190611887565b8311156040518060400160405280600381526020016203130360ec1b815250906112385760405162461bcd60e51b8152600401610ba0919061183c565b50612710611247600282611887565b61125184866118c6565b61125b919061186f565b6108d49190611887565b60606111b5848460008585843b6112be5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ba0565b600080866001600160a01b031685876040516112da91906118e5565b60006040518083038185875af1925050503d8060008114611317576040519150601f19603f3d011682016040523d82523d6000602084013e61131c565b606091505b509150915061132c828286611337565b979650505050505050565b606083156113465750816108d4565b8251156113565782518084602001fd5b8160405162461bcd60e51b8152600401610ba0919061183c565b6040516101c0810167ffffffffffffffff811182821017156113a257634e487b7160e01b600052604160045260246000fd5b60405290565b604051610180810167ffffffffffffffff811182821017156113a257634e487b7160e01b600052604160045260246000fd5b80356001600160a01b038116811461105757600080fd5b80356001600160801b038116811461105757600080fd5b803564ffffffffff8116811461105757600080fd5b80356006811061105757600080fd5b60006101c0828403121561143f57600080fd5b611447611370565b905081358152611459602083016113da565b602082015260408201356040820152611474606083016113da565b60608201526080820135608082015261148f60a083016113f1565b60a08201526114a060c083016113f1565b60c08201526114b160e08301611408565b60e08201526101006114c4818401611408565b908201526101206114d6838201611408565b908201526101406114e8838201611408565b908201526101606114fa838201611408565b9082015261018061150c838201611408565b908201526101a061151e83820161141d565b9082015292915050565b6000806000806000806000610420888a03121561154457600080fd5b873596506115558960208a0161142c565b9550611565896101e08a0161142c565b969995985095966103a081013596506103c0810135956103e08201359550610400909101359350915050565b6000806101e083850312156115a557600080fd5b823591506115b6846020850161142c565b90509250929050565b80151581146115cd57600080fd5b50565b8035611057816115bf565b600061018082840312156115ee57600080fd5b6115f66113a8565b905081358152611608602083016113da565b6020820152611619604083016113da565b604082015261162a606083016113da565b606082015261163b608083016113f1565b608082015260a082013560a082015260c082013560c082015261166060e08301611408565b60e0820152610100828101359082015261012061167e8184016113da565b90820152610140828101359082015261016061151e8184016115d0565b600061018082840312156116ae57600080fd5b6108d483836115db565b600080600080608085870312156116ce57600080fd5b843593506116de602086016113da565b9250604085013591506116f3606086016113da565b905092959194509250565b60006020828403121561171057600080fd5b5035919050565b60008060006060848603121561172c57600080fd5b505081359360208301359350604090920135919050565b600080600080610220858703121561175a57600080fd5b8435935061176b866020870161142c565b93969395505050506101e082013591610200013590565b6000806000806000610200868803121561179b57600080fd5b6117a587876115db565b9761018087013597506101a0870135966101c081013596506101e00135945092505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156117f2576117f26117ca565b500390565b60006020828403121561180957600080fd5b5051919050565b60005b8381101561182b578181015183820152602001611813565b83811115610e035750506000910152565b602081526000825180602084015261185b816040850160208701611810565b601f01601f19169190910160400192915050565b60008219821115611882576118826117ca565b500190565b6000826118a457634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156118bb57600080fd5b81516108d4816115bf565b60008160001904831182151516156118e0576118e06117ca565b500290565b600082516118f7818460208701611810565b919091019291505056fea2646970667358221220ea68b14c1bfc368dd90e7a07c0153bc655d88fd777987895a769cda1bc9467b964736f6c634300080a0033",
  "libraries": {
    "Errors": "0xb50AB0f5Ebe00cB99F9843FE6AcA79477aa264fc",
    "MathUtils": "0x4648bb80A8d14C8777321F1b4cbb1B016696102d",
    "PercentageMath": "0xa22eF7fA838086378C1bae4aB77915407a126D9d",
    "WadRayMath": "0xc62256A873f07278Ec9d3Ac36BD7F10b86fE7ac4",
    "DataTypes": "0x9397220974f87949543b079A022A88B9b41a8380"
  },
  "devdoc": {
    "author": "OpenSky Labs",
    "kind": "dev",
    "methods": {
      "borrow(DataTypes.ReserveData storage,DataTypes.LoanData)": {
        "details": "Implements the borrow feature.",
        "params": {
          "loan": "the loan data*"
        }
      },
      "deposit(DataTypes.ReserveData storage,address,uint256,address)": {
        "details": "Implements the deposit feature.",
        "params": {
          "amount": "The amount of deposit",
          "onBehalfOf": "The address that will receive otokens*",
          "sender": "The address that called deposit function"
        }
      },
      "endLiquidation(DataTypes.ReserveData storage,uint256,uint256)": {
        "details": "Implements the start liquidation feature.",
        "params": {
          "amount": "The amount of token paid",
          "borrowBalance": "The borrow balance of loan*"
        }
      },
      "extend(DataTypes.ReserveData storage,DataTypes.LoanData,DataTypes.LoanData,uint256,uint256,uint256,uint256)": {
        "details": "Implements the extend feature.",
        "params": {
          "additionalIncome": "The additional income*",
          "borrowInterestOfOldLoan": "The borrow interest of old loan",
          "ethIn": "The amount of ETH that will be deposited",
          "ethOut": "The amount of ETH that will be withdrawn",
          "newLoan": "The data of new loan",
          "oldLoan": "The data of old loan"
        }
      },
      "getBorrowRate(DataTypes.ReserveData,uint256,uint256,uint256,uint256)": {
        "details": "Returns the borrow rate of the reserve",
        "params": {
          "borrowAmountToAdd": "The borrow amount will be added",
          "borrowAmountToRemove": "The borrow amount will be removed",
          "liquidityAmountToAdd": "The liquidity amount will be added",
          "liquidityAmountToRemove": "The liquidity amount will be removed",
          "reserve": "The reserve object"
        },
        "returns": {
          "_0": "The borrow rate*"
        }
      },
      "getNormalizedIncome(DataTypes.ReserveData storage)": {
        "details": "Returns the ongoing normalized income for the reserve A value of 1e27 means there is no income. As time passes, the income is accrued A value of 2*1e27 means for each unit of asset one unit of income has been accrued",
        "params": {
          "reserve": "The reserve object"
        },
        "returns": {
          "_0": "The normalized income. expressed in ray*"
        }
      },
      "getTVL(DataTypes.ReserveData)": {
        "details": "Returns the total value locked (TVL) of the reserve",
        "params": {
          "reserve": "The reserve object"
        },
        "returns": {
          "_0": "The total value locked (TVL)*"
        }
      },
      "getTotalBorrowBalance(DataTypes.ReserveData)": {
        "details": "Returns the total borrow balance of the reserve",
        "params": {
          "reserve": "The reserve object"
        },
        "returns": {
          "_0": "The total borrow balance*"
        }
      },
      "repay(DataTypes.ReserveData storage,DataTypes.LoanData,uint256,uint256)": {
        "details": "Implements the repay function.",
        "params": {
          "amount": "The amount that will be repaid, including penalty",
          "borrowBalance": "The borrow balance*",
          "loan": "The loan data"
        }
      },
      "startLiquidation(DataTypes.ReserveData storage,DataTypes.LoanData)": {
        "details": "Implements liquidation mechanism.",
        "params": {
          "loan": "Loan data*"
        }
      },
      "withdraw(DataTypes.ReserveData storage,address,uint256,address)": {
        "details": "Implements the withdrawal feature.",
        "params": {
          "amount": "The withdrawal amount",
          "onBehalfOf": "The address that will receive token*",
          "sender": "The address that called withdraw function"
        }
      }
    },
    "title": "ReserveLogic library",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Implements the logic to update the reserves state",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}