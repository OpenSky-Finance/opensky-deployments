{
  "address": "0xa0dC8232d98A04617Fd6153d8c366672472d31A7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IWETH",
          "name": "weth",
          "type": "address"
        },
        {
          "internalType": "contract IOpenSkySettings",
          "name": "settings",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "nftAssets",
          "type": "address[]"
        }
      ],
      "name": "AuthorizeLendingPoolNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "AuthorizeLendingPoolWETH",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyEtherTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyTokenTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "Extend",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Received",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "SETTINGS",
      "outputs": [
        {
          "internalType": "contract IOpenSkySettings",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "nftAssets",
          "type": "address[]"
        }
      ],
      "name": "authorizeLendingPoolNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authorizeLendingPoolWETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "referralCode",
          "type": "uint16"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyEtherTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyTokenTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "extend",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x91db65d323e85a413238128b77c57211ddf0aaca9ab6aad18cdc7696e4ec00c8",
  "receipt": {
    "to": null,
    "from": "0x218513C58A4781a5B88De6230caA29aBCe2Ccd75",
    "contractAddress": "0xa0dC8232d98A04617Fd6153d8c366672472d31A7",
    "transactionIndex": 63,
    "gasUsed": "1821866",
    "logsBloom": "0x
    "blockHash": "0xcfbcb1ce00f73af492d20881a309d0ed6533889c3751809ee54215e3d7d75934",
    "transactionHash": "0x91db65d323e85a413238128b77c57211ddf0aaca9ab6aad18cdc7696e4ec00c8",
    "logs": [
      {
        "transactionIndex": 63,
        "blockNumber": 31111075,
        "transactionHash": "0x91db65d323e85a413238128b77c57211ddf0aaca9ab6aad18cdc7696e4ec00c8",
        "address": "0xa0dC8232d98A04617Fd6153d8c366672472d31A7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000218513c58a4781a5b88de6230caa29abce2ccd75"
        ],
        "data": "0x",
        "logIndex": 225,
        "blockHash": "0xcfbcb1ce00f73af492d20881a309d0ed6533889c3751809ee54215e3d7d75934"
      },
      {
        "transactionIndex": 63,
        "blockNumber": 31111075,
        "transactionHash": "0x91db65d323e85a413238128b77c57211ddf0aaca9ab6aad18cdc7696e4ec00c8",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000218513c58a4781a5b88de6230caa29abce2ccd75",
          "0x000000000000000000000000c35649ae99be820c7b200a0add09b96d7032d232"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000133362a09a20f500000000000000000000000000000000000000000000000000b89a220d286eae50000000000000000000000000000000000000000000005e47decf5ec4f11c0480000000000000000000000000000000000000000000000000a566bf6c8e4db950000000000000000000000000000000000000000000005e47f202c1658b3cf98",
        "logIndex": 226,
        "blockHash": "0xcfbcb1ce00f73af492d20881a309d0ed6533889c3751809ee54215e3d7d75934"
      }
    ],
    "blockNumber": 31111075,
    "cumulativeGasUsed": "11920759",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270",
    "0x3278e9b9E69C15ee013C0a0ad56845F9Dff68878"
  ],
  "solcInputHash": "0ca3f66e9bd5de21ebb7765f6cea382a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"contract IOpenSkySettings\",\"name\":\"settings\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"nftAssets\",\"type\":\"address[]\"}],\"name\":\"AuthorizeLendingPoolNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"AuthorizeLendingPoolWETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyEtherTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyTokenTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"Extend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"SETTINGS\",\"outputs\":[{\"internalType\":\"contract IOpenSkySettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"nftAssets\",\"type\":\"address[]\"}],\"name\":\"authorizeLendingPoolNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authorizeLendingPoolWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyEtherTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"extend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"authorizeLendingPoolNFT(address[])\":{\"details\":\"Only callable by the owner\",\"params\":{\"nftAssets\":\"addresses of nft assets*\"}},\"authorizeLendingPoolWETH()\":{\"details\":\"Only callable by the owner*\"},\"borrow(uint256,uint256,uint256,address,uint256,address)\":{\"details\":\"Borrows ETH from reserve using an NFT as collateral and will receive a loan NFT as receipt.\",\"params\":{\"amount\":\"amount of ETH user will borrow\",\"duration\":\"The desired duration of the loan\",\"nftAddress\":\"The collateral NFT address\",\"onBehalfOf\":\"address of the user who will receive ETH and loan NFT.\",\"reserveId\":\"The ID of the reserve\",\"tokenId\":\"The ID of the NFT\"}},\"constructor\":{\"details\":\"Sets the WETH address and the OpenSkySettings address.\",\"params\":{\"weth\":\"Address of the Wrapped Ether contract*\"}},\"deposit(uint256,address,uint16)\":{\"details\":\"deposits WETH into the reserve, using native ETH. A corresponding amount of the overlying asset (aTokens) is minted.\",\"params\":{\"onBehalfOf\":\"address of the user who will receive the aTokens representing the deposit\",\"referralCode\":\"integrators are assigned a referral code and can potentially receive rewards.*\",\"reserveId\":\"address of the targeted underlying lending pool\"}},\"emergencyEtherTransfer(address,uint256)\":{\"details\":\"transfer native Ether from the utility contract, for native Ether recovery in case of stuck Ether due selfdestructs or transfer ether to pre-computed contract address before deployment.\",\"params\":{\"amount\":\"amount to send\",\"to\":\"recipient of the transfer\"}},\"emergencyTokenTransfer(address,address,uint256)\":{\"details\":\"transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\",\"params\":{\"amount\":\"amount to send\",\"to\":\"recipient of the transfer\",\"token\":\"token to transfer\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"repay(uint256)\":{\"details\":\"repays a borrow on the WETH reserve, for the specified amount (or for the whole amount, if uint256(-1) is specified).\",\"params\":{\"loanId\":\"the id of reserve\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256,uint256,address)\":{\"details\":\"withdraws the WETH _reserves of msg.sender.\",\"params\":{\"amount\":\"amount of aWETH to withdraw and receive native ETH\",\"onBehalfOf\":\"address of the user who will receive native ETH\",\"reserveId\":\"address of the targeted underlying lending pool\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"authorizeLendingPoolNFT(address[])\":{\"notice\":\"Infinite NFT approves OpenSkyPool contract.\"},\"authorizeLendingPoolWETH()\":{\"notice\":\"Infinite weth approves OpenSkyPool contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/misc/OpenSkyWETHGateway.sol\":\"OpenSkyWETHGateway\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x8756c97d6004b1ae21517a013bdec72fbf30be7852afb2f395871d280131b250\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/dependencies/weth/IWETH.sol\":{\"content\":\"pragma solidity 0.8.10;\\n\\ninterface IWETH {\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x58e84c715a8587d2685d905f79018c85ff42b628f5a8ca4c115342dea17053ab\"},\"contracts/interfaces/IOpenSkyOToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IOpenSkyOToken is IERC20 {\\n    event Mint(address indexed account, uint256 amount, uint256 index);\\n    event Burn(address indexed account, uint256 amount, uint256 index);\\n    event MintToTreasury(address treasury, uint256 amount, uint256 index);\\n    event Deposit(uint256 amount);\\n    event Withdraw(uint256 amount);\\n\\n    function mint(\\n        address account,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n\\n    function burn(\\n        address account,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n\\n    function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n    function deposit(uint256 amount) external;\\n\\n    function withdraw(uint256 amount, address to) external;\\n\\n    function scaledBalanceOf(address account) external view returns (uint256);\\n\\n    function principleBalanceOf(address account) external view returns (uint256);\\n\\n    function scaledTotalSupply() external view returns (uint256);\\n\\n    function principleTotalSupply() external view returns (uint256);\\n\\n    function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n    function claimERC20Rewards(address token) external;\\n}\\n\",\"keccak256\":\"0x555e35dcdc4163429b75012557aafaa786a3b5afdda354edcd76210440ce1b08\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IOpenSkyPool\\n * @author OpenSky Labs\\n * @notice Defines the basic interface for an OpenSky Pool.\\n **/\\n\\ninterface IOpenSkyPool {\\n    /*\\n     * @dev Emitted on create()\\n     * @param reserveId The ID of the reserve\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param oTokenAddress The address of the oToken\\n     * @param name The name to use for oToken\\n     * @param symbol The symbol to use for oToken\\n     * @param decimals The decimals of the oToken\\n     */\\n    event Create(\\n        uint256 indexed reserveId,\\n        address indexed underlyingAsset,\\n        address indexed oTokenAddress,\\n        string name,\\n        string symbol,\\n        uint8 decimals\\n    );\\n\\n    /*\\n     * @dev Emitted on setTreasuryFactor()\\n     * @param reserveId The ID of the reserve\\n     * @param factor The new treasury factor of the reserve\\n     */\\n    event SetTreasuryFactor(uint256 indexed reserveId, uint256 factor);\\n\\n    /*\\n     * @dev Emitted on setInterestModelAddress()\\n     * @param reserveId The ID of the reserve\\n     * @param interestModelAddress The address of the interest model contract\\n     */\\n    event SetInterestModelAddress(uint256 indexed reserveId, address interestModelAddress);\\n\\n    /*\\n     * @dev Emitted on openMoneyMarket()\\n     * @param reserveId The ID of the reserve\\n     */\\n    event OpenMoneyMarket(uint256 reserveId);\\n\\n    /*\\n     * @dev Emitted on closeMoneyMarket()\\n     * @param reserveId The ID of the reserve\\n     */\\n    event CloseMoneyMarket(uint256 reserveId);\\n\\n    /*\\n     * @dev Emitted on deposit()\\n     * @param reserveId The ID of the reserve\\n     * @param onBehalfOf The address that will receive the oTokens\\n     * @param amount The amount of ETH to be deposited\\n     * @param referralCode integrators are assigned a referral code and can potentially receive rewards\\n     * 0 if the action is executed directly by the user, without any intermediaries\\n     */\\n    event Deposit(uint256 indexed reserveId, address indexed onBehalfOf, uint256 amount, uint256 referralCode);\\n\\n    /*\\n     * @dev Emitted on withdraw()\\n     * @param reserveId The ID of the reserve\\n     * @param onBehalfOf The address that will receive assets withdrawed\\n     * @param amount The amount to be withdrawn\\n     */\\n    event Withdraw(uint256 indexed reserveId, address indexed onBehalfOf, uint256 amount);\\n\\n    /*\\n     * @dev Emitted on borrow()\\n     * @param reserveId The ID of the reserve\\n     * @param user The address initiating the withdrawal(), owner of oTokens\\n     * @param onBehalfOf The address that will receive the ETH and the loan NFT\\n     * @param loanId The loan ID\\n     */\\n    event Borrow(\\n        uint256 indexed reserveId,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 indexed loanId\\n    );\\n\\n    /*\\n     * @dev Emitted on repay()\\n     * @param reserveId The ID of the reserve\\n     * @param repayer The address initiating the repayment()\\n     * @param onBehalfOf The address that will receive the pledged NFT\\n     * @param loanId The ID of the loan\\n     * @param repayAmount The borrow balance of the loan when it was repaid\\n     * @param penalty The penalty of the loan for either early or overdue repayment\\n     */\\n    event Repay(\\n        uint256 indexed reserveId,\\n        address repayer,\\n        address indexed onBehalfOf,\\n        uint256 indexed loanId,\\n        uint256 repayAmount,\\n        uint256 penalty\\n    );\\n\\n    /*\\n     * @dev Emitted on extend()\\n     * @param reserveId The ID of the reserve\\n     * @param onBehalfOf The owner address of loan NFT\\n     * @param oldLoanId The ID of the old loan\\n     * @param newLoanId The ID of the new loan\\n     */\\n    event Extend(uint256 indexed reserveId, address indexed onBehalfOf, uint256 oldLoanId, uint256 newLoanId);\\n\\n    /*\\n     * @dev Emitted on startLiquidation()\\n     * @param reserveId The ID of the reserve\\n     * @param loanId The ID of the loan\\n     * @param nftAddress The address of the NFT used as collateral\\n     * @param tokenId The ID of the NFT used as collateral\\n     * @param operator The address initiating startLiquidation()\\n     */\\n    event StartLiquidation(\\n        uint256 indexed reserveId,\\n        uint256 indexed loanId,\\n        address indexed nftAddress,\\n        uint256 tokenId,\\n        address operator\\n    );\\n\\n    /*\\n     * @dev Emitted on endLiquidation()\\n     * @param reserveId The ID of the reserve\\n     * @param loanId The ID of the loan\\n     * @param nftAddress The address of the NFT used as collateral\\n     * @param tokenId The ID of the NFT used as collateral\\n     * @param operator\\n     * @param repayAmount The amount used to repay, must be equal to or greater than the borrowBalance, excess part will be shared by all the lenders\\n     * @param borrowBalance The borrow balance of the loan\\n     */\\n    event EndLiquidation(\\n        uint256 indexed reserveId,\\n        uint256 indexed loanId,\\n        address indexed nftAddress,\\n        uint256 tokenId,\\n        address operator,\\n        uint256 repayAmount,\\n        uint256 borrowBalance\\n    );\\n\\n    /**\\n     * @notice Creates a reserve\\n     * @dev Only callable by the pool admin role\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param name The name of the oToken\\n     * @param symbol The symbol for the oToken\\n     * @param decimals The decimals of the oToken\\n     **/\\n    function create(\\n        address underlyingAsset,\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals\\n    ) external;\\n\\n    /**\\n     * @notice Updates the treasury factor of a reserve\\n     * @dev Only callable by the pool admin role\\n     * @param reserveId The ID of the reserve\\n     * @param factor The new treasury factor of the reserve\\n     **/\\n    function setTreasuryFactor(uint256 reserveId, uint256 factor) external;\\n\\n    /**\\n     * @notice Updates the interest model address of a reserve\\n     * @dev Only callable by the pool admin role\\n     * @param reserveId The ID of the reserve\\n     * @param interestModelAddress The new address of the interest model contract\\n     **/\\n    function setInterestModelAddress(uint256 reserveId, address interestModelAddress) external;\\n\\n    /**\\n     * @notice Open the money market\\n     * @dev Only callable by the emergency admin role\\n     * @param reserveId The ID of the reserve\\n     **/\\n    function openMoneyMarket(uint256 reserveId) external;\\n\\n    /**\\n     * @notice Close the money market\\n     * @dev Only callable by the emergency admin role\\n     * @param reserveId The ID of the reserve\\n     **/\\n    function closeMoneyMarket(uint256 reserveId) external;\\n\\n    /**\\n     * @dev Deposits ETH into the reserve.\\n     * @param reserveId The ID of the reserve\\n     * @param referralCode integrators are assigned a referral code and can potentially receive rewards\\n     **/\\n    function deposit(uint256 reserveId, uint256 amount, address onBehalfOf, uint256 referralCode) external;\\n\\n    /**\\n     * @dev withdraws the ETH from reserve.\\n     * @param reserveId The ID of the reserve\\n     * @param amount amount of oETH to withdraw and receive native ETH\\n     **/\\n    function withdraw(uint256 reserveId, uint256 amount, address onBehalfOf) external;\\n\\n    /**\\n     * @dev Borrows ETH from reserve using an NFT as collateral and will receive a loan NFT as receipt.\\n     * @param reserveId The ID of the reserve\\n     * @param amount amount of ETH user will borrow\\n     * @param duration The desired duration of the loan\\n     * @param nftAddress The collateral NFT address\\n     * @param tokenId The ID of the NFT\\n     * @param onBehalfOf address of the user who will receive ETH and loan NFT.\\n     **/\\n    function borrow(\\n        uint256 reserveId,\\n        uint256 amount,\\n        uint256 duration,\\n        address nftAddress,\\n        uint256 tokenId,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Repays a loan, as a result the corresponding loan NFT owner will receive the collateralized NFT.\\n     * @param loanId The ID of the loan the user will repay\\n     */\\n    function repay(uint256 loanId) external returns (uint256);\\n\\n    /**\\n     * @dev Extends creates a new loan and terminates the old loan.\\n     * @param loanId The loan ID to extend\\n     * @param amount The amount of ERC20 token the user will borrow in the new loan\\n     * @param duration The selected duration the user will borrow in the new loan\\n     * @param onBehalfOf The address will borrow in the new loan\\n     **/\\n    function extend(\\n        uint256 loanId,\\n        uint256 amount,\\n        uint256 duration,\\n        address onBehalfOf\\n    ) external returns (uint256, uint256);\\n\\n    /**\\n     * @dev Starts liquidation for a loan when it's in LIQUIDATABLE status\\n     * @param loanId The ID of the loan which will be liquidated\\n     */\\n    function startLiquidation(uint256 loanId) external;\\n\\n    /**\\n     * @dev Completes liquidation for a loan which will be repaid.\\n     * @param loanId The ID of the liquidated loan that will be repaid.\\n     * @param amount The amount of the token that will be repaid.\\n     */\\n    function endLiquidation(uint256 loanId, uint256 amount) external;\\n\\n    /**\\n     * @dev Returns the state of the reserve\\n     * @param reserveId The ID of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getReserveData(uint256 reserveId) external view returns (DataTypes.ReserveData memory);\\n\\n    /**\\n     * @dev Returns the normalized income of the reserve\\n     * @param reserveId The ID of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(uint256 reserveId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the remaining liquidity of the reserve\\n     * @param reserveId The ID of the reserve\\n     * @return The reserve's withdrawable balance\\n     */\\n    function getAvailableLiquidity(uint256 reserveId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the instantaneous borrow limit value of a special NFT\\n     * @param nftAddress The address of the NFT\\n     * @param tokenId The ID of the NFT\\n     * @return The NFT's borrow limit\\n     */\\n    function getBorrowLimitByOracle(\\n        uint256 reserveId,\\n        address nftAddress,\\n        uint256 tokenId\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the sum of all users borrow balances include borrow interest accrued\\n     * @param reserveId The ID of the reserve\\n     * @return The total borrow balance of the reserve\\n     */\\n    function getTotalBorrowBalance(uint256 reserveId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns TVL (total value locked) of the reserve.\\n     * @param reserveId The ID of the reserve\\n     * @return The reserve's TVL\\n     */\\n    function getTVL(uint256 reserveId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd98aee1cefc2e2c3178c22435666292f9b8a1df1e4b24b17a182d8df357951a9\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkySettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\nimport '../libraries/types/DataTypes.sol';\\n\\ninterface IOpenSkySettings {\\n    event InitPoolAddress(address operator, address address_);\\n    event InitLoanAddress(address operator, address address_);\\n    event InitVaultFactoryAddress(address operator, address address_);\\n    event InitIncentiveControllerAddress(address operator, address address_);\\n    event InitWETHGatewayAddress(address operator, address address_);\\n    event InitPunkGatewayAddress(address operator, address address_);\\n    event InitDaoVaultAddress(address operator, address address_);\\n\\n    event AddToWhitelist(address operator, uint256 reserveId, address nft);\\n    event RemoveFromWhitelist(address operator, uint256 reserveId, address nft);\\n    event SetReserveFactor(address operator, uint256 factor);\\n    event SetPrepaymentFeeFactor(address operator, uint256 factor);\\n    event SetOverdueLoanFeeFactor(address operator, uint256 factor);\\n    event SetMoneyMarketAddress(address operator, address address_);\\n    event SetTreasuryAddress(address operator, address address_);\\n    event SetACLManagerAddress(address operator, address address_);\\n    event SetLoanDescriptorAddress(address operator, address address_);\\n    event SetNftPriceOracleAddress(address operator, address address_);\\n    event SetInterestRateStrategyAddress(address operator, address address_);\\n    event AddLiquidator(address operator, address address_);\\n    event RemoveLiquidator(address operator, address address_);\\n\\n    function poolAddress() external view returns (address);\\n\\n    function loanAddress() external view returns (address);\\n\\n    function vaultFactoryAddress() external view returns (address);\\n\\n    function incentiveControllerAddress() external view returns (address);\\n\\n    function wethGatewayAddress() external view returns (address);\\n\\n    function punkGatewayAddress() external view returns (address);\\n\\n    function inWhitelist(uint256 reserveId, address nft) external view returns (bool);\\n\\n    function getWhitelistDetail(uint256 reserveId, address nft) external view returns (DataTypes.WhitelistInfo memory);\\n\\n    function reserveFactor() external view returns (uint256); // treasury ratio\\n\\n    function MAX_RESERVE_FACTOR() external view returns (uint256);\\n\\n    function prepaymentFeeFactor() external view returns (uint256);\\n\\n    function overdueLoanFeeFactor() external view returns (uint256);\\n\\n    function moneyMarketAddress() external view returns (address);\\n\\n    function treasuryAddress() external view returns (address);\\n\\n    function daoVaultAddress() external view returns (address);\\n\\n    function ACLManagerAddress() external view returns (address);\\n\\n    function loanDescriptorAddress() external view returns (address);\\n\\n    function nftPriceOracleAddress() external view returns (address);\\n\\n    function interestRateStrategyAddress() external view returns (address);\\n    \\n    function isLiquidator(address liquidator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd5c1c2468464891b3ce379c8a03bc21c2c67fcf0c7493e3b35fd573fa21ea448\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyWETHGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IOpenSkyWETHGateway {\\n    event AuthorizeLendingPoolWETH(address indexed operator);\\n    event AuthorizeLendingPoolNFT(address indexed operator, address[] nftAssets);\\n    event EmergencyTokenTransfer(address indexed operator, address indexed token, address indexed to, uint256 amount);\\n    event EmergencyEtherTransfer(address indexed operator, address indexed to, uint256 amount);\\n\\n    event Deposit(uint256 indexed reserveId, address indexed onBehalfOf, uint256 amount);\\n    event Withdraw(uint256 indexed reserveId, address indexed onBehalfOf, uint256 amount);\\n    event Borrow(uint256 indexed reserveId, address indexed onBehalfOf, uint256 indexed loanId);\\n    event Repay(uint256 indexed loanId);\\n    event Extend(uint256 indexed loanId);\\n\\n    event Received(address, uint256);\\n\\n    function authorizeLendingPoolWETH() external;\\n\\n    function authorizeLendingPoolNFT(address[] calldata nftAssets) external;\\n\\n    function deposit(\\n        uint256 reserveId,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external payable;\\n\\n    function withdraw(\\n        uint256 reserveId,\\n        uint256 amount,\\n        address onBehalfOf\\n    ) external;\\n\\n    function borrow(\\n        uint256 reserveId,\\n        uint256 amount,\\n        uint256 duration,\\n        address nftAddress,\\n        uint256 tokenId,\\n        address onBehalfOf\\n    ) external;\\n\\n    function repay(uint256 loanId) external payable;\\n\\n    function extend(\\n        uint256 loanId,\\n        uint256 amount,\\n        uint256 duration\\n    ) external payable;\\n\\n    function emergencyTokenTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function emergencyEtherTransfer(address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xe41bd5a5f410c122e7ff2181de3e7f77906736d5db90f3e5bbac9b46771c2a53\",\"license\":\"MIT\"},\"contracts/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    // common\\n    string public constant MATH_MULTIPLICATION_OVERFLOW = '100';\\n    string public constant MATH_ADDITION_OVERFLOW = '101';\\n    string public constant MATH_DIVISION_BY_ZERO = '102';\\n\\n    string public constant ETH_TRANSFER_FAILED = '110';\\n    string public constant RECEIVE_NOT_ALLOWED = '111';\\n    string public constant FALLBACK_NOT_ALLOWED = '112';\\n    string public constant APPROVAL_FAILED = '113';\\n\\n    // setting/factor\\n    string public constant SETTING_ZERO_ADDRESS_NOT_ALLOWED = '115';\\n    string public constant SETTING_RESERVE_FACTOR_NOT_ALLOWED = '116';\\n    string public constant SETTING_WHITELIST_INVALID_RESERVE_ID = '117';\\n    string public constant SETTING_WHITELIST_NFT_ADDRESS_IS_ZERO = '118';\\n    string public constant SETTING_WHITELIST_NFT_DURATION_OUT_OF_ORDER = '119';\\n    string public constant SETTING_WHITELIST_NFT_NAME_EMPTY = '120';\\n    string public constant SETTING_WHITELIST_NFT_SYMBOL_EMPTY = '121';\\n    string public constant SETTING_WHITELIST_NFT_LTV_NOT_ALLOWED = '122';\\n\\n    // settings/acl\\n    string public constant ACL_ONLY_GOVERNANCE_CAN_CALL = '200';\\n    string public constant ACL_ONLY_EMERGENCY_ADMIN_CAN_CALL = '201';\\n    string public constant ACL_ONLY_POOL_ADMIN_CAN_CALL = '202';\\n    string public constant ACL_ONLY_LIQUIDATOR_CAN_CALL = '203';\\n    string public constant ACL_ONLY_AIRDROP_OPERATOR_CAN_CALL = '204';\\n    string public constant ACL_ONLY_POOL_CAN_CALL = '205';\\n\\n    // lending & borrowing\\n    // reserve\\n    string public constant RESERVE_DOES_NOT_EXIST = '300';\\n    string public constant RESERVE_LIQUIDITY_INSUFFICIENT = '301';\\n    string public constant RESERVE_INDEX_OVERFLOW = '302';\\n    string public constant RESERVE_SWITCH_MONEY_MARKET_STATE_ERROR = '303';\\n    string public constant RESERVE_TREASURY_FACTOR_NOT_ALLOWED = '304';\\n    string public constant RESERVE_TOKEN_CAN_NOT_BE_CLAIMED = '305';\\n\\n    // token\\n    string public constant AMOUNT_SCALED_IS_ZERO = '310';\\n    string public constant AMOUNT_TRANSFER_OVERFLOW = '311';\\n\\n    //deposit\\n    string public constant DEPOSIT_AMOUNT_SHOULD_BE_BIGGER_THAN_ZERO = '320';\\n\\n    // withdraw\\n    string public constant WITHDRAW_AMOUNT_NOT_ALLOWED = '321';\\n    string public constant WITHDRAW_LIQUIDITY_NOT_SUFFICIENT = '322';\\n\\n    // borrow\\n    string public constant BORROW_DURATION_NOT_ALLOWED = '330';\\n    string public constant BORROW_AMOUNT_EXCEED_BORROW_LIMIT = '331';\\n    string public constant NFT_ADDRESS_IS_NOT_IN_WHITELIST = '332';\\n\\n    // repay\\n    string public constant REPAY_STATUS_ERROR = '333';\\n    string public constant REPAY_MSG_VALUE_ERROR = '334';\\n\\n    // extend\\n    string public constant EXTEND_STATUS_ERROR = '335';\\n    string public constant EXTEND_MSG_VALUE_ERROR = '336';\\n\\n    // liquidate\\n    string public constant START_LIQUIDATION_STATUS_ERROR = '360';\\n    string public constant END_LIQUIDATION_STATUS_ERROR = '361';\\n    string public constant END_LIQUIDATION_AMOUNT_ERROR = '362';\\n\\n    // loan\\n    string public constant LOAN_DOES_NOT_EXIST = '400';\\n    string public constant LOAN_SET_STATUS_ERROR = '401';\\n    string public constant LOAN_REPAYER_IS_NOT_OWNER = '402';\\n    string public constant LOAN_LIQUIDATING_STATUS_CAN_NOT_BE_UPDATED = '403';\\n    string public constant LOAN_CALLER_IS_NOT_OWNER = '404';\\n    string public constant LOAN_COLLATERAL_NFT_CAN_NOT_BE_CLAIMED = '405';\\n\\n    string public constant FLASHCLAIM_EXECUTOR_ERROR = '410';\\n    string public constant FLASHCLAIM_STATUS_ERROR = '411';\\n\\n    // money market\\n    string public constant MONEY_MARKET_DEPOSIT_AMOUNT_NOT_ALLOWED = '500';\\n    string public constant MONEY_MARKET_WITHDRAW_AMOUNT_NOT_ALLOWED = '501';\\n    string public constant MONEY_MARKET_APPROVAL_FAILED = '502';\\n    string public constant MONEY_MARKET_DELEGATE_CALL_ERROR = '503';\\n    string public constant MONEY_MARKET_REQUIRE_DELEGATE_CALL = '504';\\n    string public constant MONEY_MARKET_WITHDRAW_AMOUNT_NOT_MATCH = '505';\\n\\n    // price oracle\\n    string public constant PRICE_ORACLE_HAS_NO_PRICE_FEED = '600';\\n    string public constant PRICE_ORACLE_INCORRECT_TIMESTAMP = '601';\\n    string public constant PRICE_ORACLE_PARAMS_ERROR = '602';\\n}\\n\",\"keccak256\":\"0xc4e38b51f80e5ad6eeacd323b4ac0798c5ca51d7a2d0c9fc2ba52aafa8a064b8\",\"license\":\"MIT\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        uint256 reserveId;\\n        address underlyingAsset;\\n        address oTokenAddress;\\n        address moneyMarketAddress;\\n        uint128 lastSupplyIndex;\\n        uint256 borrowingInterestPerSecond;\\n        uint256 lastMoneyMarketBalance;\\n        uint40 lastUpdateTimestamp;\\n        uint256 totalBorrows;\\n        address interestModelAddress;\\n        uint256 treasuryFactor;\\n        bool isMoneyMarketOn;\\n    }\\n\\n    struct LoanData {\\n        uint256 reserveId;\\n        address nftAddress;\\n        uint256 tokenId;\\n        address borrower;\\n        uint256 amount;\\n        uint128 borrowRate;\\n        uint128 interestPerSecond;\\n        uint40 borrowBegin;\\n        uint40 borrowDuration;\\n        uint40 borrowOverdueTime;\\n        uint40 liquidatableTime;\\n        uint40 extendableTime;\\n        uint40 borrowEnd;\\n        LoanStatus status;\\n    }\\n\\n    enum LoanStatus {\\n        NONE,\\n        BORROWING,\\n        EXTENDABLE,\\n        OVERDUE,\\n        LIQUIDATABLE,\\n        LIQUIDATING\\n    }\\n\\n    struct WhitelistInfo {\\n        bool enabled;\\n        string name;\\n        string symbol;\\n        uint256 LTV;\\n        uint256 minBorrowDuration;\\n        uint256 maxBorrowDuration;\\n        uint256 extendableDuration;\\n        uint256 overdueDuration;\\n    }\\n}\\n\",\"keccak256\":\"0x487cd1dedb3146da46144bc8f0e5b970c5173efa8c19700184b8207c1ee3fc55\",\"license\":\"MIT\"},\"contracts/misc/OpenSkyWETHGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport '../dependencies/weth/IWETH.sol';\\nimport '../interfaces/IOpenSkyWETHGateway.sol';\\nimport '../interfaces/IOpenSkySettings.sol';\\nimport '../interfaces/IOpenSkyPool.sol';\\nimport '../interfaces/IOpenSkyOToken.sol';\\nimport '../libraries/helpers/Errors.sol';\\n\\ncontract OpenSkyWETHGateway is IOpenSkyWETHGateway, Ownable, ERC721Holder {\\n    using SafeERC20 for IERC20;\\n\\n    IWETH public immutable WETH;\\n    IOpenSkySettings public immutable SETTINGS;\\n\\n    /**\\n     * @dev Sets the WETH address and the OpenSkySettings address.\\n     * @param weth Address of the Wrapped Ether contract\\n     **/\\n    constructor(IWETH weth, IOpenSkySettings settings) {\\n        WETH = weth;\\n        SETTINGS = settings;\\n    }\\n\\n    /**\\n     * @notice Infinite weth approves OpenSkyPool contract.\\n     * @dev Only callable by the owner\\n     **/\\n    function authorizeLendingPoolWETH() external override onlyOwner {\\n        address lendingPool = SETTINGS.poolAddress();\\n        require(WETH.approve(lendingPool, type(uint256).max),Errors.APPROVAL_FAILED);\\n        emit AuthorizeLendingPoolWETH(_msgSender());\\n    }\\n\\n    /**\\n     * @notice Infinite NFT approves OpenSkyPool contract.\\n     * @dev Only callable by the owner\\n     * @param nftAssets addresses of nft assets\\n     **/\\n    function authorizeLendingPoolNFT(address[] calldata nftAssets) external override onlyOwner {\\n        address lendingPool = SETTINGS.poolAddress();\\n        for (uint256 i = 0; i < nftAssets.length; i++) {\\n            IERC721(nftAssets[i]).setApprovalForAll(lendingPool, true);\\n        }\\n        emit AuthorizeLendingPoolNFT(_msgSender(), nftAssets);\\n    }\\n\\n    /**\\n     * @dev deposits WETH into the reserve, using native ETH. A corresponding amount of the overlying asset (aTokens)\\n     * is minted.\\n     * @param reserveId address of the targeted underlying lending pool\\n     * @param onBehalfOf address of the user who will receive the aTokens representing the deposit\\n     * @param referralCode integrators are assigned a referral code and can potentially receive rewards.\\n     **/\\n    function deposit(\\n        uint256 reserveId,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external payable override {\\n        WETH.deposit{value: msg.value}();\\n        IOpenSkyPool(SETTINGS.poolAddress()).deposit(reserveId, msg.value, onBehalfOf, referralCode);\\n\\n        emit Deposit(reserveId, onBehalfOf, msg.value);\\n    }\\n\\n    /**\\n     * @dev withdraws the WETH _reserves of msg.sender.\\n     * @param reserveId address of the targeted underlying lending pool\\n     * @param amount amount of aWETH to withdraw and receive native ETH\\n     * @param onBehalfOf address of the user who will receive native ETH\\n     */\\n    function withdraw(\\n        uint256 reserveId,\\n        uint256 amount,\\n        address onBehalfOf\\n    ) external override {\\n        IOpenSkyPool lendingPool = IOpenSkyPool(SETTINGS.poolAddress());\\n        IERC20 oWETH = IERC20(lendingPool.getReserveData(reserveId).oTokenAddress);\\n        uint256 userBalance = oWETH.balanceOf(msg.sender);\\n        uint256 amountToWithdraw = amount;\\n\\n        // if amount is equal to uint256 max, the user wants to redeem everything\\n        if (amount == type(uint256).max) {\\n            amountToWithdraw = userBalance;\\n        }\\n        oWETH.safeTransferFrom(msg.sender, address(this), amountToWithdraw);\\n        lendingPool.withdraw(reserveId, amountToWithdraw, address(this));\\n        WETH.withdraw(amountToWithdraw);\\n        _safeTransferETH(onBehalfOf, amountToWithdraw);\\n\\n        emit Withdraw(reserveId, onBehalfOf, amountToWithdraw);\\n    }\\n\\n    /**\\n     * @dev Borrows ETH from reserve using an NFT as collateral and will receive a loan NFT as receipt.\\n     * @param reserveId The ID of the reserve\\n     * @param amount amount of ETH user will borrow\\n     * @param duration The desired duration of the loan\\n     * @param nftAddress The collateral NFT address\\n     * @param tokenId The ID of the NFT\\n     * @param onBehalfOf address of the user who will receive ETH and loan NFT.\\n     */\\n    function borrow(\\n        uint256 reserveId,\\n        uint256 amount,\\n        uint256 duration,\\n        address nftAddress,\\n        uint256 tokenId,\\n        address onBehalfOf\\n    ) external override {\\n        IERC721(nftAddress).safeTransferFrom(msg.sender, address(this), tokenId);\\n        IOpenSkyPool lendingPool = IOpenSkyPool(SETTINGS.poolAddress());\\n        uint256 loanId = lendingPool.borrow(reserveId, amount, duration, nftAddress, tokenId, onBehalfOf);\\n        WETH.withdraw(amount);\\n        _safeTransferETH(onBehalfOf, amount);\\n\\n        emit Borrow(reserveId, onBehalfOf, loanId);\\n    }\\n\\n    /**\\n     * @dev repays a borrow on the WETH reserve, for the specified amount (or for the whole amount, if uint256(-1) is specified).\\n     * @param loanId the id of reserve\\n     */\\n    function repay(uint256 loanId) external payable override {\\n        WETH.deposit{value: msg.value}();\\n\\n        IOpenSkyPool lendingPool = IOpenSkyPool(SETTINGS.poolAddress());\\n        uint256 repayAmount = lendingPool.repay(loanId);\\n\\n        require(msg.value >= repayAmount, Errors.REPAY_MSG_VALUE_ERROR);\\n\\n        // refund remaining dust eth\\n        if (msg.value > repayAmount) {\\n            uint256 refundAmount = msg.value - repayAmount;\\n            WETH.withdraw(refundAmount);\\n            _safeTransferETH(msg.sender, refundAmount);\\n        }\\n        emit Repay(loanId);\\n    }\\n\\n    function extend(\\n        uint256 loanId,\\n        uint256 amount,\\n        uint256 duration\\n    ) external payable {\\n        WETH.deposit{value: msg.value}();\\n\\n        IOpenSkyPool lendingPool = IOpenSkyPool(SETTINGS.poolAddress());\\n        (uint256 inAmount, uint256 outAmount) = lendingPool.extend(loanId, amount, duration, _msgSender());\\n\\n        require(msg.value >= inAmount, Errors.EXTEND_MSG_VALUE_ERROR);\\n\\n        // refund eth\\n        uint256 refundAmount;\\n        if (msg.value > inAmount) {\\n            refundAmount += msg.value - inAmount;\\n        }\\n        if (outAmount > 0) {\\n            refundAmount += outAmount;\\n        }\\n        if (refundAmount > 0) {\\n            WETH.withdraw(refundAmount);\\n            _safeTransferETH(msg.sender, refundAmount);\\n        }\\n\\n        emit Extend(loanId);\\n    }\\n\\n    /**\\n     * @dev transfer ETH to an address, revert if it fails.\\n     * @param to recipient of the transfer\\n     * @param value the amount to send\\n     */\\n    function _safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, Errors.ETH_TRANSFER_FAILED);\\n    }\\n\\n    /**\\n     * @dev transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due\\n     * direct transfers to the contract address.\\n     * @param token token to transfer\\n     * @param to recipient of the transfer\\n     * @param amount amount to send\\n     */\\n    function emergencyTokenTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external override onlyOwner {\\n        IERC20(token).safeTransfer(to, amount);\\n        emit EmergencyTokenTransfer(_msgSender(), token, to, amount);\\n    }\\n\\n    /**\\n     * @dev transfer native Ether from the utility contract, for native Ether recovery in case of stuck Ether\\n     * due selfdestructs or transfer ether to pre-computed contract address before deployment.\\n     * @param to recipient of the transfer\\n     * @param amount amount to send\\n     */\\n    function emergencyEtherTransfer(address to, uint256 amount) external override onlyOwner {\\n        _safeTransferETH(to, amount);\\n        emit EmergencyEtherTransfer(_msgSender(), to, amount);\\n    }\\n\\n    /**\\n     * @dev Only WETH contract is allowed to transfer ETH here. Prevent other addresses to send Ether to this contract.\\n     */\\n    receive() external payable {\\n        require(msg.sender == address(WETH), Errors.RECEIVE_NOT_ALLOWED);\\n        emit Received(msg.sender, msg.value);\\n    }\\n\\n    /**\\n     * @dev Revert fallback calls\\n     */\\n    fallback() external payable {\\n        revert(Errors.FALLBACK_NOT_ALLOWED);\\n    }\\n}\\n\",\"keccak256\":\"0x2dcd8dc35eeb123c49993e1d7bc26a2bf55b497f80624d3edce801c938dc5c07\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162002126380380620021268339810160408190526200003491620000c0565b6200003f3362000057565b6001600160a01b039182166080521660a052620000ff565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114620000bd57600080fd5b50565b60008060408385031215620000d457600080fd5b8251620000e181620000a7565b6020840151909250620000f481620000a7565b809150509250929050565b60805160a051611f916200019560003960008181610327015281816103d50152818161070d0152818161093a01528181610b5a01528181610d6501528181610f5f0152611325015260008181610116015281816102f3015281816105d8015281816106970152818161086c01528181610ae601528181610e0f01528181610ee90152818161110601526114540152611f916000f3fe6080604052600436106100ec5760003560e01c8063a3d5b2551161008a578063ddddca1111610059578063ddddca111461035e578063eed88b8d14610371578063f2fde38b14610391578063f668a9c5146103b157610198565b8063a3d5b255146102c1578063ad5c4648146102e1578063ade97ab514610315578063af1d2de51461034957610198565b806343eeec51116100c657806343eeec5114610247578063715018a6146102675780638da5cb5b1461027c5780639b8d6d38146102ae57610198565b80630ad58d2f146101c9578063150b7a02146101eb578063371fd8e61461023457610198565b366101985760408051808201909152600381526231313160e81b6020820152336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461015d5760405162461bcd60e51b8152600401610154919061191d565b60405180910390fd5b50604080513381523460208201527f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874910160405180910390a1005b604080518082018252600381526218989960e91b6020820152905162461bcd60e51b8152610154919060040161191d565b3480156101d557600080fd5b506101e96101e4366004611965565b6103d1565b005b3480156101f757600080fd5b50610216610206366004611a0f565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020015b60405180910390f35b6101e9610242366004611ad3565b610695565b34801561025357600080fd5b506101e9610262366004611aec565b61090c565b34801561027357600080fd5b506101e9610aae565b34801561028857600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161022b565b6101e96102bc366004611b61565b610ae4565b3480156102cd57600080fd5b506101e96102dc366004611b9f565b610c97565b3480156102ed57600080fd5b506102967f000000000000000000000000000000000000000000000000000000000000000081565b34801561032157600080fd5b506102967f000000000000000000000000000000000000000000000000000000000000000081565b34801561035557600080fd5b506101e9610d37565b6101e961036c366004611be0565b610ee7565b34801561037d57600080fd5b506101e961038c366004611c0c565b6111a8565b34801561039d57600080fd5b506101e96103ac366004611c38565b611220565b3480156103bd57600080fd5b506101e96103cc366004611c55565b6112bb565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610431573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104559190611cc3565b6040516391541e0560e01b8152600481018690529091506000906001600160a01b038316906391541e059060240161018060405180830381865afa1580156104a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c59190611d25565b60409081015190516370a0823160e01b81523360048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610514573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105389190611dee565b9050846000198114156105485750805b61055d6001600160a01b038416333084611504565b604051630ad58d2f60e01b815260048101889052602481018290523060448201526001600160a01b03851690630ad58d2f90606401600060405180830381600087803b1580156105ac57600080fd5b505af11580156105c0573d6000803e3d6000fd5b5050604051632e1a7d4d60e01b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169250632e1a7d4d9150602401600060405180830381600087803b15801561062657600080fd5b505af115801561063a573d6000803e3d6000fd5b505050506106488582611575565b846001600160a01b0316877f9da6493a92039daf47d1f2d7a782299c5994c6323eb1e972f69c432089ec52bf8360405161068491815260200190565b60405180910390a350505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156106f057600080fd5b505af1158015610704573d6000803e3d6000fd5b505050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610769573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078d9190611cc3565b604051631b8fec7360e11b8152600481018490529091506000906001600160a01b0383169063371fd8e6906024016020604051808303816000875af11580156107da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fe9190611dee565b905080341015604051806040016040528060038152602001620ccccd60ea1b8152509061083e5760405162461bcd60e51b8152600401610154919061191d565b50803411156108dc5760006108538234611e1d565b604051632e1a7d4d60e01b8152600481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156108b857600080fd5b505af11580156108cc573d6000803e3d6000fd5b505050506108da3382611575565b505b60405183907fa6ffc78a660e4971a47a0f916a0abae483804e6f42c9292ed06aa64f8fe4623090600090a2505050565b6000546001600160a01b031633146109365760405162461bcd60e51b815260040161015490611e34565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ba9190611cc3565b905060005b82811015610a65578383828181106109d9576109d9611e69565b90506020020160208101906109ee9190611c38565b60405163a22cb46560e01b81526001600160a01b03848116600483015260016024830152919091169063a22cb46590604401600060405180830381600087803b158015610a3a57600080fd5b505af1158015610a4e573d6000803e3d6000fd5b505050508080610a5d90611e7f565b9150506109bf565b50336001600160a01b03167f9601e9115d2b459c8cf208260877706f12d22762ad481af8cc80b6d1c9dc35988484604051610aa1929190611e9a565b60405180910390a2505050565b6000546001600160a01b03163314610ad85760405162461bcd60e51b815260040161015490611e34565b610ae26000611620565b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610b3f57600080fd5b505af1158015610b53573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bda9190611cc3565b60405163e78f094960e01b8152600481018590523460248201526001600160a01b03848116604483015261ffff84166064830152919091169063e78f094990608401600060405180830381600087803b158015610c3657600080fd5b505af1158015610c4a573d6000803e3d6000fd5b50505050816001600160a01b0316837feaa18152488ce5959073c9c79c88ca90b3d96c00de1f118cfaad664c3dab06b934604051610c8a91815260200190565b60405180910390a3505050565b6000546001600160a01b03163314610cc15760405162461bcd60e51b815260040161015490611e34565b610cd56001600160a01b0384168383611670565b816001600160a01b0316836001600160a01b0316610cf03390565b6001600160a01b03167febf245a42443912c1b50c6c3a1d4854194a5dc5fa3190d920936da8fa00d9c7a84604051610d2a91815260200190565b60405180910390a4505050565b6000546001600160a01b03163314610d615760405162461bcd60e51b815260040161015490611e34565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de59190611cc3565b60405163095ea7b360e01b81526001600160a01b03808316600483015260001960248301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af1158015610e5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7e9190611ee8565b6040518060400160405280600381526020016231313360e81b81525090610eb85760405162461bcd60e51b8152600401610154919061191d565b5060405133907fb0248d5f215823f945d172ec973adae9bd207cc9886af962a16f6507c4c8604790600090a250565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610f4257600080fd5b505af1158015610f56573d6000803e3d6000fd5b505050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdf9190611cc3565b90506000806001600160a01b0383166367113ef6878787336040516001600160e01b031960e087901b1681526004810194909452602484019290925260448301526001600160a01b0316606482015260840160408051808303816000875af115801561104f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110739190611f03565b91509150813410156040518060400160405280600381526020016219999b60e91b815250906110b55760405162461bcd60e51b8152600401610154919061191d565b506000823411156110d7576110ca8334611e1d565b6110d49082611f27565b90505b81156110ea576110e78282611f27565b90505b801561117457604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561115257600080fd5b505af1158015611166573d6000803e3d6000fd5b505050506111743382611575565b60405187907f02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e890600090a250505050505050565b6000546001600160a01b031633146111d25760405162461bcd60e51b815260040161015490611e34565b6111dc8282611575565b6040518181526001600160a01b0383169033907f65e7b5fc027a987097ea9153a20964a3aa8152d2d0d88b8e6ba7637fd7329c6c9060200160405180910390a35050565b6000546001600160a01b0316331461124a5760405162461bcd60e51b815260040161015490611e34565b6001600160a01b0381166112af5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610154565b6112b881611620565b50565b604051632142170760e11b8152336004820152306024820152604481018390526001600160a01b038416906342842e0e90606401600060405180830381600087803b15801561130957600080fd5b505af115801561131d573d6000803e3d6000fd5b5050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015611381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a59190611cc3565b60405163f668a9c560e01b81526004810189905260248101889052604481018790526001600160a01b0386811660648301526084820186905284811660a483015291925060009183169063f668a9c59060c4016020604051808303816000875af1158015611417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143b9190611dee565b604051632e1a7d4d60e01b8152600481018990529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156114a057600080fd5b505af11580156114b4573d6000803e3d6000fd5b505050506114c28388611575565b80836001600160a01b0316897fe6cfa82d3ec969b90a4b9829a1257566d7092f05f0f878651326ae1a44e02fdc60405160405180910390a45050505050505050565b6040516001600160a01b038085166024830152831660448201526064810182905261156f9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526116a5565b50505050565b604080516000808252602082019092526001600160a01b03841690839060405161159f9190611f3f565b60006040518083038185875af1925050503d80600081146115dc576040519150601f19603f3d011682016040523d82523d6000602084013e6115e1565b606091505b50509050806040518060400160405280600381526020016203131360ec1b8152509061156f5760405162461bcd60e51b8152600401610154919061191d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b0383166024820152604481018290526116a090849063a9059cbb60e01b90606401611538565b505050565b60006116fa826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117779092919063ffffffff16565b8051909150156116a057808060200190518101906117189190611ee8565b6116a05760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610154565b60606117868484600085611790565b90505b9392505050565b6060824710156117f15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610154565b843b61183f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610154565b600080866001600160a01b0316858760405161185b9190611f3f565b60006040518083038185875af1925050503d8060008114611898576040519150601f19603f3d011682016040523d82523d6000602084013e61189d565b606091505b50915091506118ad8282866118b8565b979650505050505050565b606083156118c7575081611789565b8251156118d75782518084602001fd5b8160405162461bcd60e51b8152600401610154919061191d565b60005b8381101561190c5781810151838201526020016118f4565b8381111561156f5750506000910152565b602081526000825180602084015261193c8160408501602087016118f1565b601f01601f19169190910160400192915050565b6001600160a01b03811681146112b857600080fd5b60008060006060848603121561197a57600080fd5b8335925060208401359150604084013561199381611950565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff811182821017156119d8576119d861199e565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611a0757611a0761199e565b604052919050565b60008060008060808587031215611a2557600080fd5b8435611a3081611950565b9350602085810135611a4181611950565b935060408601359250606086013567ffffffffffffffff80821115611a6557600080fd5b818801915088601f830112611a7957600080fd5b813581811115611a8b57611a8b61199e565b611a9d601f8201601f191685016119de565b91508082528984828501011115611ab357600080fd5b808484018584013760008482840101525080935050505092959194509250565b600060208284031215611ae557600080fd5b5035919050565b60008060208385031215611aff57600080fd5b823567ffffffffffffffff80821115611b1757600080fd5b818501915085601f830112611b2b57600080fd5b813581811115611b3a57600080fd5b8660208260051b8501011115611b4f57600080fd5b60209290920196919550909350505050565b600080600060608486031215611b7657600080fd5b833592506020840135611b8881611950565b9150604084013561ffff8116811461199357600080fd5b600080600060608486031215611bb457600080fd5b8335611bbf81611950565b92506020840135611bcf81611950565b929592945050506040919091013590565b600080600060608486031215611bf557600080fd5b505081359360208301359350604090920135919050565b60008060408385031215611c1f57600080fd5b8235611c2a81611950565b946020939093013593505050565b600060208284031215611c4a57600080fd5b813561178981611950565b60008060008060008060c08789031215611c6e57600080fd5b8635955060208701359450604087013593506060870135611c8e81611950565b92506080870135915060a0870135611ca581611950565b809150509295509295509295565b8051611cbe81611950565b919050565b600060208284031215611cd557600080fd5b815161178981611950565b80516fffffffffffffffffffffffffffffffff81168114611cbe57600080fd5b805164ffffffffff81168114611cbe57600080fd5b80518015158114611cbe57600080fd5b60006101808284031215611d3857600080fd5b611d406119b4565b82518152611d5060208401611cb3565b6020820152611d6160408401611cb3565b6040820152611d7260608401611cb3565b6060820152611d8360808401611ce0565b608082015260a083015160a082015260c083015160c0820152611da860e08401611d00565b60e08201526101008381015190820152610120611dc6818501611cb3565b908201526101408381015190820152610160611de3818501611d15565b908201529392505050565b600060208284031215611e0057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015611e2f57611e2f611e07565b500390565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415611e9357611e93611e07565b5060010190565b60208082528181018390526000908460408401835b86811015611edd578235611ec281611950565b6001600160a01b031682529183019190830190600101611eaf565b509695505050505050565b600060208284031215611efa57600080fd5b61178982611d15565b60008060408385031215611f1657600080fd5b505080516020909101519092909150565b60008219821115611f3a57611f3a611e07565b500190565b60008251611f518184602087016118f1565b919091019291505056fea2646970667358221220373f4cb9ef915d056f667347b3f2297f1a26fc4db66fb536526c1ad00ca6f67a64736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106100ec5760003560e01c8063a3d5b2551161008a578063ddddca1111610059578063ddddca111461035e578063eed88b8d14610371578063f2fde38b14610391578063f668a9c5146103b157610198565b8063a3d5b255146102c1578063ad5c4648146102e1578063ade97ab514610315578063af1d2de51461034957610198565b806343eeec51116100c657806343eeec5114610247578063715018a6146102675780638da5cb5b1461027c5780639b8d6d38146102ae57610198565b80630ad58d2f146101c9578063150b7a02146101eb578063371fd8e61461023457610198565b366101985760408051808201909152600381526231313160e81b6020820152336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461015d5760405162461bcd60e51b8152600401610154919061191d565b60405180910390fd5b50604080513381523460208201527f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874910160405180910390a1005b604080518082018252600381526218989960e91b6020820152905162461bcd60e51b8152610154919060040161191d565b3480156101d557600080fd5b506101e96101e4366004611965565b6103d1565b005b3480156101f757600080fd5b50610216610206366004611a0f565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020015b60405180910390f35b6101e9610242366004611ad3565b610695565b34801561025357600080fd5b506101e9610262366004611aec565b61090c565b34801561027357600080fd5b506101e9610aae565b34801561028857600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161022b565b6101e96102bc366004611b61565b610ae4565b3480156102cd57600080fd5b506101e96102dc366004611b9f565b610c97565b3480156102ed57600080fd5b506102967f000000000000000000000000000000000000000000000000000000000000000081565b34801561032157600080fd5b506102967f000000000000000000000000000000000000000000000000000000000000000081565b34801561035557600080fd5b506101e9610d37565b6101e961036c366004611be0565b610ee7565b34801561037d57600080fd5b506101e961038c366004611c0c565b6111a8565b34801561039d57600080fd5b506101e96103ac366004611c38565b611220565b3480156103bd57600080fd5b506101e96103cc366004611c55565b6112bb565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610431573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104559190611cc3565b6040516391541e0560e01b8152600481018690529091506000906001600160a01b038316906391541e059060240161018060405180830381865afa1580156104a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c59190611d25565b60409081015190516370a0823160e01b81523360048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610514573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105389190611dee565b9050846000198114156105485750805b61055d6001600160a01b038416333084611504565b604051630ad58d2f60e01b815260048101889052602481018290523060448201526001600160a01b03851690630ad58d2f90606401600060405180830381600087803b1580156105ac57600080fd5b505af11580156105c0573d6000803e3d6000fd5b5050604051632e1a7d4d60e01b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169250632e1a7d4d9150602401600060405180830381600087803b15801561062657600080fd5b505af115801561063a573d6000803e3d6000fd5b505050506106488582611575565b846001600160a01b0316877f9da6493a92039daf47d1f2d7a782299c5994c6323eb1e972f69c432089ec52bf8360405161068491815260200190565b60405180910390a350505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156106f057600080fd5b505af1158015610704573d6000803e3d6000fd5b505050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610769573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078d9190611cc3565b604051631b8fec7360e11b8152600481018490529091506000906001600160a01b0383169063371fd8e6906024016020604051808303816000875af11580156107da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fe9190611dee565b905080341015604051806040016040528060038152602001620ccccd60ea1b8152509061083e5760405162461bcd60e51b8152600401610154919061191d565b50803411156108dc5760006108538234611e1d565b604051632e1a7d4d60e01b8152600481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156108b857600080fd5b505af11580156108cc573d6000803e3d6000fd5b505050506108da3382611575565b505b60405183907fa6ffc78a660e4971a47a0f916a0abae483804e6f42c9292ed06aa64f8fe4623090600090a2505050565b6000546001600160a01b031633146109365760405162461bcd60e51b815260040161015490611e34565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ba9190611cc3565b905060005b82811015610a65578383828181106109d9576109d9611e69565b90506020020160208101906109ee9190611c38565b60405163a22cb46560e01b81526001600160a01b03848116600483015260016024830152919091169063a22cb46590604401600060405180830381600087803b158015610a3a57600080fd5b505af1158015610a4e573d6000803e3d6000fd5b505050508080610a5d90611e7f565b9150506109bf565b50336001600160a01b03167f9601e9115d2b459c8cf208260877706f12d22762ad481af8cc80b6d1c9dc35988484604051610aa1929190611e9a565b60405180910390a2505050565b6000546001600160a01b03163314610ad85760405162461bcd60e51b815260040161015490611e34565b610ae26000611620565b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610b3f57600080fd5b505af1158015610b53573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bda9190611cc3565b60405163e78f094960e01b8152600481018590523460248201526001600160a01b03848116604483015261ffff84166064830152919091169063e78f094990608401600060405180830381600087803b158015610c3657600080fd5b505af1158015610c4a573d6000803e3d6000fd5b50505050816001600160a01b0316837feaa18152488ce5959073c9c79c88ca90b3d96c00de1f118cfaad664c3dab06b934604051610c8a91815260200190565b60405180910390a3505050565b6000546001600160a01b03163314610cc15760405162461bcd60e51b815260040161015490611e34565b610cd56001600160a01b0384168383611670565b816001600160a01b0316836001600160a01b0316610cf03390565b6001600160a01b03167febf245a42443912c1b50c6c3a1d4854194a5dc5fa3190d920936da8fa00d9c7a84604051610d2a91815260200190565b60405180910390a4505050565b6000546001600160a01b03163314610d615760405162461bcd60e51b815260040161015490611e34565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de59190611cc3565b60405163095ea7b360e01b81526001600160a01b03808316600483015260001960248301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af1158015610e5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7e9190611ee8565b6040518060400160405280600381526020016231313360e81b81525090610eb85760405162461bcd60e51b8152600401610154919061191d565b5060405133907fb0248d5f215823f945d172ec973adae9bd207cc9886af962a16f6507c4c8604790600090a250565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610f4257600080fd5b505af1158015610f56573d6000803e3d6000fd5b505050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdf9190611cc3565b90506000806001600160a01b0383166367113ef6878787336040516001600160e01b031960e087901b1681526004810194909452602484019290925260448301526001600160a01b0316606482015260840160408051808303816000875af115801561104f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110739190611f03565b91509150813410156040518060400160405280600381526020016219999b60e91b815250906110b55760405162461bcd60e51b8152600401610154919061191d565b506000823411156110d7576110ca8334611e1d565b6110d49082611f27565b90505b81156110ea576110e78282611f27565b90505b801561117457604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561115257600080fd5b505af1158015611166573d6000803e3d6000fd5b505050506111743382611575565b60405187907f02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e890600090a250505050505050565b6000546001600160a01b031633146111d25760405162461bcd60e51b815260040161015490611e34565b6111dc8282611575565b6040518181526001600160a01b0383169033907f65e7b5fc027a987097ea9153a20964a3aa8152d2d0d88b8e6ba7637fd7329c6c9060200160405180910390a35050565b6000546001600160a01b0316331461124a5760405162461bcd60e51b815260040161015490611e34565b6001600160a01b0381166112af5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610154565b6112b881611620565b50565b604051632142170760e11b8152336004820152306024820152604481018390526001600160a01b038416906342842e0e90606401600060405180830381600087803b15801561130957600080fd5b505af115801561131d573d6000803e3d6000fd5b5050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015611381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a59190611cc3565b60405163f668a9c560e01b81526004810189905260248101889052604481018790526001600160a01b0386811660648301526084820186905284811660a483015291925060009183169063f668a9c59060c4016020604051808303816000875af1158015611417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143b9190611dee565b604051632e1a7d4d60e01b8152600481018990529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156114a057600080fd5b505af11580156114b4573d6000803e3d6000fd5b505050506114c28388611575565b80836001600160a01b0316897fe6cfa82d3ec969b90a4b9829a1257566d7092f05f0f878651326ae1a44e02fdc60405160405180910390a45050505050505050565b6040516001600160a01b038085166024830152831660448201526064810182905261156f9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526116a5565b50505050565b604080516000808252602082019092526001600160a01b03841690839060405161159f9190611f3f565b60006040518083038185875af1925050503d80600081146115dc576040519150601f19603f3d011682016040523d82523d6000602084013e6115e1565b606091505b50509050806040518060400160405280600381526020016203131360ec1b8152509061156f5760405162461bcd60e51b8152600401610154919061191d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b0383166024820152604481018290526116a090849063a9059cbb60e01b90606401611538565b505050565b60006116fa826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117779092919063ffffffff16565b8051909150156116a057808060200190518101906117189190611ee8565b6116a05760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610154565b60606117868484600085611790565b90505b9392505050565b6060824710156117f15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610154565b843b61183f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610154565b600080866001600160a01b0316858760405161185b9190611f3f565b60006040518083038185875af1925050503d8060008114611898576040519150601f19603f3d011682016040523d82523d6000602084013e61189d565b606091505b50915091506118ad8282866118b8565b979650505050505050565b606083156118c7575081611789565b8251156118d75782518084602001fd5b8160405162461bcd60e51b8152600401610154919061191d565b60005b8381101561190c5781810151838201526020016118f4565b8381111561156f5750506000910152565b602081526000825180602084015261193c8160408501602087016118f1565b601f01601f19169190910160400192915050565b6001600160a01b03811681146112b857600080fd5b60008060006060848603121561197a57600080fd5b8335925060208401359150604084013561199381611950565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff811182821017156119d8576119d861199e565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611a0757611a0761199e565b604052919050565b60008060008060808587031215611a2557600080fd5b8435611a3081611950565b9350602085810135611a4181611950565b935060408601359250606086013567ffffffffffffffff80821115611a6557600080fd5b818801915088601f830112611a7957600080fd5b813581811115611a8b57611a8b61199e565b611a9d601f8201601f191685016119de565b91508082528984828501011115611ab357600080fd5b808484018584013760008482840101525080935050505092959194509250565b600060208284031215611ae557600080fd5b5035919050565b60008060208385031215611aff57600080fd5b823567ffffffffffffffff80821115611b1757600080fd5b818501915085601f830112611b2b57600080fd5b813581811115611b3a57600080fd5b8660208260051b8501011115611b4f57600080fd5b60209290920196919550909350505050565b600080600060608486031215611b7657600080fd5b833592506020840135611b8881611950565b9150604084013561ffff8116811461199357600080fd5b600080600060608486031215611bb457600080fd5b8335611bbf81611950565b92506020840135611bcf81611950565b929592945050506040919091013590565b600080600060608486031215611bf557600080fd5b505081359360208301359350604090920135919050565b60008060408385031215611c1f57600080fd5b8235611c2a81611950565b946020939093013593505050565b600060208284031215611c4a57600080fd5b813561178981611950565b60008060008060008060c08789031215611c6e57600080fd5b8635955060208701359450604087013593506060870135611c8e81611950565b92506080870135915060a0870135611ca581611950565b809150509295509295509295565b8051611cbe81611950565b919050565b600060208284031215611cd557600080fd5b815161178981611950565b80516fffffffffffffffffffffffffffffffff81168114611cbe57600080fd5b805164ffffffffff81168114611cbe57600080fd5b80518015158114611cbe57600080fd5b60006101808284031215611d3857600080fd5b611d406119b4565b82518152611d5060208401611cb3565b6020820152611d6160408401611cb3565b6040820152611d7260608401611cb3565b6060820152611d8360808401611ce0565b608082015260a083015160a082015260c083015160c0820152611da860e08401611d00565b60e08201526101008381015190820152610120611dc6818501611cb3565b908201526101408381015190820152610160611de3818501611d15565b908201529392505050565b600060208284031215611e0057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015611e2f57611e2f611e07565b500390565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415611e9357611e93611e07565b5060010190565b60208082528181018390526000908460408401835b86811015611edd578235611ec281611950565b6001600160a01b031682529183019190830190600101611eaf565b509695505050505050565b600060208284031215611efa57600080fd5b61178982611d15565b60008060408385031215611f1657600080fd5b505080516020909101519092909150565b60008219821115611f3a57611f3a611e07565b500190565b60008251611f518184602087016118f1565b919091019291505056fea2646970667358221220373f4cb9ef915d056f667347b3f2297f1a26fc4db66fb536526c1ad00ca6f67a64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "authorizeLendingPoolNFT(address[])": {
        "details": "Only callable by the owner",
        "params": {
          "nftAssets": "addresses of nft assets*"
        }
      },
      "authorizeLendingPoolWETH()": {
        "details": "Only callable by the owner*"
      },
      "borrow(uint256,uint256,uint256,address,uint256,address)": {
        "details": "Borrows ETH from reserve using an NFT as collateral and will receive a loan NFT as receipt.",
        "params": {
          "amount": "amount of ETH user will borrow",
          "duration": "The desired duration of the loan",
          "nftAddress": "The collateral NFT address",
          "onBehalfOf": "address of the user who will receive ETH and loan NFT.",
          "reserveId": "The ID of the reserve",
          "tokenId": "The ID of the NFT"
        }
      },
      "constructor": {
        "details": "Sets the WETH address and the OpenSkySettings address.",
        "params": {
          "weth": "Address of the Wrapped Ether contract*"
        }
      },
      "deposit(uint256,address,uint16)": {
        "details": "deposits WETH into the reserve, using native ETH. A corresponding amount of the overlying asset (aTokens) is minted.",
        "params": {
          "onBehalfOf": "address of the user who will receive the aTokens representing the deposit",
          "referralCode": "integrators are assigned a referral code and can potentially receive rewards.*",
          "reserveId": "address of the targeted underlying lending pool"
        }
      },
      "emergencyEtherTransfer(address,uint256)": {
        "details": "transfer native Ether from the utility contract, for native Ether recovery in case of stuck Ether due selfdestructs or transfer ether to pre-computed contract address before deployment.",
        "params": {
          "amount": "amount to send",
          "to": "recipient of the transfer"
        }
      },
      "emergencyTokenTransfer(address,address,uint256)": {
        "details": "transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due direct transfers to the contract address.",
        "params": {
          "amount": "amount to send",
          "to": "recipient of the transfer",
          "token": "token to transfer"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "repay(uint256)": {
        "details": "repays a borrow on the WETH reserve, for the specified amount (or for the whole amount, if uint256(-1) is specified).",
        "params": {
          "loanId": "the id of reserve"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256,uint256,address)": {
        "details": "withdraws the WETH _reserves of msg.sender.",
        "params": {
          "amount": "amount of aWETH to withdraw and receive native ETH",
          "onBehalfOf": "address of the user who will receive native ETH",
          "reserveId": "address of the targeted underlying lending pool"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "authorizeLendingPoolNFT(address[])": {
        "notice": "Infinite NFT approves OpenSkyPool contract."
      },
      "authorizeLendingPoolWETH()": {
        "notice": "Infinite weth approves OpenSkyPool contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 387,
        "contract": "contracts/misc/OpenSkyWETHGateway.sol:OpenSkyWETHGateway",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}