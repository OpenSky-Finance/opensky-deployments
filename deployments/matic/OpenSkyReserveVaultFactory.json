{
  "address": "0x233Da04281824c745Dd25176A6e11f64964f01F9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_settings",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlyingAsset",
          "type": "address"
        }
      ],
      "name": "Create",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SETTINGS",
      "outputs": [
        {
          "internalType": "contract IOpenSkySettings",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "underlyingAsset",
          "type": "address"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "oTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa002ac6ce4be0f7a0b67fb0d0d8fb2ca82de836f2bc143c233ca892d93ed19a1",
  "receipt": {
    "to": null,
    "from": "0x218513C58A4781a5B88De6230caA29aBCe2Ccd75",
    "contractAddress": "0x233Da04281824c745Dd25176A6e11f64964f01F9",
    "transactionIndex": 25,
    "gasUsed": "3254079",
    "logsBloom": "0x
    "blockHash": "0xd8e0e1bf28b68e7dd94fc9bc31cf38a5afdda9fafe527b97c73a64b0ef9107b8",
    "transactionHash": "0xa002ac6ce4be0f7a0b67fb0d0d8fb2ca82de836f2bc143c233ca892d93ed19a1",
    "logs": [
      {
        "transactionIndex": 25,
        "blockNumber": 30354931,
        "transactionHash": "0xa002ac6ce4be0f7a0b67fb0d0d8fb2ca82de836f2bc143c233ca892d93ed19a1",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000218513c58a4781a5b88de6230caa29abce2ccd75",
          "0x000000000000000000000000ec20607aa654d823dd01beb8780a44863c57ed07"
        ],
        "data": "0x00000000000000000000000000000000000000000000000003630f9216e199d500000000000000000000000000000000000000000000000010c5864c129c001b0000000000000000000000000000000000000000000000c8d4be7ccf82b7f26d0000000000000000000000000000000000000000000000000d6276b9fbba66460000000000000000000000000000000000000000000000c8d8218c6199998c42",
        "logIndex": 87,
        "blockHash": "0xd8e0e1bf28b68e7dd94fc9bc31cf38a5afdda9fafe527b97c73a64b0ef9107b8"
      }
    ],
    "blockNumber": 30354931,
    "cumulativeGasUsed": "6546967",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x44692709AB4979aC917b55F6608b782bd5Ef7Bc8"
  ],
  "solcInputHash": "fb80df0c083f4166f8e17cc8f4ebb48d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_settings\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"}],\"name\":\"Create\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SETTINGS\",\"outputs\":[{\"internalType\":\"contract IOpenSkySettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OpenSkyReserveVaultFactory.sol\":\"OpenSkyReserveVaultFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xf98cb1651a90d20ef77d8c1dd10d5fce4954e747603e5672a8292bd4368120dd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0x7ce4684ee1fac31ee5671df82b30c10bd2ebf88add2f63524ed00618a8486907\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x3aab711a5f9a5a5a394191e928cc8258e8a243e855bb0275e7834f9686383277\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x8756c97d6004b1ae21517a013bdec72fbf30be7852afb2f395871d280131b250\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0xba18d725602452307e5b278ed4566616c63792d89f3a0388a6f285428c26e681\",\"license\":\"MIT\"},\"contracts/OpenSkyOToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\n\\nimport './libraries/math/WadRayMath.sol';\\n\\nimport './interfaces/IOpenSkySettings.sol';\\nimport './interfaces/IOpenSkyOToken.sol';\\nimport './interfaces/IOpenSkyPool.sol';\\nimport './interfaces/IOpenSkyIncentivesController.sol';\\nimport './interfaces/IOpenSkyMoneyMarket.sol';\\n\\ncontract OpenSkyOToken is Context, ERC20Permit, ERC20Burnable, ERC721Holder, IOpenSkyOToken {\\n    using WadRayMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IOpenSkySettings public immutable SETTINGS;\\n\\n    address internal immutable _pool;\\n    uint256 internal immutable _reserveId;\\n    address internal immutable _underlyingAsset;\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == address(_pool), Errors.ACL_ONLY_POOL_CAN_CALL);\\n        _;\\n    }\\n\\n    constructor(\\n        address pool,\\n        uint256 reserveId,\\n        string memory name,\\n        string memory symbol,\\n        address underlyingAsset,\\n        address settings\\n    ) ERC20(name, symbol) ERC20Permit(symbol) {\\n        _pool = pool;\\n        _reserveId = reserveId;\\n        _underlyingAsset = underlyingAsset;\\n        SETTINGS = IOpenSkySettings(settings);\\n    }\\n\\n    function _treasury() internal view returns (address) {\\n        return SETTINGS.daoVaultAddress();\\n    }\\n\\n    function mint(\\n        address account,\\n        uint256 amount,\\n        uint256 index\\n    ) external virtual override onlyPool {\\n        uint256 amountScaled = amount.rayDiv(index);\\n        require(amountScaled != 0, Errors.AMOUNT_SCALED_IS_ZERO);\\n\\n        _mint(account, amountScaled);\\n        emit Mint(account, amount, index);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        uint256 previousBalance = super.balanceOf(account);\\n        uint256 previousTotalSupply = super.totalSupply();\\n\\n        super._mint(account, amount);\\n\\n        address incentiveControllerAddress = SETTINGS.incentiveControllerAddress();\\n        if (incentiveControllerAddress != address(0)) {\\n            IOpenSkyIncentivesController(incentiveControllerAddress).handleAction(\\n                account,\\n                previousBalance,\\n                previousTotalSupply\\n            );\\n        }\\n    }\\n\\n    function burn(\\n        address account,\\n        uint256 amount,\\n        uint256 index\\n    ) external virtual override onlyPool {\\n        uint256 amountScaled = amount.rayDiv(index);\\n        require(amountScaled != 0, Errors.AMOUNT_SCALED_IS_ZERO);\\n\\n        _burn(account, amountScaled);\\n        emit Burn(account, amount, index);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual override {\\n        uint256 previousBalance = super.balanceOf(account);\\n        uint256 previousTotalSupply = super.totalSupply();\\n\\n        super._burn(account, amount);\\n\\n        address incentiveControllerAddress = SETTINGS.incentiveControllerAddress();\\n        if (incentiveControllerAddress != address(0)) {\\n            IOpenSkyIncentivesController(incentiveControllerAddress).handleAction(\\n                account,\\n                previousBalance,\\n                previousTotalSupply\\n            );\\n        }\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal override {\\n        uint256 index = IOpenSkyPool(_pool).getReserveNormalizedIncome(_reserveId);\\n\\n        uint256 amountScaled = amount.rayDiv(index);\\n        require(amountScaled != 0, Errors.AMOUNT_SCALED_IS_ZERO);\\n        require(amountScaled <= type(uint128).max, Errors.AMOUNT_TRANSFER_OVERFLOW);\\n\\n        uint256 previousSenderBalance = super.balanceOf(sender);\\n        uint256 previousRecipientBalance = super.balanceOf(recipient);\\n\\n        super._transfer(sender, recipient, amountScaled);\\n\\n        address incentiveControllerAddress = SETTINGS.incentiveControllerAddress();\\n        if (incentiveControllerAddress != address(0)) {\\n            uint256 currentTotalSupply = super.totalSupply();\\n            IOpenSkyIncentivesController(incentiveControllerAddress).handleAction(\\n                sender,\\n                previousSenderBalance,\\n                currentTotalSupply\\n            );\\n            if (sender != recipient) {\\n                IOpenSkyIncentivesController(incentiveControllerAddress).handleAction(\\n                    recipient,\\n                    previousRecipientBalance,\\n                    currentTotalSupply\\n                );\\n            }\\n        }\\n    }\\n\\n    function mintToTreasury(uint256 amount, uint256 index) external override onlyPool {\\n        if (amount == 0) {\\n            return;\\n        }\\n        _mint(_treasury(), amount.rayDiv(index));\\n        emit MintToTreasury(_treasury(), amount, index);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20) {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n\\n    event Received(address, uint256);\\n\\n    receive() external payable {\\n        emit Received(msg.sender, msg.value);\\n    }\\n\\n    // called only by pool\\n    function deposit(uint256 amount) external override onlyPool {\\n        DataTypes.ReserveData memory reserve = IOpenSkyPool(_pool).getReserveData(_reserveId);\\n\\n        if (reserve.isMoneyMarketOn) {\\n            (bool success, ) = address(reserve.moneyMarketAddress).delegatecall(\\n                abi.encodeWithSignature('depositCall(address,uint256)', _underlyingAsset, amount)\\n            );\\n            require(success, Errors.MONEY_MARKET_DELEGATE_CALL_ERROR);\\n        }\\n        emit Deposit(amount);\\n    }\\n\\n    function withdraw(uint256 amount, address to) external override onlyPool {\\n        DataTypes.ReserveData memory reserve = IOpenSkyPool(_pool).getReserveData(_reserveId);\\n\\n        if (reserve.isMoneyMarketOn) {\\n            (bool success, ) = address(reserve.moneyMarketAddress).delegatecall(\\n                abi.encodeWithSignature('withdrawCall(address,uint256,address)', _underlyingAsset, amount, to)\\n            );\\n            require(success, Errors.MONEY_MARKET_DELEGATE_CALL_ERROR);\\n        } else {\\n            IERC20(_underlyingAsset).safeTransfer(to, amount);\\n        }\\n        emit Withdraw(amount);\\n    }\\n\\n    function balanceOf(address account) public view override(ERC20, IERC20) returns (uint256) {\\n        uint256 index = IOpenSkyPool(_pool).getReserveNormalizedIncome(_reserveId);\\n        return super.balanceOf(account).rayMul(index);\\n    }\\n\\n    function scaledBalanceOf(address account) external view override returns (uint256) {\\n        return super.balanceOf(account);\\n    }\\n\\n    function principleBalanceOf(address account) external view override returns (uint256) {\\n        uint256 currentBalanceScaled = super.balanceOf(account);\\n        uint256 lastSupplyIndex = IOpenSkyPool(_pool).getReserveData(_reserveId).lastSupplyIndex;\\n        return currentBalanceScaled.rayMul(lastSupplyIndex);\\n    }\\n\\n    function totalSupply() public view override(ERC20, IERC20) returns (uint256) {\\n        uint256 currentSupplyScaled = super.totalSupply();\\n\\n        if (currentSupplyScaled == 0) {\\n            return 0;\\n        }\\n\\n        return currentSupplyScaled.rayMul(IOpenSkyPool(_pool).getReserveNormalizedIncome(_reserveId));\\n    }\\n\\n    function scaledTotalSupply() external view virtual override returns (uint256) {\\n        return super.totalSupply();\\n    }\\n\\n    function principleTotalSupply() external view virtual override returns (uint256) {\\n        uint256 currentSupplyScaled = super.totalSupply();\\n        uint256 lastSupplyIndex = IOpenSkyPool(_pool).getReserveData(_reserveId).lastSupplyIndex;\\n        return currentSupplyScaled.rayMul(lastSupplyIndex);\\n    }\\n\\n    /**\\n     * @dev Returns the scaled balance of the user and the scaled total supply.\\n     * @param user The address of the user\\n     * @return The scaled balance of the user\\n     * @return The scaled balance and the scaled total supply\\n     **/\\n    function getScaledUserBalanceAndSupply(address user) external view override returns (uint256, uint256) {\\n        return (super.balanceOf(user), super.totalSupply());\\n    }\\n\\n    function claimERC20Rewards(address token) external override onlyPool {\\n        DataTypes.ReserveData memory reserve = IOpenSkyPool(_pool).getReserveData(_reserveId);\\n        require(\\n            token != IOpenSkyMoneyMarket(reserve.moneyMarketAddress).getMoneyMarketToken(_underlyingAsset) &&\\n                token != _underlyingAsset,\\n            Errors.RESERVE_TOKEN_CAN_NOT_BE_CLAIMED\\n        );\\n        IERC20(token).safeTransfer(_treasury(), IERC20(token).balanceOf(address(this)));\\n    }\\n}\\n\",\"keccak256\":\"0xbbe6557dee1fc8d0a885be4ad70d37a439facd3c45845ef792f5604e38b7333d\",\"license\":\"MIT\"},\"contracts/OpenSkyReserveVaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport './interfaces/IOpenSkySettings.sol';\\nimport './interfaces/IOpenSkyReserveVaultFactory.sol';\\nimport './OpenSkyOToken.sol';\\nimport './libraries/helpers/Errors.sol';\\n\\ncontract OpenSkyReserveVaultFactory is IOpenSkyReserveVaultFactory {\\n    IOpenSkySettings public immutable SETTINGS;\\n\\n    modifier onlyPool() {\\n        require(msg.sender == SETTINGS.poolAddress(), Errors.ACL_ONLY_POOL_CAN_CALL);\\n        _;\\n    }\\n\\n    constructor(address _settings) {\\n        SETTINGS = IOpenSkySettings(_settings);\\n    }\\n\\n    function create(\\n        uint256 reserveId,\\n        string memory name,\\n        string memory symbol,\\n        address underlyingAsset\\n    ) external override onlyPool returns (address oTokenAddress) {\\n        oTokenAddress = address(\\n            new OpenSkyOToken(msg.sender, reserveId, name, symbol, underlyingAsset, address(SETTINGS))\\n        );\\n        emit Create(reserveId, name, symbol, underlyingAsset);\\n    }\\n}\\n\",\"keccak256\":\"0xa7418baa45ba8bb540d3ad6bd30d1fda2c662fb69a6eb612b577e9eebc3d4b6e\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\ninterface IOpenSkyIncentivesController {\\n    function handleAction(\\n        address account,\\n        uint256 userBalance,\\n        uint256 totalSupply\\n    ) external;\\n\\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to,\\n        bool stake\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x54643871d96144866e7076d90687f730352afca73a363cc108b2cedfa7c197c8\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyMoneyMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IOpenSkyMoneyMarket {\\n\\n    function depositCall(address asset, uint256 amount) external;\\n\\n    function withdrawCall(address asset, uint256 amount, address to) external;\\n\\n    function getMoneyMarketToken(address asset) external view returns (address);\\n\\n    function getBalance(address asset, address account) external view returns (uint256);\\n\\n    function getSupplyRate(address asset) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x87887f907caba2855a72b6a85ebe10487dea1a9f2ce88325173c81c21fa32d9e\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyOToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IOpenSkyOToken is IERC20 {\\n    event Mint(address indexed account, uint256 amount, uint256 index);\\n    event Burn(address indexed account, uint256 amount, uint256 index);\\n    event MintToTreasury(address treasury, uint256 amount, uint256 index);\\n    event Deposit(uint256 amount);\\n    event Withdraw(uint256 amount);\\n\\n    function mint(\\n        address account,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n\\n    function burn(\\n        address account,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n\\n    function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n    function deposit(uint256 amount) external;\\n\\n    function withdraw(uint256 amount, address to) external;\\n\\n    function scaledBalanceOf(address account) external view returns (uint256);\\n\\n    function principleBalanceOf(address account) external view returns (uint256);\\n\\n    function scaledTotalSupply() external view returns (uint256);\\n\\n    function principleTotalSupply() external view returns (uint256);\\n\\n    function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n    function claimERC20Rewards(address token) external;\\n}\\n\",\"keccak256\":\"0x555e35dcdc4163429b75012557aafaa786a3b5afdda354edcd76210440ce1b08\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IOpenSkyPool\\n * @author OpenSky Labs\\n * @notice Defines the basic interface for an OpenSky Pool.\\n **/\\n\\ninterface IOpenSkyPool {\\n    /*\\n     * @dev Emitted on create()\\n     * @param reserveId The ID of the reserve\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param oTokenAddress The address of the oToken\\n     * @param name The name to use for oToken\\n     * @param symbol The symbol to use for oToken\\n     */\\n    event Create(uint256 indexed reserveId, address indexed underlyingAsset, address indexed oTokenAddress, string name, string symbol);\\n\\n    /*\\n     * @dev Emitted on setTreasuryFactor()\\n     * @param reserveId The ID of the reserve\\n     * @param factor The new treasury factor of the reserve\\n     */\\n    event SetTreasuryFactor(uint256 indexed reserveId, uint256 factor);\\n\\n    /*\\n     * @dev Emitted on setInterestModelAddress()\\n     * @param reserveId The ID of the reserve\\n     * @param interestModelAddress The address of the interest model contract\\n     */\\n    event SetInterestModelAddress(uint256 indexed reserveId, address interestModelAddress);\\n\\n    /*\\n     * @dev Emitted on openMoneyMarket()\\n     * @param reserveId The ID of the reserve\\n     */\\n    event OpenMoneyMarket(uint256 reserveId);\\n\\n    /*\\n     * @dev Emitted on closeMoneyMarket()\\n     * @param reserveId The ID of the reserve\\n     */\\n    event CloseMoneyMarket(uint256 reserveId);\\n\\n    /*\\n     * @dev Emitted on deposit()\\n     * @param reserveId The ID of the reserve\\n     * @param onBehalfOf The address that will receive the oTokens\\n     * @param amount The amount of ETH to be deposited\\n     * @param referralCode integrators are assigned a referral code and can potentially receive rewards\\n     * 0 if the action is executed directly by the user, without any intermediaries\\n     */\\n    event Deposit(uint256 indexed reserveId, address indexed onBehalfOf, uint256 amount, uint256 referralCode);\\n\\n    /*\\n     * @dev Emitted on withdraw()\\n     * @param reserveId The ID of the reserve\\n     * @param onBehalfOf The address that will receive assets withdrawed\\n     * @param amount The amount to be withdrawn\\n     */\\n    event Withdraw(uint256 indexed reserveId, address indexed onBehalfOf, uint256 amount);\\n\\n    /*\\n     * @dev Emitted on borrow()\\n     * @param reserveId The ID of the reserve\\n     * @param user The address initiating the withdrawal(), owner of oTokens\\n     * @param onBehalfOf The address that will receive the ETH and the loan NFT\\n     * @param loanId The loan ID\\n     */\\n    event Borrow(\\n        uint256 indexed reserveId,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 indexed loanId\\n    );\\n\\n    /*\\n     * @dev Emitted on repay()\\n     * @param reserveId The ID of the reserve\\n     * @param repayer The address initiating the repayment()\\n     * @param onBehalfOf The address that will receive the pledged NFT\\n     * @param loanId The ID of the loan\\n     * @param repayAmount The borrow balance of the loan when it was repaid\\n     * @param penalty The penalty of the loan for either early or overdue repayment\\n     */\\n    event Repay(\\n        uint256 indexed reserveId,\\n        address repayer,\\n        address indexed onBehalfOf,\\n        uint256 indexed loanId,\\n        uint256 repayAmount,\\n        uint256 penalty\\n    );\\n\\n    /*\\n     * @dev Emitted on extend()\\n     * @param reserveId The ID of the reserve\\n     * @param onBehalfOf The owner address of loan NFT\\n     * @param oldLoanId The ID of the old loan\\n     * @param newLoanId The ID of the new loan\\n     */\\n    event Extend(uint256 indexed reserveId, address indexed onBehalfOf, uint256 oldLoanId, uint256 newLoanId);\\n\\n    /*\\n     * @dev Emitted on startLiquidation()\\n     * @param reserveId The ID of the reserve\\n     * @param loanId The ID of the loan\\n     * @param nftAddress The address of the NFT used as collateral\\n     * @param tokenId The ID of the NFT used as collateral\\n     * @param operator The address initiating startLiquidation()\\n     */\\n    event StartLiquidation(\\n        uint256 indexed reserveId,\\n        uint256 indexed loanId,\\n        address indexed nftAddress,\\n        uint256 tokenId,\\n        address operator\\n    );\\n\\n    /*\\n     * @dev Emitted on endLiquidation()\\n     * @param reserveId The ID of the reserve\\n     * @param loanId The ID of the loan\\n     * @param nftAddress The address of the NFT used as collateral\\n     * @param tokenId The ID of the NFT used as collateral\\n     * @param operator\\n     * @param repayAmount The amount used to repay, must be equal to or greater than the borrowBalance, excess part will be shared by all the lenders\\n     * @param borrowBalance The borrow balance of the loan\\n     */\\n    event EndLiquidation(\\n        uint256 indexed reserveId,\\n        uint256 indexed loanId,\\n        address indexed nftAddress,\\n        uint256 tokenId,\\n        address operator,\\n        uint256 repayAmount,\\n        uint256 borrowBalance\\n    );\\n\\n    /**\\n     * @notice Creates a reserve\\n     * @dev Only callable by the pool admin role\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param name The name of the oToken\\n     * @param symbol The symbol for the oToken\\n     **/\\n    function create(address underlyingAsset, string memory name, string memory symbol) external;\\n\\n    /**\\n     * @notice Updates the treasury factor of a reserve\\n     * @dev Only callable by the pool admin role\\n     * @param reserveId The ID of the reserve\\n     * @param factor The new treasury factor of the reserve\\n     **/\\n    function setTreasuryFactor(uint256 reserveId, uint256 factor) external;\\n\\n    /**\\n     * @notice Updates the interest model address of a reserve\\n     * @dev Only callable by the pool admin role\\n     * @param reserveId The ID of the reserve\\n     * @param interestModelAddress The new address of the interest model contract\\n     **/\\n    function setInterestModelAddress(uint256 reserveId, address interestModelAddress) external;\\n\\n    /**\\n     * @notice Open the money market\\n     * @dev Only callable by the emergency admin role\\n     * @param reserveId The ID of the reserve\\n     **/\\n    function openMoneyMarket(uint256 reserveId) external;\\n\\n    /**\\n     * @notice Close the money market\\n     * @dev Only callable by the emergency admin role\\n     * @param reserveId The ID of the reserve\\n     **/\\n    function closeMoneyMarket(uint256 reserveId) external;\\n\\n    /**\\n     * @dev Deposits ETH into the reserve.\\n     * @param reserveId The ID of the reserve\\n     * @param referralCode integrators are assigned a referral code and can potentially receive rewards\\n     **/\\n    function deposit(uint256 reserveId, uint256 amount, address onBehalfOf, uint256 referralCode) external;\\n\\n    /**\\n     * @dev withdraws the ETH from reserve.\\n     * @param reserveId The ID of the reserve\\n     * @param amount amount of oETH to withdraw and receive native ETH\\n     **/\\n    function withdraw(uint256 reserveId, uint256 amount, address onBehalfOf) external;\\n\\n    /**\\n     * @dev Borrows ETH from reserve using an NFT as collateral and will receive a loan NFT as receipt.\\n     * @param reserveId The ID of the reserve\\n     * @param amount amount of ETH user will borrow\\n     * @param duration The desired duration of the loan\\n     * @param nftAddress The collateral NFT address\\n     * @param tokenId The ID of the NFT\\n     * @param onBehalfOf address of the user who will receive ETH and loan NFT.\\n     **/\\n    function borrow(\\n        uint256 reserveId,\\n        uint256 amount,\\n        uint256 duration,\\n        address nftAddress,\\n        uint256 tokenId,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Repays a loan, as a result the corresponding loan NFT owner will receive the collateralized NFT.\\n     * @param loanId The ID of the loan the user will repay\\n     */\\n    function repay(uint256 loanId) external returns (uint256);\\n\\n    /**\\n     * @dev Extends creates a new loan and terminates the old loan.\\n     * @param loanId The loan ID to extend\\n     * @param amount The amount of ERC20 token the user will borrow in the new loan\\n     * @param duration The selected duration the user will borrow in the new loan\\n     * @param onBehalfOf The address will borrow in the new loan\\n     **/\\n    function extend(\\n        uint256 loanId,\\n        uint256 amount,\\n        uint256 duration,\\n        address onBehalfOf\\n    ) external returns (uint256, uint256);\\n\\n    /**\\n     * @dev Starts liquidation for a loan when it's in LIQUIDATABLE status\\n     * @param loanId The ID of the loan which will be liquidated\\n     */\\n    function startLiquidation(uint256 loanId) external;\\n\\n    /**\\n     * @dev Completes liquidation for a loan which will be repaid.\\n     * @param loanId The ID of the liquidated loan that will be repaid.\\n     * @param amount The amount of the token that will be repaid.\\n     */\\n    function endLiquidation(uint256 loanId, uint256 amount) external;\\n\\n    /**\\n     * @dev Returns the state of the reserve\\n     * @param reserveId The ID of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getReserveData(uint256 reserveId) external view returns (DataTypes.ReserveData memory);\\n\\n    /**\\n     * @dev Returns the normalized income of the reserve\\n     * @param reserveId The ID of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(uint256 reserveId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the remaining liquidity of the reserve\\n     * @param reserveId The ID of the reserve\\n     * @return The reserve's withdrawable balance\\n     */\\n    function getAvailableLiquidity(uint256 reserveId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the instantaneous borrow limit value of a special NFT\\n     * @param nftAddress The address of the NFT\\n     * @param tokenId The ID of the NFT\\n     * @return The NFT's borrow limit\\n     */\\n    function getBorrowLimitByOracle(\\n        uint256 reserveId,\\n        address nftAddress,\\n        uint256 tokenId\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the sum of all users borrow balances include borrow interest accrued\\n     * @param reserveId The ID of the reserve\\n     * @return The total borrow balance of the reserve\\n     */\\n    function getTotalBorrowBalance(uint256 reserveId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns TVL (total value locked) of the reserve.\\n     * @param reserveId The ID of the reserve\\n     * @return The reserve's TVL\\n     */\\n    function getTVL(uint256 reserveId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7ec728346d3e0566b64a6ff3abfc884604926b0856283bc0b3b74160e9f1bf5d\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyReserveVaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IOpenSkyReserveVaultFactory {\\n    event Create(uint256 indexed reserveId, string name, string symbol, address indexed underlyingAsset);\\n\\n    function create(\\n        uint256 reserveId,\\n        string memory name,\\n        string memory symbol,\\n        address underlyingAsset\\n    ) external returns (address oTokenAddress);\\n}\\n\",\"keccak256\":\"0xd030604faa65f92e82f2b584c7c4feb4a75fd59b622a0930179c27396b5fd977\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkySettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\nimport '../libraries/types/DataTypes.sol';\\n\\ninterface IOpenSkySettings {\\n    event InitPoolAddress(address operator, address address_);\\n    event InitLoanAddress(address operator, address address_);\\n    event InitVaultFactoryAddress(address operator, address address_);\\n    event InitIncentiveControllerAddress(address operator, address address_);\\n    event InitWETHGatewayAddress(address operator, address address_);\\n    event InitPunkGatewayAddress(address operator, address address_);\\n    event InitDaoVaultAddress(address operator, address address_);\\n\\n    event AddToWhitelist(address operator, uint256 reserveId, address nft);\\n    event RemoveFromWhitelist(address operator, uint256 reserveId, address nft);\\n    event SetReserveFactor(address operator, uint256 factor);\\n    event SetPrepaymentFeeFactor(address operator, uint256 factor);\\n    event SetOverdueLoanFeeFactor(address operator, uint256 factor);\\n    event SetMoneyMarketAddress(address operator, address address_);\\n    event SetTreasuryAddress(address operator, address address_);\\n    event SetACLManagerAddress(address operator, address address_);\\n    event SetLoanDescriptorAddress(address operator, address address_);\\n    event SetNftPriceOracleAddress(address operator, address address_);\\n    event SetInterestRateStrategyAddress(address operator, address address_);\\n    event AddLiquidator(address operator, address address_);\\n    event RemoveLiquidator(address operator, address address_);\\n\\n    function poolAddress() external view returns (address);\\n\\n    function loanAddress() external view returns (address);\\n\\n    function vaultFactoryAddress() external view returns (address);\\n\\n    function incentiveControllerAddress() external view returns (address);\\n\\n    function wethGatewayAddress() external view returns (address);\\n\\n    function punkGatewayAddress() external view returns (address);\\n\\n    function inWhitelist(uint256 reserveId, address nft) external view returns (bool);\\n\\n    function getWhitelistDetail(uint256 reserveId, address nft) external view returns (DataTypes.WhitelistInfo memory);\\n\\n    function reserveFactor() external view returns (uint256); // treasury ratio\\n\\n    function MAX_RESERVE_FACTOR() external view returns (uint256);\\n\\n    function prepaymentFeeFactor() external view returns (uint256);\\n\\n    function overdueLoanFeeFactor() external view returns (uint256);\\n\\n    function moneyMarketAddress() external view returns (address);\\n\\n    function treasuryAddress() external view returns (address);\\n\\n    function daoVaultAddress() external view returns (address);\\n\\n    function ACLManagerAddress() external view returns (address);\\n\\n    function loanDescriptorAddress() external view returns (address);\\n\\n    function nftPriceOracleAddress() external view returns (address);\\n\\n    function interestRateStrategyAddress() external view returns (address);\\n    \\n    function isLiquidator(address liquidator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd5c1c2468464891b3ce379c8a03bc21c2c67fcf0c7493e3b35fd573fa21ea448\",\"license\":\"MIT\"},\"contracts/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    // common\\n    string public constant MATH_MULTIPLICATION_OVERFLOW = '100';\\n    string public constant MATH_ADDITION_OVERFLOW = '101';\\n    string public constant MATH_DIVISION_BY_ZERO = '102';\\n\\n    string public constant ETH_TRANSFER_FAILED = '110';\\n    string public constant RECEIVE_NOT_ALLOWED = '111';\\n    string public constant FALLBACK_NOT_ALLOWED = '112';\\n    string public constant APPROVAL_FAILED = '113';\\n\\n    // setting/factor\\n    string public constant SETTING_ZERO_ADDRESS_NOT_ALLOWED = '115';\\n    string public constant SETTING_RESERVE_FACTOR_NOT_ALLOWED = '116';\\n    string public constant SETTING_WHITELIST_INVALID_RESERVE_ID = '117';\\n    string public constant SETTING_WHITELIST_NFT_ADDRESS_IS_ZERO = '118';\\n\\n    // settings/acl\\n    string public constant ACL_ONLY_GOVERNANCE_CAN_CALL = '200';\\n    string public constant ACL_ONLY_EMERGENCY_ADMIN_CAN_CALL = '201';\\n    string public constant ACL_ONLY_POOL_ADMIN_CAN_CALL = '202';\\n    string public constant ACL_ONLY_LIQUIDATOR_CAN_CALL = '203';\\n    string public constant ACL_ONLY_AIRDROP_OPERATOR_CAN_CALL = '204';\\n    string public constant ACL_ONLY_POOL_CAN_CALL = '205';\\n\\n    // lending & borrowing\\n    // reserve\\n    string public constant RESERVE_DOES_NOT_EXIST = '300';\\n    string public constant RESERVE_LIQUIDITY_INSUFFICIENT = '301';\\n    string public constant RESERVE_INDEX_OVERFLOW = '302';\\n    string public constant RESERVE_SWITCH_MONEY_MARKET_STATE_ERROR = '303';\\n    string public constant RESERVE_TREASURY_FACTOR_NOT_ALLOWED = '304';\\n    string public constant RESERVE_TOKEN_CAN_NOT_BE_CLAIMED = '305';\\n\\n    // token\\n    string public constant AMOUNT_SCALED_IS_ZERO = '310';\\n    string public constant AMOUNT_TRANSFER_OVERFLOW = '311';\\n\\n    //deposit\\n    string public constant DEPOSIT_AMOUNT_SHOULD_BE_BIGGER_THAN_ZERO = '320';\\n\\n    // withdraw\\n    string public constant WITHDRAW_AMOUNT_NOT_ALLOWED = '321';\\n    string public constant WITHDRAW_LIQUIDITY_NOT_SUFFICIENT = '322';\\n\\n    // borrow\\n    string public constant BORROW_DURATION_NOT_ALLOWED = '330';\\n    string public constant BORROW_AMOUNT_EXCEED_BORROW_LIMIT = '331';\\n    string public constant NFT_ADDRESS_IS_NOT_IN_WHITELIST = '332';\\n\\n    // repay\\n    string public constant REPAY_STATUS_ERROR = '333';\\n    string public constant REPAY_MSG_VALUE_ERROR = '334';\\n\\n    // extend\\n    string public constant EXTEND_STATUS_ERROR = '335';\\n    string public constant EXTEND_MSG_VALUE_ERROR = '336';\\n\\n    // liquidate\\n    string public constant START_LIQUIDATION_STATUS_ERROR = '360';\\n    string public constant END_LIQUIDATION_STATUS_ERROR = '361';\\n    string public constant END_LIQUIDATION_AMOUNT_ERROR = '362';\\n\\n    // loan\\n    string public constant LOAN_DOES_NOT_EXIST = '400';\\n    string public constant LOAN_SET_STATUS_ERROR = '401';\\n    string public constant LOAN_REPAYER_IS_NOT_OWNER = '402';\\n    string public constant LOAN_LIQUIDATING_STATUS_CAN_NOT_BE_UPDATED = '403';\\n    string public constant LOAN_CALLER_IS_NOT_OWNER = '404';\\n    string public constant LOAN_COLLATERAL_NFT_CAN_NOT_BE_CLAIMED = '405';\\n\\n    string public constant FLASHCLAIM_EXECUTOR_ERROR = '410';\\n    string public constant FLASHCLAIM_STATUS_ERROR = '411';\\n\\n    // money market\\n    string public constant MONEY_MARKET_DEPOSIT_AMOUNT_NOT_ALLOWED = '500';\\n    string public constant MONEY_MARKET_WITHDRAW_AMOUNT_NOT_ALLOWED = '501';\\n    string public constant MONEY_MARKET_APPROVAL_FAILED = '502';\\n    string public constant MONEY_MARKET_DELEGATE_CALL_ERROR = '503';\\n    string public constant MONEY_MARKET_REQUIRE_DELEGATE_CALL = '504';\\n    string public constant MONEY_MARKET_WITHDRAW_AMOUNT_NOT_MATCH = '505';\\n\\n    // price oracle\\n    string public constant PRICE_ORACLE_HAS_NO_PRICE_FEED = '600';\\n    string public constant PRICE_ORACLE_INCORRECT_TIMESTAMP = '601';\\n    string public constant PRICE_ORACLE_PARAMS_ERROR = '602';\\n}\\n\",\"keccak256\":\"0x2eaba20dfb74594e9602bd1ae11dcfc510e2e337969ad435065102ea3fbc0c15\",\"license\":\"MIT\"},\"contracts/libraries/math/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {Errors} from '../helpers/Errors.sol';\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @return One ray, 1e27\\n     **/\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    /**\\n     * @return One wad, 1e18\\n     **/\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e27/2\\n     **/\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e18/2\\n     **/\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     **/\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfWAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * b + halfWAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     **/\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * WAD + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfRAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * b + halfRAY) / RAY;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, truncating the mantissa\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMulTruncate(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return (a * b) / RAY;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * RAY + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, truncating the mantissa\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDivTruncate(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        return (a * RAY) / b;\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @param a Ray\\n     * @return a casted to wad, rounded half up to the nearest wad\\n     **/\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n        uint256 result = halfRatio + a;\\n        require(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\\n\\n        return result / WAD_RAY_RATIO;\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @param a Wad\\n     * @return a converted in ray\\n     **/\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        uint256 result = a * WAD_RAY_RATIO;\\n        require(result / WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4bf6b9a00c5e9938726d173f11b56de8edd92e17593e4dfa61a3ce7336756c6b\",\"license\":\"MIT\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        uint256 reserveId;\\n        address underlyingAsset;\\n        address oTokenAddress;\\n        address moneyMarketAddress;\\n        uint128 lastSupplyIndex;\\n        uint256 borrowingInterestPerSecond;\\n        uint256 lastMoneyMarketBalance;\\n        uint40 lastUpdateTimestamp;\\n        uint256 totalBorrows;\\n        address interestModelAddress;\\n        uint256 treasuryFactor;\\n        bool isMoneyMarketOn;\\n    }\\n\\n    struct LoanData {\\n        uint256 reserveId;\\n        address nftAddress;\\n        uint256 tokenId;\\n        address borrower;\\n        uint256 amount;\\n        uint128 borrowRate;\\n        uint128 interestPerSecond;\\n        uint40 borrowBegin;\\n        uint40 borrowDuration;\\n        uint40 borrowOverdueTime;\\n        uint40 liquidatableTime;\\n        uint40 extendableTime;\\n        uint40 borrowEnd;\\n        LoanStatus status;\\n    }\\n\\n    enum LoanStatus {\\n        NONE,\\n        BORROWING,\\n        EXTENDABLE,\\n        OVERDUE,\\n        LIQUIDATABLE,\\n        LIQUIDATING\\n    }\\n\\n    struct WhitelistInfo {\\n        bool enabled;\\n        string name;\\n        string symbol;\\n        uint256 LTV;\\n        uint256 minBorrowDuration;\\n        uint256 maxBorrowDuration;\\n        uint256 extendableDuration;\\n        uint256 overdueDuration;\\n    }\\n}\\n\",\"keccak256\":\"0x487cd1dedb3146da46144bc8f0e5b970c5173efa8c19700184b8207c1ee3fc55\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051613abc380380613abc83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051613a2561009760003960008181606f01528181609501526101740152613a256000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80635e08f3371461003b578063ade97ab51461006a575b600080fd5b61004e6100493660046102e2565b610091565b6040516001600160a01b03909116815260200160405180910390f35b61004e7f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101159190610362565b6001600160a01b0316336001600160a01b0316146040518060400160405280600381526020016232303560e81b8152509061016c5760405162461bcd60e51b815260040161016391906103d3565b60405180910390fd5b5033858585857f000000000000000000000000000000000000000000000000000000000000000060405161019f90610219565b6101ae969594939291906103e6565b604051809103906000f0801580156101ca573d6000803e3d6000fd5b509050816001600160a01b0316857f371bf97bfa9c54c26bb6834711998fb3fd0a2535a9b62470611dd85c9074fb38868660405161020992919061043c565b60405180910390a3949350505050565b613585806200046b83390190565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261024e57600080fd5b813567ffffffffffffffff8082111561026957610269610227565b604051601f8301601f19908116603f0116810190828211818310171561029157610291610227565b816040528381528660208588010111156102aa57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6001600160a01b03811681146102df57600080fd5b50565b600080600080608085870312156102f857600080fd5b84359350602085013567ffffffffffffffff8082111561031757600080fd5b6103238883890161023d565b9450604087013591508082111561033957600080fd5b506103468782880161023d565b9250506060850135610357816102ca565b939692955090935050565b60006020828403121561037457600080fd5b815161037f816102ca565b9392505050565b6000815180845260005b818110156103ac57602081850181015186830182015201610390565b818111156103be576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061037f6020830184610386565b600060018060a01b03808916835287602084015260c0604084015261040e60c0840188610386565b83810360608501526104208188610386565b9582166080850152509290921660a09091015250949350505050565b60408152600061044f6040830185610386565b82810360208401526104618185610386565b9594505050505056fe6101c06040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9610120523480156200003757600080fd5b5060405162003585380380620035858339810160408190526200005a91620002ec565b8280604051806040016040528060018152602001603160f81b81525086868160039080519060200190620000909291906200015c565b508051620000a69060049060208401906200015c565b5050825160209384012082519284019290922060c083815260e08290524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818a018190528183019890985260608101959095526080808601939093523085830152805180860390920182529390920190925280519401939093209092526101005250506001600160a01b03958616610160526101809490945284166101a05250501661014052620003d4565b8280546200016a9062000397565b90600052602060002090601f0160209004810192826200018e5760008555620001d9565b82601f10620001a957805160ff1916838001178555620001d9565b82800160010185558215620001d9579182015b82811115620001d9578251825591602001919060010190620001bc565b50620001e7929150620001eb565b5090565b5b80821115620001e75760008155600101620001ec565b80516001600160a01b03811681146200021a57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200024757600080fd5b81516001600160401b03808211156200026457620002646200021f565b604051601f8301601f19908116603f011681019082821181831017156200028f576200028f6200021f565b81604052838152602092508683858801011115620002ac57600080fd5b600091505b83821015620002d05785820183015181830184015290820190620002b1565b83821115620002e25760008385830101525b9695505050505050565b60008060008060008060c087890312156200030657600080fd5b620003118762000202565b6020880151604089015191975095506001600160401b03808211156200033657600080fd5b620003448a838b0162000235565b955060608901519150808211156200035b57600080fd5b506200036a89828a0162000235565b9350506200037b6080880162000202565b91506200038b60a0880162000202565b90509295509295509295565b600181811c90821680620003ac57607f821691505b60208210811415620003ce57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516130786200050d6000396000818161075c01528181610861015281816110af0152818161114301526114170152600081816106a001528181610aac01528181610b7c01528181610d4f01528181610ff60152818161135b0152818161154e0152611cc1015260008181610641015281816106c90152818161099e01528181610ad601528181610bb001528181610d8201528181610ea501528181610fa00152818161101f015281816113050152818161138401528181611582015281816117900152611cea01526000818161050f01528181611afb01528181611e1301526120b60152600061166301526000611ff1015260006120400152600061201b01526000611f9f01526000611fc801526130786000f3fe6080604052600436106101c55760003560e01c806370a08231116100f7578063a9059cbb11610095578063beb44bd811610064578063beb44bd81461057e578063d505accf1461059e578063dd62ed3e146105be578063f5298aca1461060457600080fd5b8063a9059cbb146104dd578063ade97ab5146104fd578063b1bf962d14610549578063b6b55f251461055e57600080fd5b80637ecebe00116100d15780637ecebe001461046857806395d89b41146104885780639840c30a1461049d578063a457c2d7146104bd57600080fd5b806370a082311461040857806379cc6790146104285780637df5bd3b1461044857600080fd5b80631da24f3e11610164578063313ce5671161013e578063313ce567146103975780633644e515146103b357806339509351146103c857806342966c68146103e857600080fd5b80631da24f3e146103425780631f07e4df1461036257806323b872dd1461037757600080fd5b80630afbcdc9116101a05780630afbcdc914610286578063150b7a02146102bb578063156e29f6146102ff57806318160ddd1461031f57600080fd5b8062f714ce1461020957806306fdde031461022b578063095ea7b31461025657600080fd5b3661020457604080513381523460208201527f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874910160405180910390a1005b600080fd5b34801561021557600080fd5b50610229610224366004612a6b565b610624565b005b34801561023757600080fd5b506102406108c0565b60405161024d9190612ac7565b60405180910390f35b34801561026257600080fd5b50610276610271366004612afa565b610952565b604051901515815260200161024d565b34801561029257600080fd5b506102a66102a1366004612b26565b610969565b6040805192835260208301919091520161024d565b3480156102c757600080fd5b506102e66102d6366004612bb4565b630a85bd0160e11b949350505050565b6040516001600160e01b0319909116815260200161024d565b34801561030b57600080fd5b5061022961031a366004612c78565b610981565b34801561032b57600080fd5b50610334610a82565b60405190815260200161024d565b34801561034e57600080fd5b5061033461035d366004612b26565b610b56565b34801561036e57600080fd5b50610334610b61565b34801561038357600080fd5b50610276610392366004612cad565b610c3c565b3480156103a357600080fd5b506040516012815260200161024d565b3480156103bf57600080fd5b50610334610ce8565b3480156103d457600080fd5b506102766103e3366004612afa565b610cf7565b3480156103f457600080fd5b50610229610403366004612cee565b610d33565b34801561041457600080fd5b50610334610423366004612b26565b610d40565b34801561043457600080fd5b50610229610443366004612afa565b610e02565b34801561045457600080fd5b50610229610463366004612d07565b610e88565b34801561047457600080fd5b50610334610483366004612b26565b610f56565b34801561049457600080fd5b50610240610f74565b3480156104a957600080fd5b506102296104b8366004612b26565b610f83565b3480156104c957600080fd5b506102766104d8366004612afa565b611237565b3480156104e957600080fd5b506102766104f8366004612afa565b6112d0565b34801561050957600080fd5b506105317f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161024d565b34801561055557600080fd5b506103346112dd565b34801561056a57600080fd5b50610229610579366004612cee565b6112e8565b34801561058a57600080fd5b50610334610599366004612b26565b611533565b3480156105aa57600080fd5b506102296105b9366004612d29565b61160f565b3480156105ca57600080fd5b506103346105d9366004612da0565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561061057600080fd5b5061022961061f366004612c78565b611773565b60408051808201909152600381526232303560e81b6020820152337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146106905760405162461bcd60e51b81526004016106879190612ac7565b60405180910390fd5b506040516391541e0560e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391541e059060240161018060405180830381865afa158015610719573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073d9190612e1a565b9050806101600151156108545760608101516040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166024830152604482018690528481166064830152600092169060840160408051601f198184030181529181526020820180516001600160e01b0316632940be8560e01b179052516107ce9190612ee3565b600060405180830381855af49150503d8060008114610809576040519150601f19603f3d011682016040523d82523d6000602084013e61080e565b606091505b50509050806040518060400160405280600381526020016235303360e81b8152509061084d5760405162461bcd60e51b81526004016106879190612ac7565b5050610888565b6108886001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016838561186a565b6040518381527f5b6b431d4476a211bb7d41c20d1aab9ae2321deee0d20be3d9fc9b1093fa6e3d9060200160405180910390a1505050565b6060600380546108cf90612eff565b80601f01602080910402602001604051908101604052809291908181526020018280546108fb90612eff565b80156109485780601f1061091d57610100808354040283529160200191610948565b820191906000526020600020905b81548152906001019060200180831161092b57829003601f168201915b5050505050905090565b600061095f3384846118bc565b5060015b92915050565b600080610975836119e0565b60025491509150915091565b60408051808201909152600381526232303560e81b6020820152337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146109e45760405162461bcd60e51b81526004016106879190612ac7565b5060006109f183836119fb565b60408051808201909152600381526203331360ec1b602082015290915081610a2c5760405162461bcd60e51b81526004016106879190612ac7565b50610a378482611ad3565b60408051848152602081018490526001600160a01b038616917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f91015b60405180910390a250505050565b600080610a8e60025490565b905080610a9d57600091505090565b60405163dcc5cded60e01b81527f00000000000000000000000000000000000000000000000000000000000000006004820152610b50907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063dcc5cded90602401602060405180830381865afa158015610b25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b499190612f34565b8290611bf6565b91505090565b6000610963826119e0565b600080610b6d60025490565b6040516391541e0560e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906391541e059060240161018060405180830381865afa158015610bf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1c9190612e1a565b608001516001600160801b03169050610c358282611bf6565b9250505090565b6000610c49848484611cb2565b6001600160a01b038416600090815260016020908152604080832033845290915290205482811015610cce5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610687565b610cdb85338584036118bc565b60019150505b9392505050565b6000610cf2611f9b565b905090565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161095f918590610d2e908690612f63565b6118bc565b610d3d338261208e565b50565b60405163dcc5cded60e01b81527f0000000000000000000000000000000000000000000000000000000000000000600482015260009081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063dcc5cded90602401602060405180830381865afa158015610dc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ded9190612f34565b9050610ce181610dfc856119e0565b90611bf6565b6000610e0e83336105d9565b905081811015610e6c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f77604482015263616e636560e01b6064820152608401610687565b610e7983338484036118bc565b610e83838361208e565b505050565b60408051808201909152600381526232303560e81b6020820152337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610eeb5760405162461bcd60e51b81526004016106879190612ac7565b5081610ef5575050565b610f0f610f006120b2565b610f0a84846119fb565b611ad3565b7f095a1e7fd552d6bba4d4bcc1c4127215dafdd5a52103be432762e64f2e13250a610f386120b2565b8383604051610f4993929190612f7b565b60405180910390a15b5050565b6001600160a01b038116600090815260056020526040812054610963565b6060600480546108cf90612eff565b60408051808201909152600381526232303560e81b6020820152337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610fe65760405162461bcd60e51b81526004016106879190612ac7565b506040516391541e0560e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391541e059060240161018060405180830381865afa15801561106f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110939190612e1a565b606081015160405163244a775d60e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152929350911690634894eeba90602401602060405180830381865afa158015611101573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111259190612f9c565b6001600160a01b0316826001600160a01b03161415801561117857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b6040518060400160405280600381526020016233303560e81b815250906111b25760405162461bcd60e51b81526004016106879190612ac7565b50610f526111be6120b2565b6040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa158015611202573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112269190612f34565b6001600160a01b038516919061186a565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156112b95760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610687565b6112c633858584036118bc565b5060019392505050565b600061095f338484611cb2565b6000610cf260025490565b60408051808201909152600381526232303560e81b6020820152337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161461134b5760405162461bcd60e51b81526004016106879190612ac7565b506040516391541e0560e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391541e059060240161018060405180830381865afa1580156113d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f89190612e1a565b9050806101600151156115035760608101516040516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116602483015260448201859052600092169060640160408051601f198184030181529181526020820180516001600160e01b03166301d5326d60e21b179052516114819190612ee3565b600060405180830381855af49150503d80600081146114bc576040519150601f19603f3d011682016040523d82523d6000602084013e6114c1565b606091505b50509050806040518060400160405280600381526020016235303360e81b815250906115005760405162461bcd60e51b81526004016106879190612ac7565b50505b6040518281527f4d6ce1e535dbade1c23defba91e23b8f791ce5edc0cc320257a2b364e4e3842690602001610f49565b60008061153f836119e0565b6040516391541e0560e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906391541e059060240161018060405180830381865afa1580156115ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ee9190612e1a565b608001516001600160801b031690506116078282611bf6565b949350505050565b8342111561165f5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610687565b60007f000000000000000000000000000000000000000000000000000000000000000088888861168e8c612136565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905060006116e98261215e565b905060006116f9828787876121ac565b9050896001600160a01b0316816001600160a01b03161461175c5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610687565b6117678a8a8a6118bc565b50505050505050505050565b60408051808201909152600381526232303560e81b6020820152337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146117d65760405162461bcd60e51b81526004016106879190612ac7565b5060006117e383836119fb565b60408051808201909152600381526203331360ec1b60208201529091508161181e5760405162461bcd60e51b81526004016106879190612ac7565b50611829848261208e565b60408051848152602081018490526001600160a01b038616917f49995e5dd6158cf69ad3e9777c46755a1a826a446c6416992167462dad033b2a9101610a74565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610e839084906121d4565b6001600160a01b03831661191e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610687565b6001600160a01b03821661197f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610687565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b031660009081526020819052604090205490565b60408051808201909152600381526218981960e91b602082015260009082611a365760405162461bcd60e51b81526004016106879190612ac7565b506000611a44600284612fb9565b90506b033b2e3c9fd0803ce8000000611a5f82600019612fdb565b611a699190612fb9565b8411156040518060400160405280600381526020016203130360ec1b81525090611aa65760405162461bcd60e51b81526004016106879190612ac7565b508281611abf6b033b2e3c9fd0803ce800000087612ff2565b611ac99190612f63565b6116079190612fb9565b6000611ade836119e0565b90506000611aeb60025490565b9050611af784846122a6565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636d6a723c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7b9190612f9c565b90506001600160a01b03811615611bef576040516318c39f1760e11b81526001600160a01b038216906331873e2e90611bbc90889087908790600401612f7b565b600060405180830381600087803b158015611bd657600080fd5b505af1158015611bea573d6000803e3d6000fd5b505050505b5050505050565b6000821580611c03575081155b15611c1057506000610963565b81611c2860026b033b2e3c9fd0803ce8000000612fb9565b611c3490600019612fdb565b611c3e9190612fb9565b8311156040518060400160405280600381526020016203130360ec1b81525090611c7b5760405162461bcd60e51b81526004016106879190612ac7565b506b033b2e3c9fd0803ce8000000611c94600282612fb9565b611c9e8486612ff2565b611ca89190612f63565b610ce19190612fb9565b60405163dcc5cded60e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063dcc5cded90602401602060405180830381865afa158015611d39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5d9190612f34565b90506000611d6b83836119fb565b60408051808201909152600381526203331360ec1b602082015290915081611da65760405162461bcd60e51b81526004016106879190612ac7565b5060408051808201909152600381526233313160e81b60208201526001600160801b03821115611de95760405162461bcd60e51b81526004016106879190612ac7565b506000611df5866119e0565b90506000611e02866119e0565b9050611e0f878785612385565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636d6a723c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e939190612f9c565b90506001600160a01b03811615611f91576000611eaf60025490565b6040516318c39f1760e11b81529091506001600160a01b038316906331873e2e90611ee2908c9088908690600401612f7b565b600060405180830381600087803b158015611efc57600080fd5b505af1158015611f10573d6000803e3d6000fd5b50505050876001600160a01b0316896001600160a01b031614611bea576040516318c39f1760e11b81526001600160a01b038316906331873e2e90611f5d908b9087908690600401612f7b565b600060405180830381600087803b158015611f7757600080fd5b505af1158015611f8b573d6000803e3d6000fd5b50505050505b5050505050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000461415611fea57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000612099836119e0565b905060006120a660025490565b9050611af78484612555565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633d6a38446040518163ffffffff1660e01b8152600401602060405180830381865afa158015612112573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf29190612f9c565b6001600160a01b03811660009081526005602052604090208054600181018255905b50919050565b600061096361216b611f9b565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60008060006121bd878787876126a3565b915091506121ca81612790565b5095945050505050565b6000612229826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661294b9092919063ffffffff16565b805190915015610e8357808060200190518101906122479190613011565b610e835760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610687565b6001600160a01b0382166122fc5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610687565b806002600082825461230e9190612f63565b90915550506001600160a01b0382166000908152602081905260408120805483929061233b908490612f63565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0383166123e95760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610687565b6001600160a01b03821661244b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610687565b6001600160a01b038316600090815260208190526040902054818110156124c35760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610687565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906124fa908490612f63565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161254691815260200190565b60405180910390a35b50505050565b6001600160a01b0382166125b55760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610687565b6001600160a01b038216600090815260208190526040902054818110156126295760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610687565b6001600160a01b0383166000908152602081905260408120838303905560028054849290612658908490612fdb565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156126da5750600090506003612787565b8460ff16601b141580156126f257508460ff16601c14155b156127035750600090506004612787565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612757573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661278057600060019250925050612787565b9150600090505b94509492505050565b60008160048111156127a4576127a461302c565b14156127ad5750565b60018160048111156127c1576127c161302c565b141561280f5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610687565b60028160048111156128235761282361302c565b14156128715760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610687565b60038160048111156128855761288561302c565b14156128de5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610687565b60048160048111156128f2576128f261302c565b1415610d3d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610687565b6060611607848460008585843b6129a45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610687565b600080866001600160a01b031685876040516129c09190612ee3565b60006040518083038185875af1925050503d80600081146129fd576040519150601f19603f3d011682016040523d82523d6000602084013e612a02565b606091505b5091509150612a12828286612a1d565b979650505050505050565b60608315612a2c575081610ce1565b825115612a3c5782518084602001fd5b8160405162461bcd60e51b81526004016106879190612ac7565b6001600160a01b0381168114610d3d57600080fd5b60008060408385031215612a7e57600080fd5b823591506020830135612a9081612a56565b809150509250929050565b60005b83811015612ab6578181015183820152602001612a9e565b8381111561254f5750506000910152565b6020815260008251806020840152612ae6816040850160208701612a9b565b601f01601f19169190910160400192915050565b60008060408385031215612b0d57600080fd5b8235612b1881612a56565b946020939093013593505050565b600060208284031215612b3857600080fd5b8135610ce181612a56565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff81118282101715612b7d57612b7d612b43565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612bac57612bac612b43565b604052919050565b60008060008060808587031215612bca57600080fd5b8435612bd581612a56565b9350602085810135612be681612a56565b935060408601359250606086013567ffffffffffffffff80821115612c0a57600080fd5b818801915088601f830112612c1e57600080fd5b813581811115612c3057612c30612b43565b612c42601f8201601f19168501612b83565b91508082528984828501011115612c5857600080fd5b808484018584013760008482840101525080935050505092959194509250565b600080600060608486031215612c8d57600080fd5b8335612c9881612a56565b95602085013595506040909401359392505050565b600080600060608486031215612cc257600080fd5b8335612ccd81612a56565b92506020840135612cdd81612a56565b929592945050506040919091013590565b600060208284031215612d0057600080fd5b5035919050565b60008060408385031215612d1a57600080fd5b50508035926020909101359150565b600080600080600080600060e0888a031215612d4457600080fd5b8735612d4f81612a56565b96506020880135612d5f81612a56565b95506040880135945060608801359350608088013560ff81168114612d8357600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215612db357600080fd5b8235612dbe81612a56565b91506020830135612a9081612a56565b8051612dd981612a56565b919050565b80516001600160801b0381168114612dd957600080fd5b805164ffffffffff81168114612dd957600080fd5b80518015158114612dd957600080fd5b60006101808284031215612e2d57600080fd5b612e35612b59565b82518152612e4560208401612dce565b6020820152612e5660408401612dce565b6040820152612e6760608401612dce565b6060820152612e7860808401612dde565b608082015260a083015160a082015260c083015160c0820152612e9d60e08401612df5565b60e08201526101008381015190820152610120612ebb818501612dce565b908201526101408381015190820152610160612ed8818501612e0a565b908201529392505050565b60008251612ef5818460208701612a9b565b9190910192915050565b600181811c90821680612f1357607f821691505b6020821081141561215857634e487b7160e01b600052602260045260246000fd5b600060208284031215612f4657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115612f7657612f76612f4d565b500190565b6001600160a01b039390931683526020830191909152604082015260600190565b600060208284031215612fae57600080fd5b8151610ce181612a56565b600082612fd657634e487b7160e01b600052601260045260246000fd5b500490565b600082821015612fed57612fed612f4d565b500390565b600081600019048311821515161561300c5761300c612f4d565b500290565b60006020828403121561302357600080fd5b610ce182612e0a565b634e487b7160e01b600052602160045260246000fdfea26469706673582212207ac7ef88b95acf1c4f9558301fa6ea6fcc331c36a7bc673651482143973d85e264736f6c634300080a0033a26469706673582212206b7c181e1ea49a1591bc4416d0d65e96f29846b5a3fb09c37a2436d339efb5bf64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80635e08f3371461003b578063ade97ab51461006a575b600080fd5b61004e6100493660046102e2565b610091565b6040516001600160a01b03909116815260200160405180910390f35b61004e7f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101159190610362565b6001600160a01b0316336001600160a01b0316146040518060400160405280600381526020016232303560e81b8152509061016c5760405162461bcd60e51b815260040161016391906103d3565b60405180910390fd5b5033858585857f000000000000000000000000000000000000000000000000000000000000000060405161019f90610219565b6101ae969594939291906103e6565b604051809103906000f0801580156101ca573d6000803e3d6000fd5b509050816001600160a01b0316857f371bf97bfa9c54c26bb6834711998fb3fd0a2535a9b62470611dd85c9074fb38868660405161020992919061043c565b60405180910390a3949350505050565b613585806200046b83390190565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261024e57600080fd5b813567ffffffffffffffff8082111561026957610269610227565b604051601f8301601f19908116603f0116810190828211818310171561029157610291610227565b816040528381528660208588010111156102aa57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6001600160a01b03811681146102df57600080fd5b50565b600080600080608085870312156102f857600080fd5b84359350602085013567ffffffffffffffff8082111561031757600080fd5b6103238883890161023d565b9450604087013591508082111561033957600080fd5b506103468782880161023d565b9250506060850135610357816102ca565b939692955090935050565b60006020828403121561037457600080fd5b815161037f816102ca565b9392505050565b6000815180845260005b818110156103ac57602081850181015186830182015201610390565b818111156103be576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061037f6020830184610386565b600060018060a01b03808916835287602084015260c0604084015261040e60c0840188610386565b83810360608501526104208188610386565b9582166080850152509290921660a09091015250949350505050565b60408152600061044f6040830185610386565b82810360208401526104618185610386565b9594505050505056fe6101c06040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9610120523480156200003757600080fd5b5060405162003585380380620035858339810160408190526200005a91620002ec565b8280604051806040016040528060018152602001603160f81b81525086868160039080519060200190620000909291906200015c565b508051620000a69060049060208401906200015c565b5050825160209384012082519284019290922060c083815260e08290524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818a018190528183019890985260608101959095526080808601939093523085830152805180860390920182529390920190925280519401939093209092526101005250506001600160a01b03958616610160526101809490945284166101a05250501661014052620003d4565b8280546200016a9062000397565b90600052602060002090601f0160209004810192826200018e5760008555620001d9565b82601f10620001a957805160ff1916838001178555620001d9565b82800160010185558215620001d9579182015b82811115620001d9578251825591602001919060010190620001bc565b50620001e7929150620001eb565b5090565b5b80821115620001e75760008155600101620001ec565b80516001600160a01b03811681146200021a57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200024757600080fd5b81516001600160401b03808211156200026457620002646200021f565b604051601f8301601f19908116603f011681019082821181831017156200028f576200028f6200021f565b81604052838152602092508683858801011115620002ac57600080fd5b600091505b83821015620002d05785820183015181830184015290820190620002b1565b83821115620002e25760008385830101525b9695505050505050565b60008060008060008060c087890312156200030657600080fd5b620003118762000202565b6020880151604089015191975095506001600160401b03808211156200033657600080fd5b620003448a838b0162000235565b955060608901519150808211156200035b57600080fd5b506200036a89828a0162000235565b9350506200037b6080880162000202565b91506200038b60a0880162000202565b90509295509295509295565b600181811c90821680620003ac57607f821691505b60208210811415620003ce57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516130786200050d6000396000818161075c01528181610861015281816110af0152818161114301526114170152600081816106a001528181610aac01528181610b7c01528181610d4f01528181610ff60152818161135b0152818161154e0152611cc1015260008181610641015281816106c90152818161099e01528181610ad601528181610bb001528181610d8201528181610ea501528181610fa00152818161101f015281816113050152818161138401528181611582015281816117900152611cea01526000818161050f01528181611afb01528181611e1301526120b60152600061166301526000611ff1015260006120400152600061201b01526000611f9f01526000611fc801526130786000f3fe6080604052600436106101c55760003560e01c806370a08231116100f7578063a9059cbb11610095578063beb44bd811610064578063beb44bd81461057e578063d505accf1461059e578063dd62ed3e146105be578063f5298aca1461060457600080fd5b8063a9059cbb146104dd578063ade97ab5146104fd578063b1bf962d14610549578063b6b55f251461055e57600080fd5b80637ecebe00116100d15780637ecebe001461046857806395d89b41146104885780639840c30a1461049d578063a457c2d7146104bd57600080fd5b806370a082311461040857806379cc6790146104285780637df5bd3b1461044857600080fd5b80631da24f3e11610164578063313ce5671161013e578063313ce567146103975780633644e515146103b357806339509351146103c857806342966c68146103e857600080fd5b80631da24f3e146103425780631f07e4df1461036257806323b872dd1461037757600080fd5b80630afbcdc9116101a05780630afbcdc914610286578063150b7a02146102bb578063156e29f6146102ff57806318160ddd1461031f57600080fd5b8062f714ce1461020957806306fdde031461022b578063095ea7b31461025657600080fd5b3661020457604080513381523460208201527f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874910160405180910390a1005b600080fd5b34801561021557600080fd5b50610229610224366004612a6b565b610624565b005b34801561023757600080fd5b506102406108c0565b60405161024d9190612ac7565b60405180910390f35b34801561026257600080fd5b50610276610271366004612afa565b610952565b604051901515815260200161024d565b34801561029257600080fd5b506102a66102a1366004612b26565b610969565b6040805192835260208301919091520161024d565b3480156102c757600080fd5b506102e66102d6366004612bb4565b630a85bd0160e11b949350505050565b6040516001600160e01b0319909116815260200161024d565b34801561030b57600080fd5b5061022961031a366004612c78565b610981565b34801561032b57600080fd5b50610334610a82565b60405190815260200161024d565b34801561034e57600080fd5b5061033461035d366004612b26565b610b56565b34801561036e57600080fd5b50610334610b61565b34801561038357600080fd5b50610276610392366004612cad565b610c3c565b3480156103a357600080fd5b506040516012815260200161024d565b3480156103bf57600080fd5b50610334610ce8565b3480156103d457600080fd5b506102766103e3366004612afa565b610cf7565b3480156103f457600080fd5b50610229610403366004612cee565b610d33565b34801561041457600080fd5b50610334610423366004612b26565b610d40565b34801561043457600080fd5b50610229610443366004612afa565b610e02565b34801561045457600080fd5b50610229610463366004612d07565b610e88565b34801561047457600080fd5b50610334610483366004612b26565b610f56565b34801561049457600080fd5b50610240610f74565b3480156104a957600080fd5b506102296104b8366004612b26565b610f83565b3480156104c957600080fd5b506102766104d8366004612afa565b611237565b3480156104e957600080fd5b506102766104f8366004612afa565b6112d0565b34801561050957600080fd5b506105317f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161024d565b34801561055557600080fd5b506103346112dd565b34801561056a57600080fd5b50610229610579366004612cee565b6112e8565b34801561058a57600080fd5b50610334610599366004612b26565b611533565b3480156105aa57600080fd5b506102296105b9366004612d29565b61160f565b3480156105ca57600080fd5b506103346105d9366004612da0565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561061057600080fd5b5061022961061f366004612c78565b611773565b60408051808201909152600381526232303560e81b6020820152337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146106905760405162461bcd60e51b81526004016106879190612ac7565b60405180910390fd5b506040516391541e0560e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391541e059060240161018060405180830381865afa158015610719573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073d9190612e1a565b9050806101600151156108545760608101516040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166024830152604482018690528481166064830152600092169060840160408051601f198184030181529181526020820180516001600160e01b0316632940be8560e01b179052516107ce9190612ee3565b600060405180830381855af49150503d8060008114610809576040519150601f19603f3d011682016040523d82523d6000602084013e61080e565b606091505b50509050806040518060400160405280600381526020016235303360e81b8152509061084d5760405162461bcd60e51b81526004016106879190612ac7565b5050610888565b6108886001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016838561186a565b6040518381527f5b6b431d4476a211bb7d41c20d1aab9ae2321deee0d20be3d9fc9b1093fa6e3d9060200160405180910390a1505050565b6060600380546108cf90612eff565b80601f01602080910402602001604051908101604052809291908181526020018280546108fb90612eff565b80156109485780601f1061091d57610100808354040283529160200191610948565b820191906000526020600020905b81548152906001019060200180831161092b57829003601f168201915b5050505050905090565b600061095f3384846118bc565b5060015b92915050565b600080610975836119e0565b60025491509150915091565b60408051808201909152600381526232303560e81b6020820152337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146109e45760405162461bcd60e51b81526004016106879190612ac7565b5060006109f183836119fb565b60408051808201909152600381526203331360ec1b602082015290915081610a2c5760405162461bcd60e51b81526004016106879190612ac7565b50610a378482611ad3565b60408051848152602081018490526001600160a01b038616917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f91015b60405180910390a250505050565b600080610a8e60025490565b905080610a9d57600091505090565b60405163dcc5cded60e01b81527f00000000000000000000000000000000000000000000000000000000000000006004820152610b50907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063dcc5cded90602401602060405180830381865afa158015610b25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b499190612f34565b8290611bf6565b91505090565b6000610963826119e0565b600080610b6d60025490565b6040516391541e0560e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906391541e059060240161018060405180830381865afa158015610bf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1c9190612e1a565b608001516001600160801b03169050610c358282611bf6565b9250505090565b6000610c49848484611cb2565b6001600160a01b038416600090815260016020908152604080832033845290915290205482811015610cce5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610687565b610cdb85338584036118bc565b60019150505b9392505050565b6000610cf2611f9b565b905090565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161095f918590610d2e908690612f63565b6118bc565b610d3d338261208e565b50565b60405163dcc5cded60e01b81527f0000000000000000000000000000000000000000000000000000000000000000600482015260009081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063dcc5cded90602401602060405180830381865afa158015610dc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ded9190612f34565b9050610ce181610dfc856119e0565b90611bf6565b6000610e0e83336105d9565b905081811015610e6c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f77604482015263616e636560e01b6064820152608401610687565b610e7983338484036118bc565b610e83838361208e565b505050565b60408051808201909152600381526232303560e81b6020820152337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610eeb5760405162461bcd60e51b81526004016106879190612ac7565b5081610ef5575050565b610f0f610f006120b2565b610f0a84846119fb565b611ad3565b7f095a1e7fd552d6bba4d4bcc1c4127215dafdd5a52103be432762e64f2e13250a610f386120b2565b8383604051610f4993929190612f7b565b60405180910390a15b5050565b6001600160a01b038116600090815260056020526040812054610963565b6060600480546108cf90612eff565b60408051808201909152600381526232303560e81b6020820152337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610fe65760405162461bcd60e51b81526004016106879190612ac7565b506040516391541e0560e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391541e059060240161018060405180830381865afa15801561106f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110939190612e1a565b606081015160405163244a775d60e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152929350911690634894eeba90602401602060405180830381865afa158015611101573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111259190612f9c565b6001600160a01b0316826001600160a01b03161415801561117857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b6040518060400160405280600381526020016233303560e81b815250906111b25760405162461bcd60e51b81526004016106879190612ac7565b50610f526111be6120b2565b6040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa158015611202573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112269190612f34565b6001600160a01b038516919061186a565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156112b95760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610687565b6112c633858584036118bc565b5060019392505050565b600061095f338484611cb2565b6000610cf260025490565b60408051808201909152600381526232303560e81b6020820152337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161461134b5760405162461bcd60e51b81526004016106879190612ac7565b506040516391541e0560e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391541e059060240161018060405180830381865afa1580156113d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f89190612e1a565b9050806101600151156115035760608101516040516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116602483015260448201859052600092169060640160408051601f198184030181529181526020820180516001600160e01b03166301d5326d60e21b179052516114819190612ee3565b600060405180830381855af49150503d80600081146114bc576040519150601f19603f3d011682016040523d82523d6000602084013e6114c1565b606091505b50509050806040518060400160405280600381526020016235303360e81b815250906115005760405162461bcd60e51b81526004016106879190612ac7565b50505b6040518281527f4d6ce1e535dbade1c23defba91e23b8f791ce5edc0cc320257a2b364e4e3842690602001610f49565b60008061153f836119e0565b6040516391541e0560e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906391541e059060240161018060405180830381865afa1580156115ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ee9190612e1a565b608001516001600160801b031690506116078282611bf6565b949350505050565b8342111561165f5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610687565b60007f000000000000000000000000000000000000000000000000000000000000000088888861168e8c612136565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905060006116e98261215e565b905060006116f9828787876121ac565b9050896001600160a01b0316816001600160a01b03161461175c5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610687565b6117678a8a8a6118bc565b50505050505050505050565b60408051808201909152600381526232303560e81b6020820152337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146117d65760405162461bcd60e51b81526004016106879190612ac7565b5060006117e383836119fb565b60408051808201909152600381526203331360ec1b60208201529091508161181e5760405162461bcd60e51b81526004016106879190612ac7565b50611829848261208e565b60408051848152602081018490526001600160a01b038616917f49995e5dd6158cf69ad3e9777c46755a1a826a446c6416992167462dad033b2a9101610a74565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610e839084906121d4565b6001600160a01b03831661191e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610687565b6001600160a01b03821661197f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610687565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b031660009081526020819052604090205490565b60408051808201909152600381526218981960e91b602082015260009082611a365760405162461bcd60e51b81526004016106879190612ac7565b506000611a44600284612fb9565b90506b033b2e3c9fd0803ce8000000611a5f82600019612fdb565b611a699190612fb9565b8411156040518060400160405280600381526020016203130360ec1b81525090611aa65760405162461bcd60e51b81526004016106879190612ac7565b508281611abf6b033b2e3c9fd0803ce800000087612ff2565b611ac99190612f63565b6116079190612fb9565b6000611ade836119e0565b90506000611aeb60025490565b9050611af784846122a6565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636d6a723c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7b9190612f9c565b90506001600160a01b03811615611bef576040516318c39f1760e11b81526001600160a01b038216906331873e2e90611bbc90889087908790600401612f7b565b600060405180830381600087803b158015611bd657600080fd5b505af1158015611bea573d6000803e3d6000fd5b505050505b5050505050565b6000821580611c03575081155b15611c1057506000610963565b81611c2860026b033b2e3c9fd0803ce8000000612fb9565b611c3490600019612fdb565b611c3e9190612fb9565b8311156040518060400160405280600381526020016203130360ec1b81525090611c7b5760405162461bcd60e51b81526004016106879190612ac7565b506b033b2e3c9fd0803ce8000000611c94600282612fb9565b611c9e8486612ff2565b611ca89190612f63565b610ce19190612fb9565b60405163dcc5cded60e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063dcc5cded90602401602060405180830381865afa158015611d39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5d9190612f34565b90506000611d6b83836119fb565b60408051808201909152600381526203331360ec1b602082015290915081611da65760405162461bcd60e51b81526004016106879190612ac7565b5060408051808201909152600381526233313160e81b60208201526001600160801b03821115611de95760405162461bcd60e51b81526004016106879190612ac7565b506000611df5866119e0565b90506000611e02866119e0565b9050611e0f878785612385565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636d6a723c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e939190612f9c565b90506001600160a01b03811615611f91576000611eaf60025490565b6040516318c39f1760e11b81529091506001600160a01b038316906331873e2e90611ee2908c9088908690600401612f7b565b600060405180830381600087803b158015611efc57600080fd5b505af1158015611f10573d6000803e3d6000fd5b50505050876001600160a01b0316896001600160a01b031614611bea576040516318c39f1760e11b81526001600160a01b038316906331873e2e90611f5d908b9087908690600401612f7b565b600060405180830381600087803b158015611f7757600080fd5b505af1158015611f8b573d6000803e3d6000fd5b50505050505b5050505050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000461415611fea57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000612099836119e0565b905060006120a660025490565b9050611af78484612555565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633d6a38446040518163ffffffff1660e01b8152600401602060405180830381865afa158015612112573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf29190612f9c565b6001600160a01b03811660009081526005602052604090208054600181018255905b50919050565b600061096361216b611f9b565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60008060006121bd878787876126a3565b915091506121ca81612790565b5095945050505050565b6000612229826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661294b9092919063ffffffff16565b805190915015610e8357808060200190518101906122479190613011565b610e835760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610687565b6001600160a01b0382166122fc5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610687565b806002600082825461230e9190612f63565b90915550506001600160a01b0382166000908152602081905260408120805483929061233b908490612f63565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0383166123e95760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610687565b6001600160a01b03821661244b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610687565b6001600160a01b038316600090815260208190526040902054818110156124c35760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610687565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906124fa908490612f63565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161254691815260200190565b60405180910390a35b50505050565b6001600160a01b0382166125b55760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610687565b6001600160a01b038216600090815260208190526040902054818110156126295760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610687565b6001600160a01b0383166000908152602081905260408120838303905560028054849290612658908490612fdb565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156126da5750600090506003612787565b8460ff16601b141580156126f257508460ff16601c14155b156127035750600090506004612787565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612757573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661278057600060019250925050612787565b9150600090505b94509492505050565b60008160048111156127a4576127a461302c565b14156127ad5750565b60018160048111156127c1576127c161302c565b141561280f5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610687565b60028160048111156128235761282361302c565b14156128715760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610687565b60038160048111156128855761288561302c565b14156128de5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610687565b60048160048111156128f2576128f261302c565b1415610d3d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610687565b6060611607848460008585843b6129a45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610687565b600080866001600160a01b031685876040516129c09190612ee3565b60006040518083038185875af1925050503d80600081146129fd576040519150601f19603f3d011682016040523d82523d6000602084013e612a02565b606091505b5091509150612a12828286612a1d565b979650505050505050565b60608315612a2c575081610ce1565b825115612a3c5782518084602001fd5b8160405162461bcd60e51b81526004016106879190612ac7565b6001600160a01b0381168114610d3d57600080fd5b60008060408385031215612a7e57600080fd5b823591506020830135612a9081612a56565b809150509250929050565b60005b83811015612ab6578181015183820152602001612a9e565b8381111561254f5750506000910152565b6020815260008251806020840152612ae6816040850160208701612a9b565b601f01601f19169190910160400192915050565b60008060408385031215612b0d57600080fd5b8235612b1881612a56565b946020939093013593505050565b600060208284031215612b3857600080fd5b8135610ce181612a56565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff81118282101715612b7d57612b7d612b43565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612bac57612bac612b43565b604052919050565b60008060008060808587031215612bca57600080fd5b8435612bd581612a56565b9350602085810135612be681612a56565b935060408601359250606086013567ffffffffffffffff80821115612c0a57600080fd5b818801915088601f830112612c1e57600080fd5b813581811115612c3057612c30612b43565b612c42601f8201601f19168501612b83565b91508082528984828501011115612c5857600080fd5b808484018584013760008482840101525080935050505092959194509250565b600080600060608486031215612c8d57600080fd5b8335612c9881612a56565b95602085013595506040909401359392505050565b600080600060608486031215612cc257600080fd5b8335612ccd81612a56565b92506020840135612cdd81612a56565b929592945050506040919091013590565b600060208284031215612d0057600080fd5b5035919050565b60008060408385031215612d1a57600080fd5b50508035926020909101359150565b600080600080600080600060e0888a031215612d4457600080fd5b8735612d4f81612a56565b96506020880135612d5f81612a56565b95506040880135945060608801359350608088013560ff81168114612d8357600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215612db357600080fd5b8235612dbe81612a56565b91506020830135612a9081612a56565b8051612dd981612a56565b919050565b80516001600160801b0381168114612dd957600080fd5b805164ffffffffff81168114612dd957600080fd5b80518015158114612dd957600080fd5b60006101808284031215612e2d57600080fd5b612e35612b59565b82518152612e4560208401612dce565b6020820152612e5660408401612dce565b6040820152612e6760608401612dce565b6060820152612e7860808401612dde565b608082015260a083015160a082015260c083015160c0820152612e9d60e08401612df5565b60e08201526101008381015190820152610120612ebb818501612dce565b908201526101408381015190820152610160612ed8818501612e0a565b908201529392505050565b60008251612ef5818460208701612a9b565b9190910192915050565b600181811c90821680612f1357607f821691505b6020821081141561215857634e487b7160e01b600052602260045260246000fd5b600060208284031215612f4657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115612f7657612f76612f4d565b500190565b6001600160a01b039390931683526020830191909152604082015260600190565b600060208284031215612fae57600080fd5b8151610ce181612a56565b600082612fd657634e487b7160e01b600052601260045260246000fd5b500490565b600082821015612fed57612fed612f4d565b500390565b600081600019048311821515161561300c5761300c612f4d565b500290565b60006020828403121561302357600080fd5b610ce182612e0a565b634e487b7160e01b600052602160045260246000fdfea26469706673582212207ac7ef88b95acf1c4f9558301fa6ea6fcc331c36a7bc673651482143973d85e264736f6c634300080a0033a26469706673582212206b7c181e1ea49a1591bc4416d0d65e96f29846b5a3fb09c37a2436d339efb5bf64736f6c634300080a0033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}