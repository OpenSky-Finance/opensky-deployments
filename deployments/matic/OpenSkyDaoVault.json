{
  "address": "0xF2346F9987fc8B74341963b87D6b2250f2ee8125",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "SETTINGS_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "WETH_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApproveERC1155ForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ApproveERC20",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ApproveERC721",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApproveERC721ForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ConvertETHToWETH",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "DepositERC1155",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenId",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amount",
          "type": "uint256[]"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "DepositERC1155Bulk",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "DepositERC721",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "DepositETH",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "FlashClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "WithdrawERC1155",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "WithdrawERC20",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "WithdrawERC721",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "WithdrawETH",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SETTINGS",
      "outputs": [
        {
          "internalType": "contract IOpenSkySettings",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "approveERC1155ForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approveERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approveERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "approveERC721ForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "convertETHToWETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiverAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "flashClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC1155",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x021e925bf97a6ed083588dc9a07911116147d3dc22cacdb3b9287b87653d52b2",
  "receipt": {
    "to": null,
    "from": "0x218513C58A4781a5B88De6230caA29aBCe2Ccd75",
    "contractAddress": "0xF2346F9987fc8B74341963b87D6b2250f2ee8125",
    "transactionIndex": 37,
    "gasUsed": "2183488",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000800000000000040000000100000000000000000000000000400000000000000000000000000000000080000000000000000000000000000000000000000400000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004000800000000000000001000000008000000000000000000000100000000000000000020000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x13078187e2c71f1dad68a6a98ca8361b56ccd5dc66e85ad7cc1b60ada1f74fd7",
    "transactionHash": "0x021e925bf97a6ed083588dc9a07911116147d3dc22cacdb3b9287b87653d52b2",
    "logs": [
      {
        "transactionIndex": 37,
        "blockNumber": 29761490,
        "transactionHash": "0x021e925bf97a6ed083588dc9a07911116147d3dc22cacdb3b9287b87653d52b2",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000218513c58a4781a5b88de6230caa29abce2ccd75",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000e8b81f7e7851400000000000000000000000000000000000000000000000003cafe430daa410d5000000000000000000000000000000000000000000002123e370e4e262575c370000000000000000000000000000000000000000000000003bc72c115c2bbf95000000000000000000000000000000000000000000002123e4599d01e0cfad77",
        "logIndex": 148,
        "blockHash": "0x13078187e2c71f1dad68a6a98ca8361b56ccd5dc66e85ad7cc1b60ada1f74fd7"
      }
    ],
    "blockNumber": 29761490,
    "cumulativeGasUsed": "7978754",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x12D182BE71BF456353FBc3aeFdae4C98465D9ef5",
    "0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270"
  ],
  "solcInputHash": "597fe0c822de038e67f456c392a88115",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"SETTINGS_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"WETH_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApproveERC1155ForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ApproveERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ApproveERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApproveERC721ForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ConvertETHToWETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"DepositERC1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"DepositERC1155Bulk\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"DepositERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"DepositETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"FlashClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"WithdrawERC1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"WithdrawERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"WithdrawERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"WithdrawETH\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SETTINGS\",\"outputs\":[{\"internalType\":\"contract IOpenSkySettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"approveERC1155ForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approveERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"approveERC721ForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"convertETHToWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"flashClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"OpenSky Labs\",\"kind\":\"dev\",\"methods\":{},\"title\":\"OpenSkyDaoVault contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Implementation of vault for OpenSky Dao*\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/OpenSkyDaoVault.sol\":\"OpenSkyDaoVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/dependencies/weth/IWETH.sol\":{\"content\":\"pragma solidity 0.8.10;\\n\\ninterface IWETH {\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x58e84c715a8587d2685d905f79018c85ff42b628f5a8ca4c115342dea17053ab\"},\"contracts/interfaces/IACLManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IACLManager {\\n    function addEmergencyAdmin(address admin) external;\\n    \\n    function isEmergencyAdmin(address admin) external view returns (bool);\\n    \\n    function removeEmergencyAdmin(address admin) external;\\n    \\n    function addGovernance(address admin) external;\\n    \\n    function isGovernance(address admin) external view returns (bool);\\n\\n    function removeGovernance(address admin) external;\\n\\n    function addPoolAdmin(address admin) external;\\n\\n    function isPoolAdmin(address admin) external view returns (bool);\\n\\n    function removePoolAdmin(address admin) external;\\n\\n    function addLiquidationOperator(address address_) external;\\n\\n    function isLiquidationOperator(address address_) external view returns (bool);\\n\\n    function removeLiquidationOperator(address address_) external;\\n\\n    function addAirdropOperator(address address_) external;\\n\\n    function isAirdropOperator(address address_) external view returns (bool);\\n\\n    function removeAirdropOperator(address address_) external;\\n}\\n\",\"keccak256\":\"0x0e77d3bdc88ba10cd78a9a80350bbf0d4120a1d0ac7c7911bef8c8cb389cf42f\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyDaoVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IOpenSkyDaoVault {\\n    event ApproveERC20(address token, address spender, uint256 amount);\\n    event ApproveERC721(address token, address spender, uint256 tokenId);\\n    event ApproveERC721ForAll(address token, address spender, bool approved);\\n    event ApproveERC1155ForAll(address token, address spender, bool approved);\\n    event ConvertETHToWETH(uint256 amount);\\n\\n    event DepositETH(uint256 amount, address indexed from);\\n    event DepositERC721(address indexed token, uint256 tokenId, address indexed from);\\n    event DepositERC1155(address indexed token, uint256 tokenId, uint256 amount, address indexed from);\\n    event DepositERC1155Bulk(address indexed token, uint256[] tokenId, uint256[] amount, address indexed from);\\n\\n    event WithdrawETH(uint256 amount, address to);\\n    event WithdrawERC20(address indexed token, uint256 amount, address to);\\n    event WithdrawERC721(address indexed token, uint256 tokenId, address indexed to);\\n    event WithdrawERC1155(address indexed token, uint256 tokenId, uint256 amount, address indexed from);\\n\\n    event FlashClaim(address indexed receiver, address sender, address indexed nftAddress, uint256 indexed tokenId);\\n\\n    function approveERC20(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) external;\\n\\n    function withdrawETH(uint256 amount, address to) external;\\n\\n    function withdrawERC20(\\n        address token,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function approveERC721(\\n        address token,\\n        address spender,\\n        uint256 tokenId\\n    ) external;\\n\\n    function approveERC721ForAll(\\n        address token,\\n        address spender,\\n        bool approved\\n    ) external;\\n\\n    function withdrawERC721(\\n        address token,\\n        uint256 tokenId,\\n        address to\\n    ) external;\\n\\n    function approveERC1155ForAll(\\n        address token,\\n        address spender,\\n        bool approved\\n    ) external;\\n\\n    function withdrawERC1155(\\n        address to,\\n        address token,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n\\n    function convertETHToWETH(uint256 amount) external;\\n\\n    function flashClaim(\\n        address receiverAddress,\\n        address[] calldata tokens,\\n        uint256[] calldata tokenIds,\\n        bytes calldata params\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf7d4ec7fcfca6c33a26a3a918b19ce29570f45a4e1132059a9d6b07382f2cc97\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyFlashClaimReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IOpenSkyFlashClaimReceiver {\\n    function executeOperation(\\n        address[] calldata nftAddresses,\\n        uint256[] calldata tokenIds,\\n        address initiator,\\n        address operator,\\n        bytes calldata params\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x20c9cbf82dc555a3e1f468dc755742af0dedb3ab5165b975b473e55870d0fbe4\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkySettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\nimport '../libraries/types/DataTypes.sol';\\n\\ninterface IOpenSkySettings {\\n    event InitPoolAddress(address operator, address address_);\\n    event InitLoanAddress(address operator, address address_);\\n    event InitVaultFactoryAddress(address operator, address address_);\\n    event InitIncentiveControllerAddress(address operator, address address_);\\n    event InitWETHGatewayAddress(address operator, address address_);\\n    event InitPunkGatewayAddress(address operator, address address_);\\n    event InitDaoVaultAddress(address operator, address address_);\\n\\n    event AddToWhitelist(address operator, uint256 reserveId, address nft);\\n    event RemoveFromWhitelist(address operator, uint256 reserveId, address nft);\\n    event SetReserveFactor(address operator, uint256 factor);\\n    event SetPrepaymentFeeFactor(address operator, uint256 factor);\\n    event SetOverdueLoanFeeFactor(address operator, uint256 factor);\\n    event SetMoneyMarketAddress(address operator, address address_);\\n    event SetTreasuryAddress(address operator, address address_);\\n    event SetACLManagerAddress(address operator, address address_);\\n    event SetLoanDescriptorAddress(address operator, address address_);\\n    event SetNftPriceOracleAddress(address operator, address address_);\\n    event SetInterestRateStrategyAddress(address operator, address address_);\\n    event AddLiquidator(address operator, address address_);\\n    event RemoveLiquidator(address operator, address address_);\\n\\n    function poolAddress() external view returns (address);\\n\\n    function loanAddress() external view returns (address);\\n\\n    function vaultFactoryAddress() external view returns (address);\\n\\n    function incentiveControllerAddress() external view returns (address);\\n\\n    function wethGatewayAddress() external view returns (address);\\n\\n    function punkGatewayAddress() external view returns (address);\\n\\n    function inWhitelist(uint256 reserveId, address nft) external view returns (bool);\\n\\n    function getWhitelistDetail(uint256 reserveId, address nft) external view returns (DataTypes.WhitelistInfo memory);\\n\\n    function reserveFactor() external view returns (uint256); // treasury ratio\\n\\n    function MAX_RESERVE_FACTOR() external view returns (uint256);\\n\\n    function prepaymentFeeFactor() external view returns (uint256);\\n\\n    function overdueLoanFeeFactor() external view returns (uint256);\\n\\n    function moneyMarketAddress() external view returns (address);\\n\\n    function treasuryAddress() external view returns (address);\\n\\n    function daoVaultAddress() external view returns (address);\\n\\n    function ACLManagerAddress() external view returns (address);\\n\\n    function loanDescriptorAddress() external view returns (address);\\n\\n    function nftPriceOracleAddress() external view returns (address);\\n\\n    function interestRateStrategyAddress() external view returns (address);\\n    \\n    function isLiquidator(address liquidator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd5c1c2468464891b3ce379c8a03bc21c2c67fcf0c7493e3b35fd573fa21ea448\",\"license\":\"MIT\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        uint256 reserveId;\\n        address underlyingAsset;\\n        address oTokenAddress;\\n        address moneyMarketAddress;\\n        uint128 lastSupplyIndex;\\n        uint256 borrowingInterestPerSecond;\\n        uint256 lastMoneyMarketBalance;\\n        uint40 lastUpdateTimestamp;\\n        uint256 totalBorrows;\\n        address interestModelAddress;\\n        uint256 treasuryFactor;\\n        bool isMoneyMarketOn;\\n    }\\n\\n    struct LoanData {\\n        uint256 reserveId;\\n        address nftAddress;\\n        uint256 tokenId;\\n        address borrower;\\n        uint256 amount;\\n        uint128 borrowRate;\\n        uint128 interestPerSecond;\\n        uint40 borrowBegin;\\n        uint40 borrowDuration;\\n        uint40 borrowOverdueTime;\\n        uint40 liquidatableTime;\\n        uint40 extendableTime;\\n        uint40 borrowEnd;\\n        LoanStatus status;\\n    }\\n\\n    enum LoanStatus {\\n        NONE,\\n        BORROWING,\\n        EXTENDABLE,\\n        OVERDUE,\\n        LIQUIDATABLE,\\n        LIQUIDATING\\n    }\\n\\n    struct WhitelistInfo {\\n        bool enabled;\\n        string name;\\n        string symbol;\\n        uint256 LTV;\\n        uint256 minBorrowDuration;\\n        uint256 maxBorrowDuration;\\n        uint256 extendableDuration;\\n        uint256 overdueDuration;\\n    }\\n}\\n\",\"keccak256\":\"0x487cd1dedb3146da46144bc8f0e5b970c5173efa8c19700184b8207c1ee3fc55\",\"license\":\"MIT\"},\"contracts/vault/OpenSkyDaoVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol';\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n\\nimport '../dependencies/weth/IWETH.sol';\\nimport '../interfaces/IOpenSkySettings.sol';\\nimport '../interfaces/IACLManager.sol';\\nimport '../interfaces/IOpenSkyDaoVault.sol';\\nimport '../interfaces/IOpenSkyFlashClaimReceiver.sol';\\n\\n/**\\n * @title OpenSkyDaoVault contract\\n * @author OpenSky Labs\\n * @notice Implementation of vault for OpenSky Dao\\n **/\\ncontract OpenSkyDaoVault is Context, ERC165, ReentrancyGuard, IERC721Receiver, IERC1155Receiver, IOpenSkyDaoVault {\\n    using SafeERC20 for IERC20;\\n\\n    IOpenSkySettings public immutable SETTINGS;\\n    IWETH public immutable WETH;\\n\\n    modifier onlyGovernance() {\\n        IACLManager ACLManager = IACLManager(SETTINGS.ACLManagerAddress());\\n        require(ACLManager.isGovernance(_msgSender()), 'ACL_ONLY_GOVERNANCE_CAN_CALL');\\n        _;\\n    }\\n\\n    constructor(address SETTINGS_, address WETH_) ReentrancyGuard() {\\n        SETTINGS = IOpenSkySettings(SETTINGS_);\\n        WETH = IWETH(WETH_);\\n    }\\n\\n    function approveERC20(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) external override onlyGovernance {\\n        IERC20(token).safeApprove(spender, amount);\\n        emit ApproveERC20(token, spender, amount);\\n    }\\n\\n    function withdrawETH(uint256 amount, address to) external override onlyGovernance {\\n        require(amount > 0, 'WITHDRAW_AMOUNT_NOT_ALLOWED');\\n        require(address(this).balance >= amount);\\n\\n        _safeTransferETH(to, amount);\\n        emit WithdrawETH(amount, to);\\n    }\\n\\n    function withdrawERC20(\\n        address token,\\n        uint256 amount,\\n        address to\\n    ) external override onlyGovernance {\\n        IERC20(token).safeTransfer(to, amount);\\n        emit WithdrawERC20(token, amount, to);\\n    }\\n\\n    function approveERC721(\\n        address token,\\n        address spender,\\n        uint256 tokenId\\n    ) external override onlyGovernance {\\n        IERC721(token).approve(spender, tokenId);\\n        emit ApproveERC721(token, spender, tokenId);\\n    }\\n\\n    function approveERC721ForAll(\\n        address token,\\n        address spender,\\n        bool approved\\n    ) external override onlyGovernance {\\n        IERC721(token).setApprovalForAll(spender, approved);\\n        emit ApproveERC721ForAll(token, spender, approved);\\n    }\\n\\n    function withdrawERC721(\\n        address token,\\n        uint256 tokenId,\\n        address to\\n    ) external override onlyGovernance {\\n        IERC721(token).safeTransferFrom(address(this), to, tokenId);\\n        emit WithdrawERC721(token, tokenId, to);\\n    }\\n\\n    function approveERC1155ForAll(\\n        address token,\\n        address spender,\\n        bool approved\\n    ) external override onlyGovernance {\\n        IERC1155(token).setApprovalForAll(spender, approved);\\n        emit ApproveERC1155ForAll(token, spender, approved);\\n    }\\n\\n    function withdrawERC1155(\\n        address to,\\n        address token,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external override onlyGovernance {\\n        IERC1155(token).safeTransferFrom(address(this), to, tokenId, amount, '0');\\n        emit WithdrawERC1155(token, tokenId, amount, to);\\n    }\\n\\n    function convertETHToWETH(uint256 amount) external override onlyGovernance {\\n        WETH.deposit{value: amount}();\\n        emit ConvertETHToWETH(amount);\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address from,\\n        uint256 id,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        emit DepositERC721(msg.sender, id, from);\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address from,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        emit DepositERC1155(msg.sender, id, amount, from);\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        emit DepositERC1155Bulk(msg.sender, ids, amounts, from);\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Receiver).interfaceId ||\\n            interfaceId == type(IERC1155Receiver).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function _safeTransferETH(address recipient, uint256 amount) internal {\\n        (bool success, ) = recipient.call{value: amount}('');\\n        require(success, 'ETH_TRANSFER_FAILED');\\n    }\\n\\n    function flashClaim(\\n        address receiverAddress,\\n        address[] calldata tokens,\\n        uint256[] calldata tokenIds,\\n        bytes calldata params\\n    ) external override nonReentrant {\\n        require(tokens.length == tokenIds.length, 'DV_FLASH_CLAIM_PARAMS_ERROR');\\n        uint256 i;\\n        IOpenSkyFlashClaimReceiver receiver = IOpenSkyFlashClaimReceiver(receiverAddress);\\n\\n        // step 1: moving underlying asset forward to receiver contract\\n        for (i = 0; i < tokenIds.length; i++) {\\n            require(IERC721(tokens[i]).ownerOf(tokenIds[i]) == address(this), 'DV_DOES_NOT_OWN_THE_NFT');\\n            IERC721(tokens[i]).safeTransferFrom(address(this), receiverAddress, tokenIds[i]);\\n        }\\n\\n        // setup 2: execute receiver contract, doing something like airdrop\\n        require(\\n            receiver.executeOperation(tokens, tokenIds, address(this), address(this), params),\\n            'DV_FLASHCLAIM_EXECUTOR_ERROR'\\n        );\\n\\n        // setup 3: moving underlying asset backward from receiver contract\\n        for (i = 0; i < tokenIds.length; i++) {\\n            IERC721(tokens[i]).safeTransferFrom(receiverAddress, address(this), tokenIds[i]);\\n            emit FlashClaim(receiverAddress, _msgSender(), tokens[i], tokenIds[i]);\\n        }\\n    }\\n\\n    receive() external payable {\\n        emit DepositETH(msg.value, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xf23fcb0e4134fbabbbc5b06fec94fcfcb33b77ba500b5a73c7da08841dbcb9dd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620027353803806200273583398101604081905262000034916200006e565b60016000556001600160a01b039182166080521660a052620000a6565b80516001600160a01b03811681146200006957600080fd5b919050565b600080604083850312156200008257600080fd5b6200008d8362000051565b91506200009d6020840162000051565b90509250929050565b60805160a05161262362000112600039600081816102d90152611827015260008181610325015281816103ab01528181610623015281816107ea01528181610e4b01528181610fc40152818161118e0152818161135d0152818161154d015261170f01526126236000f3fe6080604052600436106100f65760003560e01c80637b9f76b51161008a578063ade97ab511610059578063ade97ab514610313578063bc197c8114610347578063c1365ffb14610367578063f23a6e611461038757600080fd5b80637b9f76b514610267578063a0edb48b14610287578063a8e5e4aa146102a7578063ad5c4648146102c757600080fd5b8063453b609c116100c6578063453b609c146101e75780635df27f68146102075780635fc3ea0b146102275780636e0bc3ec1461024757600080fd5b8062a7230a1461013757806301ffc9a714610159578063150b7a021461018e57806336118b52146101c757600080fd5b366101325760405134815233907f120444be79b9fdf050e0985e12e289e693dc30ecfd79179bd6f8893be5476c669060200160405180910390a2005b600080fd5b34801561014357600080fd5b50610157610152366004611dab565b6103a7565b005b34801561016557600080fd5b50610179610174366004611dec565b61056d565b60405190151581526020015b60405180910390f35b34801561019a57600080fd5b506101ae6101a9366004611ecd565b6105bf565b6040516001600160e01b03199091168152602001610185565b3480156101d357600080fd5b506101576101e2366004611f39565b61061f565b3480156101f357600080fd5b50610157610202366004611f77565b6107e6565b34801561021357600080fd5b5061015761022236600461200e565b6109b0565b34801561023357600080fd5b506101576102423660046120e8565b610e47565b34801561025357600080fd5b50610157610262366004611f77565b610fc0565b34801561027357600080fd5b506101576102823660046120e8565b61118a565b34801561029357600080fd5b506101576102a236600461211f565b611359565b3480156102b357600080fd5b506101576102c2366004611dab565b611549565b3480156102d357600080fd5b506102fb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610185565b34801561031f57600080fd5b506102fb7f000000000000000000000000000000000000000000000000000000000000000081565b34801561035357600080fd5b506101ae6103623660046121da565b6116aa565b34801561037357600080fd5b50610157610382366004612288565b61170b565b34801561039357600080fd5b506101ae6103a23660046122a1565b6118d6565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610407573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042b919061230a565b90506001600160a01b03811663dee1f0e4336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a59190612327565b6104ca5760405162461bcd60e51b81526004016104c190612344565b60405180910390fd5b60405163095ea7b360e01b81526001600160a01b0384811660048301526024820184905285169063095ea7b390604401600060405180830381600087803b15801561051457600080fd5b505af1158015610528573d6000803e3d6000fd5b505050507f5b8739d7145ecc145409bcf673430fedd638893918572926b1049b554757e90484848460405161055f9392919061237b565b60405180910390a150505050565b60006001600160e01b03198216630a85bd0160e11b148061059e57506001600160e01b03198216630271189760e51b145b806105b957506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000836001600160a01b0316336001600160a01b03167fb6219d009b79f4e4fc9b2f61614df0c5340f2ae5a531b74cc33ddc09df5de8a88560405161060691815260200190565b60405180910390a350630a85bd0160e11b949350505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa15801561067f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a3919061230a565b90506001600160a01b03811663dee1f0e4336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156106f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071d9190612327565b6107395760405162461bcd60e51b81526004016104c190612344565b600083116107895760405162461bcd60e51b815260206004820152601b60248201527f57495448445241575f414d4f554e545f4e4f545f414c4c4f574544000000000060448201526064016104c1565b8247101561079657600080fd5b6107a08284611931565b604080518481526001600160a01b03841660208201527fba0408b66a1c4035a8e68eca95042e5619e9cc3a1811ebac1661eb4aa358667e910160405180910390a1505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610846573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086a919061230a565b90506001600160a01b03811663dee1f0e4336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156108c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e49190612327565b6109005760405162461bcd60e51b81526004016104c190612344565b60405163a22cb46560e01b81526001600160a01b038481166004830152831515602483015285169063a22cb46590604401600060405180830381600087803b15801561094b57600080fd5b505af115801561095f573d6000803e3d6000fd5b5050604080516001600160a01b03808916825287166020820152851515918101919091527f84e97615a8997b4bab46d3bb9b033e196f87c998b9ef16257b78515809e921fe9250606001905061055f565b60026000541415610a035760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104c1565b6002600055848314610a575760405162461bcd60e51b815260206004820152601b60248201527f44565f464c4153485f434c41494d5f504152414d535f4552524f52000000000060448201526064016104c1565b6000875b84821015610c1a5730888884818110610a7657610a7661239f565b9050602002016020810190610a8b91906123b5565b6001600160a01b0316636352211e888886818110610aab57610aab61239f565b905060200201356040518263ffffffff1660e01b8152600401610ad091815260200190565b602060405180830381865afa158015610aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b11919061230a565b6001600160a01b031614610b675760405162461bcd60e51b815260206004820152601760248201527f44565f444f45535f4e4f545f4f574e5f5448455f4e465400000000000000000060448201526064016104c1565b878783818110610b7957610b7961239f565b9050602002016020810190610b8e91906123b5565b6001600160a01b03166342842e0e308b898987818110610bb057610bb061239f565b905060200201356040518463ffffffff1660e01b8152600401610bd59392919061237b565b600060405180830381600087803b158015610bef57600080fd5b505af1158015610c03573d6000803e3d6000fd5b505050508180610c12906123d2565b925050610a5b565b604051628e896f60e41b81526001600160a01b038216906308e896f090610c53908b908b908b908b90309081908d908d90600401612424565b6020604051808303816000875af1158015610c72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c969190612327565b610ce25760405162461bcd60e51b815260206004820152601c60248201527f44565f464c415348434c41494d5f4558454355544f525f4552524f520000000060448201526064016104c1565b600091505b84821015610e3757878783818110610d0157610d0161239f565b9050602002016020810190610d1691906123b5565b6001600160a01b03166342842e0e8a30898987818110610d3857610d3861239f565b905060200201356040518463ffffffff1660e01b8152600401610d5d9392919061237b565b600060405180830381600087803b158015610d7757600080fd5b505af1158015610d8b573d6000803e3d6000fd5b50505050858583818110610da157610da161239f565b90506020020135888884818110610dba57610dba61239f565b9050602002016020810190610dcf91906123b5565b6001600160a01b03168a6001600160a01b03167f6bac1c66016500cd7b62d69e86268760baac6cd34a70003af66ffa8a97983216610e0a3390565b6040516001600160a01b03909116815260200160405180910390a481610e2f816123d2565b925050610ce7565b5050600160005550505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ea7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ecb919061230a565b90506001600160a01b03811663dee1f0e4336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610f21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f459190612327565b610f615760405162461bcd60e51b81526004016104c190612344565b610f756001600160a01b03851683856119cf565b604080518481526001600160a01b0384811660208301528616917f15e848750ab66cd66f07bebaf8dab757d6d4af0895afc4ff867f35baf163ee2d910160405180910390a250505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015611020573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611044919061230a565b90506001600160a01b03811663dee1f0e4336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561109a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110be9190612327565b6110da5760405162461bcd60e51b81526004016104c190612344565b60405163a22cb46560e01b81526001600160a01b038481166004830152831515602483015285169063a22cb46590604401600060405180830381600087803b15801561112557600080fd5b505af1158015611139573d6000803e3d6000fd5b5050604080516001600160a01b03808916825287166020820152851515918101919091527f4975f9c82e7a9ff1787f1914e94d3fdd87ec1c062d5be3da53eeefa2eea06f739250606001905061055f565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120e919061230a565b90506001600160a01b03811663dee1f0e4336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611264573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112889190612327565b6112a45760405162461bcd60e51b81526004016104c190612344565b604051632142170760e11b81526001600160a01b038516906342842e0e906112d49030908690889060040161237b565b600060405180830381600087803b1580156112ee57600080fd5b505af1158015611302573d6000803e3d6000fd5b50505050816001600160a01b0316846001600160a01b03167f7d7d06fee8f280e47a7b6a0548f6dffbe5df52f1c1eb012a0d6a41f4a0f350c98560405161134b91815260200190565b60405180910390a350505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113dd919061230a565b90506001600160a01b03811663dee1f0e4336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611433573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114579190612327565b6114735760405162461bcd60e51b81526004016104c190612344565b604051637921219560e11b81523060048201526001600160a01b038681166024830152604482018590526064820184905260a06084830152600160a4830152600360fc1b60c483015285169063f242432a9060e401600060405180830381600087803b1580156114e257600080fd5b505af11580156114f6573d6000803e3d6000fd5b505060408051868152602081018690526001600160a01b03808a169450881692507ffb5471fdf60f5b676c3aab864f67d0be1f974c75f74cff7675295cfb339f9940910160405180910390a35050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cd919061230a565b90506001600160a01b03811663dee1f0e4336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611623573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116479190612327565b6116635760405162461bcd60e51b81526004016104c190612344565b6116776001600160a01b0385168484611a32565b7f310e19bf1a884e11fd3bc62d238aadd7a5ba195e15a27b0888ec93407af3e39984848460405161055f9392919061237b565b6000846001600160a01b0316336001600160a01b03167f0d6928670f3243a6a17ef2c8e072419b0240bb3867270781e7a392cfb48cfd0686866040516116f1929190612527565b60405180910390a35063bc197c8160e01b95945050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa15801561176b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178f919061230a565b90506001600160a01b03811663dee1f0e4336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156117e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118099190612327565b6118255760405162461bcd60e51b81526004016104c190612344565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561188057600080fd5b505af1158015611894573d6000803e3d6000fd5b50505050507fd89c7e59a2afe2827218536e72fef5c8925cce451ae58f27fb8394f9b267cb18826040516118ca91815260200190565b60405180910390a15050565b60408051848152602081018490526000916001600160a01b0387169133917fbbbe3754d41a9a88a068bdc1983426fa46ac272e729253f77bdb30956c951e4a910160405180910390a35063f23a6e6160e01b95945050505050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461197e576040519150601f19603f3d011682016040523d82523d6000602084013e611983565b606091505b50509050806119ca5760405162461bcd60e51b815260206004820152601360248201527211551217d514905394d1915497d19052531151606a1b60448201526064016104c1565b505050565b6040516001600160a01b0383166024820152604481018290526119ca90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611b47565b801580611aac5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611a86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aaa9190612555565b155b611b175760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016104c1565b6040516001600160a01b0383166024820152604481018290526119ca90849063095ea7b360e01b906064016119fb565b6000611b9c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c199092919063ffffffff16565b8051909150156119ca5780806020019051810190611bba9190612327565b6119ca5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104c1565b6060611c288484600085611c32565b90505b9392505050565b606082471015611c935760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104c1565b843b611ce15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104c1565b600080866001600160a01b03168587604051611cfd919061259e565b60006040518083038185875af1925050503d8060008114611d3a576040519150601f19603f3d011682016040523d82523d6000602084013e611d3f565b606091505b5091509150611d4f828286611d5a565b979650505050505050565b60608315611d69575081611c2b565b825115611d795782518084602001fd5b8160405162461bcd60e51b81526004016104c191906125ba565b6001600160a01b0381168114611da857600080fd5b50565b600080600060608486031215611dc057600080fd5b8335611dcb81611d93565b92506020840135611ddb81611d93565b929592945050506040919091013590565b600060208284031215611dfe57600080fd5b81356001600160e01b031981168114611c2b57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611e5557611e55611e16565b604052919050565b600082601f830112611e6e57600080fd5b813567ffffffffffffffff811115611e8857611e88611e16565b611e9b601f8201601f1916602001611e2c565b818152846020838601011115611eb057600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215611ee357600080fd5b8435611eee81611d93565b93506020850135611efe81611d93565b925060408501359150606085013567ffffffffffffffff811115611f2157600080fd5b611f2d87828801611e5d565b91505092959194509250565b60008060408385031215611f4c57600080fd5b823591506020830135611f5e81611d93565b809150509250929050565b8015158114611da857600080fd5b600080600060608486031215611f8c57600080fd5b8335611f9781611d93565b92506020840135611fa781611d93565b91506040840135611fb781611f69565b809150509250925092565b60008083601f840112611fd457600080fd5b50813567ffffffffffffffff811115611fec57600080fd5b6020830191508360208260051b850101111561200757600080fd5b9250929050565b60008060008060008060006080888a03121561202957600080fd5b873561203481611d93565b9650602088013567ffffffffffffffff8082111561205157600080fd5b61205d8b838c01611fc2565b909850965060408a013591508082111561207657600080fd5b6120828b838c01611fc2565b909650945060608a013591508082111561209b57600080fd5b818a0191508a601f8301126120af57600080fd5b8135818111156120be57600080fd5b8b60208285010111156120d057600080fd5b60208301945080935050505092959891949750929550565b6000806000606084860312156120fd57600080fd5b833561210881611d93565b9250602084013591506040840135611fb781611d93565b6000806000806080858703121561213557600080fd5b843561214081611d93565b9350602085013561215081611d93565b93969395505050506040820135916060013590565b600082601f83011261217657600080fd5b8135602067ffffffffffffffff82111561219257612192611e16565b8160051b6121a1828201611e2c565b92835284810182019282810190878511156121bb57600080fd5b83870192505b84831015611d4f578235825291830191908301906121c1565b600080600080600060a086880312156121f257600080fd5b85356121fd81611d93565b9450602086013561220d81611d93565b9350604086013567ffffffffffffffff8082111561222a57600080fd5b61223689838a01612165565b9450606088013591508082111561224c57600080fd5b61225889838a01612165565b9350608088013591508082111561226e57600080fd5b5061227b88828901611e5d565b9150509295509295909350565b60006020828403121561229a57600080fd5b5035919050565b600080600080600060a086880312156122b957600080fd5b85356122c481611d93565b945060208601356122d481611d93565b93506040860135925060608601359150608086013567ffffffffffffffff8111156122fe57600080fd5b61227b88828901611e5d565b60006020828403121561231c57600080fd5b8151611c2b81611d93565b60006020828403121561233957600080fd5b8151611c2b81611f69565b6020808252601c908201527f41434c5f4f4e4c595f474f5645524e414e43455f43414e5f43414c4c00000000604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156123c757600080fd5b8135611c2b81611d93565b60006000198214156123f457634e487b7160e01b600052601160045260246000fd5b5060010190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60a0808252810188905260008960c08301825b8b81101561246757823561244a81611d93565b6001600160a01b0316825260209283019290910190600101612437565b5083810360208501528881526001600160fb1b0389111561248757600080fd5b8860051b9150818a602083013781810191505060208101600081526124b760408501896001600160a01b03169052565b6001600160a01b038716606085015260208483030160808501526124dc8186886123fb565b9c9b505050505050505050505050565b600081518084526020808501945080840160005b8381101561251c57815187529582019590820190600101612500565b509495945050505050565b60408152600061253a60408301856124ec565b828103602084015261254c81856124ec565b95945050505050565b60006020828403121561256757600080fd5b5051919050565b60005b83811015612589578181015183820152602001612571565b83811115612598576000848401525b50505050565b600082516125b081846020870161256e565b9190910192915050565b60208152600082518060208401526125d981604085016020870161256e565b601f01601f1916919091016040019291505056fea264697066735822122085ac0a7d4762b4d5e20b6bd30269f922288624b7dd207cbfe96052935e39698564736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106100f65760003560e01c80637b9f76b51161008a578063ade97ab511610059578063ade97ab514610313578063bc197c8114610347578063c1365ffb14610367578063f23a6e611461038757600080fd5b80637b9f76b514610267578063a0edb48b14610287578063a8e5e4aa146102a7578063ad5c4648146102c757600080fd5b8063453b609c116100c6578063453b609c146101e75780635df27f68146102075780635fc3ea0b146102275780636e0bc3ec1461024757600080fd5b8062a7230a1461013757806301ffc9a714610159578063150b7a021461018e57806336118b52146101c757600080fd5b366101325760405134815233907f120444be79b9fdf050e0985e12e289e693dc30ecfd79179bd6f8893be5476c669060200160405180910390a2005b600080fd5b34801561014357600080fd5b50610157610152366004611dab565b6103a7565b005b34801561016557600080fd5b50610179610174366004611dec565b61056d565b60405190151581526020015b60405180910390f35b34801561019a57600080fd5b506101ae6101a9366004611ecd565b6105bf565b6040516001600160e01b03199091168152602001610185565b3480156101d357600080fd5b506101576101e2366004611f39565b61061f565b3480156101f357600080fd5b50610157610202366004611f77565b6107e6565b34801561021357600080fd5b5061015761022236600461200e565b6109b0565b34801561023357600080fd5b506101576102423660046120e8565b610e47565b34801561025357600080fd5b50610157610262366004611f77565b610fc0565b34801561027357600080fd5b506101576102823660046120e8565b61118a565b34801561029357600080fd5b506101576102a236600461211f565b611359565b3480156102b357600080fd5b506101576102c2366004611dab565b611549565b3480156102d357600080fd5b506102fb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610185565b34801561031f57600080fd5b506102fb7f000000000000000000000000000000000000000000000000000000000000000081565b34801561035357600080fd5b506101ae6103623660046121da565b6116aa565b34801561037357600080fd5b50610157610382366004612288565b61170b565b34801561039357600080fd5b506101ae6103a23660046122a1565b6118d6565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610407573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042b919061230a565b90506001600160a01b03811663dee1f0e4336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a59190612327565b6104ca5760405162461bcd60e51b81526004016104c190612344565b60405180910390fd5b60405163095ea7b360e01b81526001600160a01b0384811660048301526024820184905285169063095ea7b390604401600060405180830381600087803b15801561051457600080fd5b505af1158015610528573d6000803e3d6000fd5b505050507f5b8739d7145ecc145409bcf673430fedd638893918572926b1049b554757e90484848460405161055f9392919061237b565b60405180910390a150505050565b60006001600160e01b03198216630a85bd0160e11b148061059e57506001600160e01b03198216630271189760e51b145b806105b957506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000836001600160a01b0316336001600160a01b03167fb6219d009b79f4e4fc9b2f61614df0c5340f2ae5a531b74cc33ddc09df5de8a88560405161060691815260200190565b60405180910390a350630a85bd0160e11b949350505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa15801561067f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a3919061230a565b90506001600160a01b03811663dee1f0e4336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156106f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071d9190612327565b6107395760405162461bcd60e51b81526004016104c190612344565b600083116107895760405162461bcd60e51b815260206004820152601b60248201527f57495448445241575f414d4f554e545f4e4f545f414c4c4f574544000000000060448201526064016104c1565b8247101561079657600080fd5b6107a08284611931565b604080518481526001600160a01b03841660208201527fba0408b66a1c4035a8e68eca95042e5619e9cc3a1811ebac1661eb4aa358667e910160405180910390a1505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610846573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086a919061230a565b90506001600160a01b03811663dee1f0e4336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156108c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e49190612327565b6109005760405162461bcd60e51b81526004016104c190612344565b60405163a22cb46560e01b81526001600160a01b038481166004830152831515602483015285169063a22cb46590604401600060405180830381600087803b15801561094b57600080fd5b505af115801561095f573d6000803e3d6000fd5b5050604080516001600160a01b03808916825287166020820152851515918101919091527f84e97615a8997b4bab46d3bb9b033e196f87c998b9ef16257b78515809e921fe9250606001905061055f565b60026000541415610a035760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104c1565b6002600055848314610a575760405162461bcd60e51b815260206004820152601b60248201527f44565f464c4153485f434c41494d5f504152414d535f4552524f52000000000060448201526064016104c1565b6000875b84821015610c1a5730888884818110610a7657610a7661239f565b9050602002016020810190610a8b91906123b5565b6001600160a01b0316636352211e888886818110610aab57610aab61239f565b905060200201356040518263ffffffff1660e01b8152600401610ad091815260200190565b602060405180830381865afa158015610aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b11919061230a565b6001600160a01b031614610b675760405162461bcd60e51b815260206004820152601760248201527f44565f444f45535f4e4f545f4f574e5f5448455f4e465400000000000000000060448201526064016104c1565b878783818110610b7957610b7961239f565b9050602002016020810190610b8e91906123b5565b6001600160a01b03166342842e0e308b898987818110610bb057610bb061239f565b905060200201356040518463ffffffff1660e01b8152600401610bd59392919061237b565b600060405180830381600087803b158015610bef57600080fd5b505af1158015610c03573d6000803e3d6000fd5b505050508180610c12906123d2565b925050610a5b565b604051628e896f60e41b81526001600160a01b038216906308e896f090610c53908b908b908b908b90309081908d908d90600401612424565b6020604051808303816000875af1158015610c72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c969190612327565b610ce25760405162461bcd60e51b815260206004820152601c60248201527f44565f464c415348434c41494d5f4558454355544f525f4552524f520000000060448201526064016104c1565b600091505b84821015610e3757878783818110610d0157610d0161239f565b9050602002016020810190610d1691906123b5565b6001600160a01b03166342842e0e8a30898987818110610d3857610d3861239f565b905060200201356040518463ffffffff1660e01b8152600401610d5d9392919061237b565b600060405180830381600087803b158015610d7757600080fd5b505af1158015610d8b573d6000803e3d6000fd5b50505050858583818110610da157610da161239f565b90506020020135888884818110610dba57610dba61239f565b9050602002016020810190610dcf91906123b5565b6001600160a01b03168a6001600160a01b03167f6bac1c66016500cd7b62d69e86268760baac6cd34a70003af66ffa8a97983216610e0a3390565b6040516001600160a01b03909116815260200160405180910390a481610e2f816123d2565b925050610ce7565b5050600160005550505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ea7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ecb919061230a565b90506001600160a01b03811663dee1f0e4336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610f21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f459190612327565b610f615760405162461bcd60e51b81526004016104c190612344565b610f756001600160a01b03851683856119cf565b604080518481526001600160a01b0384811660208301528616917f15e848750ab66cd66f07bebaf8dab757d6d4af0895afc4ff867f35baf163ee2d910160405180910390a250505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015611020573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611044919061230a565b90506001600160a01b03811663dee1f0e4336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561109a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110be9190612327565b6110da5760405162461bcd60e51b81526004016104c190612344565b60405163a22cb46560e01b81526001600160a01b038481166004830152831515602483015285169063a22cb46590604401600060405180830381600087803b15801561112557600080fd5b505af1158015611139573d6000803e3d6000fd5b5050604080516001600160a01b03808916825287166020820152851515918101919091527f4975f9c82e7a9ff1787f1914e94d3fdd87ec1c062d5be3da53eeefa2eea06f739250606001905061055f565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120e919061230a565b90506001600160a01b03811663dee1f0e4336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611264573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112889190612327565b6112a45760405162461bcd60e51b81526004016104c190612344565b604051632142170760e11b81526001600160a01b038516906342842e0e906112d49030908690889060040161237b565b600060405180830381600087803b1580156112ee57600080fd5b505af1158015611302573d6000803e3d6000fd5b50505050816001600160a01b0316846001600160a01b03167f7d7d06fee8f280e47a7b6a0548f6dffbe5df52f1c1eb012a0d6a41f4a0f350c98560405161134b91815260200190565b60405180910390a350505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113dd919061230a565b90506001600160a01b03811663dee1f0e4336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611433573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114579190612327565b6114735760405162461bcd60e51b81526004016104c190612344565b604051637921219560e11b81523060048201526001600160a01b038681166024830152604482018590526064820184905260a06084830152600160a4830152600360fc1b60c483015285169063f242432a9060e401600060405180830381600087803b1580156114e257600080fd5b505af11580156114f6573d6000803e3d6000fd5b505060408051868152602081018690526001600160a01b03808a169450881692507ffb5471fdf60f5b676c3aab864f67d0be1f974c75f74cff7675295cfb339f9940910160405180910390a35050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cd919061230a565b90506001600160a01b03811663dee1f0e4336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611623573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116479190612327565b6116635760405162461bcd60e51b81526004016104c190612344565b6116776001600160a01b0385168484611a32565b7f310e19bf1a884e11fd3bc62d238aadd7a5ba195e15a27b0888ec93407af3e39984848460405161055f9392919061237b565b6000846001600160a01b0316336001600160a01b03167f0d6928670f3243a6a17ef2c8e072419b0240bb3867270781e7a392cfb48cfd0686866040516116f1929190612527565b60405180910390a35063bc197c8160e01b95945050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa15801561176b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178f919061230a565b90506001600160a01b03811663dee1f0e4336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156117e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118099190612327565b6118255760405162461bcd60e51b81526004016104c190612344565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561188057600080fd5b505af1158015611894573d6000803e3d6000fd5b50505050507fd89c7e59a2afe2827218536e72fef5c8925cce451ae58f27fb8394f9b267cb18826040516118ca91815260200190565b60405180910390a15050565b60408051848152602081018490526000916001600160a01b0387169133917fbbbe3754d41a9a88a068bdc1983426fa46ac272e729253f77bdb30956c951e4a910160405180910390a35063f23a6e6160e01b95945050505050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461197e576040519150601f19603f3d011682016040523d82523d6000602084013e611983565b606091505b50509050806119ca5760405162461bcd60e51b815260206004820152601360248201527211551217d514905394d1915497d19052531151606a1b60448201526064016104c1565b505050565b6040516001600160a01b0383166024820152604481018290526119ca90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611b47565b801580611aac5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611a86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aaa9190612555565b155b611b175760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016104c1565b6040516001600160a01b0383166024820152604481018290526119ca90849063095ea7b360e01b906064016119fb565b6000611b9c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c199092919063ffffffff16565b8051909150156119ca5780806020019051810190611bba9190612327565b6119ca5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104c1565b6060611c288484600085611c32565b90505b9392505050565b606082471015611c935760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104c1565b843b611ce15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104c1565b600080866001600160a01b03168587604051611cfd919061259e565b60006040518083038185875af1925050503d8060008114611d3a576040519150601f19603f3d011682016040523d82523d6000602084013e611d3f565b606091505b5091509150611d4f828286611d5a565b979650505050505050565b60608315611d69575081611c2b565b825115611d795782518084602001fd5b8160405162461bcd60e51b81526004016104c191906125ba565b6001600160a01b0381168114611da857600080fd5b50565b600080600060608486031215611dc057600080fd5b8335611dcb81611d93565b92506020840135611ddb81611d93565b929592945050506040919091013590565b600060208284031215611dfe57600080fd5b81356001600160e01b031981168114611c2b57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611e5557611e55611e16565b604052919050565b600082601f830112611e6e57600080fd5b813567ffffffffffffffff811115611e8857611e88611e16565b611e9b601f8201601f1916602001611e2c565b818152846020838601011115611eb057600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215611ee357600080fd5b8435611eee81611d93565b93506020850135611efe81611d93565b925060408501359150606085013567ffffffffffffffff811115611f2157600080fd5b611f2d87828801611e5d565b91505092959194509250565b60008060408385031215611f4c57600080fd5b823591506020830135611f5e81611d93565b809150509250929050565b8015158114611da857600080fd5b600080600060608486031215611f8c57600080fd5b8335611f9781611d93565b92506020840135611fa781611d93565b91506040840135611fb781611f69565b809150509250925092565b60008083601f840112611fd457600080fd5b50813567ffffffffffffffff811115611fec57600080fd5b6020830191508360208260051b850101111561200757600080fd5b9250929050565b60008060008060008060006080888a03121561202957600080fd5b873561203481611d93565b9650602088013567ffffffffffffffff8082111561205157600080fd5b61205d8b838c01611fc2565b909850965060408a013591508082111561207657600080fd5b6120828b838c01611fc2565b909650945060608a013591508082111561209b57600080fd5b818a0191508a601f8301126120af57600080fd5b8135818111156120be57600080fd5b8b60208285010111156120d057600080fd5b60208301945080935050505092959891949750929550565b6000806000606084860312156120fd57600080fd5b833561210881611d93565b9250602084013591506040840135611fb781611d93565b6000806000806080858703121561213557600080fd5b843561214081611d93565b9350602085013561215081611d93565b93969395505050506040820135916060013590565b600082601f83011261217657600080fd5b8135602067ffffffffffffffff82111561219257612192611e16565b8160051b6121a1828201611e2c565b92835284810182019282810190878511156121bb57600080fd5b83870192505b84831015611d4f578235825291830191908301906121c1565b600080600080600060a086880312156121f257600080fd5b85356121fd81611d93565b9450602086013561220d81611d93565b9350604086013567ffffffffffffffff8082111561222a57600080fd5b61223689838a01612165565b9450606088013591508082111561224c57600080fd5b61225889838a01612165565b9350608088013591508082111561226e57600080fd5b5061227b88828901611e5d565b9150509295509295909350565b60006020828403121561229a57600080fd5b5035919050565b600080600080600060a086880312156122b957600080fd5b85356122c481611d93565b945060208601356122d481611d93565b93506040860135925060608601359150608086013567ffffffffffffffff8111156122fe57600080fd5b61227b88828901611e5d565b60006020828403121561231c57600080fd5b8151611c2b81611d93565b60006020828403121561233957600080fd5b8151611c2b81611f69565b6020808252601c908201527f41434c5f4f4e4c595f474f5645524e414e43455f43414e5f43414c4c00000000604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156123c757600080fd5b8135611c2b81611d93565b60006000198214156123f457634e487b7160e01b600052601160045260246000fd5b5060010190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60a0808252810188905260008960c08301825b8b81101561246757823561244a81611d93565b6001600160a01b0316825260209283019290910190600101612437565b5083810360208501528881526001600160fb1b0389111561248757600080fd5b8860051b9150818a602083013781810191505060208101600081526124b760408501896001600160a01b03169052565b6001600160a01b038716606085015260208483030160808501526124dc8186886123fb565b9c9b505050505050505050505050565b600081518084526020808501945080840160005b8381101561251c57815187529582019590820190600101612500565b509495945050505050565b60408152600061253a60408301856124ec565b828103602084015261254c81856124ec565b95945050505050565b60006020828403121561256757600080fd5b5051919050565b60005b83811015612589578181015183820152602001612571565b83811115612598576000848401525b50505050565b600082516125b081846020870161256e565b9190910192915050565b60208152600082518060208401526125d981604085016020870161256e565b601f01601f1916919091016040019291505056fea264697066735822122085ac0a7d4762b4d5e20b6bd30269f922288624b7dd207cbfe96052935e39698564736f6c634300080a0033",
  "devdoc": {
    "author": "OpenSky Labs",
    "kind": "dev",
    "methods": {},
    "title": "OpenSkyDaoVault contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Implementation of vault for OpenSky Dao*",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1379,
        "contract": "contracts/vault/OpenSkyDaoVault.sol:OpenSkyDaoVault",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}