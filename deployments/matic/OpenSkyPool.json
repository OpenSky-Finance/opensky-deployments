{
  "address": "0xf3Bc6651EFb2EdA164282804939D4ca16311ca87",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "SETTINGS_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        }
      ],
      "name": "CloseMoneyMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlyingAsset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "Create",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "referralCode",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowBalance",
          "type": "uint256"
        }
      ],
      "name": "EndLiquidation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "oldLoanId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLoanId",
          "type": "uint256"
        }
      ],
      "name": "Extend",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        }
      ],
      "name": "OpenMoneyMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "repayer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "penalty",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "interestModelAddress",
          "type": "address"
        }
      ],
      "name": "SetInterestModelAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "factor",
          "type": "uint256"
        }
      ],
      "name": "SetTreasuryFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "StartLiquidation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "SETTINGS",
      "outputs": [
        {
          "internalType": "contract IOpenSkySettings",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        }
      ],
      "name": "borrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        }
      ],
      "name": "closeMoneyMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlyingAsset",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "create",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "referralCode",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "endLiquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "oldLoanId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        }
      ],
      "name": "extend",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        }
      ],
      "name": "getAvailableLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getBorrowLimitByOracle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        }
      ],
      "name": "getReserveData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "reserveId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "underlyingAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "moneyMarketAddress",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "lastSupplyIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "borrowingInterestPerSecond",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastMoneyMarketBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "lastUpdateTimestamp",
              "type": "uint40"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrows",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "interestModelAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "treasuryFactor",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isMoneyMarketOn",
              "type": "bool"
            }
          ],
          "internalType": "struct DataTypes.ReserveData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        }
      ],
      "name": "getReserveNormalizedIncome",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        }
      ],
      "name": "getTVL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        }
      ],
      "name": "getTotalBorrowBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        }
      ],
      "name": "openMoneyMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "underlyingAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "oTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "moneyMarketAddress",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "lastSupplyIndex",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "borrowingInterestPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastMoneyMarketBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint40",
          "name": "lastUpdateTimestamp",
          "type": "uint40"
        },
        {
          "internalType": "uint256",
          "name": "totalBorrows",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "interestModelAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "treasuryFactor",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isMoneyMarketOn",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "interestModelAddress",
          "type": "address"
        }
      ],
      "name": "setInterestModelAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "factor",
          "type": "uint256"
        }
      ],
      "name": "setTreasuryFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "startLiquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc5ef6098d6d744b6940dcea2bc52cdadeffa931ad07a12540026f251931700ba",
  "receipt": {
    "to": null,
    "from": "0x218513C58A4781a5B88De6230caA29aBCe2Ccd75",
    "contractAddress": "0xf3Bc6651EFb2EdA164282804939D4ca16311ca87",
    "transactionIndex": 57,
    "gasUsed": "4743309",
    "logsBloom": "0x
    "blockHash": "0xb21200f007d4cc7a2dbf84425fe1219e1c5130e97240ddb461f56373c798ba79",
    "transactionHash": "0xc5ef6098d6d744b6940dcea2bc52cdadeffa931ad07a12540026f251931700ba",
    "logs": [
      {
        "transactionIndex": 57,
        "blockNumber": 29179388,
        "transactionHash": "0xc5ef6098d6d744b6940dcea2bc52cdadeffa931ad07a12540026f251931700ba",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000218513c58a4781a5b88de6230caa29abce2ccd75",
          "0x000000000000000000000000127685d6dd6683085da4b6a041efcef1681e5c9c"
        ],
        "data": "0x000000000000000000000000000000000000000000000000022d4874cf9079ca0000000000000000000000000000000000000000000000002db09cfb154f4a23000000000000000000000000000000000000000000000ad55df74d162db12bef0000000000000000000000000000000000000000000000002b83548645bed059000000000000000000000000000000000000000000000ad56024958afd41a5b9",
        "logIndex": 263,
        "blockHash": "0xb21200f007d4cc7a2dbf84425fe1219e1c5130e97240ddb461f56373c798ba79"
      }
    ],
    "blockNumber": 29179388,
    "cumulativeGasUsed": "12342453",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x57528D98c3a8762c78f4D02a89CBc0Eaf77FD322"
  ],
  "solcInputHash": "903b6e0b7a82abf3fd1d087256b904a8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"SETTINGS_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"CloseMoneyMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowBalance\",\"type\":\"uint256\"}],\"name\":\"EndLiquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldLoanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLoanId\",\"type\":\"uint256\"}],\"name\":\"Extend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"OpenMoneyMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"repayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"interestModelAddress\",\"type\":\"address\"}],\"name\":\"SetInterestModelAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"}],\"name\":\"SetTreasuryFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"StartLiquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"SETTINGS\",\"outputs\":[{\"internalType\":\"contract IOpenSkySettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"closeMoneyMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"endLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldLoanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"extend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"getAvailableLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getBorrowLimitByOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"getReserveData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"moneyMarketAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"lastSupplyIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"borrowingInterestPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastMoneyMarketBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"interestModelAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"treasuryFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMoneyMarketOn\",\"type\":\"bool\"}],\"internalType\":\"struct DataTypes.ReserveData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"getReserveNormalizedIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"getTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"getTotalBorrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"openMoneyMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"moneyMarketAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"lastSupplyIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"borrowingInterestPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastMoneyMarketBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"interestModelAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"treasuryFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMoneyMarketOn\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"interestModelAddress\",\"type\":\"address\"}],\"name\":\"setInterestModelAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"startLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"OpenSky Labs\",\"kind\":\"dev\",\"methods\":{\"borrow(uint256,uint256,uint256,address,uint256,address)\":{\"details\":\"Borrows ETH from reserve using an NFT as collateral and will receive a loan NFT as receipt.\",\"params\":{\"amount\":\"amount of ETH user will borrow\",\"duration\":\"The desired duration of the loan\",\"nftAddress\":\"The collateral NFT address\",\"onBehalfOf\":\"address of the user who will receive ETH and loan NFT.*\",\"reserveId\":\"The ID of the reserve\",\"tokenId\":\"The ID of the NFT\"}},\"closeMoneyMarket(uint256)\":{\"details\":\"Only callable by the emergency admin role\",\"params\":{\"reserveId\":\"The ID of the reserve*\"}},\"create(address,string,string)\":{\"details\":\"Only callable by the pool admin role\",\"params\":{\"name\":\"The name of the oToken\",\"symbol\":\"The symbol for the oToken*\",\"underlyingAsset\":\"The address of the underlying asset\"}},\"deposit(uint256,uint256,address,uint256)\":{\"details\":\"Deposits ETH into the reserve.\",\"params\":{\"referralCode\":\"integrators are assigned a referral code and can potentially receive rewards*\",\"reserveId\":\"The ID of the reserve\"}},\"endLiquidation(uint256,uint256)\":{\"details\":\"Completes liquidation for a loan which will be repaid.\",\"params\":{\"amount\":\"The amount of the token that will be repaid.\",\"loanId\":\"The ID of the liquidated loan that will be repaid.\"}},\"extend(uint256,uint256,uint256,address)\":{\"details\":\"Extends creates a new loan and terminates the old loan.\",\"params\":{\"amount\":\"The amount of ERC20 token the user will borrow in the new loan\",\"duration\":\"The selected duration the user will borrow in the new loan\",\"loanId\":\"The loan ID to extend\",\"onBehalfOf\":\"The address will borrow in the new loan*\"}},\"getAvailableLiquidity(uint256)\":{\"details\":\"Returns the remaining liquidity of the reserve\",\"params\":{\"reserveId\":\"The ID of the reserve\"},\"returns\":{\"_0\":\"The reserve's withdrawable balance\"}},\"getBorrowLimitByOracle(uint256,address,uint256)\":{\"details\":\"Returns the instantaneous borrow limit value of a special NFT\",\"params\":{\"nftAddress\":\"The address of the NFT\",\"tokenId\":\"The ID of the NFT\"},\"returns\":{\"_0\":\"The NFT's borrow limit\"}},\"getReserveData(uint256)\":{\"details\":\"Returns the state of the reserve\",\"params\":{\"reserveId\":\"The ID of the reserve\"},\"returns\":{\"_0\":\"The state of the reserve*\"}},\"getReserveNormalizedIncome(uint256)\":{\"details\":\"Returns the normalized income of the reserve\",\"params\":{\"reserveId\":\"The ID of the reserve\"},\"returns\":{\"_0\":\"The reserve's normalized income\"}},\"getTVL(uint256)\":{\"details\":\"Returns TVL (total value locked) of the reserve.\",\"params\":{\"reserveId\":\"The ID of the reserve\"},\"returns\":{\"_0\":\"The reserve's TVL\"}},\"getTotalBorrowBalance(uint256)\":{\"details\":\"Returns the sum of all users borrow balances include borrow interest accrued\",\"params\":{\"reserveId\":\"The ID of the reserve\"},\"returns\":{\"_0\":\"The total borrow balance of the reserve\"}},\"openMoneyMarket(uint256)\":{\"details\":\"Only callable by the emergency admin role\",\"params\":{\"reserveId\":\"The ID of the reserve*\"}},\"pause()\":{\"details\":\"Pause pool for emergency case, can only be called by emergency admin.*\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"repay(uint256)\":{\"details\":\"Repays a loan, as a result the corresponding loan NFT owner will receive the collateralized NFT.\",\"params\":{\"loanId\":\"The ID of the loan the user will repay\"}},\"setInterestModelAddress(uint256,address)\":{\"details\":\"Only callable by the pool admin role\",\"params\":{\"interestModelAddress\":\"The new address of the interest model contract*\",\"reserveId\":\"The ID of the reserve\"}},\"setTreasuryFactor(uint256,uint256)\":{\"details\":\"Only callable by the pool admin role\",\"params\":{\"factor\":\"The new treasury factor of the reserve*\",\"reserveId\":\"The ID of the reserve\"}},\"startLiquidation(uint256)\":{\"details\":\"Starts liquidation for a loan when it's in LIQUIDATABLE status\",\"params\":{\"loanId\":\"The ID of the loan which will be liquidated\"}},\"unpause()\":{\"details\":\"Unpause pool for emergency case, can only be called by emergency admin.*\"},\"withdraw(uint256,uint256,address)\":{\"details\":\"withdraws the ETH from reserve.\",\"params\":{\"amount\":\"amount of oETH to withdraw and receive native ETH*\",\"reserveId\":\"The ID of the reserve\"}}},\"title\":\"OpenSkyPool contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"closeMoneyMarket(uint256)\":{\"notice\":\"Close the money market\"},\"create(address,string,string)\":{\"notice\":\"Creates a reserve\"},\"openMoneyMarket(uint256)\":{\"notice\":\"Open the money market\"},\"setInterestModelAddress(uint256,address)\":{\"notice\":\"Updates the interest model address of a reserve\"},\"setTreasuryFactor(uint256,uint256)\":{\"notice\":\"Updates the treasury factor of a reserve\"}},\"notice\":\"Main point of interaction with OpenSky protocol's pool - Users can:   # Deposit   # Withdraw*\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OpenSkyPool.sol\":\"OpenSkyPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/OpenSkyPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/access/IAccessControl.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\nimport './interfaces/IOpenSkyCollateralPriceOracle.sol';\\nimport './interfaces/IOpenSkyNFTDescriptor.sol';\\nimport './interfaces/IOpenSkyLoan.sol';\\nimport './interfaces/IOpenSkyPool.sol';\\nimport './interfaces/IACLManager.sol';\\nimport './libraries/math/MathUtils.sol';\\nimport './libraries/math/PercentageMath.sol';\\nimport './libraries/helpers/Errors.sol';\\nimport './libraries/types/DataTypes.sol';\\nimport './libraries/ReserveLogic.sol';\\n\\n/**\\n * @title OpenSkyPool contract\\n * @author OpenSky Labs\\n * @notice Main point of interaction with OpenSky protocol's pool\\n * - Users can:\\n *   # Deposit\\n *   # Withdraw\\n **/\\ncontract OpenSkyPool is Context, Pausable, ReentrancyGuard, IOpenSkyPool {\\n    using SafeMath for uint256;\\n    using PercentageMath for uint256;\\n    using Counters for Counters.Counter;\\n    using ReserveLogic for DataTypes.ReserveData;\\n\\n    // Map of reserves and their data\\n    mapping(uint256 => DataTypes.ReserveData) public reserves;\\n\\n    IOpenSkySettings public immutable SETTINGS;\\n    Counters.Counter private _reserveIdTracker;\\n\\n    constructor(address SETTINGS_) Pausable() ReentrancyGuard() {\\n        SETTINGS = IOpenSkySettings(SETTINGS_);\\n    }\\n\\n    /**\\n     * @dev Only pool admin can call functions marked by this modifier.\\n     **/\\n    modifier onlyPoolAdmin() {\\n        IACLManager ACLManager = IACLManager(SETTINGS.ACLManagerAddress());\\n        require(ACLManager.isPoolAdmin(_msgSender()), Errors.ACL_ONLY_POOL_ADMIN_CAN_CALL);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only liquidator can call functions marked by this modifier.\\n     **/\\n    modifier onlyLiquidator() {\\n        require(SETTINGS.isLiquidator(_msgSender()), Errors.ACL_ONLY_LIQUIDATOR_CAN_CALL);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only emergency admin can call functions marked by this modifier.\\n     **/\\n    modifier onlyEmergencyAdmin() {\\n        IACLManager ACLManager = IACLManager(SETTINGS.ACLManagerAddress());\\n        require(ACLManager.isEmergencyAdmin(_msgSender()), Errors.ACL_ONLY_EMERGENCY_ADMIN_CAN_CALL);\\n        _;\\n    }\\n\\n    /**\\n     * @dev functions marked by this modifier can be excuted only when the specific reserve exists.\\n     **/\\n    modifier checkReserveExists(uint256 reserveId) {\\n        require(_exists(reserveId), Errors.RESERVE_DOES_NOT_EXIST);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Pause pool for emergency case, can only be called by emergency admin.\\n     **/\\n    function pause() external onlyEmergencyAdmin {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpause pool for emergency case, can only be called by emergency admin.\\n     **/\\n    function unpause() external onlyEmergencyAdmin {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Check if specific reserve exists.\\n     **/\\n    function _exists(uint256 reserveId) internal view returns (bool) {\\n        return reserves[reserveId].reserveId > 0;\\n    }\\n\\n    /// @inheritdoc IOpenSkyPool\\n    function create(address underlyingAsset, string memory name, string memory symbol) external override onlyPoolAdmin {\\n        _reserveIdTracker.increment();\\n        uint256 reserveId = _reserveIdTracker.current();\\n        address oTokenAddress = IOpenSkyReserveVaultFactory(SETTINGS.vaultFactoryAddress()).create(\\n            reserveId,\\n            name,\\n            symbol,\\n            underlyingAsset\\n        );\\n        reserves[reserveId] = DataTypes.ReserveData({\\n            reserveId: reserveId,\\n            underlyingAsset: underlyingAsset,\\n            oTokenAddress: oTokenAddress,\\n            moneyMarketAddress: SETTINGS.moneyMarketAddress(),\\n            lastSupplyIndex: uint128(WadRayMath.RAY),\\n            borrowingInterestPerSecond: 0,\\n            lastMoneyMarketBalance: 0,\\n            lastUpdateTimestamp: 0,\\n            totalBorrows: 0,\\n            interestModelAddress: SETTINGS.interestRateStrategyAddress(),\\n            treasuryFactor: SETTINGS.reserveFactor(),\\n            isMoneyMarketOn: true\\n        });\\n        emit Create(reserveId, underlyingAsset, oTokenAddress, name, symbol);\\n    }\\n\\n    /// @inheritdoc IOpenSkyPool\\n    function setTreasuryFactor(uint256 reserveId, uint256 factor)\\n        external\\n        override\\n        checkReserveExists(reserveId)\\n        onlyPoolAdmin\\n    {\\n        require(factor <= SETTINGS.MAX_RESERVE_FACTOR());\\n        reserves[reserveId].treasuryFactor = factor;\\n        emit SetTreasuryFactor(reserveId, factor);\\n    }\\n\\n    /// @inheritdoc IOpenSkyPool\\n    function setInterestModelAddress(uint256 reserveId, address interestModelAddress)\\n        external\\n        override\\n        checkReserveExists(reserveId)\\n        onlyPoolAdmin\\n    {\\n        reserves[reserveId].interestModelAddress = interestModelAddress;\\n        emit SetInterestModelAddress(reserveId, interestModelAddress);\\n    }\\n\\n    /// @inheritdoc IOpenSkyPool\\n    function openMoneyMarket(uint256 reserveId) external override onlyEmergencyAdmin {\\n        require(!reserves[reserveId].isMoneyMarketOn, Errors.RESERVE_SWITCH_MONEY_MARKET_STATE_ERROR);\\n        reserves[reserveId].openMoneyMarket();\\n        emit OpenMoneyMarket(reserveId);\\n    }\\n\\n    /// @inheritdoc IOpenSkyPool\\n    function closeMoneyMarket(uint256 reserveId) external override onlyEmergencyAdmin {\\n        require(reserves[reserveId].isMoneyMarketOn, Errors.RESERVE_SWITCH_MONEY_MARKET_STATE_ERROR);\\n        reserves[reserveId].closeMoneyMarket();\\n        emit CloseMoneyMarket(reserveId);\\n    }\\n\\n    /// @inheritdoc IOpenSkyPool\\n    function deposit(uint256 reserveId, uint256 amount, address onBehalfOf, uint256 referralCode)\\n        public\\n        virtual\\n        override\\n        whenNotPaused\\n        nonReentrant\\n        checkReserveExists(reserveId)\\n    {\\n        require(amount > 0, Errors.DEPOSIT_AMOUNT_SHOULD_BE_BIGGER_THAN_ZERO);\\n        reserves[reserveId].deposit(_msgSender(), amount, onBehalfOf);\\n        emit Deposit(reserveId, _msgSender(), amount, referralCode);\\n    }\\n\\n    /// @inheritdoc IOpenSkyPool\\n    function withdraw(uint256 reserveId, uint256 amount, address onBehalfOf)\\n        public\\n        virtual\\n        override\\n        whenNotPaused\\n        nonReentrant\\n        checkReserveExists(reserveId)\\n    {\\n        address oTokenAddress = reserves[reserveId].oTokenAddress;\\n        uint256 userBalance = IOpenSkyOToken(oTokenAddress).balanceOf(msg.sender);\\n\\n        uint256 amountToWithdraw = amount;\\n        if (amount == type(uint256).max) {\\n            amountToWithdraw = userBalance;\\n        }\\n\\n        require(amountToWithdraw > 0 && amountToWithdraw <= userBalance, Errors.WITHDRAW_AMOUNT_NOT_ALLOWED);\\n        require(getAvailableLiquidity(reserveId) >= amountToWithdraw, Errors.WITHDRAW_LIQUIDITY_NOT_SUFFIENCE);\\n\\n        reserves[reserveId].withdraw(_msgSender(), amountToWithdraw, onBehalfOf);\\n        emit Withdraw(reserveId, _msgSender(), amountToWithdraw);\\n    }\\n\\n    struct BorrowLocalParams {\\n        uint256 borrowLimit;\\n        uint256 availableLiquidity;\\n        uint256 amountToBorrow;\\n        uint256 borrowRate;\\n        address loanAddress;\\n    }\\n\\n    /// @inheritdoc IOpenSkyPool\\n    function borrow(\\n        uint256 reserveId,\\n        uint256 amount,\\n        uint256 duration,\\n        address nftAddress,\\n        uint256 tokenId,\\n        address onBehalfOf\\n    ) public virtual override whenNotPaused nonReentrant checkReserveExists(reserveId) returns (uint256) {\\n        require(SETTINGS.inWhitelist(reserveId, nftAddress), Errors.NFT_ADDRESS_IS_NOT_IN_WHITELIST);\\n        require(\\n            duration >= SETTINGS.getWhitelistDetail(reserveId, nftAddress).minBorrowDuration &&\\n            duration <= SETTINGS.getWhitelistDetail(reserveId, nftAddress).maxBorrowDuration,\\n            Errors.BORROW_DURATION_NOT_ALLOWED\\n        );\\n\\n        BorrowLocalParams memory vars;\\n        vars.borrowLimit = getBorrowLimitByOracle(reserveId, nftAddress, tokenId);\\n        vars.availableLiquidity = getAvailableLiquidity(reserveId);\\n\\n        vars.amountToBorrow = amount;\\n\\n        if (amount == type(uint256).max) {\\n            vars.amountToBorrow = (\\n                vars.borrowLimit < vars.availableLiquidity ? vars.borrowLimit : vars.availableLiquidity\\n            );\\n        }\\n\\n        require(vars.borrowLimit >= vars.amountToBorrow, Errors.BORROW_AMOUNT_EXCEED_BORROW_LIMIT);\\n        require(vars.availableLiquidity >= vars.amountToBorrow, Errors.RESERVE_LIQUIDITY_INSUFFICIENT);\\n\\n        vars.loanAddress = SETTINGS.loanAddress();\\n        IERC721(nftAddress).safeTransferFrom(_msgSender(), vars.loanAddress, tokenId);\\n\\n        vars.borrowRate = reserves[reserveId].getBorrowRate(0, 0, vars.amountToBorrow, 0);\\n        (uint256 loanId, DataTypes.LoanData memory loan) = IOpenSkyLoan(vars.loanAddress).mint(\\n            reserveId,\\n            onBehalfOf,\\n            nftAddress,\\n            tokenId,\\n            vars.amountToBorrow,\\n            duration,\\n            vars.borrowRate\\n        );\\n        reserves[reserveId].borrow(loan);\\n\\n        emit Borrow(\\n            reserveId,\\n            _msgSender(),\\n            onBehalfOf,\\n            loanId\\n        );\\n\\n        return loanId;\\n    }\\n\\n    /// @inheritdoc IOpenSkyPool\\n    function repay(uint256 loanId) public virtual override whenNotPaused nonReentrant returns (uint256 repayAmount) {\\n        address loanAddress = SETTINGS.loanAddress();\\n        address onBehalfOf = IERC721(loanAddress).ownerOf(loanId);\\n\\n        IOpenSkyLoan loanNFT = IOpenSkyLoan(loanAddress);\\n        DataTypes.LoanData memory loanData = loanNFT.getLoanData(loanId);\\n\\n        require(\\n            loanData.status == DataTypes.LoanStatus.BORROWING ||\\n                loanData.status == DataTypes.LoanStatus.EXTENDABLE ||\\n                loanData.status == DataTypes.LoanStatus.OVERDUE,\\n            Errors.REPAY_STATUS_ERROR\\n        );\\n\\n        uint256 penalty = loanNFT.getPenalty(loanId);\\n        uint256 borrowBalance = loanNFT.getBorrowBalance(loanId);\\n        repayAmount = borrowBalance.add(penalty);\\n\\n        uint256 reserveId = loanData.reserveId;\\n        require(_exists(reserveId), Errors.RESERVE_DOES_NOT_EXIST);\\n\\n        reserves[reserveId].repay(loanData, repayAmount, borrowBalance);\\n\\n        loanNFT.end(loanId, onBehalfOf, _msgSender());\\n\\n        address nftReceiver = SETTINGS.punkGatewayAddress() == _msgSender() ? _msgSender() : onBehalfOf;\\n        IERC721(loanData.nftAddress).safeTransferFrom(address(loanNFT), nftReceiver, loanData.tokenId);\\n\\n        emit Repay(reserveId, _msgSender(), onBehalfOf, loanId, repayAmount, penalty);\\n    }\\n\\n    struct ExtendLocalParams {\\n        uint256 borrowInterestOfOldLoan;\\n        uint256 needInAmount;\\n        uint256 needOutAmount;\\n        uint256 penalty;\\n        uint256 borrowLimit;\\n        uint256 availableLiquidity;\\n        uint256 amountToExtend;\\n        uint256 newBorrowRate;\\n        DataTypes.LoanData oldLoan;\\n        DataTypes.LoanStatus oldLoanStatus;\\n    }\\n\\n    /// @inheritdoc IOpenSkyPool\\n    function extend(\\n        uint256 oldLoanId,\\n        uint256 amount,\\n        uint256 duration,\\n        address onBehalfOf\\n    ) external override whenNotPaused nonReentrant returns (uint256, uint256) {\\n        IOpenSkyLoan loanNFT = IOpenSkyLoan(SETTINGS.loanAddress());\\n        if (_msgSender() == SETTINGS.wethGatewayAddress()) {\\n            require(loanNFT.ownerOf(oldLoanId) == onBehalfOf, Errors.LOAN_CALLER_IS_NOT_OWNER);\\n        } else {\\n            require(loanNFT.ownerOf(oldLoanId) == _msgSender(), Errors.LOAN_CALLER_IS_NOT_OWNER);\\n            onBehalfOf = _msgSender();\\n        }\\n\\n        ExtendLocalParams memory vars = ExtendLocalParams({\\n            borrowInterestOfOldLoan: 0,\\n            needInAmount: 0,\\n            needOutAmount: 0,\\n            penalty: 0,\\n            borrowLimit: 0,\\n            availableLiquidity: 0,\\n            amountToExtend: 0,\\n            newBorrowRate: 0,\\n            oldLoan: loanNFT.getLoanData(oldLoanId),\\n            oldLoanStatus: DataTypes.LoanStatus.BORROWING\\n        });\\n\\n        vars.oldLoanStatus = loanNFT.getStatus(oldLoanId);\\n        require(\\n            vars.oldLoanStatus == DataTypes.LoanStatus.EXTENDABLE || vars.oldLoanStatus == DataTypes.LoanStatus.OVERDUE,\\n            Errors.EXTEND_STATUS_ERROR\\n        );\\n\\n        require(SETTINGS.inWhitelist(vars.oldLoan.reserveId, vars.oldLoan.nftAddress), Errors.NFT_ADDRESS_IS_NOT_IN_WHITELIST);\\n\\n        DataTypes.WhitelistInfo memory whitelistInfo = SETTINGS.getWhitelistDetail(vars.oldLoan.reserveId, vars.oldLoan.nftAddress);\\n        require(\\n            duration >= whitelistInfo.minBorrowDuration && duration <= whitelistInfo.maxBorrowDuration,\\n            Errors.BORROW_DURATION_NOT_ALLOWED\\n        );\\n\\n        vars.borrowLimit = getBorrowLimitByOracle(vars.oldLoan.reserveId, vars.oldLoan.nftAddress, vars.oldLoan.tokenId);\\n\\n        vars.amountToExtend = amount;\\n        if (amount == type(uint256).max) {\\n            vars.amountToExtend = vars.borrowLimit; // no need to check availableLiquidity here\\n        }\\n\\n        require(vars.borrowLimit >= vars.amountToExtend, Errors.BORROW_AMOUNT_EXCEED_BORROW_LIMIT);\\n\\n        // check msg.value\\n        vars.borrowInterestOfOldLoan = loanNFT.getBorrowInterest(oldLoanId);\\n        vars.penalty = loanNFT.getPenalty(oldLoanId);\\n        if (vars.oldLoan.amount <= vars.amountToExtend) {\\n            uint256 extendAmount = vars.amountToExtend.sub(vars.oldLoan.amount);\\n            if (extendAmount < vars.borrowInterestOfOldLoan + vars.penalty) {\\n                vars.needInAmount = vars.borrowInterestOfOldLoan.add(vars.penalty).sub(extendAmount);\\n            } else {\\n                vars.needOutAmount = extendAmount.sub(vars.borrowInterestOfOldLoan).sub(vars.penalty);\\n            }\\n        } else {\\n            //vars.needInAmount = oldLoan.amount - vars.amountToExtend + vars.borrowInterestOfOldLoan + vars.penalty;\\n            vars.needInAmount = vars.oldLoan.amount.sub(vars.amountToExtend).add(vars.borrowInterestOfOldLoan + vars.penalty);\\n        }\\n\\n        // check availableLiquidity\\n        if (vars.needOutAmount > 0) {\\n            vars.availableLiquidity = getAvailableLiquidity(vars.oldLoan.reserveId);\\n            require(vars.availableLiquidity >= vars.needOutAmount, Errors.RESERVE_LIQUIDITY_INSUFFICIENT);\\n        }\\n\\n        // end old loan\\n        loanNFT.end(oldLoanId, onBehalfOf, onBehalfOf);\\n\\n        vars.newBorrowRate = reserves[vars.oldLoan.reserveId].getBorrowRate(\\n            vars.penalty,\\n            0,\\n            vars.amountToExtend,\\n            vars.oldLoan.amount.add(vars.borrowInterestOfOldLoan)\\n        );\\n\\n        // create new loan\\n        (uint256 loanId, DataTypes.LoanData memory newLoan) = loanNFT.mint(\\n            vars.oldLoan.reserveId,\\n            onBehalfOf,\\n            vars.oldLoan.nftAddress,\\n            vars.oldLoan.tokenId,\\n            vars.amountToExtend,\\n            duration,\\n            vars.newBorrowRate\\n        );\\n\\n        // update reserve state\\n        reserves[vars.oldLoan.reserveId].extend(\\n            vars.oldLoan,\\n            newLoan,\\n            vars.borrowInterestOfOldLoan,\\n            vars.needInAmount,\\n            vars.needOutAmount,\\n            vars.penalty\\n        );\\n\\n        emit Extend(vars.oldLoan.reserveId, onBehalfOf, oldLoanId, loanId);\\n\\n        return (vars.needInAmount, vars.needOutAmount);\\n    }\\n\\n    /// @inheritdoc IOpenSkyPool\\n    function startLiquidation(uint256 loanId) external override whenNotPaused onlyLiquidator {\\n        IOpenSkyLoan loanNFT = IOpenSkyLoan(SETTINGS.loanAddress());\\n        DataTypes.LoanData memory loanData = loanNFT.getLoanData(loanId);\\n        require(loanData.status == DataTypes.LoanStatus.LIQUIDATABLE, Errors.START_LIQUIDATION_STATUS_ERROR);\\n\\n        reserves[loanData.reserveId].startLiquidation(loanData);\\n\\n        IERC721(loanData.nftAddress).safeTransferFrom(address(loanNFT), _msgSender(), loanData.tokenId);\\n        loanNFT.startLiquidation(loanId);\\n\\n        emit StartLiquidation(loanData.reserveId, loanId, loanData.nftAddress, loanData.tokenId, _msgSender());\\n    }\\n\\n    /// @inheritdoc IOpenSkyPool\\n    function endLiquidation(uint256 loanId, uint256 amount) external override whenNotPaused onlyLiquidator {\\n        IOpenSkyLoan loanNFT = IOpenSkyLoan(SETTINGS.loanAddress());\\n        DataTypes.LoanData memory loanData = loanNFT.getLoanData(loanId);\\n        require(loanData.status == DataTypes.LoanStatus.LIQUIDATING, Errors.END_LIQUIDATION_STATUS_ERROR);\\n\\n        // repay money\\n        uint256 borrowBalance = loanNFT.getBorrowBalance(loanId);\\n\\n        require(amount >= borrowBalance, Errors.END_LIQUIDATION_AMOUNT_ERROR);\\n        reserves[loanData.reserveId].endLiquidation(amount, borrowBalance);\\n\\n        loanNFT.endLiquidation(loanId);\\n\\n        emit EndLiquidation(\\n            loanData.reserveId,\\n            loanId,\\n            loanData.nftAddress,\\n            loanData.tokenId,\\n            _msgSender(),\\n            amount,\\n            borrowBalance\\n        );\\n    }\\n\\n    /// @inheritdoc IOpenSkyPool\\n    function getReserveData(uint256 reserveId)\\n        public\\n        view\\n        override\\n        checkReserveExists(reserveId)\\n        returns (DataTypes.ReserveData memory)\\n    {\\n        return reserves[reserveId];\\n    }\\n\\n    /// @inheritdoc IOpenSkyPool\\n    function getReserveNormalizedIncome(uint256 reserveId)\\n        public\\n        view\\n        virtual\\n        override\\n        checkReserveExists(reserveId)\\n        returns (uint256)\\n    {\\n        return reserves[reserveId].getNormalizedIncome();\\n    }\\n\\n    /// @inheritdoc IOpenSkyPool\\n    function getAvailableLiquidity(uint256 reserveId)\\n        public\\n        view\\n        override\\n        checkReserveExists(reserveId)\\n        returns (uint256)\\n    {\\n        return reserves[reserveId].getMoneyMarketBalance();\\n    }\\n\\n    /// @inheritdoc IOpenSkyPool\\n    function getBorrowLimitByOracle(\\n        uint256 reserveId,\\n        address nftAddress,\\n        uint256 tokenId\\n    ) public view virtual override returns (uint256) {\\n        return\\n            IOpenSkyCollateralPriceOracle(SETTINGS.nftPriceOracleAddress())\\n                .getPrice(reserveId, nftAddress, tokenId)\\n                .percentMul(SETTINGS.getWhitelistDetail(reserveId, nftAddress).LTV);\\n    }\\n    \\n    /// @inheritdoc IOpenSkyPool\\n    function getTotalBorrowBalance(uint256 reserveId) public view override returns (uint256) {\\n        return reserves[reserveId].getTotalBorrowBalance();\\n    }\\n\\n    /// @inheritdoc IOpenSkyPool\\n    function getTVL(uint256 reserveId) public view override checkReserveExists(reserveId) returns (uint256) {\\n        return reserves[reserveId].getTVL();\\n    }\\n\\n    receive() external payable {\\n        revert(Errors.RECEIVE_NOT_ALLOWED);\\n    }\\n\\n    fallback() external payable {\\n        revert(Errors.FALLBACK_NOT_ALLOWED);\\n    }\\n}\\n\",\"keccak256\":\"0x48f07cdcc84afad74b82326331a63d73888b854c95074874344ae971559705a1\",\"license\":\"MIT\"},\"contracts/interfaces/IACLManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IACLManager {\\n    function addEmergencyAdmin(address admin) external;\\n    \\n    function isEmergencyAdmin(address admin) external view returns (bool);\\n    \\n    function removeEmergencyAdmin(address admin) external;\\n    \\n    function addGovernance(address admin) external;\\n    \\n    function isGovernance(address admin) external view returns (bool);\\n\\n    function removeGovernance(address admin) external;\\n\\n    function addPoolAdmin(address admin) external;\\n\\n    function isPoolAdmin(address admin) external view returns (bool);\\n\\n    function removePoolAdmin(address admin) external;\\n\\n    function addLiquidationOperator(address address_) external;\\n\\n    function isLiquidationOperator(address address_) external view returns (bool);\\n\\n    function removeLiquidationOperator(address address_) external;\\n\\n    function addAirdropOperator(address address_) external;\\n\\n    function isAirdropOperator(address address_) external view returns (bool);\\n\\n    function removeAirdropOperator(address address_) external;\\n}\\n\",\"keccak256\":\"0x0e77d3bdc88ba10cd78a9a80350bbf0d4120a1d0ac7c7911bef8c8cb389cf42f\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyCollateralPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IOpenSkyPriceOracle\\n * @author OpenSky Labs\\n * @notice Defines the basic interface for a price oracle.\\n **/\\ninterface IOpenSkyCollateralPriceOracle {\\n    /**\\n     * @dev Emitted on updatePrice()\\n     * @param nftAddress The address of the NFT\\n     * @param price The price of the NFT\\n     * @param timestamp The timestamp when the price happened\\n     * @param roundId The round id\\n     **/\\n    event UpdatePrice(address indexed nftAddress, uint256 price, uint256 timestamp, uint256 roundId);\\n\\n    /**\\n     * @notice Returns the NFT price in ETH\\n     * @param reserveId The id of the reserve\\n     * @param nftAddress The address of the NFT\\n     * @param tokenId The id of the NFT\\n     * @return The price of the NFT\\n     **/\\n    function getPrice(uint256 reserveId, address nftAddress, uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Updates the floor price of the NFT collection\\n     * @param nftAddress The address of the NFT\\n     * @param price The price of the NFT\\n     * @param timestamp The timestamp when the price happened\\n     **/\\n    function updatePrice(address nftAddress, uint256 price, uint256 timestamp) external;\\n}\\n\",\"keccak256\":\"0xc4cd7555250705042d2fe4e9942817167dc8692bdc8b1e028bc3026b6ab4b7bc\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IOpenSkyInterestRateStrategy\\n * @author OpenSky Labs\\n * @notice Interface for the calculation of the interest rates\\n */\\ninterface IOpenSkyInterestRateStrategy {\\n    /**\\n     * @dev Emitted on setBaseBorrowRate()\\n     * @param reserveId The id of the reserve\\n     * @param baseRate The base rate has been set\\n     **/\\n    event SetBaseBorrowRate(\\n        uint256 indexed reserveId,\\n        uint256 indexed baseRate\\n    );\\n\\n    /**\\n     * @notice Returns the borrow rate of a reserve\\n     * @param reserveId The id of the reserve\\n     * @param totalDeposits The total deposits amount of the reserve\\n     * @param totalBorrows The total borrows amount of the reserve\\n     * @return The borrow rate, expressed in ray\\n     **/\\n    function getBorrowRate(uint256 reserveId, uint256 totalDeposits, uint256 totalBorrows) external view returns (uint256); \\n}\\n\",\"keccak256\":\"0xfa5ff4ed50344092c9559d27b9318c0804c03ff464b6989fc2743d5e61b42252\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyLoan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '../libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IOpenSkyLoan\\n * @author OpenSky Labs\\n * @notice Defines the basic interface for OpenSkyLoan.  This loan NFT is composable and can be used in other DeFi protocols \\n **/\\ninterface IOpenSkyLoan is IERC721 {\\n\\n    /**\\n     * @dev Emitted on mint()\\n     * @param tokenId The ID of the loan\\n     * @param recipient The address that will receive the loan NFT\\n     **/\\n    event Mint(uint256 indexed tokenId, address indexed recipient);\\n\\n    /**\\n     * @dev Emitted on end()\\n     * @param tokenId The ID of the loan\\n     * @param onBehalfOf The address the repayer is repaying for\\n     * @param repayer The address of the user initiating the repayment()\\n     **/\\n    event End(uint256 indexed tokenId, address indexed onBehalfOf, address indexed repayer);\\n\\n    /**\\n     * @dev Emitted on startLiquidation()\\n     * @param tokenId The ID of the loan\\n     * @param liquidator The address of the liquidator\\n     **/\\n    event StartLiquidation(uint256 indexed tokenId, address indexed liquidator);\\n\\n    /**\\n     * @dev Emitted on endLiquidation()\\n     * @param tokenId The ID of the loan\\n     * @param liquidator The address of the liquidator\\n     **/\\n    event EndLiquidation(uint256 indexed tokenId, address indexed liquidator);\\n\\n    /**\\n     * @dev Emitted on updateStatus()\\n     * @param tokenId The ID of the loan\\n     * @param status The status of loan\\n     **/\\n    event UpdateStatus(uint256 indexed tokenId, DataTypes.LoanStatus indexed status);\\n\\n    /**\\n     * @dev Emitted on flashClaim()\\n     * @param receiver The address of the flash loan receiver contract\\n     * @param sender The address that will receive tokens\\n     * @param nftAddress The address of the collateralized NFT\\n     * @param tokenId The ID of collateralized NFT\\n     **/\\n    event FlashClaim(address indexed receiver, address sender, address indexed nftAddress, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted on claimERC20Airdrop()\\n     * @param token The address of the ERC20 token\\n     * @param to The address that will receive the ERC20 tokens\\n     * @param amount The amount of the tokens\\n     **/\\n    event ClaimERC20Airdrop(address indexed token, address indexed to, uint256 amount);\\n\\n    /**\\n     * @dev Emitted on claimERC721Airdrop()\\n     * @param token The address of ERC721 token\\n     * @param to The address that will receive the eRC721 tokens\\n     * @param ids The ID of the token\\n     **/\\n    event ClaimERC721Airdrop(address indexed token, address indexed to, uint256[] ids);\\n\\n    /**\\n     * @dev Emitted on claimERC1155Airdrop()\\n     * @param token The address of the ERC1155 token\\n     * @param to The address that will receive the ERC1155 tokens\\n     * @param ids The ID of the token\\n     * @param amounts The amount of the tokens\\n     * @param data packed params to pass to the receiver as extra information\\n     **/\\n    event ClaimERC1155Airdrop(address indexed token, address indexed to, uint256[] ids, uint256[] amounts, bytes data);\\n\\n    /**\\n     * @notice Mints a loan NFT to user\\n     * @param reserveId The ID of the reserve\\n     * @param borrower The address of the borrower\\n     * @param nftAddress The contract address of the collateralized NFT \\n     * @param nftTokenId The ID of the collateralized NFT\\n     * @param amount The amount of the loan\\n     * @param duration The duration of the loan\\n     * @param borrowRate The borrow rate of the loan\\n     * @return loanId and loan data\\n     **/\\n    function mint(\\n        uint256 reserveId,\\n        address borrower,\\n        address nftAddress,\\n        uint256 nftTokenId,\\n        uint256 amount,\\n        uint256 duration,\\n        uint256 borrowRate\\n    ) external returns (uint256 loanId, DataTypes.LoanData memory loan);\\n\\n    /**\\n     * @notice Starts liquidation of the loan in default\\n     * @param tokenId The ID of the defaulted loan\\n     **/\\n    function startLiquidation(uint256 tokenId) external;\\n\\n    /**\\n     * @notice Ends liquidation of a loan that is fully settled\\n     * @param tokenId The ID of the loan\\n     **/\\n    function endLiquidation(uint256 tokenId) external;\\n\\n    /**\\n     * @notice Terminates the loan\\n     * @param tokenId The ID of the loan\\n     * @param onBehalfOf The address the repayer is repaying for\\n     * @param repayer The address of the repayer\\n     **/\\n    function end(uint256 tokenId, address onBehalfOf, address repayer) external;\\n    \\n    /**\\n     * @notice Returns the loan data\\n     * @param tokenId The ID of the loan\\n     * @return The details of the loan\\n     **/\\n    function getLoanData(uint256 tokenId) external view returns (DataTypes.LoanData calldata);\\n\\n    /**\\n     * @notice Returns the status of a loan\\n     * @param tokenId The ID of the loan\\n     * @return The status of the loan\\n     **/\\n    function getStatus(uint256 tokenId) external view returns (DataTypes.LoanStatus);\\n\\n    /**\\n     * @notice Returns the borrow interest of the loan\\n     * @param tokenId The ID of the loan\\n     * @return The borrow interest of the loan\\n     **/\\n    function getBorrowInterest(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the borrow balance of a loan, including borrow interest\\n     * @param tokenId The ID of the loan\\n     * @return The borrow balance of the loan\\n     **/\\n    function getBorrowBalance(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the penalty fee of the loan\\n     * @param tokenId The ID of the loan\\n     * @return The penalty fee of the loan\\n     **/\\n    function getPenalty(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the ID of the loan\\n     * @param nftAddress The address of the collateralized NFT\\n     * @param tokenId The ID of the collateralized NFT\\n     * @return The ID of the loan\\n     **/\\n    function getLoanId(address nftAddress, uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Allows smart contracts to access the collateralized NFT within one transaction,\\n     * as long as the amount taken plus a fee is returned\\n     * @dev IMPORTANT There are security concerns for developers of flash loan receiver contracts that must be carefully considered\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashClaimReceiver interface\\n     * @param loanIds The ID of loan being flash-borrowed\\n     * @param params packed params to pass to the receiver as extra information\\n     **/\\n    function flashClaim(\\n        address receiverAddress,\\n        uint256[] calldata loanIds,\\n        bytes calldata params\\n    ) external;\\n\\n    /**\\n     * @notice Claim the ERC20 token which has been airdropped to the loan contract\\n     * @param token The address of the airdropped token\\n     * @param to The address which will receive ERC20 token\\n     * @param amount The amount of the ERC20 token\\n     **/\\n    function claimERC20Airdrop(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Claim the ERC721 token which has been airdropped to the loan contract\\n     * @param token The address of the airdropped token\\n     * @param to The address which will receive the ERC721 token\\n     * @param ids The ID of the ERC721 token\\n     **/\\n    function claimERC721Airdrop(\\n        address token,\\n        address to,\\n        uint256[] calldata ids\\n    ) external;\\n\\n    /**\\n     * @notice Claim the ERC1155 token which has been airdropped to the loan contract\\n     * @param token The address of the airdropped token\\n     * @param to The address which will receive the ERC1155 tokens\\n     * @param ids The ID of the ERC1155 token\\n     * @param amounts The amount of the ERC1155 tokens\\n     * @param data packed params to pass to the receiver as extra information\\n     **/\\n    function claimERC1155Airdrop(\\n        address token,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4d0669835c9c7fbe82344de1f78a578092a26282a146ef69b350ce52a543fb8d\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyMoneyMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IOpenSkyMoneyMarket {\\n\\n    function depositCall(address asset, uint256 amount) external;\\n\\n    function withdrawCall(address asset, uint256 amount, address to) external;\\n\\n    function getBalance(address asset, address account) external view returns (uint256);\\n\\n    function getSupplyRate(address asset) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x9c3b3b2e6aeb86e7a5239e1f2f3c194ecac4c500e46cf73073139e1606757729\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyNFTDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IOpenSkyNFTDescriptor {\\n    function tokenURI(uint256 reserveId)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0x1fb58d86a90c029c42c8a58bf2bff4f3457d761544959facb174b5fe03c599cc\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyOToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IOpenSkyOToken is IERC20 {\\n    function mint(\\n        address account,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n\\n    function burn(\\n        address account,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n    \\n    function mintToTreasury(uint256 amount, uint256 index) external;\\n  \\n    function deposit(uint256 amount) external;\\n  \\n    function withdraw(uint256 amount, address to) external;\\n    \\n    function scaledBalanceOf(address account) external view returns (uint256);\\n  \\n    function principleBalanceOf(address account) external view returns (uint256);\\n  \\n    function scaledTotalSupply() external view returns (uint256);\\n  \\n    function principleTotalSupply() external view returns (uint256);\\n\\n    function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x999edb49f9e71bc8f73e1230f353d9c432154c1ca910a63c93c3148e5933778e\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IOpenSkyPool\\n * @author OpenSky Labs\\n * @notice Defines the basic interface for an OpenSky Pool.\\n **/\\n\\ninterface IOpenSkyPool {\\n    /*\\n     * @dev Emitted on create()\\n     * @param reserveId The ID of the reserve\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param oTokenAddress The address of the oToken\\n     * @param name The name to use for oToken\\n     * @param symbol The symbol to use for oToken\\n     */\\n    event Create(uint256 indexed reserveId, address indexed underlyingAsset, address indexed oTokenAddress, string name, string symbol);\\n\\n    /*\\n     * @dev Emitted on setTreasuryFactor()\\n     * @param reserveId The ID of the reserve\\n     * @param factor The new treasury factor of the reserve\\n     */\\n    event SetTreasuryFactor(uint256 indexed reserveId, uint256 factor);\\n\\n    /*\\n     * @dev Emitted on setInterestModelAddress()\\n     * @param reserveId The ID of the reserve\\n     * @param interestModelAddress The address of the interest model contract\\n     */\\n    event SetInterestModelAddress(uint256 indexed reserveId, address interestModelAddress);\\n\\n    /*\\n     * @dev Emitted on openMoneyMarket()\\n     * @param reserveId The ID of the reserve\\n     */\\n    event OpenMoneyMarket(uint256 reserveId);\\n\\n    /*\\n     * @dev Emitted on closeMoneyMarket()\\n     * @param reserveId The ID of the reserve\\n     */\\n    event CloseMoneyMarket(uint256 reserveId);\\n\\n    /*\\n     * @dev Emitted on deposit()\\n     * @param reserveId The ID of the reserve\\n     * @param user The address that will receive the oTokens\\n     * @param amount The amount of ETH to be deposited\\n     * @param referralCode integrators are assigned a referral code and can potentially receive rewards\\n     * 0 if the action is executed directly by the user, without any intermediaries\\n     */\\n    event Deposit(uint256 indexed reserveId, address indexed user, uint256 amount, uint256 indexed referralCode);\\n\\n    /*\\n     * @dev Emitted on withdraw()\\n     * @param reserveId The ID of the reserve\\n     * @param user The address initiating the withdrawal(), owner of oTokens\\n     * @param amount The amount to be withdrawn\\n     */\\n    event Withdraw(uint256 indexed reserveId, address indexed user, uint256 amount);\\n\\n    /*\\n     * @dev Emitted on borrow()\\n     * @param reserveId The ID of the reserve\\n     * @param user The address initiating the withdrawal(), owner of oTokens\\n     * @param onBehalfOf The address that will receive the ETH and the loan NFT\\n     * @param loanId The loan ID\\n     */\\n    event Borrow(\\n        uint256 indexed reserveId,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 indexed loanId\\n    );\\n\\n    /*\\n     * @dev Emitted on repay()\\n     * @param reserveId The ID of the reserve\\n     * @param repayer The address initiating the repayment()\\n     * @param onBehalfOf The address that will receive the pledged NFT\\n     * @param loanId The ID of the loan\\n     * @param repayAmount The borrow balance of the loan when it was repaid\\n     * @param penalty The penalty of the loan for either early or overdue repayment\\n     */\\n    event Repay(\\n        uint256 indexed reserveId,\\n        address repayer,\\n        address indexed onBehalfOf,\\n        uint256 indexed loanId,\\n        uint256 repayAmount,\\n        uint256 penalty\\n    );\\n\\n    /*\\n     * @dev Emitted on extend()\\n     * @param reserveId The ID of the reserve\\n     * @param user  The address initiating the extend()\\n     * @param oldLoanId The ID of the old loan\\n     * @param newLoanId The ID of the new loan\\n     */\\n    event Extend(uint256 indexed reserveId, address indexed user, uint256 indexed oldLoanId, uint256 newLoanId);\\n\\n    /*\\n     * @dev Emitted on startLiquidation()\\n     * @param reserveId The ID of the reserve\\n     * @param loanId The ID of the loan\\n     * @param nftAddress The address of the NFT used as collateral\\n     * @param tokenId The ID of the NFT used as collateral\\n     * @param operator The address initiating startLiquidation()\\n     */\\n    event StartLiquidation(\\n        uint256 indexed reserveId,\\n        uint256 indexed loanId,\\n        address indexed nftAddress,\\n        uint256 tokenId,\\n        address operator\\n    );\\n\\n    /*\\n     * @dev Emitted on endLiquidation()\\n     * @param reserveId The ID of the reserve\\n     * @param loanId The ID of the loan\\n     * @param nftAddress The address of the NFT used as collateral\\n     * @param tokenId The ID of the NFT used as collateral\\n     * @param operator\\n     * @param repayAmount The amount used to repay, must be equal to or greater than the borrowBalance, excess part will be shared by all the lenders\\n     * @param borrowBalance The borrow balance of the loan\\n     */\\n    event EndLiquidation(\\n        uint256 indexed reserveId,\\n        uint256 indexed loanId,\\n        address indexed nftAddress,\\n        uint256 tokenId,\\n        address operator,\\n        uint256 repayAmount,\\n        uint256 borrowBalance\\n    );\\n\\n    /**\\n     * @notice Creates a reserve\\n     * @dev Only callable by the pool admin role\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param name The name of the oToken\\n     * @param symbol The symbol for the oToken\\n     **/\\n    function create(address underlyingAsset, string memory name, string memory symbol) external;\\n\\n    /**\\n     * @notice Updates the treasury factor of a reserve\\n     * @dev Only callable by the pool admin role\\n     * @param reserveId The ID of the reserve\\n     * @param factor The new treasury factor of the reserve\\n     **/\\n    function setTreasuryFactor(uint256 reserveId, uint256 factor) external;\\n\\n    /**\\n     * @notice Updates the interest model address of a reserve\\n     * @dev Only callable by the pool admin role\\n     * @param reserveId The ID of the reserve\\n     * @param interestModelAddress The new address of the interest model contract\\n     **/\\n    function setInterestModelAddress(uint256 reserveId, address interestModelAddress) external;\\n\\n    /**\\n     * @notice Open the money market\\n     * @dev Only callable by the emergency admin role\\n     * @param reserveId The ID of the reserve\\n     **/\\n    function openMoneyMarket(uint256 reserveId) external;\\n\\n    /**\\n     * @notice Close the money market\\n     * @dev Only callable by the emergency admin role\\n     * @param reserveId The ID of the reserve\\n     **/\\n    function closeMoneyMarket(uint256 reserveId) external;\\n\\n    /**\\n     * @dev Deposits ETH into the reserve.\\n     * @param reserveId The ID of the reserve\\n     * @param referralCode integrators are assigned a referral code and can potentially receive rewards\\n     **/\\n    function deposit(uint256 reserveId, uint256 amount, address onBehalfOf, uint256 referralCode) external;\\n\\n    /**\\n     * @dev withdraws the ETH from reserve.\\n     * @param reserveId The ID of the reserve\\n     * @param amount amount of oETH to withdraw and receive native ETH\\n     **/\\n    function withdraw(uint256 reserveId, uint256 amount, address onBehalfOf) external;\\n\\n    /**\\n     * @dev Borrows ETH from reserve using an NFT as collateral and will receive a loan NFT as receipt.\\n     * @param reserveId The ID of the reserve\\n     * @param amount amount of ETH user will borrow\\n     * @param duration The desired duration of the loan\\n     * @param nftAddress The collateral NFT address\\n     * @param tokenId The ID of the NFT\\n     * @param onBehalfOf address of the user who will receive ETH and loan NFT.\\n     **/\\n    function borrow(\\n        uint256 reserveId,\\n        uint256 amount,\\n        uint256 duration,\\n        address nftAddress,\\n        uint256 tokenId,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Repays a loan, as a result the corresponding loan NFT owner will receive the collateralized NFT.\\n     * @param loanId The ID of the loan the user will repay\\n     */\\n    function repay(uint256 loanId) external returns (uint256);\\n\\n    /**\\n     * @dev Extends creates a new loan and terminates the old loan.\\n     * @param loanId The loan ID to extend\\n     * @param amount The amount of ERC20 token the user will borrow in the new loan\\n     * @param duration The selected duration the user will borrow in the new loan\\n     * @param onBehalfOf The address will borrow in the new loan\\n     **/\\n    function extend(\\n        uint256 loanId,\\n        uint256 amount,\\n        uint256 duration,\\n        address onBehalfOf\\n    ) external returns (uint256, uint256);\\n\\n    /**\\n     * @dev Starts liquidation for a loan when it's in LIQUIDATABLE status\\n     * @param loanId The ID of the loan which will be liquidated\\n     */\\n    function startLiquidation(uint256 loanId) external;\\n\\n    /**\\n     * @dev Completes liquidation for a loan which will be repaid.\\n     * @param loanId The ID of the liquidated loan that will be repaid.\\n     * @param amount The amount of the token that will be repaid.\\n     */\\n    function endLiquidation(uint256 loanId, uint256 amount) external;\\n\\n    /**\\n     * @dev Returns the state of the reserve\\n     * @param reserveId The ID of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getReserveData(uint256 reserveId) external view returns (DataTypes.ReserveData memory);\\n\\n    /**\\n     * @dev Returns the normalized income of the reserve\\n     * @param reserveId The ID of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(uint256 reserveId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the remaining liquidity of the reserve\\n     * @param reserveId The ID of the reserve\\n     * @return The reserve's withdrawable balance\\n     */\\n    function getAvailableLiquidity(uint256 reserveId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the instantaneous borrow limit value of a special NFT\\n     * @param nftAddress The address of the NFT\\n     * @param tokenId The ID of the NFT\\n     * @return The NFT's borrow limit\\n     */\\n    function getBorrowLimitByOracle(\\n        uint256 reserveId,\\n        address nftAddress,\\n        uint256 tokenId\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the sum of all users borrow balances include borrow interest accrued\\n     * @param reserveId The ID of the reserve\\n     * @return The total borrow balance of the reserve\\n     */\\n    function getTotalBorrowBalance(uint256 reserveId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns TVL (total value locked) of the reserve.\\n     * @param reserveId The ID of the reserve\\n     * @return The reserve's TVL\\n     */\\n    function getTVL(uint256 reserveId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x974b21114e5e77e5d788d81ec195be9967302b71b9d15336da9c3bfd7c6ff546\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyReserveVaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IOpenSkyReserveVaultFactory {\\n    function create(\\n        uint256 reserveId,\\n        string memory name,\\n        string memory symbol,\\n        address underlyingAsset\\n    ) external returns (address oTokenAddress);\\n}\\n\",\"keccak256\":\"0x542e8865ca424d1e6fca2a4cbb29cd7b99bf6d8c2a24559524ef56bc6d3b14a7\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkySettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\nimport '../libraries/types/DataTypes.sol';\\n\\ninterface IOpenSkySettings {\\n    event InitPoolAddress(address operator, address address_);\\n    event InitLoanAddress(address operator, address address_);\\n    event InitVaultFactoryAddress(address operator, address address_);\\n    event InitIncentiveControllerAddress(address operator, address address_);\\n    event InitWETHGatewayAddress(address operator, address address_);\\n    event InitPunkGatewayAddress(address operator, address address_);\\n\\n    event AddToWhitelist(address operator, uint256 reserveId, address nft);\\n    event RemoveFromWhitelist(address operator, uint256 reserveId, address nft);\\n    event SetReserveFactor(address operator, uint256 factor);\\n    event SetPrepaymentFeeFactor(address operator, uint256 factor);\\n    event SetOverdueLoanFeeFactor(address operator, uint256 factor);\\n    event SetMoneyMarketAddress(address operator, address address_);\\n    event SetTreasuryAddress(address operator, address address_);\\n    event SetDaoVaultAddress(address operator, address address_);\\n    event SetACLManagerAddress(address operator, address address_);\\n    event SetLoanDescriptorAddress(address operator, address address_);\\n    event SetNftPriceOracleAddress(address operator, address address_);\\n    event SetInterestRateStrategyAddress(address operator, address address_);\\n    event AddLiquidator(address operator, address address_);\\n    event RemoveLiquidator(address operator, address address_);\\n\\n    function poolAddress() external view returns (address);\\n\\n    function loanAddress() external view returns (address);\\n\\n    function vaultFactoryAddress() external view returns (address);\\n\\n    function incentiveControllerAddress() external view returns (address);\\n\\n    function wethGatewayAddress() external view returns (address);\\n\\n    function punkGatewayAddress() external view returns (address);\\n\\n    function inWhitelist(uint256 reserveId, address nft) external view returns (bool);\\n\\n    function getWhitelistDetail(uint256 reserveId, address nft) external view returns (DataTypes.WhitelistInfo memory);\\n\\n    function reserveFactor() external view returns (uint256); // treasury ratio\\n\\n    function MAX_RESERVE_FACTOR() external view returns (uint256);\\n\\n    function prepaymentFeeFactor() external view returns (uint256);\\n\\n    function overdueLoanFeeFactor() external view returns (uint256);\\n\\n    function moneyMarketAddress() external view returns (address);\\n\\n    function treasuryAddress() external view returns (address);\\n\\n    function daoVaultAddress() external view returns (address);\\n\\n    function ACLManagerAddress() external view returns (address);\\n\\n    function loanDescriptorAddress() external view returns (address);\\n\\n    function nftPriceOracleAddress() external view returns (address);\\n\\n    function interestRateStrategyAddress() external view returns (address);\\n    \\n    function isLiquidator(address liquidator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd6d7e8c1b7751de0f65d85310c1e2d8274b74c7e3dc74920ea2546b65d8f659f\",\"license\":\"MIT\"},\"contracts/libraries/ReserveLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport './types/DataTypes.sol';\\nimport './helpers/Errors.sol';\\nimport './math/WadRayMath.sol';\\nimport './math/PercentageMath.sol';\\nimport './math/MathUtils.sol';\\n\\nimport '../interfaces/IOpenSkySettings.sol';\\nimport '../interfaces/IOpenSkyReserveVaultFactory.sol';\\nimport '../interfaces/IOpenSkyInterestRateStrategy.sol';\\nimport '../interfaces/IOpenSkyOToken.sol';\\nimport '../interfaces/IOpenSkyMoneyMarket.sol';\\n\\n/**\\n * @title ReserveLogic library\\n * @author OpenSky Labs\\n * @notice Implements the logic to update the reserves state\\n */\\nlibrary ReserveLogic {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n    using PercentageMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Implements the deposit feature.\\n     * @param sender The address that called deposit function\\n     * @param amount The amount of deposit\\n     * @param onBehalfOf The address that will receive otokens\\n     **/\\n    function deposit(\\n        DataTypes.ReserveData storage reserve,\\n        address sender,\\n        uint256 amount,\\n        address onBehalfOf\\n    ) public {\\n        updateState(reserve, 0);\\n\\n        updateLastMoneyMarketBalance(reserve, amount, 0);\\n\\n        IOpenSkyOToken oToken = IOpenSkyOToken(reserve.oTokenAddress);\\n        oToken.mint(onBehalfOf, amount, reserve.lastSupplyIndex);\\n\\n        IERC20(reserve.underlyingAsset).safeTransferFrom(sender, reserve.oTokenAddress, amount);\\n        oToken.deposit(amount);\\n    }\\n\\n    /**\\n     * @dev Implements the withdrawal feature.\\n     * @param sender The address that called withdraw function\\n     * @param amount The withdrawal amount\\n     * @param onBehalfOf The address that will receive token\\n     **/\\n    function withdraw(\\n        DataTypes.ReserveData storage reserve,\\n        address sender,\\n        uint256 amount,\\n        address onBehalfOf\\n    ) public {\\n        updateState(reserve, 0);\\n\\n        updateLastMoneyMarketBalance(reserve, 0, amount);\\n\\n        IOpenSkyOToken oToken = IOpenSkyOToken(reserve.oTokenAddress);\\n        oToken.burn(sender, amount, reserve.lastSupplyIndex);\\n        oToken.withdraw(amount, onBehalfOf);\\n    }\\n\\n    /**\\n     * @dev Implements the borrow feature.\\n     * @param loan the loan data\\n     **/\\n    function borrow(DataTypes.ReserveData storage reserve, DataTypes.LoanData memory loan) public {\\n        updateState(reserve, 0);\\n        updateInterestPerSecond(reserve, loan.interestPerSecond, 0);\\n        updateLastMoneyMarketBalance(reserve, 0, loan.amount);\\n\\n        IOpenSkyOToken oToken = IOpenSkyOToken(reserve.oTokenAddress);\\n        // oToken.withdraw(loan.amount, loan.borrower);\\n        oToken.withdraw(loan.amount, msg.sender);\\n\\n        reserve.totalBorrows = reserve.totalBorrows.add(loan.amount);\\n    }\\n\\n    /**\\n     * @dev Implements the repay function.\\n     * @param loan The loan data\\n     * @param amount The amount that will be repaid, including penalty\\n     * @param borrowBalance The borrow balance\\n     **/\\n    function repay(\\n        DataTypes.ReserveData storage reserve,\\n        DataTypes.LoanData memory loan,\\n        uint256 amount,\\n        uint256 borrowBalance\\n    ) public {\\n        updateState(reserve, amount.sub(borrowBalance));\\n        updateInterestPerSecond(reserve, 0, loan.interestPerSecond);\\n        updateLastMoneyMarketBalance(reserve, amount, 0);\\n\\n        IOpenSkyOToken oToken = IOpenSkyOToken(reserve.oTokenAddress);\\n\\n        IERC20(reserve.underlyingAsset).safeTransferFrom(msg.sender, reserve.oTokenAddress, amount);\\n        oToken.deposit(amount);\\n\\n        reserve.totalBorrows = reserve.totalBorrows > borrowBalance ? reserve.totalBorrows - borrowBalance : 0;\\n    }\\n\\n    /**\\n     * @dev Implements the extend feature.\\n     * @param oldLoan The data of old loan\\n     * @param newLoan The data of new loan\\n     * @param borrowInterestOfOldLoan The borrow interest of old loan\\n     * @param ethIn The amount of ETH that will be deposited\\n     * @param ethOut The amount of ETH that will be withdrawn\\n     * @param additionalIncome The additional income\\n     **/\\n    function extend(\\n        DataTypes.ReserveData storage reserve,\\n        DataTypes.LoanData memory oldLoan,\\n        DataTypes.LoanData memory newLoan,\\n        uint256 borrowInterestOfOldLoan,\\n        uint256 ethIn,\\n        uint256 ethOut,\\n        uint256 additionalIncome\\n    ) public {\\n        updateState(reserve, additionalIncome);\\n        updateInterestPerSecond(reserve, newLoan.interestPerSecond, oldLoan.interestPerSecond);\\n        updateLastMoneyMarketBalance(reserve, ethIn, ethOut);\\n\\n        IOpenSkyOToken oToken = IOpenSkyOToken(reserve.oTokenAddress);\\n        if (ethIn > 0) {\\n            IERC20(reserve.underlyingAsset).safeTransferFrom(msg.sender, reserve.oTokenAddress, ethIn);\\n            oToken.deposit(ethIn);\\n        }\\n        if (ethOut > 0) oToken.withdraw(ethOut, newLoan.borrower);\\n\\n        uint256 sum1 = reserve.totalBorrows.add(newLoan.amount);\\n        uint256 sum2 = oldLoan.amount.add(borrowInterestOfOldLoan);\\n        reserve.totalBorrows = sum1 > sum2 ? sum1 - sum2 : 0;\\n    }\\n\\n    /**\\n     * @dev Implements liquidation mechanism.\\n     * @param loan Loan data\\n     **/\\n    function startLiquidation(DataTypes.ReserveData storage reserve, DataTypes.LoanData memory loan) public {\\n        updateState(reserve, 0);\\n        updateLastMoneyMarketBalance(reserve, 0, 0);\\n        updateInterestPerSecond(reserve, 0, loan.interestPerSecond);\\n    }\\n\\n    /**\\n     * @dev Implements the start liquidation feature.\\n     * @param amount The amount of token paid\\n     * @param borrowBalance The borrow balance of loan\\n     **/\\n    function endLiquidation(\\n        DataTypes.ReserveData storage reserve,\\n        uint256 amount,\\n        uint256 borrowBalance\\n    ) public {\\n        updateState(reserve, amount.sub(borrowBalance));\\n        updateLastMoneyMarketBalance(reserve, amount, 0);\\n\\n        IERC20(reserve.underlyingAsset).safeTransferFrom(msg.sender, reserve.oTokenAddress, amount);\\n        IOpenSkyOToken oToken = IOpenSkyOToken(reserve.oTokenAddress);\\n        oToken.deposit(amount);\\n\\n        reserve.totalBorrows = reserve.totalBorrows > borrowBalance ? reserve.totalBorrows - borrowBalance : 0;\\n    }\\n\\n    /**\\n     * @dev Updates the liquidity cumulative index and total borrows\\n     * @param reserve The reserve object\\n     * @param additionalIncome The additional income\\n     **/\\n    function updateState(DataTypes.ReserveData storage reserve, uint256 additionalIncome) internal {\\n        (\\n            uint256 newIndex,\\n            uint256 usersIncome,\\n            uint256 treasuryIncome,\\n            uint256 borrowingInterestDelta,\\n\\n        ) = calculateIncome(reserve, additionalIncome);\\n\\n        require(newIndex <= type(uint128).max, Errors.RESERVE_INDEX_OVERFLOW);\\n        reserve.lastSupplyIndex = uint128(newIndex);\\n\\n        // treasury\\n        treasuryIncome = treasuryIncome.div(WadRayMath.ray());\\n        if (treasuryIncome > 0) {\\n            IOpenSkyOToken(reserve.oTokenAddress).mintToTreasury(treasuryIncome, reserve.lastSupplyIndex);\\n        }\\n\\n        reserve.totalBorrows = reserve.totalBorrows.add(borrowingInterestDelta.div(WadRayMath.ray()));\\n        reserve.lastUpdateTimestamp = uint40(block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Updates the interest per second, when borrowing and repaying\\n     * @param reserve The reserve object\\n     * @param amountToAdd The amount to be added\\n     * @param amountToRemove The amount to be subtracted\\n     **/\\n    function updateInterestPerSecond(\\n        DataTypes.ReserveData storage reserve,\\n        uint256 amountToAdd,\\n        uint256 amountToRemove\\n    ) internal {\\n        reserve.borrowingInterestPerSecond = reserve.borrowingInterestPerSecond.add(amountToAdd).sub(amountToRemove);\\n    }\\n\\n    /**\\n     * @dev Updates last money market balance, after updating the liquidity cumulative index.\\n     * @param reserve The reserve object\\n     * @param amountToAdd The amount to be added\\n     * @param amountToRemove The amount to be subtracted\\n     **/\\n    function updateLastMoneyMarketBalance(\\n        DataTypes.ReserveData storage reserve,\\n        uint256 amountToAdd,\\n        uint256 amountToRemove\\n    ) internal {\\n        uint256 moneyMarketBalance = getMoneyMarketBalance(reserve);\\n        reserve.lastMoneyMarketBalance = moneyMarketBalance.add(amountToAdd).sub(amountToRemove);\\n    }\\n\\n    function openMoneyMarket(\\n        DataTypes.ReserveData storage reserve\\n    ) internal {\\n        reserve.isMoneyMarketOn = true;\\n\\n        uint256 amount = IERC20(reserve.underlyingAsset).balanceOf(reserve.oTokenAddress);\\n        IOpenSkyOToken(reserve.oTokenAddress).deposit(amount);\\n    }\\n\\n    function closeMoneyMarket(\\n        DataTypes.ReserveData storage reserve\\n    ) internal {\\n        address oTokenAddress = reserve.oTokenAddress;\\n        uint256 amount = IOpenSkyMoneyMarket(reserve.moneyMarketAddress).getBalance(reserve.underlyingAsset, oTokenAddress);\\n        IOpenSkyOToken(oTokenAddress).withdraw(amount, oTokenAddress);\\n\\n        reserve.isMoneyMarketOn = false;\\n    }\\n\\n    /**\\n     * @dev Updates last money market balance, after updating the liquidity cumulative index.\\n     * @param reserve The reserve object\\n     * @param additionalIncome The amount to be added\\n     * @return newIndex The new liquidity cumulative index from the last update\\n     * @return usersIncome The user's income from the last update\\n     * @return treasuryIncome The treasury income from the last update\\n     * @return borrowingInterestDelta The treasury income from the last update\\n     * @return moneyMarketDelta The money market income from the last update\\n     **/\\n    function calculateIncome(DataTypes.ReserveData memory reserve, uint256 additionalIncome)\\n        internal\\n        view\\n        returns (\\n            uint256 newIndex,\\n            uint256 usersIncome,\\n            uint256 treasuryIncome,\\n            uint256 borrowingInterestDelta,\\n            uint256 moneyMarketDelta\\n        )\\n    {\\n        moneyMarketDelta = getMoneyMarketDelta(reserve).mul(WadRayMath.ray());\\n        borrowingInterestDelta = getBorrowingInterestDelta(reserve);\\n        // ray\\n        uint256 totalIncome = additionalIncome.mul(WadRayMath.ray()).add(moneyMarketDelta).add(borrowingInterestDelta);\\n        treasuryIncome = totalIncome.percentMul(reserve.treasuryFactor);\\n        usersIncome = totalIncome.sub(treasuryIncome);\\n\\n        // index\\n        newIndex = reserve.lastSupplyIndex;\\n        uint256 scaledTotalSupply = IOpenSkyOToken(reserve.oTokenAddress).scaledTotalSupply();\\n        if (scaledTotalSupply > 0) {\\n            newIndex = usersIncome.div(scaledTotalSupply).add(reserve.lastSupplyIndex);\\n        }\\n\\n        return (newIndex, usersIncome, treasuryIncome, borrowingInterestDelta, moneyMarketDelta);\\n    }\\n\\n    /**\\n     * @dev Returns the ongoing normalized income for the reserve\\n     * A value of 1e27 means there is no income. As time passes, the income is accrued\\n     * A value of 2*1e27 means for each unit of asset one unit of income has been accrued\\n     * @param reserve The reserve object\\n     * @return The normalized income. expressed in ray\\n     **/\\n    function getNormalizedIncome(DataTypes.ReserveData storage reserve) public view returns (uint256) {\\n        (uint256 newIndex, , , , ) = calculateIncome(reserve, 0);\\n        return newIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the available liquidity of the reserve\\n     * @param reserve The reserve object\\n     * @return The available liquidity\\n     **/\\n    function getMoneyMarketBalance(DataTypes.ReserveData memory reserve) internal view returns (uint256) {\\n        if (reserve.isMoneyMarketOn) {\\n            return IOpenSkyMoneyMarket(reserve.moneyMarketAddress).getBalance(reserve.underlyingAsset, reserve.oTokenAddress);\\n        } else {\\n            return IERC20(reserve.underlyingAsset).balanceOf(reserve.oTokenAddress);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the money market income of the reserve from the last update\\n     * @param reserve The reserve object\\n     * @return The income from money market\\n     **/\\n    function getMoneyMarketDelta(DataTypes.ReserveData memory reserve) internal view returns (uint256) {\\n        uint256 timeDelta = uint256(block.timestamp).sub(reserve.lastUpdateTimestamp);\\n\\n        if (timeDelta == 0) return 0;\\n\\n        if (reserve.lastMoneyMarketBalance == 0) return 0;\\n\\n        // get MoneyMarketBalance\\n        uint256 currentMoneyMarketBalance = getMoneyMarketBalance(reserve);\\n        if (currentMoneyMarketBalance < reserve.lastMoneyMarketBalance) return 0;\\n\\n        return currentMoneyMarketBalance.sub(reserve.lastMoneyMarketBalance);\\n    }\\n\\n    /**\\n     * @dev Returns the borrow interest income of the reserve from the last update\\n     * @param reserve The reserve object\\n     * @return The income from the NFT loan\\n     **/\\n    function getBorrowingInterestDelta(DataTypes.ReserveData memory reserve) internal view returns (uint256) {\\n        uint256 timeDelta = uint256(block.timestamp).sub(reserve.lastUpdateTimestamp);\\n        if (timeDelta == 0) return 0;\\n        return reserve.borrowingInterestPerSecond.mul(timeDelta);\\n    }\\n\\n    /**\\n     * @dev Returns the total borrow balance of the reserve\\n     * @param reserve The reserve object\\n     * @return The total borrow balance\\n     **/\\n    function getTotalBorrowBalance(DataTypes.ReserveData memory reserve) public view returns (uint256) {\\n        return reserve.totalBorrows.add(getBorrowingInterestDelta(reserve).div(WadRayMath.ray()));\\n    }\\n\\n    /**\\n     * @dev Returns the total value locked (TVL) of the reserve\\n     * @param reserve The reserve object\\n     * @return The total value locked (TVL)\\n     **/\\n    function getTVL(DataTypes.ReserveData memory reserve) public view returns (uint256) {\\n        (, , uint256 treasuryIncome, , ) = calculateIncome(reserve, 0);\\n        return treasuryIncome.div(WadRayMath.RAY).add(IOpenSkyOToken(reserve.oTokenAddress).totalSupply());\\n    }\\n\\n    /**\\n     * @dev Returns the borrow rate of the reserve\\n     * @param reserve The reserve object\\n     * @param liquidityAmountToAdd The liquidity amount will be added\\n     * @param liquidityAmountToRemove The liquidity amount will be removed\\n     * @param borrowAmountToAdd The borrow amount will be added\\n     * @param borrowAmountToRemove The borrow amount will be removed\\n     * @return The borrow rate\\n     **/\\n    function getBorrowRate(\\n        DataTypes.ReserveData memory reserve,\\n        uint256 liquidityAmountToAdd,\\n        uint256 liquidityAmountToRemove,\\n        uint256 borrowAmountToAdd,\\n        uint256 borrowAmountToRemove\\n    ) public view returns (uint256) {\\n        uint256 liquidity = getMoneyMarketBalance(reserve);\\n        uint256 totalBorrowBalance = getTotalBorrowBalance(reserve);\\n        return\\n            IOpenSkyInterestRateStrategy(reserve.interestModelAddress).getBorrowRate(\\n                reserve.reserveId,\\n                liquidity.add(totalBorrowBalance).add(liquidityAmountToAdd).sub(liquidityAmountToRemove),\\n                totalBorrowBalance.add(borrowAmountToAdd).sub(borrowAmountToRemove)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xb30264b051bcc6e7a0e7ca3dfe7a44b9db4ce9a4c92593df07438e7314032292\",\"license\":\"MIT\"},\"contracts/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    \\n    // common\\n    string public constant MATH_MULTIPLICATION_OVERFLOW = '100';\\n    string public constant MATH_ADDITION_OVERFLOW = '101';\\n    string public constant MATH_DIVISION_BY_ZERO = '102';\\n\\n    string public constant ETH_TRANSFER_FAILED = '110';\\n    string public constant RECEIVE_NOT_ALLOWED = '111';\\n    string public constant FALLBACK_NOT_ALLOWED = '112';\\n\\n    // settings/acl\\n    string public constant ACL_ONLY_GOVERNANCE_CAN_CALL = '200';\\n    string public constant ACL_ONLY_EMERGENCY_ADMIN_CAN_CALL = '201';\\n    string public constant ACL_ONLY_POOL_ADMIN_CAN_CALL = '202';\\n    string public constant ACL_ONLY_LIQUIDATOR_CAN_CALL = '203';\\n    string public constant ACL_ONLY_LIQUIDATION_OPERATOR_CAN_CALL = '204';\\n    string public constant ACL_ONLY_AIRDROP_OPERATOR_CAN_CALL = '205';\\n    string public constant ACL_ONLY_POOL_CAN_CALL = '206';\\n\\n    // lending & borrowing \\n    // reserve\\n    string public constant RESERVE_DOES_NOT_EXIST = '300';\\n    string public constant RESERVE_LIQUIDITY_INSUFFICIENT = '301';\\n    string public constant RESERVE_INDEX_OVERFLOW = '302';\\n    string public constant RESERVE_SWITCH_MONEY_MARKET_STATE_ERROR = '303';\\n\\n    // token\\n    string public constant AMOUNT_SCALED_IS_ZERO = '310';\\n    string public constant AMOUNT_TRANSFER_OWERFLOW = '311';\\n    \\n    //deposit\\n    string public constant DEPOSIT_AMOUNT_SHOULD_BE_BIGGER_THAN_ZERO = '320';\\n\\n    // withdraw\\n    string public constant WITHDRAW_AMOUNT_NOT_ALLOWED = '321';\\n    string public constant WITHDRAW_LIQUIDITY_NOT_SUFFIENCE = '322';\\n\\n    // borrow\\n    string public constant BORROW_DURATION_NOT_ALLOWED = '330';\\n    string public constant BORROW_AMOUNT_EXCEED_BORROW_LIMIT = '331';\\n    string public constant NFT_ADDRESS_IS_NOT_IN_WHITELIST = '332';\\n\\n    // repay\\n    string public constant REPAY_STATUS_ERROR = '333';\\n    string public constant REPAY_AMOUNT_NOT_ENOUGH = '334';\\n\\n    // extend\\n    string public constant EXTEND_STATUS_ERROR = '335';\\n    string public constant EXTEND_MSG_VALUE_ERROR = '336';\\n\\n    // liquidate\\n    string public constant START_LIQUIDATION_STATUS_ERROR = '360';\\n    string public constant END_LIQUIDATION_STATUS_ERROR = '361';\\n    string public constant END_LIQUIDATION_AMOUNT_ERROR = '362';\\n\\n    // loan\\n    string public constant LOAN_DOES_NOT_EXIST = '400';\\n    string public constant LOAN_SET_STATUS_ERROR = '401';\\n    string public constant LOAN_REPAYER_IS_NOT_OWNER = '402';\\n    string public constant LOAN_LIQUIDATING_STATUS_CAN_NOT_BE_UPDATED = '403';\\n    string public constant LOAN_CALLER_IS_NOT_OWNER = '404';\\n    string public constant LOAN_COLLATERAL_NFT_CAN_NOT_BE_CLAIMED = '405';\\n\\n    string public constant FLASH_CLAIM_EXECUTOR_ERROR = '410';\\n    string public constant FLASH_CLAIM_STATUS_ERROR = '411';\\n\\n    // money market\\n    string public constant MONEY_MARKET_DEPOSIT_AMOUNT_ALLOWED = '500';\\n    string public constant MONEY_MARKET_WITHDRAW_AMOUNT_NOT_ALLOWED = '501';\\n    string public constant MONEY_MARKET_APPROVAL_FAILED = '502';\\n    string public constant MONEY_MARKET_DELEGATE_CALL_ERROR = '503';\\n\\n    // price oracle\\n    string public constant PRICE_ORACLE_ROUND_INTERVAL_CAN_NOT_BE_0 = '600';\\n    string public constant PRICE_ORACLE_HAS_NO_PRICE_FEED = '601';\\n    string public constant PRICE_ORACLE_INCORRECT_TIMESTAMP = '602';\\n    string public constant PRICE_ORACLE_PARAMS_ERROR = '603';\\n}\\n\",\"keccak256\":\"0x0f14f9c13c9fe6dcca2379449db7e6f1a20c236113548432d0351bacc71df76f\",\"license\":\"MIT\"},\"contracts/libraries/math/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport {WadRayMath} from './WadRayMath.sol';\\n\\nlibrary MathUtils {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n     * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate linearly accumulated during the timeDelta, in ray\\n     **/\\n\\n    function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp) external view returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 timeDifference = block.timestamp.sub(uint256(lastUpdateTimestamp));\\n\\n        return (rate.mul(timeDifference) / SECONDS_PER_YEAR).add(WadRayMath.ray());\\n    }\\n\\n    function calculateBorrowInterest(\\n        uint256 borrowRate,\\n        uint256 amount,\\n        uint256 duration\\n    ) external pure returns (uint256) {\\n        return amount.rayMul(borrowRate.rayMul(duration).rayDiv(SECONDS_PER_YEAR));\\n    }\\n\\n    function calculateBorrowInterestPerSecond(uint256 borrowRate, uint256 amount) external pure returns (uint256) {\\n        return amount.rayMul(borrowRate).rayDiv(SECONDS_PER_YEAR);\\n    }\\n\\n    function calculateLoanSupplyRate(\\n        uint256 availableLiquidity,\\n        uint256 totalBorrows,\\n        uint256 borrowRate\\n    ) external pure returns (uint256 loanSupplyRate, uint256 utilizationRate) {\\n        utilizationRate = (totalBorrows == 0 && availableLiquidity == 0)\\n            ? 0\\n            : totalBorrows.rayDiv(availableLiquidity.add(totalBorrows));\\n        loanSupplyRate = utilizationRate.rayMul(borrowRate);\\n    }\\n}\\n\",\"keccak256\":\"0x7885d4c4b6562f8591dacff0c550916530e362574b8ed229c86594a6edfc3c42\",\"license\":\"MIT\"},\"contracts/libraries/math/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../helpers/Errors.sol';\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded half up\\n **/\\n\\nlibrary PercentageMath {\\n  uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\n  uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\n\\n  /**\\n   * @dev Executes a percentage multiplication\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The percentage of value\\n   **/\\n  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    if (value == 0 || percentage == 0) {\\n      return 0;\\n    }\\n\\n    require(\\n      value <= (type(uint256).max - HALF_PERCENT) / percentage,\\n      Errors.MATH_MULTIPLICATION_OVERFLOW\\n    );\\n\\n    return (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\\n  }\\n\\n  /**\\n   * @dev Executes a percentage division\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The value divided the percentage\\n   **/\\n  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    require(percentage != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfPercentage = percentage / 2;\\n\\n    require(\\n      value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR,\\n      Errors.MATH_MULTIPLICATION_OVERFLOW\\n    );\\n\\n    return (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\n  }\\n}\\n\",\"keccak256\":\"0xe8333e1a929245e4198f87645eae3fc8749e8e29f505427b38ec8ca035434953\",\"license\":\"MIT\"},\"contracts/libraries/math/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {Errors} from '../helpers/Errors.sol';\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @return One ray, 1e27\\n     **/\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    /**\\n     * @return One wad, 1e18\\n     **/\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e27/2\\n     **/\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e18/2\\n     **/\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     **/\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfWAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * b + halfWAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     **/\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * WAD + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfRAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * b + halfRAY) / RAY;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, truncating the mantissa\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMulTruncate(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return (a * b) / RAY;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * RAY + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, truncating the mantissa\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDivTruncate(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        return (a * RAY) / b;\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @param a Ray\\n     * @return a casted to wad, rounded half up to the nearest wad\\n     **/\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n        uint256 result = halfRatio + a;\\n        require(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\\n\\n        return result / WAD_RAY_RATIO;\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @param a Wad\\n     * @return a converted in ray\\n     **/\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        uint256 result = a * WAD_RAY_RATIO;\\n        require(result / WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4bf6b9a00c5e9938726d173f11b56de8edd92e17593e4dfa61a3ce7336756c6b\",\"license\":\"MIT\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        uint256 reserveId;\\n        address underlyingAsset;\\n        address oTokenAddress;\\n        address moneyMarketAddress;\\n        uint128 lastSupplyIndex;\\n        uint256 borrowingInterestPerSecond;\\n        uint256 lastMoneyMarketBalance;\\n        uint40 lastUpdateTimestamp;\\n        uint256 totalBorrows;\\n        address interestModelAddress;\\n        uint256 treasuryFactor;\\n        bool isMoneyMarketOn;\\n    }\\n\\n    struct LoanData {\\n        uint256 reserveId;\\n        address nftAddress;\\n        uint256 tokenId;\\n        address borrower;\\n        uint256 amount;\\n        uint128 borrowRate;\\n        uint128 interestPerSecond;\\n        uint40 borrowBegin;\\n        uint40 borrowDuration;\\n        uint40 borrowOverdueTime;\\n        uint40 liquidatableTime;\\n        uint40 extendableTime;\\n        uint40 borrowEnd;\\n        LoanStatus status;\\n    }\\n\\n    enum LoanStatus {\\n        NONE,\\n        BORROWING,\\n        EXTENDABLE,\\n        OVERDUE,\\n        LIQUIDATABLE,\\n        LIQUIDATING\\n    }\\n\\n    struct WhitelistInfo {\\n        bool enabled;\\n        string name;\\n        string symbol;\\n        uint256 LTV;\\n        uint256 minBorrowDuration;\\n        uint256 maxBorrowDuration;\\n        uint256 extendableDuration;\\n        uint256 overdueDuration;\\n    }\\n}\\n\",\"keccak256\":\"0x487cd1dedb3146da46144bc8f0e5b970c5173efa8c19700184b8207c1ee3fc55\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101445760003560e01c80638b14f10c116100b6578063dcc5cded1161006f578063dcc5cded14610524578063e78f094914610544578063ea3b863514610564578063ee4cc84c14610584578063f277f90b146105a4578063f668a9c5146105c457610183565b80638b14f10c1461042b57806391541e051461044b578063980a8bd914610478578063a28a533614610498578063a7b6eb5a146104b8578063ade97ab5146104d857610183565b80635c975abb116101085780635c975abb1461025e57806367113ef61461028157806376999aeb146102b6578063796d5836146102d65780638334278d146102f65780638456cb591461041657610183565b80630aad628b146101b45780630ad58d2f146101e75780632235ae0f14610209578063371fd8e6146102295780633f4ba83a1461024957610183565b3661018357604080518082018252600381526231313160e81b6020820152905162461bcd60e51b815261017a9190600401614942565b60405180910390fd5b604080518082018252600381526218989960e91b6020820152905162461bcd60e51b815261017a9190600401614942565b3480156101c057600080fd5b506101d46101cf366004614955565b6105e4565b6040519081526020015b60405180910390f35b3480156101f357600080fd5b50610207610202366004614983565b6106fc565b005b34801561021557600080fd5b506101d4610224366004614955565b6109a4565b34801561023557600080fd5b506101d4610244366004614955565b610ad3565b34801561025557600080fd5b506102076110e2565b34801561026a57600080fd5b5060005460ff1660405190151581526020016101de565b34801561028d57600080fd5b506102a161029c3660046149bc565b611226565b604080519283526020830191909152016101de565b3480156102c257600080fd5b506102076102d13660046149fd565b611ee6565b3480156102e257600080fd5b506102076102f1366004614b32565b612327565b34801561030257600080fd5b50610397610311366004614955565b600260208190526000918252604090912080546001820154928201546003830154600484015460058501546006860154600787015460088801546009890154600a8a0154600b909a0154989a6001600160a01b039081169a98811699978116986001600160801b03909716979596949564ffffffffff9094169492939116919060ff168c565b604080519c8d526001600160a01b039b8c1660208e0152998b16998c019990995296891660608b01526001600160801b0390951660808a015260a089019390935260c088019190915264ffffffffff1660e0870152610100860152929092166101208401526101408301919091521515610160820152610180016101de565b34801561042257600080fd5b506102076128ea565b34801561043757600080fd5b506101d4610446366004614ba8565b612a2b565b34801561045757600080fd5b5061046b610466366004614955565b612bd5565b6040516101de9190614cba565b34801561048457600080fd5b50610207610493366004614955565b612d43565b3480156104a457600080fd5b506102076104b3366004614955565b613144565b3480156104c457600080fd5b506102076104d3366004614cc9565b61331d565b3480156104e457600080fd5b5061050c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101de565b34801561053057600080fd5b506101d461053f366004614955565b61350e565b34801561055057600080fd5b5061020761055f366004614cf9565b6135e1565b34801561057057600080fd5b5061020761057f3660046149fd565b61379f565b34801561059057600080fd5b506101d461059f366004614955565b6139fc565b3480156105b057600080fd5b506102076105bf366004614955565b613b36565b3480156105d057600080fd5b506101d46105df366004614d38565b613d08565b600081815260026020526040812054829015156040518060400160405280600381526020016203330360ec1b815250906106315760405162461bcd60e51b815260040161017a9190614942565b506000838152600260208181526040928390208351610180810185528154815260018201546001600160a01b03908116938201939093529281015482169383019390935260038301548116606083015260048301546001600160801b03166080830152600583015460a0830152600683015460c0830152600783015464ffffffffff1660e08301526008830154610100830152600983015416610120820152600a820154610140820152600b9091015460ff1615156101608201526106f5906144aa565b9392505050565b60005460ff161561071f5760405162461bcd60e51b815260040161017a90614d96565b600260015414156107425760405162461bcd60e51b815260040161017a90614dc0565b60026001558261076081600090815260026020526040902054151590565b6040518060400160405280600381526020016203330360ec1b8152509061079a5760405162461bcd60e51b815260040161017a9190614942565b5060008481526002602081905260408083209091015490516370a0823160e01b81523360048201526001600160a01b03909116919082906370a0823190602401602060405180830381865afa1580156107f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081b9190614df7565b90508460001981141561082b5750805b60008111801561083b5750818111155b6040518060400160405280600381526020016233323160e81b815250906108755760405162461bcd60e51b815260040161017a9190614942565b5080610880886105e4565b10156040518060400160405280600381526020016219991960e91b815250906108bc5760405162461bcd60e51b815260040161017a9190614942565b50600087815260026020526040808220815163395e905560e01b81526004810191909152336024820152604481018490526001600160a01b0388166064820152905173__$5e6137a1b5a0a366e2874209b5abf71c10$__9263395e90559260848082019391829003018186803b15801561093557600080fd5b505af4158015610949573d6000803e3d6000fd5b505050506109543390565b6001600160a01b0316877f9da6493a92039daf47d1f2d7a782299c5994c6323eb1e972f69c432089ec52bf8360405161098f91815260200190565b60405180910390a35050600180555050505050565b60008181526002602081815260408084208151610180810183528154815260018201546001600160a01b0390811694820194909452938101548316848301526003810154831660608501526004808201546001600160801b03166080860152600582015460a0860152600682015460c0860152600782015464ffffffffff1660e086015260088201546101008601526009820154909316610120850152600a810154610140850152600b015460ff1615156101608401525163328eb49160e01b815273__$5e6137a1b5a0a366e2874209b5abf71c10$__9263328eb49192610a8c9201614cba565b602060405180830381865af4158015610aa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acd9190614df7565b92915050565b6000805460ff1615610af75760405162461bcd60e51b815260040161017a90614d96565b60026001541415610b1a5760405162461bcd60e51b815260040161017a90614dc0565b600260018190555060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166335bc868a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba69190614e1b565b6040516331a9108f60e11b8152600481018590529091506000906001600160a01b03831690636352211e90602401602060405180830381865afa158015610bf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c159190614e1b565b60405163622fe39f60e01b81526004810186905290915082906000906001600160a01b0383169063622fe39f906024016101c060405180830381865afa158015610c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c879190614f6f565b90506001816101a001516005811115610ca257610ca2614f8c565b1480610cc457506002816101a001516005811115610cc257610cc2614f8c565b145b80610ce557506003816101a001516005811115610ce357610ce3614f8c565b145b6040518060400160405280600381526020016233333360e81b81525090610d1f5760405162461bcd60e51b815260040161017a9190614942565b50604051634b72cb4160e11b8152600481018790526000906001600160a01b038416906396e5968290602401602060405180830381865afa158015610d68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8c9190614df7565b604051636b52b36560e01b8152600481018990529091506000906001600160a01b03851690636b52b36590602401602060405180830381865afa158015610dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfb9190614df7565b9050610e078183614552565b83516000818152600260205260409020549198509015156040518060400160405280600381526020016203330360ec1b81525090610e585760405162461bcd60e51b815260040161017a9190614942565b506000818152600260205260409081902090516395705c5f60e01b815273__$5e6137a1b5a0a366e2874209b5abf71c10$__916395705c5f91610ea4919088908d9088906004016150c0565b60006040518083038186803b158015610ebc57600080fd5b505af4158015610ed0573d6000803e3d6000fd5b50505050846001600160a01b031663563086128a88610eec3390565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b039182166024840152166044820152606401600060405180830381600087803b158015610f3b57600080fd5b505af1158015610f4f573d6000803e3d6000fd5b505050506000610f5c3390565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635fee67086040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe79190614e1b565b6001600160a01b031614610ffb5786610ffd565b335b60208601516040808801519051632142170760e11b81526001600160a01b038a811660048301528085166024830152604482019290925292935016906342842e0e90606401600060405180830381600087803b15801561105c57600080fd5b505af1158015611070573d6000803e3d6000fd5b5050505089876001600160a01b0316837fb26072383248d9c24b411a4bbd7216134067da189b28216744569be98bfe9b7f6110a83390565b604080516001600160a01b039092168252602082018f9052810189905260600160405180910390a450506001805550949695505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015611142573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111669190614e1b565b90506001600160a01b038116632500f2b6336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156111bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e091906150f9565b6040518060400160405280600381526020016232303160e81b8152509061121a5760405162461bcd60e51b815260040161017a9190614942565b5061122361455e565b50565b60008061123560005460ff1690565b156112525760405162461bcd60e51b815260040161017a90614d96565b600260015414156112755760405162461bcd60e51b815260040161017a90614dc0565b600260018190555060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166335bc868a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113019190614e1b565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d633590a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611361573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113859190614e1b565b6001600160a01b0316336001600160a01b03161415611456576040516331a9108f60e11b8152600481018890526001600160a01b038086169190831690636352211e90602401602060405180830381865afa1580156113e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140c9190614e1b565b6001600160a01b031614604051806040016040528060038152602001620d0c0d60ea1b815250906114505760405162461bcd60e51b815260040161017a9190614942565b5061150d565b336040516331a9108f60e11b8152600481018990526001600160a01b0391821691831690636352211e90602401602060405180830381865afa1580156114a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c49190614e1b565b6001600160a01b031614604051806040016040528060038152602001620d0c0d60ea1b815250906115085760405162461bcd60e51b815260040161017a9190614942565b503393505b60006040518061014001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001836001600160a01b031663622fe39f8b6040518263ffffffff1660e01b815260040161158191815260200190565b6101c060405180830381865afa15801561159f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c39190614f6f565b815260200160019052604051632e31150760e11b8152600481018a90529091506001600160a01b03831690635c622a0e90602401602060405180830381865afa158015611614573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116389190615114565b816101200190600581111561164f5761164f614f8c565b9081600581111561166257611662614f8c565b9052506002816101200151600581111561167e5761167e614f8c565b14806116a057506003816101200151600581111561169e5761169e614f8c565b145b6040518060400160405280600381526020016233333560e81b815250906116da5760405162461bcd60e51b815260040161017a9190614942565b5061010081015180516020909101516040516346296c6960e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016926346296c6992611745926004019182526001600160a01b0316602082015260400190565b602060405180830381865afa158015611762573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178691906150f9565b6040518060400160405280600381526020016219999960e91b815250906117c05760405162461bcd60e51b815260040161017a9190614942565b506101008101518051602090910151604051639dce429960e01b81526000926001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692639dce4299926118309291906004019182526001600160a01b0316602082015260400190565b600060405180830381865afa15801561184d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118759190810190615174565b90508060800151871015801561188f57508060a001518711155b6040518060400160405280600381526020016203333360ec1b815250906118c95760405162461bcd60e51b815260040161017a9190614942565b50610100820151805160208201516040909201516118e79290612a2b565b608083015260c0820188905260001988141561190857608082015160c08301525b8160c00151826080015110156040518060400160405280600381526020016233333160e81b8152509061194e5760405162461bcd60e51b815260040161017a9190614942565b50604051631c18749560e01b8152600481018a90526001600160a01b03841690631c18749590602401602060405180830381865afa158015611994573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b89190614df7565b8252604051634b72cb4160e11b8152600481018a90526001600160a01b038416906396e5968290602401602060405180830381865afa1580156119ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a239190614df7565b606083015260c08201516101008301516080015111611ac1576000611a5e836101000151608001518460c001516145f190919063ffffffff16565b60608401518451919250611a7191615262565b811015611a9e5760608301518351611a94918391611a8e91614552565b906145f1565b6020840152611abb565b60608301518351611ab59190611a8e9084906145f1565b60408401525b50611af9565b60608201518251611af391611ad591615262565b60c084015161010085015160800151611aed916145f1565b90614552565b60208301525b604082015115611b5b5761010082015151611b13906105e4565b60a083018190526040808401518151808301909252600382526233303160e81b602083015290911015611b595760405162461bcd60e51b815260040161017a9190614942565b505b604051632b18430960e11b8152600481018a90526001600160a01b03878116602483018190526044830152841690635630861290606401600060405180830381600087803b158015611bac57600080fd5b505af1158015611bc0573d6000803e3d6000fd5b50505061010080840180515160009081526002602081815260408084208151610180810183528154815260018201546001600160a01b0390811694820194909452938101548316918401919091526003810154821660608085019190915260048201546001600160801b0316608080860191909152600583015460a0860152600683015460c080870191909152600784015464ffffffffff1660e08701526008840154988601989098526009830154909316610120850152600a820154610140850152600b9091015460ff16151561016084015288015194880151885194519091015173__$5e6137a1b5a0a366e2874209b5abf71c10$__965063dfdafca3959294929392611ccf9190614552565b6040518663ffffffff1660e01b8152600401611cef95949392919061527a565b602060405180830381865af4158015611d0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d309190614df7565b8260e0018181525050600080846001600160a01b03166370b4ebeb856101000151600001518a87610100015160200151886101000151604001518960c001518f8b60e001516040518863ffffffff1660e01b8152600401611d9797969594939291906152af565b6101e0604051808303816000875af1158015611db7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ddb91906152eb565b610100860180515160009081526002602090815260409182902092518951918a0151838b015160608c015194516303eed27160e21b815297995095975073__$5e6137a1b5a0a366e2874209b5abf71c10$__96630fbb49c496611e48969593948a94909392600401615319565b60006040518083038186803b158015611e6057600080fd5b505af4158015611e74573d6000803e3d6000fd5b505050508a886001600160a01b0316856101000151600001517fbbd12926def8e41e5f1c7a10d219e405292d14f53bfdba19eebab2e3faa6c74a85604051611ebe91815260200190565b60405180910390a4505050602081015160409091015160018055909890975095505050505050565b60005460ff1615611f095760405162461bcd60e51b815260040161017a90614d96565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663529a356f336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611f7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa191906150f9565b6040518060400160405280600381526020016232303360e81b81525090611fdb5760405162461bcd60e51b815260040161017a9190614942565b5060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166335bc868a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561203c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120609190614e1b565b60405163622fe39f60e01b8152600481018590529091506000906001600160a01b0383169063622fe39f906024016101c060405180830381865afa1580156120ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d09190614f6f565b90506005816101a0015160058111156120eb576120eb614f8c565b146040518060400160405280600381526020016233363160e81b815250906121265760405162461bcd60e51b815260040161017a9190614942565b50604051636b52b36560e01b8152600481018590526000906001600160a01b03841690636b52b36590602401602060405180830381865afa15801561216f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121939190614df7565b90508084101560405180604001604052806003815260200162199b1960e91b815250906121d35760405162461bcd60e51b815260040161017a9190614942565b5081516000908152600260205260409081902090516339c5132760e11b81526004810191909152602481018590526044810182905273__$5e6137a1b5a0a366e2874209b5abf71c10$__9063738a264e9060640160006040518083038186803b15801561223f57600080fd5b505af4158015612253573d6000803e3d6000fd5b505060405163ed213bbf60e01b8152600481018890526001600160a01b038616925063ed213bbf9150602401600060405180830381600087803b15801561229957600080fd5b505af11580156122ad573d6000803e3d6000fd5b5050505081602001516001600160a01b03168583600001517fcde0dc431e6f088cbd9c8b1768aff225467e33d4ac1d3356494ef79600a8680585604001516122f23390565b604080519283526001600160a01b03909116602083015281018990526060810186905260800160405180910390a45050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015612387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ab9190614e1b565b90506001600160a01b038116637be53ca1336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015612401573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242591906150f9565b6040518060400160405280600381526020016219181960e91b8152509061245f5760405162461bcd60e51b815260040161017a9190614942565b5061246e600380546001019055565b600061247960035490565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663420897916040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ff9190614e1b565b6001600160a01b0316635e08f3378387878a6040518563ffffffff1660e01b81526004016125309493929190615364565b6020604051808303816000875af115801561254f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125739190614e1b565b9050604051806101800160405280838152602001876001600160a01b03168152602001826001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663efe3e3e36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612603573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126279190614e1b565b6001600160a01b031681526020016b033b2e3c9fd0803ce80000006001600160801b031681526020016000815260200160008152602001600064ffffffffff168152602001600081526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166390839e3f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126f59190614e1b565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634322b7146040518163ffffffff1660e01b8152600401602060405180830381865afa158015612761573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127859190614df7565b81526001602091820181905260008581526002808452604091829020855181559385015192840180546001600160a01b03199081166001600160a01b03958616179091558583015191850180548216928516929092179091556060850151600385018054831691851691909117905560808501516004850180546fffffffffffffffffffffffffffffffff19166001600160801b0390921691909117905560a0850151600585015560c0850151600685015560e085015160078501805464ffffffffff191664ffffffffff9092169190911790556101008501516008850155610120850151600985018054909216908416179055610140840151600a84015561016090930151600b909201805460ff19169215159290921790915590518282169188169084907f4e9124cfa456690cd56bf3d36fe58f11cafd4e3faf6b2748e8eabe68e08a3370906128da908a908a906153a9565b60405180910390a4505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa15801561294a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061296e9190614e1b565b90506001600160a01b038116632500f2b6336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156129c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e891906150f9565b6040518060400160405280600381526020016232303160e81b81525090612a225760405162461bcd60e51b815260040161017a9190614942565b506112236145fd565b604051639dce429960e01b8152600481018490526001600160a01b038381166024830152600091612bcd917f00000000000000000000000000000000000000000000000000000000000000001690639dce429990604401600060405180830381865afa158015612a9f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612ac79190810190615174565b606001517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663970f4c3a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b4d9190614e1b565b6040516350d16d9f60e01b8152600481018890526001600160a01b0387811660248301526044820187905291909116906350d16d9f90606401602060405180830381865afa158015612ba3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc79190614df7565b90614655565b949350505050565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810191909152600082815260026020526040902054829015156040518060400160405280600381526020016203330360ec1b81525090612c835760405162461bcd60e51b815260040161017a9190614942565b5050506000908152600260208181526040928390208351610180810185528154815260018201546001600160a01b03908116938201939093529281015482169383019390935260038301548116606083015260048301546001600160801b03166080830152600583015460a0830152600683015460c0830152600783015464ffffffffff1660e08301526008830154610100830152600983015416610120820152600a820154610140820152600b9091015460ff16151561016082015290565b60005460ff1615612d665760405162461bcd60e51b815260040161017a90614d96565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663529a356f336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015612dda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dfe91906150f9565b6040518060400160405280600381526020016232303360e81b81525090612e385760405162461bcd60e51b815260040161017a9190614942565b5060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166335bc868a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ebd9190614e1b565b60405163622fe39f60e01b8152600481018490529091506000906001600160a01b0383169063622fe39f906024016101c060405180830381865afa158015612f09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2d9190614f6f565b90506004816101a001516005811115612f4857612f48614f8c565b146040518060400160405280600381526020016203336360ec1b81525090612f835760405162461bcd60e51b815260040161017a9190614942565b508051600090815260026020526040908190209051632a1ed55f60e11b815273__$5e6137a1b5a0a366e2874209b5abf71c10$__9163543daabe91612fcd919085906004016153d7565b60006040518083038186803b158015612fe557600080fd5b505af4158015612ff9573d6000803e3d6000fd5b5050505080602001516001600160a01b03166342842e0e836130183390565b60408086015190516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b15801561306c57600080fd5b505af1158015613080573d6000803e3d6000fd5b505060405163980a8bd960e01b8152600481018690526001600160a01b038516925063980a8bd99150602401600060405180830381600087803b1580156130c657600080fd5b505af11580156130da573d6000803e3d6000fd5b5050505080602001516001600160a01b03168382600001517f338bea6971e9221d0ae5f105c79da18c6614a11556e217e0aaa361424fe654d2846040015161311f3390565b604080519283526001600160a01b0390911660208301520160405180910390a4505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156131a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131c89190614e1b565b90506001600160a01b038116632500f2b6336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561321e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061324291906150f9565b6040518060400160405280600381526020016232303160e81b8152509061327c5760405162461bcd60e51b815260040161017a9190614942565b50600082815260026020908152604091829020600b01548251808401909352600383526233303360e81b9183019190915260ff166132cd5760405162461bcd60e51b815260040161017a9190614942565b5060008281526002602052604090206132e5906146fd565b6040518281527ffa52d8cf59b61f2698ee5e988b488cc589a524be112b15acf937dab59bf36120906020015b60405180910390a15050565b600082815260026020526040902054829015156040518060400160405280600381526020016203330360ec1b8152509061336a5760405162461bcd60e51b815260040161017a9190614942565b5060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156133cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ef9190614e1b565b90506001600160a01b038116637be53ca1336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015613445573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061346991906150f9565b6040518060400160405280600381526020016219181960e91b815250906134a35760405162461bcd60e51b815260040161017a9190614942565b5060008481526002602090815260409182902060090180546001600160a01b0319166001600160a01b038716908117909155915191825285917f2a510455968cb9bf56ecbeeab12f13ed51a86ebdb3cdcec2f502f78c9f2a454191015b60405180910390a250505050565b600081815260026020526040812054829015156040518060400160405280600381526020016203330360ec1b8152509061355b5760405162461bcd60e51b815260040161017a9190614942565b5060008381526002602052604090819020905163564f0dfb60e01b8152600481019190915273__$5e6137a1b5a0a366e2874209b5abf71c10$__9063564f0dfb906024015b602060405180830381865af41580156135bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f59190614df7565b60005460ff16156136045760405162461bcd60e51b815260040161017a90614d96565b600260015414156136275760405162461bcd60e51b815260040161017a90614dc0565b60026001558361364581600090815260026020526040902054151590565b6040518060400160405280600381526020016203330360ec1b8152509061367f5760405162461bcd60e51b815260040161017a9190614942565b5060408051808201909152600381526203332360ec1b6020820152846136b85760405162461bcd60e51b815260040161017a9190614942565b50600085815260026020526040808220815163fe981a4f60e01b81526004810191909152336024820152604481018790526001600160a01b0386166064820152905173__$5e6137a1b5a0a366e2874209b5abf71c10$__9263fe981a4f9260848082019391829003018186803b15801561373157600080fd5b505af4158015613745573d6000803e3d6000fd5b50505050816137513390565b6001600160a01b0316867fd36a2f67d06d285786f61a32b052b9ace6b0b7abef5177b54358abdc83a0b69b8760405161378c91815260200190565b60405180910390a4505060018055505050565b600082815260026020526040902054829015156040518060400160405280600381526020016203330360ec1b815250906137ec5760405162461bcd60e51b815260040161017a9190614942565b5060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa15801561384d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138719190614e1b565b90506001600160a01b038116637be53ca1336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156138c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138eb91906150f9565b6040518060400160405280600381526020016219181960e91b815250906139255760405162461bcd60e51b815260040161017a9190614942565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d23a65cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613984573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139a89190614df7565b8311156139b457600080fd5b60008481526002602052604090819020600a018490555184907fa42eaeef2868aa910fcded03fb023a51209c7304b595991cb71ff2968b266087906135009086815260200190565b600081815260026020526040812054829015156040518060400160405280600381526020016203330360ec1b81525090613a495760405162461bcd60e51b815260040161017a9190614942565b506000838152600260208181526040928390208351610180810185528154815260018201546001600160a01b0390811693820193909352928101548216838501526003810154821660608401526004808201546001600160801b03166080850152600582015460a0850152600682015460c0850152600782015464ffffffffff1660e085015260088201546101008501526009820154909216610120840152600a810154610140840152600b015460ff161515610160830152915163640d9a7760e11b815273__$5e6137a1b5a0a366e2874209b5abf71c10$__9263c81b34ee926135a092909101614cba565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015613b96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bba9190614e1b565b90506001600160a01b038116632500f2b6336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015613c10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c3491906150f9565b6040518060400160405280600381526020016232303160e81b81525090613c6e5760405162461bcd60e51b815260040161017a9190614942565b50600082815260026020908152604091829020600b01548251808401909352600383526233303360e81b9183019190915260ff1615613cc05760405162461bcd60e51b815260040161017a9190614942565b506000828152600260205260409020613cd8906147f8565b6040518281527f7d112c7767bf19c038f01732f5928c582a8f0de6fce5f2b0c70e9e4a91d3d39c90602001613311565b6000805460ff1615613d2c5760405162461bcd60e51b815260040161017a90614d96565b60026001541415613d4f5760405162461bcd60e51b815260040161017a90614dc0565b600260015586613d6d81600090815260026020526040902054151590565b6040518060400160405280600381526020016203330360ec1b81525090613da75760405162461bcd60e51b815260040161017a9190614942565b506040516346296c6960e01b8152600481018990526001600160a01b0386811660248301527f000000000000000000000000000000000000000000000000000000000000000016906346296c6990604401602060405180830381865afa158015613e15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e3991906150f9565b6040518060400160405280600381526020016219999960e91b81525090613e735760405162461bcd60e51b815260040161017a9190614942565b50604051639dce429960e01b8152600481018990526001600160a01b0386811660248301527f00000000000000000000000000000000000000000000000000000000000000001690639dce429990604401600060405180830381865afa158015613ee1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613f099190810190615174565b608001518610158015613fb45750604051639dce429960e01b8152600481018990526001600160a01b0386811660248301527f00000000000000000000000000000000000000000000000000000000000000001690639dce429990604401600060405180830381865afa158015613f84573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613fac9190810190615174565b60a001518611155b6040518060400160405280600381526020016203333360ec1b81525090613fee5760405162461bcd60e51b815260040161017a9190614942565b5061402a6040518060a001604052806000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b614035898787612a2b565b8152614040896105e4565b60208201526040810188905260001988141561407557602081015181511061406c57806020015161406f565b80515b60408201525b60408082015182518251808401909352600383526233333160e81b602084015210156140b45760405162461bcd60e51b815260040161017a9190614942565b508060400151816020015110156040518060400160405280600381526020016233303160e81b815250906140fb5760405162461bcd60e51b815260040161017a9190614942565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166335bc868a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561415a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061417e9190614e1b565b6001600160a01b03908116608083015286166342842e0e3360808401516040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260448101889052606401600060405180830381600087803b1580156141ea57600080fd5b505af11580156141fe573d6000803e3d6000fd5b50505060008a81526002602081815260408084208151610180810183528154815260018201546001600160a01b0390811694820194909452938101548316848301526003810154831660608501526004808201546001600160801b03166080860152600582015460a0860152600682015460c0860152600782015464ffffffffff1660e086015260088201546101008601526009820154909316610120850152600a810154610140850152600b015460ff16151561016084015285810151905163dfdafca360e01b815273__$5e6137a1b5a0a366e2874209b5abf71c10$__955063dfdafca3946142f8949390928392909183910161527a565b602060405180830381865af4158015614315573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143399190614df7565b81606001818152505060008082608001516001600160a01b03166370b4ebeb8c888b8b88604001518f8a606001516040518863ffffffff1660e01b815260040161438997969594939291906152af565b6101e0604051808303816000875af11580156143a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143cd91906152eb565b60008d81526002602052604090819020905163030b159d60e31b815292945090925073__$5e6137a1b5a0a366e2874209b5abf71c10$__91631858ace8916144199185906004016153d7565b60006040518083038186803b15801561443157600080fd5b505af4158015614445573d6000803e3d6000fd5b5050505081866001600160a01b03168c7ff9a33434428db5f0416c03e38307599ad0b9b9965d6c070eb08e87cc1f0ca50e61447d3390565b6040516001600160a01b03909116815260200160405180910390a450600180559998505050505050505050565b6000816101600151156145155760608201516020830151604080850151905163d4fac45d60e01b81526001600160a01b039283166004820152908216602482015291169063d4fac45d906044015b602060405180830381865afa158015610aa9573d6000803e3d6000fd5b602082015160408084015190516370a0823160e01b81526001600160a01b0391821660048201529116906370a08231906024016144f8565b919050565b60006106f58284615262565b60005460ff166145a75760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161017a565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60006106f582846153ec565b60005460ff16156146205760405162461bcd60e51b815260040161017a90614d96565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586145d43390565b6000821580614662575081155b1561466f57506000610acd565b8161467d6002612710615403565b614689906000196153ec565b6146939190615403565b8311156040518060400160405280600381526020016203130360ec1b815250906146d05760405162461bcd60e51b815260040161017a9190614942565b506127106146df600282615403565b6146e98486615425565b6146f39190615262565b6106f59190615403565b60028101546003820154600183015460405163d4fac45d60e01b81526001600160a01b0391821660048201529281166024840181905292600092919091169063d4fac45d90604401602060405180830381865afa158015614762573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147869190614df7565b604051627b8a6760e11b8152600481018290526001600160a01b0384166024820181905291925062f714ce90604401600060405180830381600087803b1580156147cf57600080fd5b505af11580156147e3573d6000803e3d6000fd5b505050600b909301805460ff19169055505050565b600b8101805460ff1916600190811790915581015460028201546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a0823190602401602060405180830381865afa15801561485d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148819190614df7565b600283015460405163b6b55f2560e01b8152600481018390529192506001600160a01b03169063b6b55f2590602401600060405180830381600087803b1580156148ca57600080fd5b505af11580156148de573d6000803e3d6000fd5b505050505050565b60005b838110156149015781810151838201526020016148e9565b83811115614910576000848401525b50505050565b6000815180845261492e8160208601602086016148e6565b601f01601f19169290920160200192915050565b6020815260006106f56020830184614916565b60006020828403121561496757600080fd5b5035919050565b6001600160a01b038116811461122357600080fd5b60008060006060848603121561499857600080fd5b833592506020840135915060408401356149b18161496e565b809150509250925092565b600080600080608085870312156149d257600080fd5b84359350602085013592506040850135915060608501356149f28161496e565b939692955090935050565b60008060408385031215614a1057600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b6040516101c0810167ffffffffffffffff81118282101715614a5957614a59614a1f565b60405290565b604051610100810167ffffffffffffffff81118282101715614a5957614a59614a1f565b604051601f8201601f1916810167ffffffffffffffff81118282101715614aac57614aac614a1f565b604052919050565b600067ffffffffffffffff821115614ace57614ace614a1f565b50601f01601f191660200190565b600082601f830112614aed57600080fd5b8135614b00614afb82614ab4565b614a83565b818152846020838601011115614b1557600080fd5b816020850160208301376000918101602001919091529392505050565b600080600060608486031215614b4757600080fd5b8335614b528161496e565b9250602084013567ffffffffffffffff80821115614b6f57600080fd5b614b7b87838801614adc565b93506040860135915080821115614b9157600080fd5b50614b9e86828701614adc565b9150509250925092565b600080600060608486031215614bbd57600080fd5b833592506020840135614bcf8161496e565b929592945050506040919091013590565b805182526020810151614bfe60208401826001600160a01b03169052565b506040810151614c1960408401826001600160a01b03169052565b506060810151614c3460608401826001600160a01b03169052565b506080810151614c4f60808401826001600160801b03169052565b5060a081015160a083015260c081015160c083015260e0810151614c7c60e084018264ffffffffff169052565b506101008181015190830152610120808201516001600160a01b03169083015261014080820151908301526101608082015180151582850152614910565b6101808101610acd8284614be0565b60008060408385031215614cdc57600080fd5b823591506020830135614cee8161496e565b809150509250929050565b60008060008060808587031215614d0f57600080fd5b84359350602085013592506040850135614d288161496e565b9396929550929360600135925050565b60008060008060008060c08789031215614d5157600080fd5b8635955060208701359450604087013593506060870135614d718161496e565b92506080870135915060a0870135614d888161496e565b809150509295509295509295565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600060208284031215614e0957600080fd5b5051919050565b805161454d8161496e565b600060208284031215614e2d57600080fd5b81516106f58161496e565b80516001600160801b038116811461454d57600080fd5b805164ffffffffff8116811461454d57600080fd5b80516006811061454d57600080fd5b60006101c08284031215614e8657600080fd5b614e8e614a35565b905081518152614ea060208301614e10565b602082015260408201516040820152614ebb60608301614e10565b606082015260808201516080820152614ed660a08301614e38565b60a0820152614ee760c08301614e38565b60c0820152614ef860e08301614e4f565b60e0820152610100614f0b818401614e4f565b90820152610120614f1d838201614e4f565b90820152610140614f2f838201614e4f565b90820152610160614f41838201614e4f565b90820152610180614f53838201614e4f565b908201526101a0614f65838201614e64565b9082015292915050565b60006101c08284031215614f8257600080fd5b6106f58383614e73565b634e487b7160e01b600052602160045260246000fd5b60068110614fc057634e487b7160e01b600052602160045260246000fd5b9052565b805182526020810151614fe260208401826001600160a01b03169052565b5060408101516040830152606081015161500760608401826001600160a01b03169052565b506080810151608083015260a081015161502c60a08401826001600160801b03169052565b5060c081015161504760c08401826001600160801b03169052565b5060e081015161506060e084018264ffffffffff169052565b506101008181015164ffffffffff9081169184019190915261012080830151821690840152610140808301518216908401526101608083015182169084015261018080830151909116908301526101a08082015161491082850182614fa2565b84815261022081016150d56020830186614fc4565b6101e0820193909352610200015292915050565b8051801515811461454d57600080fd5b60006020828403121561510b57600080fd5b6106f5826150e9565b60006020828403121561512657600080fd5b6106f582614e64565b600082601f83011261514057600080fd5b815161514e614afb82614ab4565b81815284602083860101111561516357600080fd5b612bcd8260208301602087016148e6565b60006020828403121561518657600080fd5b815167ffffffffffffffff8082111561519e57600080fd5b9083019061010082860312156151b357600080fd5b6151bb614a5f565b6151c4836150e9565b81526020830151828111156151d857600080fd5b6151e48782860161512f565b6020830152506040830151828111156151fc57600080fd5b6152088782860161512f565b604083015250606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e082015280935050505092915050565b634e487b7160e01b600052601160045260246000fd5b600082198211156152755761527561524c565b500190565b61020081016152898288614be0565b85610180830152846101a0830152836101c0830152826101e08301529695505050505050565b9687526001600160a01b0395861660208801529390941660408601526060850191909152608084015260a083019190915260c082015260e00190565b6000806101e083850312156152ff57600080fd5b825191506153108460208501614e73565b90509250929050565b878152610420810161532e6020830189614fc4565b61533c6101e0830188614fc4565b856103a0830152846103c0830152836103e08301528261040083015298975050505050505050565b84815260806020820152600061537d6080830186614916565b828103604084015261538f8186614916565b91505060018060a01b038316606083015295945050505050565b6040815260006153bc6040830185614916565b82810360208401526153ce8185614916565b95945050505050565b8281526101e081016106f56020830184614fc4565b6000828210156153fe576153fe61524c565b500390565b60008261542057634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561543f5761543f61524c565b50029056fea264697066735822122086933ce25c2671003896b0147f01630ab679307ab3e4c45b7f34bcca30fcb72764736f6c634300080a0033",
  "libraries": {
    "Errors": "0xb50AB0f5Ebe00cB99F9843FE6AcA79477aa264fc",
    "MathUtils": "0x4648bb80A8d14C8777321F1b4cbb1B016696102d",
    "PercentageMath": "0xa22eF7fA838086378C1bae4aB77915407a126D9d",
    "DataTypes": "0x9397220974f87949543b079A022A88B9b41a8380",
    "ReserveLogic": "0xf13a69F5611049fE39842c5F0b46c9B327FC12D8"
  },
  "devdoc": {
    "author": "OpenSky Labs",
    "kind": "dev",
    "methods": {
      "borrow(uint256,uint256,uint256,address,uint256,address)": {
        "details": "Borrows ETH from reserve using an NFT as collateral and will receive a loan NFT as receipt.",
        "params": {
          "amount": "amount of ETH user will borrow",
          "duration": "The desired duration of the loan",
          "nftAddress": "The collateral NFT address",
          "onBehalfOf": "address of the user who will receive ETH and loan NFT.*",
          "reserveId": "The ID of the reserve",
          "tokenId": "The ID of the NFT"
        }
      },
      "closeMoneyMarket(uint256)": {
        "details": "Only callable by the emergency admin role",
        "params": {
          "reserveId": "The ID of the reserve*"
        }
      },
      "create(address,string,string)": {
        "details": "Only callable by the pool admin role",
        "params": {
          "name": "The name of the oToken",
          "symbol": "The symbol for the oToken*",
          "underlyingAsset": "The address of the underlying asset"
        }
      },
      "deposit(uint256,uint256,address,uint256)": {
        "details": "Deposits ETH into the reserve.",
        "params": {
          "referralCode": "integrators are assigned a referral code and can potentially receive rewards*",
          "reserveId": "The ID of the reserve"
        }
      },
      "endLiquidation(uint256,uint256)": {
        "details": "Completes liquidation for a loan which will be repaid.",
        "params": {
          "amount": "The amount of the token that will be repaid.",
          "loanId": "The ID of the liquidated loan that will be repaid."
        }
      },
      "extend(uint256,uint256,uint256,address)": {
        "details": "Extends creates a new loan and terminates the old loan.",
        "params": {
          "amount": "The amount of ERC20 token the user will borrow in the new loan",
          "duration": "The selected duration the user will borrow in the new loan",
          "loanId": "The loan ID to extend",
          "onBehalfOf": "The address will borrow in the new loan*"
        }
      },
      "getAvailableLiquidity(uint256)": {
        "details": "Returns the remaining liquidity of the reserve",
        "params": {
          "reserveId": "The ID of the reserve"
        },
        "returns": {
          "_0": "The reserve's withdrawable balance"
        }
      },
      "getBorrowLimitByOracle(uint256,address,uint256)": {
        "details": "Returns the instantaneous borrow limit value of a special NFT",
        "params": {
          "nftAddress": "The address of the NFT",
          "tokenId": "The ID of the NFT"
        },
        "returns": {
          "_0": "The NFT's borrow limit"
        }
      },
      "getReserveData(uint256)": {
        "details": "Returns the state of the reserve",
        "params": {
          "reserveId": "The ID of the reserve"
        },
        "returns": {
          "_0": "The state of the reserve*"
        }
      },
      "getReserveNormalizedIncome(uint256)": {
        "details": "Returns the normalized income of the reserve",
        "params": {
          "reserveId": "The ID of the reserve"
        },
        "returns": {
          "_0": "The reserve's normalized income"
        }
      },
      "getTVL(uint256)": {
        "details": "Returns TVL (total value locked) of the reserve.",
        "params": {
          "reserveId": "The ID of the reserve"
        },
        "returns": {
          "_0": "The reserve's TVL"
        }
      },
      "getTotalBorrowBalance(uint256)": {
        "details": "Returns the sum of all users borrow balances include borrow interest accrued",
        "params": {
          "reserveId": "The ID of the reserve"
        },
        "returns": {
          "_0": "The total borrow balance of the reserve"
        }
      },
      "openMoneyMarket(uint256)": {
        "details": "Only callable by the emergency admin role",
        "params": {
          "reserveId": "The ID of the reserve*"
        }
      },
      "pause()": {
        "details": "Pause pool for emergency case, can only be called by emergency admin.*"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "repay(uint256)": {
        "details": "Repays a loan, as a result the corresponding loan NFT owner will receive the collateralized NFT.",
        "params": {
          "loanId": "The ID of the loan the user will repay"
        }
      },
      "setInterestModelAddress(uint256,address)": {
        "details": "Only callable by the pool admin role",
        "params": {
          "interestModelAddress": "The new address of the interest model contract*",
          "reserveId": "The ID of the reserve"
        }
      },
      "setTreasuryFactor(uint256,uint256)": {
        "details": "Only callable by the pool admin role",
        "params": {
          "factor": "The new treasury factor of the reserve*",
          "reserveId": "The ID of the reserve"
        }
      },
      "startLiquidation(uint256)": {
        "details": "Starts liquidation for a loan when it's in LIQUIDATABLE status",
        "params": {
          "loanId": "The ID of the loan which will be liquidated"
        }
      },
      "unpause()": {
        "details": "Unpause pool for emergency case, can only be called by emergency admin.*"
      },
      "withdraw(uint256,uint256,address)": {
        "details": "withdraws the ETH from reserve.",
        "params": {
          "amount": "amount of oETH to withdraw and receive native ETH*",
          "reserveId": "The ID of the reserve"
        }
      }
    },
    "title": "OpenSkyPool contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "closeMoneyMarket(uint256)": {
        "notice": "Close the money market"
      },
      "create(address,string,string)": {
        "notice": "Creates a reserve"
      },
      "openMoneyMarket(uint256)": {
        "notice": "Open the money market"
      },
      "setInterestModelAddress(uint256,address)": {
        "notice": "Updates the interest model address of a reserve"
      },
      "setTreasuryFactor(uint256,uint256)": {
        "notice": "Updates the treasury factor of a reserve"
      }
    },
    "notice": "Main point of interaction with OpenSky protocol's pool - Users can:   # Deposit   # Withdraw*",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1294,
        "contract": "contracts/OpenSkyPool.sol:OpenSkyPool",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1379,
        "contract": "contracts/OpenSkyPool.sol:OpenSkyPool",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 10927,
        "contract": "contracts/OpenSkyPool.sol:OpenSkyPool",
        "label": "reserves",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(ReserveData)21282_storage)"
      },
      {
        "astId": 10933,
        "contract": "contracts/OpenSkyPool.sol:OpenSkyPool",
        "label": "_reserveIdTracker",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Counter)6236_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(ReserveData)21282_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DataTypes.ReserveData)",
        "numberOfBytes": "32",
        "value": "t_struct(ReserveData)21282_storage"
      },
      "t_struct(Counter)6236_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 6235,
            "contract": "contracts/OpenSkyPool.sol:OpenSkyPool",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ReserveData)21282_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.ReserveData",
        "members": [
          {
            "astId": 21259,
            "contract": "contracts/OpenSkyPool.sol:OpenSkyPool",
            "label": "reserveId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 21261,
            "contract": "contracts/OpenSkyPool.sol:OpenSkyPool",
            "label": "underlyingAsset",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 21263,
            "contract": "contracts/OpenSkyPool.sol:OpenSkyPool",
            "label": "oTokenAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 21265,
            "contract": "contracts/OpenSkyPool.sol:OpenSkyPool",
            "label": "moneyMarketAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 21267,
            "contract": "contracts/OpenSkyPool.sol:OpenSkyPool",
            "label": "lastSupplyIndex",
            "offset": 0,
            "slot": "4",
            "type": "t_uint128"
          },
          {
            "astId": 21269,
            "contract": "contracts/OpenSkyPool.sol:OpenSkyPool",
            "label": "borrowingInterestPerSecond",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 21271,
            "contract": "contracts/OpenSkyPool.sol:OpenSkyPool",
            "label": "lastMoneyMarketBalance",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 21273,
            "contract": "contracts/OpenSkyPool.sol:OpenSkyPool",
            "label": "lastUpdateTimestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint40"
          },
          {
            "astId": 21275,
            "contract": "contracts/OpenSkyPool.sol:OpenSkyPool",
            "label": "totalBorrows",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 21277,
            "contract": "contracts/OpenSkyPool.sol:OpenSkyPool",
            "label": "interestModelAddress",
            "offset": 0,
            "slot": "9",
            "type": "t_address"
          },
          {
            "astId": 21279,
            "contract": "contracts/OpenSkyPool.sol:OpenSkyPool",
            "label": "treasuryFactor",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 21281,
            "contract": "contracts/OpenSkyPool.sol:OpenSkyPool",
            "label": "isMoneyMarketOn",
            "offset": 0,
            "slot": "11",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      }
    }
  }
}