{
  "address": "0x08ef5BAAD41Dccf6b8f5bF742bD882a34634492b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IOpenSkySettings",
          "name": "settings",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "SETTINGS",
      "outputs": [
        {
          "internalType": "contract IOpenSkySettings",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        }
      ],
      "name": "getAvailableLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidityAmountToAdd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidityAmountToRemove",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmountToAdd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmountToRemove",
          "type": "uint256"
        }
      ],
      "name": "getBorrowRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "getLoanData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "loanId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrows",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "borrowBegin",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowDuration",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowOverdueTime",
              "type": "uint40"
            },
            {
              "internalType": "uint128",
              "name": "borrowRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "interestPerSecond",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "penalty",
              "type": "uint256"
            },
            {
              "internalType": "enum DataTypes.LoanStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct IOpenSkyDataProvider.LoanData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        }
      ],
      "name": "getLoanSupplyRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getLoansByUser",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        }
      ],
      "name": "getMoneyMarketSupplyRateInstant",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        }
      ],
      "name": "getReserveData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "reserveId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "underlyingAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oTokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "TVL",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalDeposits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrowsBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "availableLiquidity",
              "type": "uint256"
            }
          ],
          "internalType": "struct IOpenSkyDataProvider.ReserveData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getSupplyBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        }
      ],
      "name": "getSupplyRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        }
      ],
      "name": "getTVL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        }
      ],
      "name": "getTotalBorrowBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc7aa8fd6c528afcb4516c03015e5c6e17e73b74594fc325a3c586081f917bc77",
  "receipt": {
    "to": null,
    "from": "0x218513C58A4781a5B88De6230caA29aBCe2Ccd75",
    "contractAddress": "0x08ef5BAAD41Dccf6b8f5bF742bD882a34634492b",
    "transactionIndex": 57,
    "gasUsed": "1679458",
    "logsBloom": "0x
    "blockHash": "0xa29fb2edb91643a03ae22cf4c544e555100b3213857112fd4105db041014bf4c",
    "transactionHash": "0xc7aa8fd6c528afcb4516c03015e5c6e17e73b74594fc325a3c586081f917bc77",
    "logs": [
      {
        "transactionIndex": 57,
        "blockNumber": 29179458,
        "transactionHash": "0xc7aa8fd6c528afcb4516c03015e5c6e17e73b74594fc325a3c586081f917bc77",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000218513c58a4781a5b88de6230caa29abce2ccd75",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x000000000000000000000000000000000000000000000000010c7f9dec6f26ae00000000000000000000000000000000000000000000000023b28ff88a561a020000000000000000000000000000000000000000000005c63df5b89eed6fce3700000000000000000000000000000000000000000000000022a6105a9de6f3540000000000000000000000000000000000000000000005c63f02383cd9def4e5",
        "logIndex": 282,
        "blockHash": "0xa29fb2edb91643a03ae22cf4c544e555100b3213857112fd4105db041014bf4c"
      }
    ],
    "blockNumber": 29179458,
    "cumulativeGasUsed": "8794562",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x57528D98c3a8762c78f4D02a89CBc0Eaf77FD322"
  ],
  "solcInputHash": "903b6e0b7a82abf3fd1d087256b904a8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IOpenSkySettings\",\"name\":\"settings\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"SETTINGS\",\"outputs\":[{\"internalType\":\"contract IOpenSkySettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"getAvailableLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAmountToAdd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAmountToRemove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountToAdd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountToRemove\",\"type\":\"uint256\"}],\"name\":\"getBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"borrowBegin\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowDuration\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowOverdueTime\",\"type\":\"uint40\"},{\"internalType\":\"uint128\",\"name\":\"borrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"interestPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"internalType\":\"enum DataTypes.LoanStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct IOpenSkyDataProvider.LoanData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"getLoanSupplyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLoansByUser\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"getMoneyMarketSupplyRateInstant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"getReserveData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"TVL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowsBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"}],\"internalType\":\"struct IOpenSkyDataProvider.ReserveData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getSupplyBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"getSupplyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"getTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"getTotalBorrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/misc/OpenSkyDataProvider.sol\":\"OpenSkyDataProvider\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyCollateralPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IOpenSkyPriceOracle\\n * @author OpenSky Labs\\n * @notice Defines the basic interface for a price oracle.\\n **/\\ninterface IOpenSkyCollateralPriceOracle {\\n    /**\\n     * @dev Emitted on updatePrice()\\n     * @param nftAddress The address of the NFT\\n     * @param price The price of the NFT\\n     * @param timestamp The timestamp when the price happened\\n     * @param roundId The round id\\n     **/\\n    event UpdatePrice(address indexed nftAddress, uint256 price, uint256 timestamp, uint256 roundId);\\n\\n    /**\\n     * @notice Returns the NFT price in ETH\\n     * @param reserveId The id of the reserve\\n     * @param nftAddress The address of the NFT\\n     * @param tokenId The id of the NFT\\n     * @return The price of the NFT\\n     **/\\n    function getPrice(uint256 reserveId, address nftAddress, uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Updates the floor price of the NFT collection\\n     * @param nftAddress The address of the NFT\\n     * @param price The price of the NFT\\n     * @param timestamp The timestamp when the price happened\\n     **/\\n    function updatePrice(address nftAddress, uint256 price, uint256 timestamp) external;\\n}\\n\",\"keccak256\":\"0xc4cd7555250705042d2fe4e9942817167dc8692bdc8b1e028bc3026b6ab4b7bc\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../libraries/types/DataTypes.sol';\\n\\ninterface IOpenSkyDataProvider {\\n    struct ReserveData {\\n        uint256 reserveId;\\n        address underlyingAsset;\\n        address oTokenAddress;\\n        uint256 TVL;\\n        uint256 totalDeposits;\\n        uint256 totalBorrowsBalance;\\n        uint256 supplyRate;\\n        uint256 borrowRate;\\n        uint256 availableLiquidity;\\n    }\\n\\n    struct LoanData {\\n        uint256 loanId;\\n        uint256 totalBorrows;\\n        uint256 borrowBalance;\\n        uint40 borrowBegin;\\n        uint40 borrowDuration;\\n        uint40 borrowOverdueTime;\\n        uint128 borrowRate;\\n        uint128 interestPerSecond;\\n        uint256 penalty;\\n        DataTypes.LoanStatus status;\\n    }\\n\\n    function getReserveData(uint256 reserveId) external view returns (ReserveData memory);\\n\\n    function getTVL(uint256 reserveId) external view returns (uint256);\\n\\n    function getTotalBorrowBalance(uint256 reserveId) external view returns (uint256);\\n\\n    function getAvailableLiquidity(uint256 reserveId) external view returns (uint256);\\n\\n    function getSupplyRate(uint256 reserveId) external view returns (uint256);\\n\\n    function getLoanSupplyRate(uint256 reserveId) external view returns (uint256);\\n\\n    function getBorrowRate(\\n        uint256 reserveId,\\n        uint256 liquidityAmountToAdd,\\n        uint256 liquidityAmountToRemove,\\n        uint256 borrowAmountToAdd,\\n        uint256 borrowAmountToRemove\\n    ) external view returns (uint256);\\n\\n    function getMoneyMarketSupplyRateInstant(uint256 reserveId) external view returns (uint256);\\n\\n    function getSupplyBalance(uint256 reserveId, address account) external view returns (uint256);\\n\\n    function getLoanData(uint256 loanId) external view returns (LoanData memory);\\n\\n    function getLoansByUser(address account) external view returns (uint256[] memory arr);\\n}\\n\",\"keccak256\":\"0xed6e7e68c995d02081acc11b1ccbf5645df20cdf9dd37fcadaecb618c36ed50a\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IOpenSkyInterestRateStrategy\\n * @author OpenSky Labs\\n * @notice Interface for the calculation of the interest rates\\n */\\ninterface IOpenSkyInterestRateStrategy {\\n    /**\\n     * @dev Emitted on setBaseBorrowRate()\\n     * @param reserveId The id of the reserve\\n     * @param baseRate The base rate has been set\\n     **/\\n    event SetBaseBorrowRate(\\n        uint256 indexed reserveId,\\n        uint256 indexed baseRate\\n    );\\n\\n    /**\\n     * @notice Returns the borrow rate of a reserve\\n     * @param reserveId The id of the reserve\\n     * @param totalDeposits The total deposits amount of the reserve\\n     * @param totalBorrows The total borrows amount of the reserve\\n     * @return The borrow rate, expressed in ray\\n     **/\\n    function getBorrowRate(uint256 reserveId, uint256 totalDeposits, uint256 totalBorrows) external view returns (uint256); \\n}\\n\",\"keccak256\":\"0xfa5ff4ed50344092c9559d27b9318c0804c03ff464b6989fc2743d5e61b42252\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyLoan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '../libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IOpenSkyLoan\\n * @author OpenSky Labs\\n * @notice Defines the basic interface for OpenSkyLoan.  This loan NFT is composable and can be used in other DeFi protocols \\n **/\\ninterface IOpenSkyLoan is IERC721 {\\n\\n    /**\\n     * @dev Emitted on mint()\\n     * @param tokenId The ID of the loan\\n     * @param recipient The address that will receive the loan NFT\\n     **/\\n    event Mint(uint256 indexed tokenId, address indexed recipient);\\n\\n    /**\\n     * @dev Emitted on end()\\n     * @param tokenId The ID of the loan\\n     * @param onBehalfOf The address the repayer is repaying for\\n     * @param repayer The address of the user initiating the repayment()\\n     **/\\n    event End(uint256 indexed tokenId, address indexed onBehalfOf, address indexed repayer);\\n\\n    /**\\n     * @dev Emitted on startLiquidation()\\n     * @param tokenId The ID of the loan\\n     * @param liquidator The address of the liquidator\\n     **/\\n    event StartLiquidation(uint256 indexed tokenId, address indexed liquidator);\\n\\n    /**\\n     * @dev Emitted on endLiquidation()\\n     * @param tokenId The ID of the loan\\n     * @param liquidator The address of the liquidator\\n     **/\\n    event EndLiquidation(uint256 indexed tokenId, address indexed liquidator);\\n\\n    /**\\n     * @dev Emitted on updateStatus()\\n     * @param tokenId The ID of the loan\\n     * @param status The status of loan\\n     **/\\n    event UpdateStatus(uint256 indexed tokenId, DataTypes.LoanStatus indexed status);\\n\\n    /**\\n     * @dev Emitted on flashClaim()\\n     * @param receiver The address of the flash loan receiver contract\\n     * @param sender The address that will receive tokens\\n     * @param nftAddress The address of the collateralized NFT\\n     * @param tokenId The ID of collateralized NFT\\n     **/\\n    event FlashClaim(address indexed receiver, address sender, address indexed nftAddress, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted on claimERC20Airdrop()\\n     * @param token The address of the ERC20 token\\n     * @param to The address that will receive the ERC20 tokens\\n     * @param amount The amount of the tokens\\n     **/\\n    event ClaimERC20Airdrop(address indexed token, address indexed to, uint256 amount);\\n\\n    /**\\n     * @dev Emitted on claimERC721Airdrop()\\n     * @param token The address of ERC721 token\\n     * @param to The address that will receive the eRC721 tokens\\n     * @param ids The ID of the token\\n     **/\\n    event ClaimERC721Airdrop(address indexed token, address indexed to, uint256[] ids);\\n\\n    /**\\n     * @dev Emitted on claimERC1155Airdrop()\\n     * @param token The address of the ERC1155 token\\n     * @param to The address that will receive the ERC1155 tokens\\n     * @param ids The ID of the token\\n     * @param amounts The amount of the tokens\\n     * @param data packed params to pass to the receiver as extra information\\n     **/\\n    event ClaimERC1155Airdrop(address indexed token, address indexed to, uint256[] ids, uint256[] amounts, bytes data);\\n\\n    /**\\n     * @notice Mints a loan NFT to user\\n     * @param reserveId The ID of the reserve\\n     * @param borrower The address of the borrower\\n     * @param nftAddress The contract address of the collateralized NFT \\n     * @param nftTokenId The ID of the collateralized NFT\\n     * @param amount The amount of the loan\\n     * @param duration The duration of the loan\\n     * @param borrowRate The borrow rate of the loan\\n     * @return loanId and loan data\\n     **/\\n    function mint(\\n        uint256 reserveId,\\n        address borrower,\\n        address nftAddress,\\n        uint256 nftTokenId,\\n        uint256 amount,\\n        uint256 duration,\\n        uint256 borrowRate\\n    ) external returns (uint256 loanId, DataTypes.LoanData memory loan);\\n\\n    /**\\n     * @notice Starts liquidation of the loan in default\\n     * @param tokenId The ID of the defaulted loan\\n     **/\\n    function startLiquidation(uint256 tokenId) external;\\n\\n    /**\\n     * @notice Ends liquidation of a loan that is fully settled\\n     * @param tokenId The ID of the loan\\n     **/\\n    function endLiquidation(uint256 tokenId) external;\\n\\n    /**\\n     * @notice Terminates the loan\\n     * @param tokenId The ID of the loan\\n     * @param onBehalfOf The address the repayer is repaying for\\n     * @param repayer The address of the repayer\\n     **/\\n    function end(uint256 tokenId, address onBehalfOf, address repayer) external;\\n    \\n    /**\\n     * @notice Returns the loan data\\n     * @param tokenId The ID of the loan\\n     * @return The details of the loan\\n     **/\\n    function getLoanData(uint256 tokenId) external view returns (DataTypes.LoanData calldata);\\n\\n    /**\\n     * @notice Returns the status of a loan\\n     * @param tokenId The ID of the loan\\n     * @return The status of the loan\\n     **/\\n    function getStatus(uint256 tokenId) external view returns (DataTypes.LoanStatus);\\n\\n    /**\\n     * @notice Returns the borrow interest of the loan\\n     * @param tokenId The ID of the loan\\n     * @return The borrow interest of the loan\\n     **/\\n    function getBorrowInterest(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the borrow balance of a loan, including borrow interest\\n     * @param tokenId The ID of the loan\\n     * @return The borrow balance of the loan\\n     **/\\n    function getBorrowBalance(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the penalty fee of the loan\\n     * @param tokenId The ID of the loan\\n     * @return The penalty fee of the loan\\n     **/\\n    function getPenalty(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the ID of the loan\\n     * @param nftAddress The address of the collateralized NFT\\n     * @param tokenId The ID of the collateralized NFT\\n     * @return The ID of the loan\\n     **/\\n    function getLoanId(address nftAddress, uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Allows smart contracts to access the collateralized NFT within one transaction,\\n     * as long as the amount taken plus a fee is returned\\n     * @dev IMPORTANT There are security concerns for developers of flash loan receiver contracts that must be carefully considered\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashClaimReceiver interface\\n     * @param loanIds The ID of loan being flash-borrowed\\n     * @param params packed params to pass to the receiver as extra information\\n     **/\\n    function flashClaim(\\n        address receiverAddress,\\n        uint256[] calldata loanIds,\\n        bytes calldata params\\n    ) external;\\n\\n    /**\\n     * @notice Claim the ERC20 token which has been airdropped to the loan contract\\n     * @param token The address of the airdropped token\\n     * @param to The address which will receive ERC20 token\\n     * @param amount The amount of the ERC20 token\\n     **/\\n    function claimERC20Airdrop(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Claim the ERC721 token which has been airdropped to the loan contract\\n     * @param token The address of the airdropped token\\n     * @param to The address which will receive the ERC721 token\\n     * @param ids The ID of the ERC721 token\\n     **/\\n    function claimERC721Airdrop(\\n        address token,\\n        address to,\\n        uint256[] calldata ids\\n    ) external;\\n\\n    /**\\n     * @notice Claim the ERC1155 token which has been airdropped to the loan contract\\n     * @param token The address of the airdropped token\\n     * @param to The address which will receive the ERC1155 tokens\\n     * @param ids The ID of the ERC1155 token\\n     * @param amounts The amount of the ERC1155 tokens\\n     * @param data packed params to pass to the receiver as extra information\\n     **/\\n    function claimERC1155Airdrop(\\n        address token,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4d0669835c9c7fbe82344de1f78a578092a26282a146ef69b350ce52a543fb8d\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyMoneyMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IOpenSkyMoneyMarket {\\n\\n    function depositCall(address asset, uint256 amount) external;\\n\\n    function withdrawCall(address asset, uint256 amount, address to) external;\\n\\n    function getBalance(address asset, address account) external view returns (uint256);\\n\\n    function getSupplyRate(address asset) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x9c3b3b2e6aeb86e7a5239e1f2f3c194ecac4c500e46cf73073139e1606757729\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyOToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IOpenSkyOToken is IERC20 {\\n    function mint(\\n        address account,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n\\n    function burn(\\n        address account,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n    \\n    function mintToTreasury(uint256 amount, uint256 index) external;\\n  \\n    function deposit(uint256 amount) external;\\n  \\n    function withdraw(uint256 amount, address to) external;\\n    \\n    function scaledBalanceOf(address account) external view returns (uint256);\\n  \\n    function principleBalanceOf(address account) external view returns (uint256);\\n  \\n    function scaledTotalSupply() external view returns (uint256);\\n  \\n    function principleTotalSupply() external view returns (uint256);\\n\\n    function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x999edb49f9e71bc8f73e1230f353d9c432154c1ca910a63c93c3148e5933778e\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IOpenSkyPool\\n * @author OpenSky Labs\\n * @notice Defines the basic interface for an OpenSky Pool.\\n **/\\n\\ninterface IOpenSkyPool {\\n    /*\\n     * @dev Emitted on create()\\n     * @param reserveId The ID of the reserve\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param oTokenAddress The address of the oToken\\n     * @param name The name to use for oToken\\n     * @param symbol The symbol to use for oToken\\n     */\\n    event Create(uint256 indexed reserveId, address indexed underlyingAsset, address indexed oTokenAddress, string name, string symbol);\\n\\n    /*\\n     * @dev Emitted on setTreasuryFactor()\\n     * @param reserveId The ID of the reserve\\n     * @param factor The new treasury factor of the reserve\\n     */\\n    event SetTreasuryFactor(uint256 indexed reserveId, uint256 factor);\\n\\n    /*\\n     * @dev Emitted on setInterestModelAddress()\\n     * @param reserveId The ID of the reserve\\n     * @param interestModelAddress The address of the interest model contract\\n     */\\n    event SetInterestModelAddress(uint256 indexed reserveId, address interestModelAddress);\\n\\n    /*\\n     * @dev Emitted on openMoneyMarket()\\n     * @param reserveId The ID of the reserve\\n     */\\n    event OpenMoneyMarket(uint256 reserveId);\\n\\n    /*\\n     * @dev Emitted on closeMoneyMarket()\\n     * @param reserveId The ID of the reserve\\n     */\\n    event CloseMoneyMarket(uint256 reserveId);\\n\\n    /*\\n     * @dev Emitted on deposit()\\n     * @param reserveId The ID of the reserve\\n     * @param user The address that will receive the oTokens\\n     * @param amount The amount of ETH to be deposited\\n     * @param referralCode integrators are assigned a referral code and can potentially receive rewards\\n     * 0 if the action is executed directly by the user, without any intermediaries\\n     */\\n    event Deposit(uint256 indexed reserveId, address indexed user, uint256 amount, uint256 indexed referralCode);\\n\\n    /*\\n     * @dev Emitted on withdraw()\\n     * @param reserveId The ID of the reserve\\n     * @param user The address initiating the withdrawal(), owner of oTokens\\n     * @param amount The amount to be withdrawn\\n     */\\n    event Withdraw(uint256 indexed reserveId, address indexed user, uint256 amount);\\n\\n    /*\\n     * @dev Emitted on borrow()\\n     * @param reserveId The ID of the reserve\\n     * @param user The address initiating the withdrawal(), owner of oTokens\\n     * @param onBehalfOf The address that will receive the ETH and the loan NFT\\n     * @param loanId The loan ID\\n     */\\n    event Borrow(\\n        uint256 indexed reserveId,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 indexed loanId\\n    );\\n\\n    /*\\n     * @dev Emitted on repay()\\n     * @param reserveId The ID of the reserve\\n     * @param repayer The address initiating the repayment()\\n     * @param onBehalfOf The address that will receive the pledged NFT\\n     * @param loanId The ID of the loan\\n     * @param repayAmount The borrow balance of the loan when it was repaid\\n     * @param penalty The penalty of the loan for either early or overdue repayment\\n     */\\n    event Repay(\\n        uint256 indexed reserveId,\\n        address repayer,\\n        address indexed onBehalfOf,\\n        uint256 indexed loanId,\\n        uint256 repayAmount,\\n        uint256 penalty\\n    );\\n\\n    /*\\n     * @dev Emitted on extend()\\n     * @param reserveId The ID of the reserve\\n     * @param user  The address initiating the extend()\\n     * @param oldLoanId The ID of the old loan\\n     * @param newLoanId The ID of the new loan\\n     */\\n    event Extend(uint256 indexed reserveId, address indexed user, uint256 indexed oldLoanId, uint256 newLoanId);\\n\\n    /*\\n     * @dev Emitted on startLiquidation()\\n     * @param reserveId The ID of the reserve\\n     * @param loanId The ID of the loan\\n     * @param nftAddress The address of the NFT used as collateral\\n     * @param tokenId The ID of the NFT used as collateral\\n     * @param operator The address initiating startLiquidation()\\n     */\\n    event StartLiquidation(\\n        uint256 indexed reserveId,\\n        uint256 indexed loanId,\\n        address indexed nftAddress,\\n        uint256 tokenId,\\n        address operator\\n    );\\n\\n    /*\\n     * @dev Emitted on endLiquidation()\\n     * @param reserveId The ID of the reserve\\n     * @param loanId The ID of the loan\\n     * @param nftAddress The address of the NFT used as collateral\\n     * @param tokenId The ID of the NFT used as collateral\\n     * @param operator\\n     * @param repayAmount The amount used to repay, must be equal to or greater than the borrowBalance, excess part will be shared by all the lenders\\n     * @param borrowBalance The borrow balance of the loan\\n     */\\n    event EndLiquidation(\\n        uint256 indexed reserveId,\\n        uint256 indexed loanId,\\n        address indexed nftAddress,\\n        uint256 tokenId,\\n        address operator,\\n        uint256 repayAmount,\\n        uint256 borrowBalance\\n    );\\n\\n    /**\\n     * @notice Creates a reserve\\n     * @dev Only callable by the pool admin role\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param name The name of the oToken\\n     * @param symbol The symbol for the oToken\\n     **/\\n    function create(address underlyingAsset, string memory name, string memory symbol) external;\\n\\n    /**\\n     * @notice Updates the treasury factor of a reserve\\n     * @dev Only callable by the pool admin role\\n     * @param reserveId The ID of the reserve\\n     * @param factor The new treasury factor of the reserve\\n     **/\\n    function setTreasuryFactor(uint256 reserveId, uint256 factor) external;\\n\\n    /**\\n     * @notice Updates the interest model address of a reserve\\n     * @dev Only callable by the pool admin role\\n     * @param reserveId The ID of the reserve\\n     * @param interestModelAddress The new address of the interest model contract\\n     **/\\n    function setInterestModelAddress(uint256 reserveId, address interestModelAddress) external;\\n\\n    /**\\n     * @notice Open the money market\\n     * @dev Only callable by the emergency admin role\\n     * @param reserveId The ID of the reserve\\n     **/\\n    function openMoneyMarket(uint256 reserveId) external;\\n\\n    /**\\n     * @notice Close the money market\\n     * @dev Only callable by the emergency admin role\\n     * @param reserveId The ID of the reserve\\n     **/\\n    function closeMoneyMarket(uint256 reserveId) external;\\n\\n    /**\\n     * @dev Deposits ETH into the reserve.\\n     * @param reserveId The ID of the reserve\\n     * @param referralCode integrators are assigned a referral code and can potentially receive rewards\\n     **/\\n    function deposit(uint256 reserveId, uint256 amount, address onBehalfOf, uint256 referralCode) external;\\n\\n    /**\\n     * @dev withdraws the ETH from reserve.\\n     * @param reserveId The ID of the reserve\\n     * @param amount amount of oETH to withdraw and receive native ETH\\n     **/\\n    function withdraw(uint256 reserveId, uint256 amount, address onBehalfOf) external;\\n\\n    /**\\n     * @dev Borrows ETH from reserve using an NFT as collateral and will receive a loan NFT as receipt.\\n     * @param reserveId The ID of the reserve\\n     * @param amount amount of ETH user will borrow\\n     * @param duration The desired duration of the loan\\n     * @param nftAddress The collateral NFT address\\n     * @param tokenId The ID of the NFT\\n     * @param onBehalfOf address of the user who will receive ETH and loan NFT.\\n     **/\\n    function borrow(\\n        uint256 reserveId,\\n        uint256 amount,\\n        uint256 duration,\\n        address nftAddress,\\n        uint256 tokenId,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Repays a loan, as a result the corresponding loan NFT owner will receive the collateralized NFT.\\n     * @param loanId The ID of the loan the user will repay\\n     */\\n    function repay(uint256 loanId) external returns (uint256);\\n\\n    /**\\n     * @dev Extends creates a new loan and terminates the old loan.\\n     * @param loanId The loan ID to extend\\n     * @param amount The amount of ERC20 token the user will borrow in the new loan\\n     * @param duration The selected duration the user will borrow in the new loan\\n     * @param onBehalfOf The address will borrow in the new loan\\n     **/\\n    function extend(\\n        uint256 loanId,\\n        uint256 amount,\\n        uint256 duration,\\n        address onBehalfOf\\n    ) external returns (uint256, uint256);\\n\\n    /**\\n     * @dev Starts liquidation for a loan when it's in LIQUIDATABLE status\\n     * @param loanId The ID of the loan which will be liquidated\\n     */\\n    function startLiquidation(uint256 loanId) external;\\n\\n    /**\\n     * @dev Completes liquidation for a loan which will be repaid.\\n     * @param loanId The ID of the liquidated loan that will be repaid.\\n     * @param amount The amount of the token that will be repaid.\\n     */\\n    function endLiquidation(uint256 loanId, uint256 amount) external;\\n\\n    /**\\n     * @dev Returns the state of the reserve\\n     * @param reserveId The ID of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getReserveData(uint256 reserveId) external view returns (DataTypes.ReserveData memory);\\n\\n    /**\\n     * @dev Returns the normalized income of the reserve\\n     * @param reserveId The ID of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(uint256 reserveId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the remaining liquidity of the reserve\\n     * @param reserveId The ID of the reserve\\n     * @return The reserve's withdrawable balance\\n     */\\n    function getAvailableLiquidity(uint256 reserveId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the instantaneous borrow limit value of a special NFT\\n     * @param nftAddress The address of the NFT\\n     * @param tokenId The ID of the NFT\\n     * @return The NFT's borrow limit\\n     */\\n    function getBorrowLimitByOracle(\\n        uint256 reserveId,\\n        address nftAddress,\\n        uint256 tokenId\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the sum of all users borrow balances include borrow interest accrued\\n     * @param reserveId The ID of the reserve\\n     * @return The total borrow balance of the reserve\\n     */\\n    function getTotalBorrowBalance(uint256 reserveId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns TVL (total value locked) of the reserve.\\n     * @param reserveId The ID of the reserve\\n     * @return The reserve's TVL\\n     */\\n    function getTVL(uint256 reserveId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x974b21114e5e77e5d788d81ec195be9967302b71b9d15336da9c3bfd7c6ff546\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkySettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\nimport '../libraries/types/DataTypes.sol';\\n\\ninterface IOpenSkySettings {\\n    event InitPoolAddress(address operator, address address_);\\n    event InitLoanAddress(address operator, address address_);\\n    event InitVaultFactoryAddress(address operator, address address_);\\n    event InitIncentiveControllerAddress(address operator, address address_);\\n    event InitWETHGatewayAddress(address operator, address address_);\\n    event InitPunkGatewayAddress(address operator, address address_);\\n\\n    event AddToWhitelist(address operator, uint256 reserveId, address nft);\\n    event RemoveFromWhitelist(address operator, uint256 reserveId, address nft);\\n    event SetReserveFactor(address operator, uint256 factor);\\n    event SetPrepaymentFeeFactor(address operator, uint256 factor);\\n    event SetOverdueLoanFeeFactor(address operator, uint256 factor);\\n    event SetMoneyMarketAddress(address operator, address address_);\\n    event SetTreasuryAddress(address operator, address address_);\\n    event SetDaoVaultAddress(address operator, address address_);\\n    event SetACLManagerAddress(address operator, address address_);\\n    event SetLoanDescriptorAddress(address operator, address address_);\\n    event SetNftPriceOracleAddress(address operator, address address_);\\n    event SetInterestRateStrategyAddress(address operator, address address_);\\n    event AddLiquidator(address operator, address address_);\\n    event RemoveLiquidator(address operator, address address_);\\n\\n    function poolAddress() external view returns (address);\\n\\n    function loanAddress() external view returns (address);\\n\\n    function vaultFactoryAddress() external view returns (address);\\n\\n    function incentiveControllerAddress() external view returns (address);\\n\\n    function wethGatewayAddress() external view returns (address);\\n\\n    function punkGatewayAddress() external view returns (address);\\n\\n    function inWhitelist(uint256 reserveId, address nft) external view returns (bool);\\n\\n    function getWhitelistDetail(uint256 reserveId, address nft) external view returns (DataTypes.WhitelistInfo memory);\\n\\n    function reserveFactor() external view returns (uint256); // treasury ratio\\n\\n    function MAX_RESERVE_FACTOR() external view returns (uint256);\\n\\n    function prepaymentFeeFactor() external view returns (uint256);\\n\\n    function overdueLoanFeeFactor() external view returns (uint256);\\n\\n    function moneyMarketAddress() external view returns (address);\\n\\n    function treasuryAddress() external view returns (address);\\n\\n    function daoVaultAddress() external view returns (address);\\n\\n    function ACLManagerAddress() external view returns (address);\\n\\n    function loanDescriptorAddress() external view returns (address);\\n\\n    function nftPriceOracleAddress() external view returns (address);\\n\\n    function interestRateStrategyAddress() external view returns (address);\\n    \\n    function isLiquidator(address liquidator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd6d7e8c1b7751de0f65d85310c1e2d8274b74c7e3dc74920ea2546b65d8f659f\",\"license\":\"MIT\"},\"contracts/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    \\n    // common\\n    string public constant MATH_MULTIPLICATION_OVERFLOW = '100';\\n    string public constant MATH_ADDITION_OVERFLOW = '101';\\n    string public constant MATH_DIVISION_BY_ZERO = '102';\\n\\n    string public constant ETH_TRANSFER_FAILED = '110';\\n    string public constant RECEIVE_NOT_ALLOWED = '111';\\n    string public constant FALLBACK_NOT_ALLOWED = '112';\\n\\n    // settings/acl\\n    string public constant ACL_ONLY_GOVERNANCE_CAN_CALL = '200';\\n    string public constant ACL_ONLY_EMERGENCY_ADMIN_CAN_CALL = '201';\\n    string public constant ACL_ONLY_POOL_ADMIN_CAN_CALL = '202';\\n    string public constant ACL_ONLY_LIQUIDATOR_CAN_CALL = '203';\\n    string public constant ACL_ONLY_LIQUIDATION_OPERATOR_CAN_CALL = '204';\\n    string public constant ACL_ONLY_AIRDROP_OPERATOR_CAN_CALL = '205';\\n    string public constant ACL_ONLY_POOL_CAN_CALL = '206';\\n\\n    // lending & borrowing \\n    // reserve\\n    string public constant RESERVE_DOES_NOT_EXIST = '300';\\n    string public constant RESERVE_LIQUIDITY_INSUFFICIENT = '301';\\n    string public constant RESERVE_INDEX_OVERFLOW = '302';\\n    string public constant RESERVE_SWITCH_MONEY_MARKET_STATE_ERROR = '303';\\n\\n    // token\\n    string public constant AMOUNT_SCALED_IS_ZERO = '310';\\n    string public constant AMOUNT_TRANSFER_OWERFLOW = '311';\\n    \\n    //deposit\\n    string public constant DEPOSIT_AMOUNT_SHOULD_BE_BIGGER_THAN_ZERO = '320';\\n\\n    // withdraw\\n    string public constant WITHDRAW_AMOUNT_NOT_ALLOWED = '321';\\n    string public constant WITHDRAW_LIQUIDITY_NOT_SUFFIENCE = '322';\\n\\n    // borrow\\n    string public constant BORROW_DURATION_NOT_ALLOWED = '330';\\n    string public constant BORROW_AMOUNT_EXCEED_BORROW_LIMIT = '331';\\n    string public constant NFT_ADDRESS_IS_NOT_IN_WHITELIST = '332';\\n\\n    // repay\\n    string public constant REPAY_STATUS_ERROR = '333';\\n    string public constant REPAY_AMOUNT_NOT_ENOUGH = '334';\\n\\n    // extend\\n    string public constant EXTEND_STATUS_ERROR = '335';\\n    string public constant EXTEND_MSG_VALUE_ERROR = '336';\\n\\n    // liquidate\\n    string public constant START_LIQUIDATION_STATUS_ERROR = '360';\\n    string public constant END_LIQUIDATION_STATUS_ERROR = '361';\\n    string public constant END_LIQUIDATION_AMOUNT_ERROR = '362';\\n\\n    // loan\\n    string public constant LOAN_DOES_NOT_EXIST = '400';\\n    string public constant LOAN_SET_STATUS_ERROR = '401';\\n    string public constant LOAN_REPAYER_IS_NOT_OWNER = '402';\\n    string public constant LOAN_LIQUIDATING_STATUS_CAN_NOT_BE_UPDATED = '403';\\n    string public constant LOAN_CALLER_IS_NOT_OWNER = '404';\\n    string public constant LOAN_COLLATERAL_NFT_CAN_NOT_BE_CLAIMED = '405';\\n\\n    string public constant FLASH_CLAIM_EXECUTOR_ERROR = '410';\\n    string public constant FLASH_CLAIM_STATUS_ERROR = '411';\\n\\n    // money market\\n    string public constant MONEY_MARKET_DEPOSIT_AMOUNT_ALLOWED = '500';\\n    string public constant MONEY_MARKET_WITHDRAW_AMOUNT_NOT_ALLOWED = '501';\\n    string public constant MONEY_MARKET_APPROVAL_FAILED = '502';\\n    string public constant MONEY_MARKET_DELEGATE_CALL_ERROR = '503';\\n\\n    // price oracle\\n    string public constant PRICE_ORACLE_ROUND_INTERVAL_CAN_NOT_BE_0 = '600';\\n    string public constant PRICE_ORACLE_HAS_NO_PRICE_FEED = '601';\\n    string public constant PRICE_ORACLE_INCORRECT_TIMESTAMP = '602';\\n    string public constant PRICE_ORACLE_PARAMS_ERROR = '603';\\n}\\n\",\"keccak256\":\"0x0f14f9c13c9fe6dcca2379449db7e6f1a20c236113548432d0351bacc71df76f\",\"license\":\"MIT\"},\"contracts/libraries/math/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport {WadRayMath} from './WadRayMath.sol';\\n\\nlibrary MathUtils {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n     * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate linearly accumulated during the timeDelta, in ray\\n     **/\\n\\n    function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp) external view returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 timeDifference = block.timestamp.sub(uint256(lastUpdateTimestamp));\\n\\n        return (rate.mul(timeDifference) / SECONDS_PER_YEAR).add(WadRayMath.ray());\\n    }\\n\\n    function calculateBorrowInterest(\\n        uint256 borrowRate,\\n        uint256 amount,\\n        uint256 duration\\n    ) external pure returns (uint256) {\\n        return amount.rayMul(borrowRate.rayMul(duration).rayDiv(SECONDS_PER_YEAR));\\n    }\\n\\n    function calculateBorrowInterestPerSecond(uint256 borrowRate, uint256 amount) external pure returns (uint256) {\\n        return amount.rayMul(borrowRate).rayDiv(SECONDS_PER_YEAR);\\n    }\\n\\n    function calculateLoanSupplyRate(\\n        uint256 availableLiquidity,\\n        uint256 totalBorrows,\\n        uint256 borrowRate\\n    ) external pure returns (uint256 loanSupplyRate, uint256 utilizationRate) {\\n        utilizationRate = (totalBorrows == 0 && availableLiquidity == 0)\\n            ? 0\\n            : totalBorrows.rayDiv(availableLiquidity.add(totalBorrows));\\n        loanSupplyRate = utilizationRate.rayMul(borrowRate);\\n    }\\n}\\n\",\"keccak256\":\"0x7885d4c4b6562f8591dacff0c550916530e362574b8ed229c86594a6edfc3c42\",\"license\":\"MIT\"},\"contracts/libraries/math/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {Errors} from '../helpers/Errors.sol';\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @return One ray, 1e27\\n     **/\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    /**\\n     * @return One wad, 1e18\\n     **/\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e27/2\\n     **/\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e18/2\\n     **/\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     **/\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfWAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * b + halfWAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     **/\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * WAD + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfRAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * b + halfRAY) / RAY;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, truncating the mantissa\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMulTruncate(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return (a * b) / RAY;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * RAY + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, truncating the mantissa\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDivTruncate(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        return (a * RAY) / b;\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @param a Ray\\n     * @return a casted to wad, rounded half up to the nearest wad\\n     **/\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n        uint256 result = halfRatio + a;\\n        require(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\\n\\n        return result / WAD_RAY_RATIO;\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @param a Wad\\n     * @return a converted in ray\\n     **/\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        uint256 result = a * WAD_RAY_RATIO;\\n        require(result / WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4bf6b9a00c5e9938726d173f11b56de8edd92e17593e4dfa61a3ce7336756c6b\",\"license\":\"MIT\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        uint256 reserveId;\\n        address underlyingAsset;\\n        address oTokenAddress;\\n        address moneyMarketAddress;\\n        uint128 lastSupplyIndex;\\n        uint256 borrowingInterestPerSecond;\\n        uint256 lastMoneyMarketBalance;\\n        uint40 lastUpdateTimestamp;\\n        uint256 totalBorrows;\\n        address interestModelAddress;\\n        uint256 treasuryFactor;\\n        bool isMoneyMarketOn;\\n    }\\n\\n    struct LoanData {\\n        uint256 reserveId;\\n        address nftAddress;\\n        uint256 tokenId;\\n        address borrower;\\n        uint256 amount;\\n        uint128 borrowRate;\\n        uint128 interestPerSecond;\\n        uint40 borrowBegin;\\n        uint40 borrowDuration;\\n        uint40 borrowOverdueTime;\\n        uint40 liquidatableTime;\\n        uint40 extendableTime;\\n        uint40 borrowEnd;\\n        LoanStatus status;\\n    }\\n\\n    enum LoanStatus {\\n        NONE,\\n        BORROWING,\\n        EXTENDABLE,\\n        OVERDUE,\\n        LIQUIDATABLE,\\n        LIQUIDATING\\n    }\\n\\n    struct WhitelistInfo {\\n        bool enabled;\\n        string name;\\n        string symbol;\\n        uint256 LTV;\\n        uint256 minBorrowDuration;\\n        uint256 maxBorrowDuration;\\n        uint256 extendableDuration;\\n        uint256 overdueDuration;\\n    }\\n}\\n\",\"keccak256\":\"0x487cd1dedb3146da46144bc8f0e5b970c5173efa8c19700184b8207c1ee3fc55\",\"license\":\"MIT\"},\"contracts/misc/OpenSkyDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\n\\nimport '../interfaces/IOpenSkySettings.sol';\\nimport '../interfaces/IOpenSkyMoneyMarket.sol';\\nimport '../interfaces/IOpenSkyDataProvider.sol';\\nimport '../interfaces/IOpenSkyPool.sol';\\nimport '../interfaces/IOpenSkyOToken.sol';\\nimport '../interfaces/IOpenSkyCollateralPriceOracle.sol';\\nimport '../interfaces/IOpenSkyLoan.sol';\\nimport '../interfaces/IOpenSkyInterestRateStrategy.sol';\\n\\nimport '../libraries/math/WadRayMath.sol';\\nimport '../libraries/math/MathUtils.sol';\\nimport '../libraries/types/DataTypes.sol';\\n\\ncontract OpenSkyDataProvider is IOpenSkyDataProvider {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    IOpenSkySettings public immutable SETTINGS;\\n\\n    constructor(IOpenSkySettings settings) {\\n        SETTINGS = settings;\\n    }\\n\\n    function getReserveData(uint256 reserveId) external view override returns (ReserveData memory) {\\n        IOpenSkyPool pool = IOpenSkyPool(SETTINGS.poolAddress());\\n        DataTypes.ReserveData memory reserve = pool.getReserveData(reserveId);\\n        IERC20 oToken = IERC20(reserve.oTokenAddress);\\n        return\\n            ReserveData({\\n                reserveId: reserveId,\\n                underlyingAsset: reserve.underlyingAsset,\\n                oTokenAddress: reserve.oTokenAddress,\\n                TVL: pool.getTVL(reserveId),\\n                totalDeposits: oToken.totalSupply(),\\n                totalBorrowsBalance: pool.getTotalBorrowBalance(reserveId),\\n                supplyRate: getSupplyRate(reserveId),\\n                borrowRate: getBorrowRate(reserveId, 0, 0, 0, 0),\\n                availableLiquidity: pool.getAvailableLiquidity(reserveId)\\n            });\\n    }\\n\\n    function getTVL(uint256 reserveId) public view override returns (uint256) {\\n        return IOpenSkyPool(SETTINGS.poolAddress()).getTVL(reserveId);\\n    }\\n\\n    function getTotalBorrowBalance(uint256 reserveId) public view override returns (uint256) {\\n        return IOpenSkyPool(SETTINGS.poolAddress()).getTotalBorrowBalance(reserveId);\\n    }\\n\\n    function getAvailableLiquidity(uint256 reserveId) public view override returns (uint256) {\\n        return IOpenSkyPool(SETTINGS.poolAddress()).getAvailableLiquidity(reserveId);\\n    }\\n\\n    function getSupplyRate(uint256 reserveId) public view override returns (uint256) {\\n        DataTypes.ReserveData memory reserve = IOpenSkyPool(SETTINGS.poolAddress()).getReserveData(reserveId);\\n\\n        uint256 tvl = IOpenSkyOToken(reserve.oTokenAddress).principleTotalSupply();\\n\\n        (uint256 loanSupplyRate, uint256 utilizationRate) = MathUtils.calculateLoanSupplyRate(\\n            tvl,\\n            reserve.totalBorrows,\\n            getBorrowRate(reserveId, 0, 0, 0, 0)\\n        );\\n\\n        return\\n            getLoanSupplyRate(reserveId).add(\\n                WadRayMath.ray().sub(utilizationRate).rayMul(getMoneyMarketSupplyRateInstant(reserveId))\\n            );\\n    }\\n\\n    function getLoanSupplyRate(uint256 reserveId) public view override returns (uint256) {\\n        DataTypes.ReserveData memory reserve = IOpenSkyPool(SETTINGS.poolAddress()).getReserveData(reserveId);\\n        uint256 tvl = IOpenSkyOToken(reserve.oTokenAddress).principleTotalSupply();\\n        (uint256 loanSupplyRate, ) = MathUtils.calculateLoanSupplyRate(\\n            tvl,\\n            reserve.totalBorrows,\\n            getBorrowRate(reserveId, 0, 0, 0, 0)\\n        );\\n        return loanSupplyRate;\\n    }\\n\\n    function getMoneyMarketSupplyRateInstant(uint256 reserveId) public view override returns (uint256) {\\n        DataTypes.ReserveData memory reserve = IOpenSkyPool(SETTINGS.poolAddress()).getReserveData(reserveId);\\n        if (reserve.isMoneyMarketOn) {\\n            return IOpenSkyMoneyMarket(reserve.moneyMarketAddress).getSupplyRate(reserve.underlyingAsset);\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function getBorrowRate(\\n        uint256 reserveId,\\n        uint256 liquidityAmountToAdd,\\n        uint256 liquidityAmountToRemove,\\n        uint256 borrowAmountToAdd,\\n        uint256 borrowAmountToRemove\\n    ) public view override returns (uint256) {\\n        DataTypes.ReserveData memory reserve = IOpenSkyPool(SETTINGS.poolAddress()).getReserveData(reserveId);\\n        return\\n            IOpenSkyInterestRateStrategy(reserve.interestModelAddress).getBorrowRate(\\n                reserveId,\\n                IOpenSkyOToken(reserve.oTokenAddress).totalSupply().add(liquidityAmountToAdd).sub(\\n                    liquidityAmountToRemove\\n                ),\\n                reserve.totalBorrows.add(borrowAmountToAdd).sub(borrowAmountToRemove)\\n            );\\n    }\\n\\n    function getSupplyBalance(uint256 reserveId, address account) external view override returns (uint256) {\\n        DataTypes.ReserveData memory reserve = IOpenSkyPool(SETTINGS.poolAddress()).getReserveData(reserveId);\\n        return IERC20(reserve.oTokenAddress).balanceOf(account);\\n    }\\n\\n    function getLoanData(uint256 loanId) external view override returns (LoanData memory) {\\n        IOpenSkyLoan loanNFT = IOpenSkyLoan(SETTINGS.loanAddress());\\n        DataTypes.LoanData memory loan = loanNFT.getLoanData(loanId);\\n        return\\n            LoanData({\\n                loanId: loanId,\\n                totalBorrows: loan.amount,\\n                borrowBalance: loanNFT.getBorrowBalance(loanId),\\n                borrowBegin: loan.borrowBegin,\\n                borrowDuration: loan.borrowDuration,\\n                borrowOverdueTime: loan.borrowOverdueTime,\\n                borrowRate: loan.borrowRate,\\n                interestPerSecond: loan.interestPerSecond,\\n                penalty: loanNFT.getPenalty(loanId),\\n                status: loan.status\\n            });\\n    }\\n\\n    function getLoansByUser(address account) external view override returns (uint256[] memory) {\\n        IERC721Enumerable loanNFT = IERC721Enumerable(SETTINGS.loanAddress());\\n        uint256 amount = loanNFT.balanceOf(account);\\n        uint256[] memory ids = new uint256[](amount > 0 ? amount : 0);\\n        if (amount > 0) {\\n            for (uint256 i = 0; i < amount; ++i) {\\n                ids[i] = loanNFT.tokenOfOwnerByIndex(account, i);\\n            }\\n        }\\n        return ids;\\n    }\\n}\\n\",\"keccak256\":\"0x37f8fff3399e5d1bec391dfcea783f12633e3f6484726ecedfd05815eebe1e70\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051611e49380380611e4983398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051611d716100d86000396000818161020b0152818161026f015281816103670152818161041a015281816106200152818161083901528181610a1201528181610ce90152818161100c015281816111720152818161137a01526115ba0152611d716000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806391541e051161007157806391541e051461015857806395f76652146101e0578063a08a09d3146101f3578063ade97ab514610206578063d955759d14610245578063ee4cc84c1461025857600080fd5b80630aad628b146100b95780632235ae0f146100df5780633e842090146100f2578063423989e4146101125780635bdf347714610125578063622fe39f14610138575b600080fd5b6100cc6100c7366004611744565b61026b565b6040519081526020015b60405180910390f35b6100cc6100ed366004611744565b610363565b610105610100366004611775565b610414565b6040516100d69190611792565b6100cc6101203660046117d6565b61061b565b6100cc610133366004611744565b610834565b61014b610146366004611744565b6109b9565b6040516100d69190611849565b61016b610166366004611744565b610c84565b60408051825181526020808401516001600160a01b0390811691830191909152838301511691810191909152606080830151908201526080808301519082015260a0808301519082015260c0808301519082015260e080830151908201526101009182015191810191909152610120016100d6565b6100cc6101ee366004611911565b611007565b6100cc610201366004611744565b61116d565b61022d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100d6565b6100cc610253366004611744565b611375565b6100cc610266366004611744565b6115b6565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ef9190611951565b6001600160a01b0316630aad628b836040518263ffffffff1660e01b815260040161031c91815260200190565b602060405180830381865afa158015610339573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035d919061196e565b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e79190611951565b6001600160a01b0316632235ae0f836040518263ffffffff1660e01b815260040161031c91815260200190565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166335bc868a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610476573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049a9190611951565b6040516370a0823160e01b81526001600160a01b0385811660048301529192506000918316906370a0823190602401602060405180830381865afa1580156104e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050a919061196e565b9050600080821161051c57600061051e565b815b67ffffffffffffffff81111561053657610536611987565b60405190808252806020026020018201604052801561055f578160200160208202803683370190505b50905081156106135760005b8281101561061157604051632f745c5960e01b81526001600160a01b03878116600483015260248201839052851690632f745c5990604401602060405180830381865afa1580156105c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e4919061196e565b8282815181106105f6576105f661199d565b602090810291909101015261060a816119c9565b905061056b565b505b949350505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa15801561067c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a09190611951565b6001600160a01b03166391541e05886040518263ffffffff1660e01b81526004016106cd91815260200190565b61018060405180830381865afa1580156106eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070f9190611a8a565b90508061012001516001600160a01b03166315f24053886107a08861079a8b87604001516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610770573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610794919061196e565b90611667565b90611673565b6107bc8761079a8a88610100015161166790919063ffffffff16565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401602060405180830381865afa158015610805573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610829919061196e565b979650505050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610895573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b99190611951565b6001600160a01b03166391541e05846040518263ffffffff1660e01b81526004016108e691815260200190565b61018060405180830381865afa158015610904573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109289190611a8a565b9050806101600151156109b05760608101516020820151604051636b5441a960e01b81526001600160a01b039182166004820152911690636b5441a990602401602060405180830381865afa158015610985573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a9919061196e565b9392505050565b50600092915050565b610a0e6040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290529061012082015290565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166335bc868a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a929190611951565b60405163622fe39f60e01b8152600481018590529091506000906001600160a01b0383169063622fe39f906024016101c060405180830381865afa158015610ade573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b029190611b62565b905060405180610140016040528085815260200182608001518152602001836001600160a01b0316636b52b365876040518263ffffffff1660e01b8152600401610b4e91815260200190565b602060405180830381865afa158015610b6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8f919061196e565b81526020018260e0015164ffffffffff16815260200182610100015164ffffffffff16815260200182610120015164ffffffffff1681526020018260a001516001600160801b031681526020018260c001516001600160801b03168152602001836001600160a01b03166396e59682876040518263ffffffff1660e01b8152600401610c1d91815260200190565b602060405180830381865afa158015610c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5e919061196e565b8152602001826101a001516005811115610c7a57610c7a611811565b9052949350505050565b610ce56040518061012001604052806000815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d699190611951565b6040516391541e0560e01b8152600481018590529091506000906001600160a01b038316906391541e059060240161018060405180830381865afa158015610db5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd99190611a8a565b905060008160400151905060405180610120016040528086815260200183602001516001600160a01b0316815260200183604001516001600160a01b03168152602001846001600160a01b031663ee4cc84c886040518263ffffffff1660e01b8152600401610e4a91815260200190565b602060405180830381865afa158015610e67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8b919061196e565b8152602001826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ece573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef2919061196e565b8152602001846001600160a01b0316632235ae0f886040518263ffffffff1660e01b8152600401610f2591815260200190565b602060405180830381865afa158015610f42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f66919061196e565b8152602001610f7487611375565b8152602001610f888760008060008061061b565b8152602001846001600160a01b0316630aad628b886040518263ffffffff1660e01b8152600401610fbb91815260200190565b602060405180830381865afa158015610fd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffc919061196e565b905295945050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015611068573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108c9190611951565b6001600160a01b03166391541e05856040518263ffffffff1660e01b81526004016110b991815260200190565b61018060405180830381865afa1580156110d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fb9190611a8a565b60408082015190516370a0823160e01b81526001600160a01b0386811660048301529293509116906370a0823190602401602060405180830381865afa158015611149573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610613919061196e565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f29190611951565b6001600160a01b03166391541e05846040518263ffffffff1660e01b815260040161121f91815260200190565b61018060405180830381865afa15801561123d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112619190611a8a565b9050600081604001516001600160a01b0316631f07e4df6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cb919061196e565b90506000734648bb80A8d14C8777321F1b4cbb1B016696102d63db53f388838561010001516112ff8960008060008061061b565b6040516001600160e01b031960e086901b1681526004810193909352602483019190915260448201526064016040805180830381865af4158015611347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136b9190611c52565b5095945050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fa9190611951565b6001600160a01b03166391541e05846040518263ffffffff1660e01b815260040161142791815260200190565b61018060405180830381865afa158015611445573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114699190611a8a565b9050600081604001516001600160a01b0316631f07e4df6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d3919061196e565b9050600080734648bb80A8d14C8777321F1b4cbb1B016696102d63db53f388848661010001516115088a60008060008061061b565b6040516001600160e01b031960e086901b1681526004810193909352602483019190915260448201526064016040805180830381865af4158015611550573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115749190611c52565b915091506115ac6115a361158788610834565b61159d846b033b2e3c9fd0803ce800000061079a565b9061167f565b6107948861116d565b9695505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015611616573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163a9190611951565b6001600160a01b031663ee4cc84c836040518263ffffffff1660e01b815260040161031c91815260200190565b60006109a98284611c76565b60006109a98284611c8e565b600082158061168c575081155b156116995750600061035d565b816116b160026b033b2e3c9fd0803ce8000000611ca5565b6116bd90600019611c8e565b6116c79190611ca5565b8311156040518060400160405280600381526020016203130360ec1b8152509061170d5760405162461bcd60e51b81526004016117049190611cc7565b60405180910390fd5b506b033b2e3c9fd0803ce8000000611726600282611ca5565b6117308486611d1c565b61173a9190611c76565b6109a99190611ca5565b60006020828403121561175657600080fd5b5035919050565b6001600160a01b038116811461177257600080fd5b50565b60006020828403121561178757600080fd5b81356109a98161175d565b6020808252825182820181905260009190848201906040850190845b818110156117ca578351835292840192918401916001016117ae565b50909695505050505050565b600080600080600060a086880312156117ee57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b634e487b7160e01b600052602160045260246000fd5b6006811061184557634e487b7160e01b600052602160045260246000fd5b9052565b6000610140820190508251825260208301516020830152604083015160408301526060830151611882606084018264ffffffffff169052565b50608083015161189b608084018264ffffffffff169052565b5060a08301516118b460a084018264ffffffffff169052565b5060c08301516118cf60c08401826001600160801b03169052565b5060e08301516118ea60e08401826001600160801b03169052565b5061010083810151908301526101208084015161190982850182611827565b505092915050565b6000806040838503121561192457600080fd5b8235915060208301356119368161175d565b809150509250929050565b805161194c8161175d565b919050565b60006020828403121561196357600080fd5b81516109a98161175d565b60006020828403121561198057600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156119dd576119dd6119b3565b5060010190565b604051610180810167ffffffffffffffff81118282101715611a1657634e487b7160e01b600052604160045260246000fd5b60405290565b6040516101c0810167ffffffffffffffff81118282101715611a1657634e487b7160e01b600052604160045260246000fd5b80516001600160801b038116811461194c57600080fd5b805164ffffffffff8116811461194c57600080fd5b8051801515811461194c57600080fd5b60006101808284031215611a9d57600080fd5b611aa56119e4565b82518152611ab560208401611941565b6020820152611ac660408401611941565b6040820152611ad760608401611941565b6060820152611ae860808401611a4e565b608082015260a083015160a082015260c083015160c0820152611b0d60e08401611a65565b60e08201526101008381015190820152610120611b2b818501611941565b908201526101408381015190820152610160611b48818501611a7a565b908201529392505050565b80516006811061194c57600080fd5b60006101c08284031215611b7557600080fd5b611b7d611a1c565b82518152611b8d60208401611941565b602082015260408301516040820152611ba860608401611941565b606082015260808301516080820152611bc360a08401611a4e565b60a0820152611bd460c08401611a4e565b60c0820152611be560e08401611a65565b60e0820152610100611bf8818501611a65565b90820152610120611c0a848201611a65565b90820152610140611c1c848201611a65565b90820152610160611c2e848201611a65565b90820152610180611c40848201611a65565b908201526101a0611b48848201611b53565b60008060408385031215611c6557600080fd5b505080516020909101519092909150565b60008219821115611c8957611c896119b3565b500190565b600082821015611ca057611ca06119b3565b500390565b600082611cc257634e487b7160e01b600052601260045260246000fd5b500490565b600060208083528351808285015260005b81811015611cf457858101830151858201604001528201611cd8565b81811115611d06576000604083870101525b50601f01601f1916929092016040019392505050565b6000816000190483118215151615611d3657611d366119b3565b50029056fea2646970667358221220b50ef7d3f11ae8d16e1c06bc4649d36aaf786b9faa7186eb237e2f290bc1313a64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c806391541e051161007157806391541e051461015857806395f76652146101e0578063a08a09d3146101f3578063ade97ab514610206578063d955759d14610245578063ee4cc84c1461025857600080fd5b80630aad628b146100b95780632235ae0f146100df5780633e842090146100f2578063423989e4146101125780635bdf347714610125578063622fe39f14610138575b600080fd5b6100cc6100c7366004611744565b61026b565b6040519081526020015b60405180910390f35b6100cc6100ed366004611744565b610363565b610105610100366004611775565b610414565b6040516100d69190611792565b6100cc6101203660046117d6565b61061b565b6100cc610133366004611744565b610834565b61014b610146366004611744565b6109b9565b6040516100d69190611849565b61016b610166366004611744565b610c84565b60408051825181526020808401516001600160a01b0390811691830191909152838301511691810191909152606080830151908201526080808301519082015260a0808301519082015260c0808301519082015260e080830151908201526101009182015191810191909152610120016100d6565b6100cc6101ee366004611911565b611007565b6100cc610201366004611744565b61116d565b61022d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100d6565b6100cc610253366004611744565b611375565b6100cc610266366004611744565b6115b6565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ef9190611951565b6001600160a01b0316630aad628b836040518263ffffffff1660e01b815260040161031c91815260200190565b602060405180830381865afa158015610339573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035d919061196e565b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e79190611951565b6001600160a01b0316632235ae0f836040518263ffffffff1660e01b815260040161031c91815260200190565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166335bc868a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610476573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049a9190611951565b6040516370a0823160e01b81526001600160a01b0385811660048301529192506000918316906370a0823190602401602060405180830381865afa1580156104e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050a919061196e565b9050600080821161051c57600061051e565b815b67ffffffffffffffff81111561053657610536611987565b60405190808252806020026020018201604052801561055f578160200160208202803683370190505b50905081156106135760005b8281101561061157604051632f745c5960e01b81526001600160a01b03878116600483015260248201839052851690632f745c5990604401602060405180830381865afa1580156105c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e4919061196e565b8282815181106105f6576105f661199d565b602090810291909101015261060a816119c9565b905061056b565b505b949350505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa15801561067c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a09190611951565b6001600160a01b03166391541e05886040518263ffffffff1660e01b81526004016106cd91815260200190565b61018060405180830381865afa1580156106eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070f9190611a8a565b90508061012001516001600160a01b03166315f24053886107a08861079a8b87604001516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610770573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610794919061196e565b90611667565b90611673565b6107bc8761079a8a88610100015161166790919063ffffffff16565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401602060405180830381865afa158015610805573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610829919061196e565b979650505050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610895573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b99190611951565b6001600160a01b03166391541e05846040518263ffffffff1660e01b81526004016108e691815260200190565b61018060405180830381865afa158015610904573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109289190611a8a565b9050806101600151156109b05760608101516020820151604051636b5441a960e01b81526001600160a01b039182166004820152911690636b5441a990602401602060405180830381865afa158015610985573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a9919061196e565b9392505050565b50600092915050565b610a0e6040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290529061012082015290565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166335bc868a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a929190611951565b60405163622fe39f60e01b8152600481018590529091506000906001600160a01b0383169063622fe39f906024016101c060405180830381865afa158015610ade573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b029190611b62565b905060405180610140016040528085815260200182608001518152602001836001600160a01b0316636b52b365876040518263ffffffff1660e01b8152600401610b4e91815260200190565b602060405180830381865afa158015610b6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8f919061196e565b81526020018260e0015164ffffffffff16815260200182610100015164ffffffffff16815260200182610120015164ffffffffff1681526020018260a001516001600160801b031681526020018260c001516001600160801b03168152602001836001600160a01b03166396e59682876040518263ffffffff1660e01b8152600401610c1d91815260200190565b602060405180830381865afa158015610c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5e919061196e565b8152602001826101a001516005811115610c7a57610c7a611811565b9052949350505050565b610ce56040518061012001604052806000815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d699190611951565b6040516391541e0560e01b8152600481018590529091506000906001600160a01b038316906391541e059060240161018060405180830381865afa158015610db5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd99190611a8a565b905060008160400151905060405180610120016040528086815260200183602001516001600160a01b0316815260200183604001516001600160a01b03168152602001846001600160a01b031663ee4cc84c886040518263ffffffff1660e01b8152600401610e4a91815260200190565b602060405180830381865afa158015610e67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8b919061196e565b8152602001826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ece573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef2919061196e565b8152602001846001600160a01b0316632235ae0f886040518263ffffffff1660e01b8152600401610f2591815260200190565b602060405180830381865afa158015610f42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f66919061196e565b8152602001610f7487611375565b8152602001610f888760008060008061061b565b8152602001846001600160a01b0316630aad628b886040518263ffffffff1660e01b8152600401610fbb91815260200190565b602060405180830381865afa158015610fd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffc919061196e565b905295945050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015611068573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108c9190611951565b6001600160a01b03166391541e05856040518263ffffffff1660e01b81526004016110b991815260200190565b61018060405180830381865afa1580156110d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fb9190611a8a565b60408082015190516370a0823160e01b81526001600160a01b0386811660048301529293509116906370a0823190602401602060405180830381865afa158015611149573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610613919061196e565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f29190611951565b6001600160a01b03166391541e05846040518263ffffffff1660e01b815260040161121f91815260200190565b61018060405180830381865afa15801561123d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112619190611a8a565b9050600081604001516001600160a01b0316631f07e4df6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cb919061196e565b9050600073__$f742c272e27921345744ab659e4a493fb5$__63db53f388838561010001516112ff8960008060008061061b565b6040516001600160e01b031960e086901b1681526004810193909352602483019190915260448201526064016040805180830381865af4158015611347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136b9190611c52565b5095945050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fa9190611951565b6001600160a01b03166391541e05846040518263ffffffff1660e01b815260040161142791815260200190565b61018060405180830381865afa158015611445573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114699190611a8a565b9050600081604001516001600160a01b0316631f07e4df6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d3919061196e565b905060008073__$f742c272e27921345744ab659e4a493fb5$__63db53f388848661010001516115088a60008060008061061b565b6040516001600160e01b031960e086901b1681526004810193909352602483019190915260448201526064016040805180830381865af4158015611550573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115749190611c52565b915091506115ac6115a361158788610834565b61159d846b033b2e3c9fd0803ce800000061079a565b9061167f565b6107948861116d565b9695505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015611616573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163a9190611951565b6001600160a01b031663ee4cc84c836040518263ffffffff1660e01b815260040161031c91815260200190565b60006109a98284611c76565b60006109a98284611c8e565b600082158061168c575081155b156116995750600061035d565b816116b160026b033b2e3c9fd0803ce8000000611ca5565b6116bd90600019611c8e565b6116c79190611ca5565b8311156040518060400160405280600381526020016203130360ec1b8152509061170d5760405162461bcd60e51b81526004016117049190611cc7565b60405180910390fd5b506b033b2e3c9fd0803ce8000000611726600282611ca5565b6117308486611d1c565b61173a9190611c76565b6109a99190611ca5565b60006020828403121561175657600080fd5b5035919050565b6001600160a01b038116811461177257600080fd5b50565b60006020828403121561178757600080fd5b81356109a98161175d565b6020808252825182820181905260009190848201906040850190845b818110156117ca578351835292840192918401916001016117ae565b50909695505050505050565b600080600080600060a086880312156117ee57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b634e487b7160e01b600052602160045260246000fd5b6006811061184557634e487b7160e01b600052602160045260246000fd5b9052565b6000610140820190508251825260208301516020830152604083015160408301526060830151611882606084018264ffffffffff169052565b50608083015161189b608084018264ffffffffff169052565b5060a08301516118b460a084018264ffffffffff169052565b5060c08301516118cf60c08401826001600160801b03169052565b5060e08301516118ea60e08401826001600160801b03169052565b5061010083810151908301526101208084015161190982850182611827565b505092915050565b6000806040838503121561192457600080fd5b8235915060208301356119368161175d565b809150509250929050565b805161194c8161175d565b919050565b60006020828403121561196357600080fd5b81516109a98161175d565b60006020828403121561198057600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156119dd576119dd6119b3565b5060010190565b604051610180810167ffffffffffffffff81118282101715611a1657634e487b7160e01b600052604160045260246000fd5b60405290565b6040516101c0810167ffffffffffffffff81118282101715611a1657634e487b7160e01b600052604160045260246000fd5b80516001600160801b038116811461194c57600080fd5b805164ffffffffff8116811461194c57600080fd5b8051801515811461194c57600080fd5b60006101808284031215611a9d57600080fd5b611aa56119e4565b82518152611ab560208401611941565b6020820152611ac660408401611941565b6040820152611ad760608401611941565b6060820152611ae860808401611a4e565b608082015260a083015160a082015260c083015160c0820152611b0d60e08401611a65565b60e08201526101008381015190820152610120611b2b818501611941565b908201526101408381015190820152610160611b48818501611a7a565b908201529392505050565b80516006811061194c57600080fd5b60006101c08284031215611b7557600080fd5b611b7d611a1c565b82518152611b8d60208401611941565b602082015260408301516040820152611ba860608401611941565b606082015260808301516080820152611bc360a08401611a4e565b60a0820152611bd460c08401611a4e565b60c0820152611be560e08401611a65565b60e0820152610100611bf8818501611a65565b90820152610120611c0a848201611a65565b90820152610140611c1c848201611a65565b90820152610160611c2e848201611a65565b90820152610180611c40848201611a65565b908201526101a0611b48848201611b53565b60008060408385031215611c6557600080fd5b505080516020909101519092909150565b60008219821115611c8957611c896119b3565b500190565b600082821015611ca057611ca06119b3565b500390565b600082611cc257634e487b7160e01b600052601260045260246000fd5b500490565b600060208083528351808285015260005b81811015611cf457858101830151858201604001528201611cd8565b81811115611d06576000604083870101525b50601f01601f1916929092016040019392505050565b6000816000190483118215151615611d3657611d366119b3565b50029056fea2646970667358221220b50ef7d3f11ae8d16e1c06bc4649d36aaf786b9faa7186eb237e2f290bc1313a64736f6c634300080a0033",
  "libraries": {
    "DataTypes": "0x9397220974f87949543b079A022A88B9b41a8380",
    "MathUtils": "0x4648bb80A8d14C8777321F1b4cbb1B016696102d"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}