{
  "address": "0x6722AD2dcb411bC122C320368232A474E95a6501",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "SETTINGS_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "BESPOKE_SETTINGS_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "WETH_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "CancelAllOffers",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "nonces",
          "type": "uint256[]"
        }
      ],
      "name": "CancelMultipleOffers",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ClaimERC1155Airdrop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimERC20Airdrop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "ClaimERC721Airdrop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "FlashClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "Foreclose",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "RepayETH",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "offerHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLoanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "Rollover",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "offerHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "TakeBorrowOffer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "offerHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "TakeBorrowOfferETH",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "offerHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "TakeLendOffer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "BESPOKE_SETTINGS",
      "outputs": [
        {
          "internalType": "contract IOpenSkyBespokeSettings",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTERFACE_ID_ERC1155",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTERFACE_ID_ERC721",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SETTINGS",
      "outputs": [
        {
          "internalType": "contract IOpenSkySettings",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minNonce_",
          "type": "uint256"
        }
      ],
      "name": "cancelAllBorrowOffersForSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "offerNonces",
          "type": "uint256[]"
        }
      ],
      "name": "cancelMultipleBorrowOffers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "claimERC1155Airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimERC20Airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "claimERC721Airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyTokenTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiverAddress",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "loanIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "flashClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "foreclose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "getBorrowBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "getBorrowInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "getLoanData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "reserveId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "borrowRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "interestPerSecond",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint40",
              "name": "borrowDuration",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowBegin",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowOverdueTime",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "liquidatableTime",
              "type": "uint40"
            },
            {
              "internalType": "address",
              "name": "lender",
              "type": "address"
            },
            {
              "internalType": "enum BespokeTypes.LoanStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct BespokeTypes.LoanData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "getPenalty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "getStatus",
      "outputs": [
        {
          "internalType": "enum BespokeTypes.LoanStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "isValidNonce",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "repayETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum BespokeTypes.OfferType",
              "name": "offerType",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "isProrated",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "reserveId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "borrowAmountMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowAmountMax",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "borrowDurationMin",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowDurationMax",
              "type": "uint40"
            },
            {
              "internalType": "uint128",
              "name": "borrowRate",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BespokeTypes.Offer",
          "name": "offerData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "supplyAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supplyDuration",
          "type": "uint256"
        }
      ],
      "name": "takeBorrowOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum BespokeTypes.OfferType",
              "name": "offerType",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "isProrated",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "reserveId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "borrowAmountMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowAmountMax",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "borrowDurationMin",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowDurationMax",
              "type": "uint40"
            },
            {
              "internalType": "uint128",
              "name": "borrowRate",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BespokeTypes.Offer",
          "name": "offerData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "supplyAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supplyDuration",
          "type": "uint256"
        }
      ],
      "name": "takeBorrowOfferETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum BespokeTypes.OfferType",
              "name": "offerType",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "isProrated",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "reserveId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "borrowAmountMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowAmountMax",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "borrowDurationMin",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowDurationMax",
              "type": "uint40"
            },
            {
              "internalType": "uint128",
              "name": "borrowRate",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BespokeTypes.Offer",
          "name": "offerData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowDuration",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "takeLendOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x398d5604dc6960d17a3149befafc0bc17f57763eb97a62c3e333f6147c8c0fa6",
  "receipt": {
    "to": null,
    "from": "0x218513C58A4781a5B88De6230caA29aBCe2Ccd75",
    "contractAddress": "0x6722AD2dcb411bC122C320368232A474E95a6501",
    "transactionIndex": 7,
    "gasUsed": "3650628",
    "logsBloom": "0x
    "blockHash": "0x9d386e3ead0e9e41c5b2914849d84600151d60820491e916655f61ae4f636a6e",
    "transactionHash": "0x398d5604dc6960d17a3149befafc0bc17f57763eb97a62c3e333f6147c8c0fa6",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 7940852,
        "transactionHash": "0x398d5604dc6960d17a3149befafc0bc17f57763eb97a62c3e333f6147c8c0fa6",
        "address": "0x6722AD2dcb411bC122C320368232A474E95a6501",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000218513c58a4781a5b88de6230caa29abce2ccd75"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x9d386e3ead0e9e41c5b2914849d84600151d60820491e916655f61ae4f636a6e"
      }
    ],
    "blockNumber": 7940852,
    "cumulativeGasUsed": "4029530",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x90499A6848275e03E8De6608980F4e7d32fbaF6F",
    "0x904FBC1bE06f46f1b31B4f64D16a0E2fa3eaD215",
    "0x2b4393A035BC4144bE02953d6C8bcF010aBe1cA0"
  ],
  "solcInputHash": "5caf662bc955a4ee3750eea04101df77",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"SETTINGS_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"BESPOKE_SETTINGS_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"WETH_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"CancelAllOffers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nonces\",\"type\":\"uint256[]\"}],\"name\":\"CancelMultipleOffers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ClaimERC1155Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimERC20Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"ClaimERC721Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"FlashClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"Foreclose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"RepayETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"offerHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLoanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Rollover\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"offerHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"TakeBorrowOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"offerHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"TakeBorrowOfferETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"offerHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"TakeLendOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"BESPOKE_SETTINGS\",\"outputs\":[{\"internalType\":\"contract IOpenSkyBespokeSettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTERFACE_ID_ERC1155\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTERFACE_ID_ERC721\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SETTINGS\",\"outputs\":[{\"internalType\":\"contract IOpenSkySettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minNonce_\",\"type\":\"uint256\"}],\"name\":\"cancelAllBorrowOffersForSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"offerNonces\",\"type\":\"uint256[]\"}],\"name\":\"cancelMultipleBorrowOffers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"claimERC1155Airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimERC20Airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"claimERC721Airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"loanIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"flashClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"foreclose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getBorrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getBorrowInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"borrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"interestPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"borrowDuration\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowBegin\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowOverdueTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"liquidatableTime\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"enum BespokeTypes.LoanStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct BespokeTypes.LoanData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum BespokeTypes.LoanStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"isValidNonce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"repayETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum BespokeTypes.OfferType\",\"name\":\"offerType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isProrated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountMax\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"borrowDurationMin\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowDurationMax\",\"type\":\"uint40\"},{\"internalType\":\"uint128\",\"name\":\"borrowRate\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct BespokeTypes.Offer\",\"name\":\"offerData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"supplyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyDuration\",\"type\":\"uint256\"}],\"name\":\"takeBorrowOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum BespokeTypes.OfferType\",\"name\":\"offerType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isProrated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountMax\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"borrowDurationMin\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowDurationMax\",\"type\":\"uint40\"},{\"internalType\":\"uint128\",\"name\":\"borrowRate\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct BespokeTypes.Offer\",\"name\":\"offerData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"supplyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyDuration\",\"type\":\"uint256\"}],\"name\":\"takeBorrowOfferETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum BespokeTypes.OfferType\",\"name\":\"offerType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isProrated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountMax\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"borrowDurationMin\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowDurationMax\",\"type\":\"uint40\"},{\"internalType\":\"uint128\",\"name\":\"borrowRate\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct BespokeTypes.Offer\",\"name\":\"offerData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowDuration\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"takeLendOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"cancelAllBorrowOffersForSender(uint256)\":{\"params\":{\"minNonce_\":\"minimum user nonce\"}},\"cancelMultipleBorrowOffers(uint256[])\":{\"params\":{\"offerNonces\":\"array of borrowOffer nonces\"}},\"claimERC1155Airdrop(address,address,uint256[],uint256[],bytes)\":{\"params\":{\"amounts\":\"The amount of the ERC1155 tokens\",\"data\":\"packed params to pass to the receiver as extra information*\",\"ids\":\"The ID of the ERC1155 token\",\"to\":\"The address which will receive the ERC1155 tokens\",\"token\":\"The address of the airdropped token\"}},\"claimERC20Airdrop(address,address,uint256)\":{\"params\":{\"amount\":\"The amount of the ERC20 token*\",\"to\":\"The address which will receive ERC20 token\",\"token\":\"The address of the airdropped token\"}},\"claimERC721Airdrop(address,address,uint256[])\":{\"params\":{\"ids\":\"The ID of the ERC721 token*\",\"to\":\"The address which will receive the ERC721 token\",\"token\":\"The address of the airdropped token\"}},\"emergencyTokenTransfer(address,address,uint256)\":{\"details\":\"transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\",\"params\":{\"amount\":\"amount to send\",\"to\":\"recipient of the transfer\",\"token\":\"token to transfer\"}},\"flashClaim(address,uint256[],bytes)\":{\"details\":\"IMPORTANT There are security concerns for developers of flash loan receiver contracts that must be carefully considered\",\"params\":{\"loanIds\":\"The ID of loan being flash-borrowed\",\"params\":\"packed params to pass to the receiver as extra information*\",\"receiverAddress\":\"The address of the contract receiving the funds, implementing IFlashClaimReceiver interface\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pause pool for emergency case, can only be called by emergency admin.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpause pool for emergency case, can only be called by emergency admin.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelAllBorrowOffersForSender(uint256)\":{\"notice\":\"Cancel all pending offers for a sender\"},\"claimERC1155Airdrop(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Claim the ERC1155 token which has been airdropped to the loan contract\"},\"claimERC20Airdrop(address,address,uint256)\":{\"notice\":\"Claim the ERC20 token which has been airdropped to the loan contract\"},\"claimERC721Airdrop(address,address,uint256[])\":{\"notice\":\"Claim the ERC721 token which has been airdropped to the loan contract\"},\"flashClaim(address,uint256[],bytes)\":{\"notice\":\"Allows smart contracts to access the collateralized NFT within one transaction, as long as the amount taken plus a fee is returned\"},\"foreclose(uint256)\":{\"notice\":\"anyone can trigger but only OpenSkyLendNFT owner can receive collateral\"},\"repay(uint256)\":{\"notice\":\"Only OpenSkyBorrowNFT owner can repayOnly OpenSkyLendNFT owner can recieve the paymentThis function is not pausable for safety\"},\"repayETH(uint256)\":{\"notice\":\"Only OpenSkyBorrowNFT owner can repayOnly OpenSkyLendNFT owner can recieve the paymentThis function is not pausable for safety\"},\"takeBorrowOffer((uint8,bool,uint256,address,uint256,uint256,address,uint256,uint256,uint40,uint40,uint128,address,uint256,uint256,address,bytes,uint8,bytes32,bytes32),uint256,uint256)\":{\"notice\":\"take an borrowing offer using ERC20 include WETH\"},\"takeBorrowOfferETH((uint8,bool,uint256,address,uint256,uint256,address,uint256,uint256,uint40,uint40,uint128,address,uint256,uint256,address,bytes,uint8,bytes32,bytes32),uint256,uint256)\":{\"notice\":\"Take a borrow offer. Only for WETH reserve.Consider using taker's oWETH balance first, then ETH if oWETH is not enoughBorrower will receive WETH\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bespokemarket/OpenSkyBespokeMarket.sol\":\"OpenSkyBespokeMarket\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x14351164423eade7f2dbac5ca9ab8aeded8694f3b2d7a9e0114a2b3b6558198d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x4716e860c041e651d2f2486399ea5a49ec12289e91b2763991a2fa3a70772acf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x8c578d9e30c8f2bb7ac01d108766df87d42b73d4d3638f01d494a894fe7c1f4b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x8756c97d6004b1ae21517a013bdec72fbf30be7852afb2f395871d280131b250\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/bespokemarket/OpenSkyBespokeMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol';\\n\\nimport '../dependencies/weth/IWETH.sol';\\nimport '../libraries/math/PercentageMath.sol';\\nimport '../libraries/math/WadRayMath.sol';\\nimport '../libraries/math/MathUtils.sol';\\n\\nimport './libraries/BespokeTypes.sol';\\nimport './libraries/BespokeLogic.sol';\\nimport './libraries/RolloverLogic.sol';\\nimport './libraries/TakeLendOfferLogic.sol';\\nimport './libraries/TakeBorrowOfferLogic.sol';\\nimport './libraries/ForecloseLogic.sol';\\nimport './libraries/RepayLogic.sol';\\n\\nimport '../interfaces/IOpenSkySettings.sol';\\nimport '../interfaces/IOpenSkyPool.sol';\\nimport '../interfaces/IACLManager.sol';\\nimport '../interfaces/IOpenSkyFlashClaimReceiver.sol';\\n\\nimport './interfaces/IOpenSkyBespokeLoanNFT.sol';\\nimport './interfaces/IOpenSkyBespokeMarket.sol';\\nimport './interfaces/IOpenSkyBespokeSettings.sol';\\n\\nimport 'hardhat/console.sol';\\n\\ncontract OpenSkyBespokeMarket is\\n    Context,\\n    Ownable,\\n    Pausable,\\n    ReentrancyGuard,\\n    ERC721Holder,\\n    ERC1155Holder,\\n    IOpenSkyBespokeMarket\\n{\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using PercentageMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    IOpenSkySettings public immutable SETTINGS;\\n    IOpenSkyBespokeSettings public immutable BESPOKE_SETTINGS;\\n    IWETH public immutable WETH;\\n\\n    // ERC721 interfaceID\\n    bytes4 public constant INTERFACE_ID_ERC721 = 0x80ac58cd;\\n    // ERC1155 interfaceID\\n    bytes4 public constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    mapping(address => uint256) public minNonce;\\n    mapping(address => mapping(uint256 => bool)) private _nonce;\\n\\n    BespokeTypes.Counter private _loanIdTracker;\\n\\n    //    uint256 private _loanIdTracker;\\n    mapping(uint256 => BespokeTypes.LoanData) internal _loans;\\n\\n    // nft address=> amount\\n    // tracking how many loans are ongoing for an nft\\n    // mapping(address => uint256) public nftBorrowStat;\\n\\n    constructor(\\n        address SETTINGS_,\\n        address BESPOKE_SETTINGS_,\\n        address WETH_\\n    ) Pausable() ReentrancyGuard() {\\n        SETTINGS = IOpenSkySettings(SETTINGS_);\\n        BESPOKE_SETTINGS = IOpenSkyBespokeSettings(BESPOKE_SETTINGS_);\\n        WETH = IWETH(WETH_);\\n    }\\n\\n    /// @dev Only emergency admin can call functions marked by this modifier.\\n    modifier onlyEmergencyAdmin() {\\n        IACLManager ACLManager = IACLManager(SETTINGS.ACLManagerAddress());\\n        require(ACLManager.isEmergencyAdmin(_msgSender()), 'BM_ACL_ONLY_EMERGENCY_ADMIN_CAN_CALL');\\n        _;\\n    }\\n\\n    modifier onlyAirdropOperator() {\\n        IACLManager ACLManager = IACLManager(SETTINGS.ACLManagerAddress());\\n        require(ACLManager.isAirdropOperator(_msgSender()), 'BM_ACL_ONLY_AIRDROP_OPERATOR_CAN_CALL');\\n        _;\\n    }\\n\\n    modifier checkLoanExists(uint256 loanId) {\\n        require(_loans[loanId].reserveId > 0, 'BM_CHECK_LOAN_NOT_EXISTS');\\n        _;\\n    }\\n\\n    /// @dev Pause pool for emergency case, can only be called by emergency admin.\\n    function pause() external onlyEmergencyAdmin {\\n        _pause();\\n    }\\n\\n    /// @dev Unpause pool for emergency case, can only be called by emergency admin.\\n    function unpause() external onlyEmergencyAdmin {\\n        _unpause();\\n    }\\n\\n    /// @notice Cancel all pending offers for a sender\\n    /// @param minNonce_ minimum user nonce\\n    function cancelAllBorrowOffersForSender(uint256 minNonce_) external {\\n        require(minNonce_ > minNonce[msg.sender], 'BM_CANCEL_NONCE_LOWER_THAN_CURRENT');\\n        require(minNonce_ < minNonce[msg.sender] + 500000, 'BM_CANCEL_CANNOT_CANCEL_MORE');\\n        minNonce[msg.sender] = minNonce_;\\n\\n        emit CancelAllOffers(msg.sender, minNonce_);\\n    }\\n\\n    /// @param offerNonces array of borrowOffer nonces\\n    function cancelMultipleBorrowOffers(uint256[] calldata offerNonces) external {\\n        require(offerNonces.length > 0, 'BM_CANCEL_CANNOT_BE_EMPTY');\\n\\n        for (uint256 i = 0; i < offerNonces.length; i++) {\\n            require(offerNonces[i] >= minNonce[msg.sender], 'BM_CANCEL_NONCE_LOWER_THAN_CURRENT');\\n            _nonce[msg.sender][offerNonces[i]] = true;\\n        }\\n\\n        emit CancelMultipleOffers(msg.sender, offerNonces);\\n    }\\n\\n    function isValidNonce(address account, uint256 nonce) external view returns (bool) {\\n        return !_nonce[account][nonce] && nonce >= minNonce[account];\\n    }\\n\\n    /// @notice take an borrowing offer using ERC20 include WETH\\n    function takeBorrowOffer(\\n        BespokeTypes.Offer memory offerData,\\n        uint256 supplyAmount,\\n        uint256 supplyDuration\\n    ) public override whenNotPaused nonReentrant {\\n        TakeBorrowOfferLogic.executeTakeBorrowOffer(\\n            _nonce,\\n            minNonce,\\n            _loans,\\n            _loanIdTracker,\\n            offerData,\\n            BespokeTypes.executeTakeBorrowParams({\\n                amount: supplyAmount,\\n                duration: supplyDuration,\\n                bespokeSettings: address(BESPOKE_SETTINGS),\\n                settings: address(SETTINGS),\\n                domainSeparator: _getDomainSeparator(),\\n                offerHash: BespokeLogic.hashOffer(offerData)\\n            })\\n        );\\n    }\\n\\n    /// @notice Take a borrow offer. Only for WETH reserve.\\n    /// @notice Consider using taker's oWETH balance first, then ETH if oWETH is not enough\\n    /// @notice Borrower will receive WETH\\n    function takeBorrowOfferETH(\\n        BespokeTypes.Offer memory offerData,\\n        uint256 supplyAmount,\\n        uint256 supplyDuration\\n    ) public payable override whenNotPaused nonReentrant {\\n        TakeBorrowOfferLogic.executeTakeBorrowOfferETH(\\n            _nonce,\\n            minNonce,\\n            _loans,\\n            _loanIdTracker,\\n            offerData,\\n            BespokeTypes.executeTakeBorrowParams({\\n                amount: supplyAmount,\\n                duration: supplyDuration,\\n                bespokeSettings: address(BESPOKE_SETTINGS),\\n                settings: address(SETTINGS),\\n                domainSeparator: _getDomainSeparator(),\\n                offerHash: BespokeLogic.hashOffer(offerData)\\n            }),\\n            WETH\\n        );\\n    }\\n\\n    function takeLendOffer(\\n        BespokeTypes.Offer memory offerData,\\n        uint256 tokenId,\\n        uint256 borrowAmount,\\n        uint256 borrowDuration,\\n        bytes memory params\\n    ) public override whenNotPaused nonReentrant {\\n        TakeLendOfferLogic.executeTakeLendOffer(\\n            _nonce,\\n            minNonce,\\n            _loans,\\n            _loanIdTracker,\\n            offerData,\\n            BespokeTypes.executeTakeLendParams({\\n                tokenId: tokenId,\\n                borrowAmount: borrowAmount, // new borrow amount\\n                borrowDuration: borrowDuration, // new borrow duration\\n                bespokeSettings: address(BESPOKE_SETTINGS),\\n                settings: address(SETTINGS),\\n                domainSeparator: _getDomainSeparator(),\\n                offerHash: BespokeLogic.hashOffer(offerData),\\n                params: params\\n            })\\n        );\\n    }\\n\\n    /// @notice Only OpenSkyBorrowNFT owner can repay\\n    /// @notice Only OpenSkyLendNFT owner can recieve the payment\\n    /// @notice This function is not pausable for safety\\n    function repay(uint256 loanId) public override nonReentrant checkLoanExists(loanId) {\\n        RepayLogic.repay(_loans, loanId, BESPOKE_SETTINGS, SETTINGS);\\n    }\\n\\n    /// @notice Only OpenSkyBorrowNFT owner can repay\\n    /// @notice Only OpenSkyLendNFT owner can recieve the payment\\n    /// @notice This function is not pausable for safety\\n    function repayETH(uint256 loanId) public payable override nonReentrant checkLoanExists(loanId) {\\n        RepayLogic.repayETH(_loans, loanId, BESPOKE_SETTINGS, SETTINGS, WETH);\\n    }\\n\\n    /// @notice anyone can trigger but only OpenSkyLendNFT owner can receive collateral\\n    function foreclose(uint256 loanId) public override whenNotPaused nonReentrant checkLoanExists(loanId) {\\n        ForecloseLogic.foreclose(_loans, loanId, BESPOKE_SETTINGS);\\n    }\\n\\n    function getLoanData(uint256 loanId) public view override returns (BespokeTypes.LoanData memory) {\\n        BespokeTypes.LoanData memory loan = _loans[loanId];\\n        loan.status = getStatus(loanId);\\n        return loan;\\n    }\\n\\n    function getStatus(uint256 loanId) public view override returns (BespokeTypes.LoanStatus) {\\n        BespokeTypes.LoanData memory loan = _loans[loanId];\\n        BespokeTypes.LoanStatus status = _loans[loanId].status;\\n        if (status == BespokeTypes.LoanStatus.BORROWING) {\\n            if (loan.liquidatableTime < block.timestamp) {\\n                status = BespokeTypes.LoanStatus.LIQUIDATABLE;\\n            } else if (loan.borrowOverdueTime < block.timestamp) {\\n                status = BespokeTypes.LoanStatus.OVERDUE;\\n            }\\n        }\\n        return status;\\n    }\\n\\n    function getBorrowInterest(uint256 loanId) public view override returns (uint256) {\\n        BespokeTypes.LoanData memory loan = _loans[loanId];\\n        uint256 endTime = block.timestamp < loan.borrowOverdueTime ? loan.borrowOverdueTime : block.timestamp;\\n        return uint256(loan.interestPerSecond).rayMul(endTime.sub(loan.borrowBegin));\\n    }\\n\\n    // @dev principal + fixed-price interest + extra interest(if overdue)\\n    function getBorrowBalance(uint256 loanId) public view override returns (uint256) {\\n        return _loans[loanId].amount.add(getBorrowInterest(loanId));\\n    }\\n\\n    function getPenalty(uint256 loanId) public view override returns (uint256) {\\n        BespokeTypes.LoanData memory loan = getLoanData(loanId);\\n        uint256 penalty = 0;\\n        if (loan.status == BespokeTypes.LoanStatus.OVERDUE) {\\n            penalty = loan.amount.percentMul(BESPOKE_SETTINGS.overdueLoanFeeFactor());\\n        }\\n        return penalty;\\n    }\\n    \\n    /// @dev transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due\\n    /// direct transfers to the contract address.\\n    /// @param token token to transfer\\n    /// @param to recipient of the transfer\\n    /// @param amount amount to send\\n    function emergencyTokenTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external onlyEmergencyAdmin {\\n        IERC20(token).safeTransfer(to, amount);\\n    }\\n\\n    /// @inheritdoc IOpenSkyBespokeMarket\\n    function flashClaim(\\n        address receiverAddress,\\n        uint256[] calldata loanIds,\\n        bytes calldata params\\n    ) external override {\\n        uint256 i;\\n        IOpenSkyFlashClaimReceiver receiver = IOpenSkyFlashClaimReceiver(receiverAddress);\\n        // !!!CAUTION: receiver contract may reentry mint, burn, flashClaim again\\n\\n        // only loan owner can do flashClaim\\n        address[] memory nftAddresses = new address[](loanIds.length);\\n        uint256[] memory tokenIds = new uint256[](loanIds.length);\\n        for (i = 0; i < loanIds.length; i++) {\\n            require(\\n                IERC721(BESPOKE_SETTINGS.borrowLoanAddress()).ownerOf(loanIds[i]) == _msgSender(),\\n                'BM_FLASHCLAIM_CALLER_IS_NOT_OWNER'\\n            );\\n            BespokeTypes.LoanData memory loanData = getLoanData(loanIds[i]);\\n            require(loanData.status != BespokeTypes.LoanStatus.LIQUIDATABLE, 'BM_FLASHCLAIM_STATUS_ERROR');\\n            nftAddresses[i] = loanData.nftAddress;\\n            tokenIds[i] = loanData.tokenId;\\n        }\\n\\n        // step 1: moving underlying asset forward to receiver contract\\n        for (i = 0; i < loanIds.length; i++) {\\n            IERC721(nftAddresses[i]).safeTransferFrom(address(this), receiverAddress, tokenIds[i]);\\n        }\\n\\n        // setup 2: execute receiver contract, doing something like aidrop\\n        require(\\n            receiver.executeOperation(nftAddresses, tokenIds, _msgSender(), address(this), params),\\n            'BM_FLASHCLAIM_EXECUTOR_ERROR'\\n        );\\n\\n        // setup 3: moving underlying asset backword from receiver contract\\n        for (i = 0; i < loanIds.length; i++) {\\n            IERC721(nftAddresses[i]).safeTransferFrom(receiverAddress, address(this), tokenIds[i]);\\n            emit FlashClaim(receiverAddress, _msgSender(), nftAddresses[i], tokenIds[i]);\\n        }\\n    }\\n\\n    /// @inheritdoc IOpenSkyBespokeMarket\\n    function claimERC20Airdrop(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external override onlyAirdropOperator {\\n        // make sure that params are checked in admin contract\\n        IERC20(token).safeTransfer(to, amount);\\n        emit ClaimERC20Airdrop(token, to, amount);\\n    }\\n\\n    /// @inheritdoc IOpenSkyBespokeMarket\\n    function claimERC721Airdrop(\\n        address token,\\n        address to,\\n        uint256[] calldata ids\\n    ) external override onlyAirdropOperator {\\n        // TODO prevent claim nft in whitelist. before add a collection whitelist need claim them if any\\n        //        require(nftBorrowStat[token] == 0, 'BM_CLAIM_ERC721_AIRDROP_NOT_SUPPORTED');\\n        // make sure that params are checked in admin contract\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            IERC721(token).safeTransferFrom(address(this), to, ids[i]);\\n        }\\n        emit ClaimERC721Airdrop(token, to, ids);\\n    }\\n\\n    /// @inheritdoc IOpenSkyBespokeMarket\\n    function claimERC1155Airdrop(\\n        address token,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external override onlyAirdropOperator {\\n        //        require(nftBorrowStat[token] == 0, 'BM_CLAIM_ERC1155_AIRDROP_NOT_SUPPORTED');\\n        // make sure that params are checked in admin contract\\n        IERC1155(token).safeBatchTransferFrom(address(this), to, ids, amounts, data);\\n        emit ClaimERC1155Airdrop(token, to, ids, amounts, data);\\n    }\\n\\n    function _getDomainSeparator() internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f, // keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n                    0xf0cf7ce475272740cae17eb3cadd6d254800be81c53f84a2f273b99036471c62, // keccak256(\\\"OpenSkyBespokeMarket\\\")\\n                    0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6, // keccak256(bytes(\\\"1\\\")) for versionId = 1\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    receive() external payable {\\n        revert('BM_RECEIVE_NOT_ALLOWED');\\n    }\\n\\n    fallback() external payable {\\n        revert('BM_FALLBACK_NOT_ALLOWED');\\n    }\\n}\\n\",\"keccak256\":\"0xb3b05f069fe278b8cb92f3bc170820d68cc636aa901b4f61bc24e3e14926e8ad\",\"license\":\"MIT\"},\"contracts/bespokemarket/interfaces/IOpenSkyBespokeLendOfferStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../libraries/BespokeTypes.sol';\\n\\n//\\ninterface IOpenSkyBespokeLendOfferStrategy {\\n    function tokenIdMatchOffer(BespokeTypes.Offer memory offerData, BespokeTypes.LendOfferTakeParams memory takeInfo)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x1b3cfe911f63b38df33c5cbef5b6d8ebd16ceca24bb41dfb243273def4ae7c18\",\"license\":\"MIT\"},\"contracts/bespokemarket/interfaces/IOpenSkyBespokeLoanNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '../libraries/BespokeTypes.sol';\\n\\ninterface IOpenSkyBespokeLoanNFT is IERC721 {\\n    event Mint(uint256 indexed tokenId, address indexed recipient);\\n    event Burn(uint256 tokenId);\\n    event SetLoanDescriptorAddress(address operator, address descriptorAddress);\\n\\n    function mint(uint256 tokenId, address account) external;\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function getLoanData(uint256 tokenId) external returns (BespokeTypes.LoanData memory);\\n}\\n\",\"keccak256\":\"0x6b6d44dc42af37ea65172148dca4969992f5c9b833479fee071d3977f697e1fb\",\"license\":\"MIT\"},\"contracts/bespokemarket/interfaces/IOpenSkyBespokeMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../libraries/BespokeTypes.sol';\\n\\ninterface IOpenSkyBespokeMarket {\\n    event CancelAllOffers(address indexed sender, uint256 nonce);\\n\\n    event CancelMultipleOffers(address indexed sender, uint256[] nonces);\\n\\n    event TakeBorrowOffer(\\n        bytes32 offerHash,\\n        uint256 indexed loanId,\\n        address indexed lender,\\n        address indexed borrower,\\n        uint256 nonce\\n    );\\n\\n    event TakeBorrowOfferETH(\\n        bytes32 offerHash,\\n        uint256 indexed loanId,\\n        address indexed lender,\\n        address indexed borrower,\\n        uint256 nonce\\n    );\\n\\n    event TakeLendOffer(\\n        bytes32 offerHash,\\n        uint256 indexed loanId,\\n        address indexed lender,\\n        address indexed borrower,\\n        uint256 nonce\\n    );\\n\\n    event Repay(uint256 indexed loanId, address indexed borrower);\\n\\n    event RepayETH(uint256 indexed loanId, address indexed borrower);\\n\\n    event Rollover(\\n        bytes32 offerHash,\\n        uint256 oldLoanId,\\n        uint256 indexed loanId,\\n        address indexed lender,\\n        address indexed borrower,\\n        uint256 nonce\\n    );\\n\\n    event Foreclose(uint256 indexed loanId, address indexed lender);\\n\\n    event FlashClaim(address indexed receiver, address sender, address indexed nftAddress, uint256 indexed tokenId);\\n    event ClaimERC20Airdrop(address indexed token, address indexed to, uint256 amount);\\n    event ClaimERC721Airdrop(address indexed token, address indexed to, uint256[] ids);\\n    event ClaimERC1155Airdrop(address indexed token, address indexed to, uint256[] ids, uint256[] amounts, bytes data);\\n\\n    function takeBorrowOffer(\\n        BespokeTypes.Offer memory offerData,\\n        uint256 supplyAmount,\\n        uint256 supplyDuration\\n    ) external;\\n\\n    function takeBorrowOfferETH(\\n        BespokeTypes.Offer memory offerData,\\n        uint256 supplyAmount,\\n        uint256 supplyDuration\\n    ) external payable;\\n\\n    function takeLendOffer(\\n        BespokeTypes.Offer memory offerData,\\n        uint256 tokenId,\\n        uint256 borrowAmount,\\n        uint256 borrowDuration,\\n        bytes memory params\\n    ) external;\\n    \\n    function repay(uint256 loanId) external;\\n\\n    function repayETH(uint256 loanId) external payable;\\n\\n    function foreclose(uint256 loanId) external;\\n\\n    function cancelAllBorrowOffersForSender(uint256 minNonce_) external;\\n\\n    function cancelMultipleBorrowOffers(uint256[] calldata offerNonces) external;\\n\\n    function isValidNonce(address account, uint256 nonce) external view returns (bool);\\n\\n    function getLoanData(uint256 loanId) external view returns (BespokeTypes.LoanData memory);\\n\\n    function getStatus(uint256 loanId) external view returns (BespokeTypes.LoanStatus);\\n\\n    function getBorrowInterest(uint256 loanId) external view returns (uint256);\\n\\n    function getBorrowBalance(uint256 loanId) external view returns (uint256);\\n\\n    function getPenalty(uint256 loanId) external view returns (uint256);\\n\\n    /**\\n     * @notice Allows smart contracts to access the collateralized NFT within one transaction,\\n     * as long as the amount taken plus a fee is returned\\n     * @dev IMPORTANT There are security concerns for developers of flash loan receiver contracts that must be carefully considered\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashClaimReceiver interface\\n     * @param loanIds The ID of loan being flash-borrowed\\n     * @param params packed params to pass to the receiver as extra information\\n     **/\\n    function flashClaim(\\n        address receiverAddress,\\n        uint256[] calldata loanIds,\\n        bytes calldata params\\n    ) external;\\n\\n    /**\\n     * @notice Claim the ERC20 token which has been airdropped to the loan contract\\n     * @param token The address of the airdropped token\\n     * @param to The address which will receive ERC20 token\\n     * @param amount The amount of the ERC20 token\\n     **/\\n    function claimERC20Airdrop(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Claim the ERC721 token which has been airdropped to the loan contract\\n     * @param token The address of the airdropped token\\n     * @param to The address which will receive the ERC721 token\\n     * @param ids The ID of the ERC721 token\\n     **/\\n    function claimERC721Airdrop(\\n        address token,\\n        address to,\\n        uint256[] calldata ids\\n    ) external;\\n\\n    /**\\n     * @notice Claim the ERC1155 token which has been airdropped to the loan contract\\n     * @param token The address of the airdropped token\\n     * @param to The address which will receive the ERC1155 tokens\\n     * @param ids The ID of the ERC1155 token\\n     * @param amounts The amount of the ERC1155 tokens\\n     * @param data packed params to pass to the receiver as extra information\\n     **/\\n    function claimERC1155Airdrop(\\n        address token,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6d12635bcb8bc3aece413cfc8fcb1a99912f0b74b928917f19566a8da2f2c8d9\",\"license\":\"MIT\"},\"contracts/bespokemarket/interfaces/IOpenSkyBespokeSettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\nimport '../libraries/BespokeTypes.sol';\\n\\ninterface IOpenSkyBespokeSettings {\\n    event InitLoanAddress(address operator, address borrowLoanAddress, address lendLoanAddress);\\n    event InitMarketAddress(address operator, address address_);\\n\\n    event SetReserveFactor(address operator, uint256 factor);\\n    event SetOverdueLoanFeeFactor(address operator, uint256 factor);\\n\\n    event SetMinBorrowDuration(address operator, uint256 factor);\\n    event SetMaxBorrowDuration(address operator, uint256 factor);\\n    event SetOverdueDuration(address operator, uint256 factor);\\n\\n    event OpenWhitelist(address operator);\\n    event CloseWhitelist(address operator);\\n    event AddToWhitelist(address operator, address nft);\\n    event RemoveFromWhitelist(address operator, address nft);\\n\\n    event AddCurrency(address operator, address currency);\\n    event RemoveCurrency(address operator, address currency);\\n\\n    event AddStrategy(address operator, address address_);\\n    event RemoveStrategy(address operator, address address_);\\n\\n    event InitDefaultNftTransferAdapter(address ERC721DefaultTransferAdapter, address ERC1155DefaultTransferAdapter);\\n    event AddNftTransferAdapter(address operator, address nftAddress, address adapterAddress);\\n    event RemoveNftTransferAdapter(address operator, address nftAddress);\\n\\n    function marketAddress() external view returns (address);\\n\\n    function borrowLoanAddress() external view returns (address);\\n\\n    function lendLoanAddress() external view returns (address);\\n\\n    function minBorrowDuration() external view returns (uint256);\\n\\n    function maxBorrowDuration() external view returns (uint256);\\n\\n    function overdueDuration() external view returns (uint256);\\n\\n    function reserveFactor() external view returns (uint256);\\n\\n    function MAX_RESERVE_FACTOR() external view returns (uint256);\\n\\n    function overdueLoanFeeFactor() external view returns (uint256);\\n\\n    function isWhitelistOn() external view returns (bool);\\n\\n    function inWhitelist(address nft) external view returns (bool);\\n\\n    function getWhitelistDetail(address nft) external view returns (BespokeTypes.WhitelistInfo memory);\\n\\n    function getBorrowDurationConfig(address nftAddress)\\n        external\\n        view\\n        returns (\\n            uint256 minBorrowDuration,\\n            uint256 maxBorrowDuration,\\n            uint256 overdueDuration\\n        );\\n\\n    function isCurrencyWhitelisted(address currency) external view returns (bool);\\n\\n    function getNftTransferAdapter(address nftAddress) external view returns (address);\\n\\n    function isStrategyWhitelisted(address address_) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf7caa479de232b7898b8076ea438e87e8dd114a42f3f791cefc3720d2f256f74\",\"license\":\"MIT\"},\"contracts/bespokemarket/interfaces/ITransferAdapterNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface ITransferAdapterNFT {\\n    function transferNFTIn(\\n        address collection,\\n        address from,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n\\n    function transferNFTOut(\\n        address collection,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4c861d08ef24eb3ec93bc5c30b26ec217b1d669e2c8cb6c2bcb7366f4b136e6b\",\"license\":\"MIT\"},\"contracts/bespokemarket/libraries/BespokeLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\n\\nimport '../../libraries/math/MathUtils.sol';\\nimport '../../libraries/math/WadRayMath.sol';\\nimport '../../interfaces/IOpenSkyPool.sol';\\nimport '../../interfaces/IOpenSkySettings.sol';\\nimport '../../libraries/types/DataTypes.sol';\\nimport '../../libraries/math/PercentageMath.sol';\\n\\n//import '../../interfaces/IOpenSkySettings.sol';\\n//import '../../interfaces/IOpenSkyPool.sol';\\nimport '../interfaces/IOpenSkyBespokeLoanNFT.sol';\\nimport './BespokeTypes.sol';\\nimport './SignatureChecker.sol';\\nimport '../interfaces/IOpenSkyBespokeSettings.sol';\\nimport '../interfaces/ITransferAdapterNFT.sol';\\n\\nlibrary BespokeLogic {\\n    using SafeMath for uint256;\\n    using PercentageMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    // keccak256(\\\"Offer(uint8 offerType,bool isProrated,uint256 reserveId,address nftAddress,uint256 tokenId,uint256 tokenAmount,address borrower,uint256 borrowAmountMin,uint256 borrowAmountMax,uint40 borrowDurationMin,uint40 borrowDurationMax,uint128 borrowRate,address currency,uint256 nonce,uint256 deadline,address strategy,bytes params)\\\")\\n    bytes32 internal constant OFFER_HASH = 0x8ec1321937e98caf24175b381996b810948f568bb63688d3e27961ed87d225fa;\\n\\n    function hashOffer(BespokeTypes.Offer memory offerData) public pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    OFFER_HASH,\\n                    offerData.offerType,\\n                    offerData.isProrated,\\n                    offerData.reserveId,\\n                    keccak256(\\n                        abi.encode(\\n                            offerData.nftAddress,\\n                            offerData.tokenId,\\n                            offerData.tokenAmount,\\n                            offerData.signer, //  renamed\\n                            offerData.borrowAmountMin,\\n                            offerData.borrowAmountMax,\\n                            offerData.borrowDurationMin,\\n                            offerData.borrowDurationMax,\\n                            offerData.borrowRate,\\n                            offerData.currency\\n                        )\\n                    ),\\n                    offerData.nonce,\\n                    offerData.deadline,\\n                    offerData.strategy,\\n                    keccak256(offerData.params)\\n                )\\n            );\\n    }\\n\\n    function validateTakeBorrowOffer(\\n        mapping(address => mapping(uint256 => bool)) storage _nonce,\\n        mapping(address => uint256) storage minNonce,\\n        BespokeTypes.Offer memory offerData,\\n        bytes32 offerHash,\\n        address underlyingSpecified,\\n        uint256 supplyAmount,\\n        uint256 supplyDuration,\\n        bytes32 DOMAIN_SEPARATOR,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS,\\n        IOpenSkySettings SETTINGS\\n    ) public view {\\n        // TODO change to pure?\\n        // check nonce\\n        require(\\n            !_nonce[offerData.signer][offerData.nonce] && offerData.nonce >= minNonce[offerData.signer],\\n            'BM_TAKE_BORROW_NONCE_INVALID'\\n        );\\n\\n        address underlyingAsset = IOpenSkyPool(SETTINGS.poolAddress())\\n            .getReserveData(offerData.reserveId)\\n            .underlyingAsset;\\n\\n        require(underlyingAsset == offerData.currency, 'BM_TAKE_BORROW_OFFER_ASSET_NOT_MATCH');\\n\\n        if (underlyingSpecified != address(0))\\n            require(underlyingAsset == underlyingSpecified, 'BM_TAKE_BORROW_OFFER_ASSET_SPECIFIED_NOT_MATCH');\\n\\n        require(BESPOKE_SETTINGS.isCurrencyWhitelisted(offerData.currency), 'BM_TAKE_BORROW_CURRENCY_NOT_IN_WHITELIST');\\n\\n        require(\\n            !BESPOKE_SETTINGS.isWhitelistOn() || BESPOKE_SETTINGS.inWhitelist(offerData.nftAddress),\\n            'BM_TAKE_BORROW_NFT_NOT_IN_WHITELIST'\\n        );\\n\\n        require(block.timestamp <= offerData.deadline, 'BM_TAKE_BORROW_SIGNING_EXPIRATION');\\n\\n        (uint256 minBorrowDuration, uint256 maxBorrowDuration, ) = BESPOKE_SETTINGS.getBorrowDurationConfig(\\n            offerData.nftAddress\\n        );\\n\\n        // check borrow duration\\n        require(\\n            offerData.borrowDurationMin <= offerData.borrowDurationMax &&\\n                offerData.borrowDurationMin >= minBorrowDuration &&\\n                offerData.borrowDurationMax <= maxBorrowDuration,\\n            'BM_TAKE_BORROW_OFFER_DURATION_NOT_ALLOWED'\\n        );\\n\\n        require(\\n            supplyDuration > 0 &&\\n                supplyDuration >= offerData.borrowDurationMin &&\\n                supplyDuration <= offerData.borrowDurationMax,\\n            'BM_TAKE_BORROW_TAKER_DURATION_NOT_ALLOWED'\\n        );\\n\\n        // check borrow amount\\n        require(\\n            offerData.borrowAmountMin > 0 && offerData.borrowAmountMin <= offerData.borrowAmountMax,\\n            'BM_TAKE_BORROW_OFFER_AMOUNT_NOT_ALLOWED'\\n        );\\n\\n        require(\\n            supplyAmount >= offerData.borrowAmountMin && supplyAmount <= offerData.borrowAmountMax,\\n            'BM_TAKE_BORROW_SUPPLY_AMOUNT_NOT_ALLOWED'\\n        );\\n        require(\\n            SignatureChecker.verify(\\n                offerHash,\\n                offerData.signer,\\n                offerData.v,\\n                offerData.r,\\n                offerData.s,\\n                DOMAIN_SEPARATOR\\n            ),\\n            'BM_TAKE_BORROW_SIGNATURE_INVALID'\\n        );\\n    }\\n\\n    function validateTakeLendOffer(\\n        mapping(address => mapping(uint256 => bool)) storage _nonce,\\n        mapping(address => uint256) storage minNonce,\\n        BespokeTypes.Offer memory offerData,\\n        BespokeTypes.validateTakeLendOfferParams memory params\\n    ) public {\\n        require(\\n            SignatureChecker.verify(\\n                params.offerHash,\\n                offerData.signer,\\n                offerData.v,\\n                offerData.r,\\n                offerData.s,\\n                params.domainSeparator\\n            ),\\n            'BM_TAKE_LEND_SIGNATURE_INVALID'\\n        );\\n    }\\n\\n    function validateOfferCommon(\\n        mapping(address => mapping(uint256 => bool)) storage _nonce,\\n        mapping(address => uint256) storage minNonce,\\n        BespokeTypes.Offer memory offerData,\\n        bytes32 offerHash,\\n        address underlyingSpecified,\\n        uint256 amount,\\n        uint256 duration,\\n        bytes32 DOMAIN_SEPARATOR,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS,\\n        IOpenSkySettings SETTINGS\\n    ) public view {\\n        // TODO change to pure?\\n        // check nonce\\n        require(\\n            !_nonce[offerData.signer][offerData.nonce] && offerData.nonce >= minNonce[offerData.signer],\\n            'BM_TAKE_BORROW_NONCE_INVALID'\\n        );\\n\\n        address underlyingAsset = IOpenSkyPool(SETTINGS.poolAddress())\\n            .getReserveData(offerData.reserveId)\\n            .underlyingAsset;\\n\\n        require(underlyingAsset == offerData.currency, 'BM_TAKE_BORROW_OFFER_ASSET_NOT_MATCH');\\n\\n        if (underlyingSpecified != address(0))\\n            require(underlyingAsset == underlyingSpecified, 'BM_TAKE_BORROW_OFFER_ASSET_SPECIFIED_NOT_MATCH');\\n\\n        require(BESPOKE_SETTINGS.isCurrencyWhitelisted(offerData.currency), 'BM_TAKE_BORROW_CURRENCY_NOT_IN_WHITELIST');\\n\\n        require(\\n            !BESPOKE_SETTINGS.isWhitelistOn() || BESPOKE_SETTINGS.inWhitelist(offerData.nftAddress),\\n            'BM_TAKE_BORROW_NFT_NOT_IN_WHITELIST'\\n        );\\n\\n        require(block.timestamp <= offerData.deadline, 'BM_TAKE_BORROW_SIGNING_EXPIRATION');\\n\\n        (uint256 minBorrowDuration, uint256 maxBorrowDuration, ) = BESPOKE_SETTINGS.getBorrowDurationConfig(\\n            offerData.nftAddress\\n        );\\n\\n        // check borrow duration\\n        require(\\n            offerData.borrowDurationMin <= offerData.borrowDurationMax &&\\n                offerData.borrowDurationMin >= minBorrowDuration &&\\n                offerData.borrowDurationMax <= maxBorrowDuration,\\n            'BM_TAKE_BORROW_OFFER_DURATION_NOT_ALLOWED'\\n        );\\n\\n        require(\\n            duration > 0 && duration >= offerData.borrowDurationMin && duration <= offerData.borrowDurationMax,\\n            'BM_TAKE_BORROW_TAKER_DURATION_NOT_ALLOWED'\\n        );\\n\\n        // check borrow amount\\n        require(\\n            offerData.borrowAmountMin > 0 && offerData.borrowAmountMin <= offerData.borrowAmountMax,\\n            'BM_TAKE_BORROW_OFFER_AMOUNT_NOT_ALLOWED'\\n        );\\n\\n        require(\\n            amount >= offerData.borrowAmountMin && amount <= offerData.borrowAmountMax,\\n            'BM_TAKE_BORROW_SUPPLY_AMOUNT_NOT_ALLOWED'\\n        );\\n        require(\\n            SignatureChecker.verify(\\n                offerHash,\\n                offerData.signer,\\n                offerData.v,\\n                offerData.r,\\n                offerData.s,\\n                DOMAIN_SEPARATOR\\n            ),\\n            'BM_TAKE_BORROW_SIGNATURE_INVALID'\\n        );\\n    }\\n\\n    function createLoan(\\n        mapping(uint256 => BespokeTypes.LoanData) storage _loans,\\n        BespokeTypes.Offer memory offerData,\\n        uint256 loanId,\\n        uint256 supplyAmount,\\n        uint256 supplyDuration,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS\\n    ) public {\\n        uint256 borrowRateRay = uint256(offerData.borrowRate).rayDiv(10000);\\n        (, , uint256 overdueDuration) = BESPOKE_SETTINGS.getBorrowDurationConfig(offerData.nftAddress);\\n\\n        BespokeTypes.LoanData memory loan = BespokeTypes.LoanData({\\n            reserveId: offerData.reserveId,\\n            nftAddress: offerData.nftAddress,\\n            tokenId: offerData.tokenId,\\n            tokenAmount: offerData.tokenAmount,\\n            borrower: offerData.signer,\\n            amount: supplyAmount,\\n            borrowRate: uint128(borrowRateRay),\\n            interestPerSecond: uint128(MathUtils.calculateBorrowInterestPerSecond(borrowRateRay, supplyAmount)),\\n            currency: offerData.currency,\\n            borrowDuration: uint40(supplyDuration),\\n            borrowBegin: uint40(block.timestamp),\\n            borrowOverdueTime: uint40(block.timestamp.add(supplyDuration)),\\n            liquidatableTime: uint40(block.timestamp.add(supplyDuration).add(overdueDuration)),\\n            lender: msg.sender,\\n            status: BespokeTypes.LoanStatus.BORROWING\\n        });\\n\\n        _loans[loanId] = loan;\\n    }\\n\\n    // TODO merge with createLoan\\n    // TODO reorg params\\n    function createLoanWhenTakeLend(\\n        mapping(uint256 => BespokeTypes.LoanData) storage _loans,\\n        BespokeTypes.Offer memory offerData,\\n        uint256 loanId,\\n        uint256 supplyAmount,\\n        uint256 supplyDuration,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS,\\n        uint256 tokenId\\n    ) public {\\n        uint256 borrowRateRay = uint256(offerData.borrowRate).rayDiv(10000);\\n        (, , uint256 overdueDuration) = BESPOKE_SETTINGS.getBorrowDurationConfig(offerData.nftAddress);\\n\\n        BespokeTypes.LoanData memory loan = BespokeTypes.LoanData({\\n            reserveId: offerData.reserveId,\\n            nftAddress: offerData.nftAddress,\\n            tokenId: tokenId,\\n            tokenAmount: 1, // TODO hardcode always 1\\n            borrower: msg.sender,\\n            amount: supplyAmount,\\n            borrowRate: uint128(borrowRateRay),\\n            interestPerSecond: uint128(MathUtils.calculateBorrowInterestPerSecond(borrowRateRay, supplyAmount)),\\n            currency: offerData.currency,\\n            borrowDuration: uint40(supplyDuration),\\n            borrowBegin: uint40(block.timestamp),\\n            borrowOverdueTime: uint40(block.timestamp.add(supplyDuration)),\\n            liquidatableTime: uint40(block.timestamp.add(supplyDuration).add(overdueDuration)),\\n            lender: offerData.signer,\\n            status: BespokeTypes.LoanStatus.BORROWING\\n        });\\n\\n        _loans[loanId] = loan;\\n    }\\n\\n    function getLoanStatus(mapping(uint256 => BespokeTypes.LoanData) storage _loans, uint256 loanId)\\n        public\\n        view\\n        returns (BespokeTypes.LoanStatus)\\n    {\\n        BespokeTypes.LoanData memory loan = _loans[loanId];\\n        BespokeTypes.LoanStatus status = _loans[loanId].status;\\n        if (status == BespokeTypes.LoanStatus.BORROWING) {\\n            if (loan.liquidatableTime < block.timestamp) {\\n                status = BespokeTypes.LoanStatus.LIQUIDATABLE;\\n            } else if (loan.borrowOverdueTime < block.timestamp) {\\n                status = BespokeTypes.LoanStatus.OVERDUE;\\n            }\\n        }\\n        return status;\\n    }\\n\\n    // todo check storage=>momory?\\n    function getLoanData(mapping(uint256 => BespokeTypes.LoanData) storage _loans, uint256 loanId)\\n        public\\n        view\\n        returns (BespokeTypes.LoanData memory)\\n    {\\n        BespokeTypes.LoanData memory loan = _loans[loanId];\\n        loan.status = getLoanStatus(_loans, loanId);\\n        return loan;\\n    }\\n\\n    function getLoanParties(IOpenSkyBespokeSettings BESPOKE_SETTINGS, uint256 loanId)\\n        public\\n        view\\n        returns (address borrower, address lender)\\n    {\\n        lender = IERC721(BESPOKE_SETTINGS.lendLoanAddress()).ownerOf(loanId);\\n        borrower = IERC721(BESPOKE_SETTINGS.borrowLoanAddress()).ownerOf(loanId);\\n    }\\n\\n    // TODO add feeStrategy\\n    // TODO pass loan data\\n    function getBorrowInterest(mapping(uint256 => BespokeTypes.LoanData) storage _loans, uint256 loanId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        BespokeTypes.LoanData memory loan = _loans[loanId];\\n        uint256 endTime = block.timestamp < loan.borrowOverdueTime ? loan.borrowOverdueTime : block.timestamp;\\n        return uint256(loan.interestPerSecond).rayMul(endTime.sub(loan.borrowBegin));\\n    }\\n\\n    // @dev principal + fixed-price interest + extra interest(if overdue)\\n    // TODO pass loan data\\n\\n    function getBorrowBalance(mapping(uint256 => BespokeTypes.LoanData) storage _loans, uint256 loanId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _loans[loanId].amount.add(getBorrowInterest(_loans, loanId));\\n    }\\n\\n    // TODO pass loan data\\n    // TODO check if isProrated\\n    function getPenalty(\\n        mapping(uint256 => BespokeTypes.LoanData) storage _loans,\\n        uint256 loanId,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS\\n    ) public view returns (uint256) {\\n        BespokeTypes.LoanData memory loan = getLoanData(_loans, loanId);\\n        uint256 penalty = 0;\\n        if (loan.status == BespokeTypes.LoanStatus.OVERDUE) {\\n            penalty = loan.amount.percentMul(BESPOKE_SETTINGS.overdueLoanFeeFactor());\\n        }\\n        return penalty;\\n    }\\n\\n    // TODO refactor using fee strategy\\uff0c no need to pass BESPOKE_SETTINGS\\n    function calculateRepayAmountAndProtocolFee(\\n        mapping(uint256 => BespokeTypes.LoanData) storage _loans,\\n        uint256 loanId,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 total,\\n            uint256 lenderAmount,\\n            uint256 protocolFee\\n        )\\n    {\\n        uint256 penalty = getPenalty(_loans, loanId, BESPOKE_SETTINGS);\\n        total = getBorrowBalance(_loans, loanId).add(penalty);\\n        protocolFee = getBorrowInterest(_loans, loanId).add(penalty).percentMul(BESPOKE_SETTINGS.reserveFactor());\\n        lenderAmount = total.sub(protocolFee);\\n    }\\n\\n    function burnLoanNft(\\n        mapping(uint256 => BespokeTypes.LoanData) storage _loans,\\n        uint256 tokenId,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS\\n    ) public {\\n        IOpenSkyBespokeLoanNFT(BESPOKE_SETTINGS.borrowLoanAddress()).burn(tokenId);\\n        IOpenSkyBespokeLoanNFT(BESPOKE_SETTINGS.lendLoanAddress()).burn(tokenId);\\n        delete _loans[tokenId];\\n    }\\n\\n    function mintLoanNFT(\\n        BespokeTypes.Counter storage _loanIdTracker,\\n        address borrower,\\n        address lender,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS\\n    ) internal returns (uint256) {\\n        _loanIdTracker._value = _loanIdTracker._value + 1;\\n        uint256 tokenId = _loanIdTracker._value;\\n\\n        IOpenSkyBespokeLoanNFT(BESPOKE_SETTINGS.borrowLoanAddress()).mint(tokenId, borrower);\\n        IOpenSkyBespokeLoanNFT(BESPOKE_SETTINGS.lendLoanAddress()).mint(tokenId, lender);\\n\\n        return tokenId;\\n    }\\n\\n    // nft adapter\\n    function transferNFTIn(\\n        address nftAddress,\\n        address from,\\n        uint256 tokenId,\\n        uint256 amount,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS\\n    ) public {\\n        address adapter = BESPOKE_SETTINGS.getNftTransferAdapter(nftAddress);\\n        require(adapter != address(0), 'BP_TRANSFER_NFT_ADAPTER_NOT_AVAILABLE');\\n        ITransferAdapterNFT(adapter).transferNFTIn(nftAddress, from, tokenId, amount);\\n    }\\n\\n    // nft adapter\\n    function transferNFTOut(\\n        address nftAddress,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS\\n    ) public {\\n        address adapter = BESPOKE_SETTINGS.getNftTransferAdapter(nftAddress);\\n        require(adapter != address(0), 'BP_TRANSFER_NFT_ADAPTER_NOT_AVAILABLE');\\n        ITransferAdapterNFT(adapter).transferNFTOut(nftAddress, to, tokenId, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x6044b2036b8696f6a4a3f2f04e7e2cdf5a27971e50563204d613ddb8d76235da\",\"license\":\"MIT\"},\"contracts/bespokemarket/libraries/BespokeTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary BespokeTypes {\\n    struct Offer {\\n        OfferType offerType;\\n        bool isProrated;\\n        uint256 reserveId;\\n        address nftAddress;\\n        uint256 tokenId;\\n        uint256 tokenAmount; // 1 for ERC721, 1+ for ERC1155\\n        address signer; //borrower\\n        uint256 borrowAmountMin;\\n        uint256 borrowAmountMax;\\n        uint40 borrowDurationMin;\\n        uint40 borrowDurationMax;\\n        uint128 borrowRate;\\n        address currency;\\n        uint256 nonce;\\n        uint256 deadline;\\n        address strategy;\\n        bytes params;\\n        uint8 v; // v: parameter (27 or 28)\\n        bytes32 r; // r: parameter\\n        bytes32 s; // s: parameter\\n    }\\n\\n    enum OfferType {\\n        BORROW, // borrow offer\\n        SINGLE, // single\\n        COLLECTION, // offer to collection\\n        MULTIPLE, // many. only for ERC721\\n        ATTRIBUTE, // by attribute\\n        PRIVATE // private\\n    }\\n\\n    // params for takeLendOffer\\n    struct LendOfferTakeParams {\\n        address taker;\\n        uint256 tokenId;\\n        bytes params;\\n    }\\n\\n    struct validateTakeLendOfferParams {\\n        bytes32 offerHash;\\n        address underlyingSpecified;\\n        uint256 borrowAmount;\\n        uint256 borrowDuration;\\n        bytes32 domainSeparator;\\n        address bespokeSettings;\\n        address settings;\\n    }\\n\\n    struct executeTakeLendParams {\\n        uint256 tokenId;\\n        uint256 borrowAmount; // new borrow amount\\n        uint256 borrowDuration; // new borrow duration\\n        address bespokeSettings;\\n        address settings;\\n        bytes32 domainSeparator;\\n        bytes32 offerHash;\\n        bytes params;\\n    }\\n\\n    struct executeTakeBorrowParams {\\n        uint256 amount;\\n        uint256 duration;\\n        address bespokeSettings;\\n        address settings;\\n        bytes32 domainSeparator;\\n        bytes32 offerHash;\\n    }\\n\\n    // repayAmount?\\n    // adminFee\\n    struct LoanData {\\n        uint256 reserveId;\\n        address nftAddress;\\n        uint256 tokenId;\\n        uint256 tokenAmount; // 1 for ERC721, 1+ for ERC1155\\n        address borrower;\\n        uint256 amount;\\n        uint128 borrowRate;\\n        uint128 interestPerSecond;\\n        address currency;\\n        uint40 borrowDuration;\\n        // after take offer\\n        uint40 borrowBegin;\\n        uint40 borrowOverdueTime;\\n        uint40 liquidatableTime;\\n        address lender;\\n        LoanStatus status;\\n    }\\n\\n    enum LoanStatus {\\n        NONE,\\n        BORROWING,\\n        OVERDUE,\\n        LIQUIDATABLE\\n    }\\n\\n    struct WhitelistInfo {\\n        bool enabled;\\n        uint256 minBorrowDuration;\\n        uint256 maxBorrowDuration;\\n        uint256 overdueDuration;\\n    }\\n\\n    struct executeRolloverParams {\\n        uint256 loanId;\\n        uint256 borrowAmount; // new borrow amount\\n        uint256 borrowDuration; // new borrow duration\\n        address bespokeSettings;\\n        address settings;\\n        bytes32 domainSeparator;\\n        bytes32 offerHash;\\n    }\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n}\\n\",\"keccak256\":\"0x8bcb02170fcb5b2e7070d9e2db95fbf6bd8f0c61df8177039101b77d2e606b8e\",\"license\":\"MIT\"},\"contracts/bespokemarket/libraries/ForecloseLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport '../../libraries/math/MathUtils.sol';\\nimport '../../libraries/math/WadRayMath.sol';\\nimport '../../interfaces/IOpenSkyPool.sol';\\nimport '../../interfaces/IOpenSkySettings.sol';\\nimport '../../libraries/types/DataTypes.sol';\\nimport '../../libraries/math/PercentageMath.sol';\\n\\nimport '../../interfaces/IOpenSkySettings.sol';\\nimport '../../interfaces/IOpenSkyPool.sol';\\n\\nimport './BespokeTypes.sol';\\nimport './SignatureChecker.sol';\\nimport '../interfaces/IOpenSkyBespokeSettings.sol';\\nimport '../interfaces/IOpenSkyBespokeLendOfferStrategy.sol';\\n\\nimport './BespokeLogic.sol';\\n\\nlibrary ForecloseLogic {\\n    event Foreclose(uint256 indexed loanId, address indexed lender);\\n\\n    function foreclose(\\n        mapping(uint256 => BespokeTypes.LoanData) storage _loans,\\n        uint256 loanId,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS\\n    ) public {\\n        BespokeTypes.LoanData memory loanData = BespokeLogic.getLoanData(_loans, loanId);\\n        require(loanData.status == BespokeTypes.LoanStatus.LIQUIDATABLE, 'BM_FORECLOSE_STATUS_ERROR');\\n\\n        (, address lender) = BespokeLogic.getLoanParties(BESPOKE_SETTINGS, loanId);\\n\\n        BespokeLogic.transferNFTOut(\\n            loanData.nftAddress,\\n            lender,\\n            loanData.tokenId,\\n            loanData.tokenAmount,\\n            BESPOKE_SETTINGS\\n        );\\n\\n        BespokeLogic.burnLoanNft(_loans, loanId, BESPOKE_SETTINGS);\\n\\n        emit Foreclose(loanId, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x47477571b8887b8d0d7c28ab393e5e4f403af241d0785aeb0e77874a8844f940\",\"license\":\"MIT\"},\"contracts/bespokemarket/libraries/RepayLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport '../../libraries/math/MathUtils.sol';\\nimport '../../libraries/math/WadRayMath.sol';\\nimport '../../interfaces/IOpenSkyPool.sol';\\nimport '../../interfaces/IOpenSkySettings.sol';\\nimport '../../libraries/types/DataTypes.sol';\\nimport '../../libraries/math/PercentageMath.sol';\\nimport '../../dependencies/weth/IWETH.sol';\\n\\nimport '../../interfaces/IOpenSkySettings.sol';\\nimport '../../interfaces/IOpenSkyPool.sol';\\n\\nimport './BespokeTypes.sol';\\nimport './SignatureChecker.sol';\\nimport '../interfaces/IOpenSkyBespokeSettings.sol';\\nimport '../interfaces/IOpenSkyBespokeLendOfferStrategy.sol';\\n\\nimport './BespokeLogic.sol';\\n\\nlibrary RepayLogic {\\n    using SafeERC20 for IERC20;\\n\\n    event Repay(uint256 indexed loanId, address indexed borrower);\\n\\n    event RepayETH(uint256 indexed loanId, address indexed borrower);\\n\\n    function repay(\\n        mapping(uint256 => BespokeTypes.LoanData) storage _loans,\\n        uint256 loanId,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS,\\n        IOpenSkySettings SETTINGS\\n    ) public {\\n        BespokeTypes.LoanData memory loanData = BespokeLogic.getLoanData(_loans, loanId);\\n        require(\\n            loanData.status == BespokeTypes.LoanStatus.BORROWING || loanData.status == BespokeTypes.LoanStatus.OVERDUE,\\n            'BM_REPAY_STATUS_ERROR'\\n        );\\n\\n        (address borrower, address lender) = BespokeLogic.getLoanParties(BESPOKE_SETTINGS, loanId);\\n        require(msg.sender == borrower, 'BM_REPAY_NOT_BORROW_NFT_OWNER');\\n\\n        (uint256 repayTotal, uint256 lenderAmount, uint256 protocolFee) = BespokeLogic\\n            .calculateRepayAmountAndProtocolFee(_loans, loanId, BESPOKE_SETTINGS);\\n\\n        // repay oToken to lender\\n        address underlyingAsset = IOpenSkyPool(SETTINGS.poolAddress())\\n            .getReserveData(loanData.reserveId)\\n            .underlyingAsset;\\n        IERC20(underlyingAsset).safeTransferFrom(msg.sender, address(this), repayTotal);\\n        IERC20(underlyingAsset).approve(SETTINGS.poolAddress(), lenderAmount);\\n        IOpenSkyPool(SETTINGS.poolAddress()).deposit(loanData.reserveId, lenderAmount, lender, 0);\\n\\n        // dao vault\\n        if (protocolFee > 0) IERC20(underlyingAsset).safeTransfer(SETTINGS.daoVaultAddress(), protocolFee);\\n\\n        BespokeLogic.transferNFTOut(\\n            loanData.nftAddress,\\n            borrower,\\n            loanData.tokenId,\\n            loanData.tokenAmount,\\n            BESPOKE_SETTINGS\\n        );\\n\\n        BespokeLogic.burnLoanNft(_loans, loanId, BESPOKE_SETTINGS);\\n\\n        // TODO add new field nftReceiver?\\n        emit Repay(loanId, msg.sender);\\n    }\\n\\n    function repayETH(\\n        mapping(uint256 => BespokeTypes.LoanData) storage _loans,\\n        uint256 loanId,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS,\\n        IOpenSkySettings SETTINGS,\\n        IWETH WETH\\n    ) public {\\n        BespokeTypes.LoanData memory loanData = BespokeLogic.getLoanData(_loans, loanId);\\n        require(\\n            loanData.status == BespokeTypes.LoanStatus.BORROWING || loanData.status == BespokeTypes.LoanStatus.OVERDUE,\\n            'BM_REPAY_STATUS_ERROR'\\n        );\\n\\n        address underlyingAsset = IOpenSkyPool(SETTINGS.poolAddress())\\n            .getReserveData(loanData.reserveId)\\n            .underlyingAsset;\\n        require(underlyingAsset == address(WETH), 'BM_REPAY_ETH_ASSET_NOT_MATCH');\\n\\n        (address borrower, address lender) = BespokeLogic.getLoanParties(BESPOKE_SETTINGS, loanId);\\n        require(msg.sender == borrower, 'BM_REPAY_NOT_BORROW_NFT_OWNER');\\n\\n        (uint256 repayTotal, uint256 lenderAmount, uint256 protocolFee) = BespokeLogic\\n            .calculateRepayAmountAndProtocolFee(_loans, loanId, BESPOKE_SETTINGS);\\n\\n        require(msg.value >= repayTotal, 'BM_REPAY_ETH_INPUT_NOT_ENOUGH');\\n\\n        // convert to weth\\n        WETH.deposit{value: repayTotal}();\\n\\n        // transfer  to lender\\n        IERC20(underlyingAsset).approve(SETTINGS.poolAddress(), lenderAmount);\\n        IOpenSkyPool(SETTINGS.poolAddress()).deposit(loanData.reserveId, lenderAmount, lender, 0);\\n\\n        // dao vault\\n        if (protocolFee > 0) IERC20(underlyingAsset).safeTransfer(SETTINGS.daoVaultAddress(), protocolFee);\\n\\n        BespokeLogic.transferNFTOut(\\n            loanData.nftAddress,\\n            borrower,\\n            loanData.tokenId,\\n            loanData.tokenAmount,\\n            BESPOKE_SETTINGS\\n        );\\n\\n        BespokeLogic.burnLoanNft(_loans, loanId, BESPOKE_SETTINGS);\\n\\n        // refund\\n        if (msg.value > repayTotal) _safeTransferETH(msg.sender, msg.value - repayTotal);\\n\\n        emit RepayETH(loanId, msg.sender);\\n    }\\n\\n    function _safeTransferETH(address recipient, uint256 amount) internal {\\n        (bool success, ) = recipient.call{value: amount}('');\\n        require(success, 'BM_ETH_TRANSFER_FAILED');\\n    }\\n}\\n\",\"keccak256\":\"0xb43d76770ec3e938608627b14500741fee4b9e53a31f2d3ef7675ef9790fa669\",\"license\":\"MIT\"},\"contracts/bespokemarket/libraries/RolloverLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport '../../libraries/math/MathUtils.sol';\\nimport '../../libraries/math/WadRayMath.sol';\\nimport '../../interfaces/IOpenSkyPool.sol';\\nimport '../../interfaces/IOpenSkySettings.sol';\\nimport '../../libraries/types/DataTypes.sol';\\nimport '../../libraries/math/PercentageMath.sol';\\n\\nimport '../../interfaces/IOpenSkySettings.sol';\\nimport '../../interfaces/IOpenSkyPool.sol';\\n\\nimport './BespokeTypes.sol';\\nimport './SignatureChecker.sol';\\nimport '../interfaces/IOpenSkyBespokeSettings.sol';\\n\\nimport './BespokeLogic.sol';\\n\\n// TODO remove\\n//    function rollover(\\n//        uint256 loanId,\\n//        BespokeTypes.Offer memory offerData,\\n//        uint256 borrowAmount,\\n//        uint256 borrowDuration\\n//    ) public override whenNotPaused nonReentrant {\\n//        RolloverLogic.executeRollover(\\n//            _nonce,\\n//            minNonce,\\n//            _loans,\\n//            _loanIdTracker,\\n//            offerData,\\n//            BespokeTypes.executeRolloverParams({\\n//                loanId: loanId,\\n//                borrowAmount: borrowAmount,\\n//                borrowDuration: borrowDuration,\\n//                bespokeSettings: address(BESPOKE_SETTINGS),\\n//                settings: address(SETTINGS),\\n//                domainSeparator: _getDomainSeparator(),\\n//                offerHash: BespokeLogic.hashLendOffer(offerData)\\n//            })\\n//        );\\n//    }\\nlibrary RolloverLogic {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using PercentageMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    event Rollover(\\n        bytes32 offerHash,\\n        uint256 oldLoanId,\\n        uint256 indexed loanId,\\n        address indexed lender,\\n        address indexed borrower,\\n        uint256 nonce\\n    );\\n\\n    function executeRollover(\\n        mapping(address => mapping(uint256 => bool)) storage _nonce,\\n        mapping(address => uint256) storage minNonce,\\n        mapping(uint256 => BespokeTypes.LoanData) storage _loans,\\n        BespokeTypes.Counter storage _loanIdTracker,\\n        BespokeTypes.Offer memory offerData,\\n        BespokeTypes.executeRolloverParams memory params\\n    ) public {\\n        BespokeTypes.LoanData memory loanData = BespokeLogic.getLoanData(_loans, params.loanId);\\n\\n        require(\\n            loanData.status == BespokeTypes.LoanStatus.BORROWING || loanData.status == BespokeTypes.LoanStatus.OVERDUE,\\n            'BM_REPAY_STATUS_ERROR'\\n        );\\n        (address borrower, address lender) = BespokeLogic.getLoanParties(\\n            IOpenSkyBespokeSettings(params.bespokeSettings),\\n            params.loanId\\n        );\\n\\n        require(msg.sender == borrower, 'BM_REPAY_NOT_BORROW_NFT_OWNER');\\n        (uint256 repayTotal, uint256 lenderAmount, uint256 protocolFee) = BespokeLogic\\n            .calculateRepayAmountAndProtocolFee(_loans, params.loanId, IOpenSkyBespokeSettings(params.bespokeSettings));\\n\\n        DataTypes.ReserveData memory reserve = IOpenSkyPool(IOpenSkySettings(params.settings).poolAddress())\\n            .getReserveData(offerData.reserveId);\\n\\n        BespokeLogic.validateTakeLendOffer(\\n            _nonce,\\n            minNonce,\\n            offerData,\\n            BespokeTypes.validateTakeLendOfferParams({\\n                offerHash: params.offerHash,\\n                underlyingSpecified: address(reserve.underlyingAsset), // TODO check\\n                borrowAmount: params.borrowAmount,\\n                borrowDuration: params.borrowDuration,\\n                domainSeparator: params.domainSeparator,\\n                bespokeSettings: params.bespokeSettings,\\n                settings: params.settings\\n            })\\n        );\\n\\n        _nonce[offerData.signer][offerData.nonce] = true;\\n        // //////////////////params.borrowAmount\\n        // 1. same lender 2. different lender\\n        if (loanData.lender != offerData.signer) {\\n            // oToken from new lender\\n            IERC20(reserve.oTokenAddress).safeTransferFrom(offerData.signer, address(this), params.borrowAmount);\\n\\n            if (params.borrowAmount <= lenderAmount) {\\n                \\n                // repay part-1 to previous lender\\n                IOpenSkyPool(IOpenSkySettings(params.settings).poolAddress()).withdraw(\\n                    offerData.reserveId,\\n                    params.borrowAmount,\\n                    lender\\n                );\\n\\n                // erc20 eg. weth/usdt from borrower\\n                IERC20(reserve.underlyingAsset).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    repayTotal - params.borrowAmount\\n                );\\n\\n                // repay part-2 to previous lender\\n                if (repayTotal - params.borrowAmount - protocolFee > 0) {\\n                    IERC20(reserve.underlyingAsset).safeTransfer(\\n                        lender,\\n                        repayTotal - params.borrowAmount - protocolFee\\n                    );\\n                }\\n\\n                // to vault\\n                if (protocolFee > 0) {\\n                    // deposit oToken to vault\\n                    IERC20(reserve.underlyingAsset).approve(\\n                        IOpenSkySettings(params.settings).poolAddress(),\\n                        protocolFee\\n                    );\\n                    IOpenSkyPool(IOpenSkySettings(params.settings).poolAddress()).deposit(\\n                        offerData.reserveId,\\n                        protocolFee,\\n                        IOpenSkySettings(params.settings).daoVaultAddress(),\\n                        0\\n                    );\\n                }\\n            } else if (params.borrowAmount >= (lenderAmount + protocolFee)) {\\n                // part-1 to previous lender\\n                IOpenSkyPool(IOpenSkySettings(params.settings).poolAddress()).withdraw(\\n                    offerData.reserveId,\\n                    lenderAmount,\\n                    lender\\n                );\\n\\n                // part-2 to borrower\\n                if (params.borrowAmount > repayTotal)\\n                    IOpenSkyPool(IOpenSkySettings(params.settings).poolAddress()).withdraw(\\n                        offerData.reserveId,\\n                        params.borrowAmount - repayTotal,\\n                        msg.sender\\n                    );\\n\\n                // part-3 to vault\\n                if (protocolFee > 0) {\\n                    IERC20(reserve.oTokenAddress).safeTransfer(lender, protocolFee);\\n                }\\n            } else {\\n                //(params.borrowAmount > lenderAmount && params.borrowAmount < (lenderAmount + protocolFee))\\n                // step1: repay to previous lender\\n                IOpenSkyPool(IOpenSkySettings(params.settings).poolAddress()).withdraw(\\n                    offerData.reserveId,\\n                    lenderAmount,\\n                    lender\\n                );\\n\\n                // step2: part-1 for vault from lender\\n                IERC20(reserve.oTokenAddress).safeTransfer(lender, lenderAmount - params.borrowAmount);\\n\\n                // step3: part-1 for vault from borrower\\n                IERC20(reserve.underlyingAsset).safeTransferFrom(msg.sender, lender, repayTotal - params.borrowAmount);\\n            }\\n        } else {\\n            if (params.borrowAmount <= lenderAmount) {\\n                // borrow less\\n                IERC20(reserve.underlyingAsset).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    repayTotal - params.borrowAmount\\n                );\\n\\n                if (repayTotal - params.borrowAmount - protocolFee > 0)\\n                    IERC20(reserve.underlyingAsset).safeTransfer(\\n                        lender,\\n                        repayTotal - params.borrowAmount - protocolFee\\n                    );\\n                if (protocolFee > 0) {\\n                    // deposit oToken to vault\\n                    IERC20(reserve.underlyingAsset).approve(\\n                        IOpenSkySettings(params.settings).poolAddress(),\\n                        protocolFee\\n                    );\\n                    IOpenSkyPool(IOpenSkySettings(params.settings).poolAddress()).deposit(\\n                        offerData.reserveId,\\n                        protocolFee,\\n                        IOpenSkySettings(params.settings).daoVaultAddress(),\\n                        0\\n                    );\\n                }\\n            } else if (params.borrowAmount >= (lenderAmount + protocolFee)) {\\n                // borrow more\\n                IERC20(reserve.oTokenAddress).safeTransferFrom(\\n                    offerData.signer,\\n                    address(this),\\n                    params.borrowAmount - lenderAmount\\n                );\\n\\n                // to borrower\\n                if (params.borrowAmount > lenderAmount + protocolFee) {\\n                    IOpenSkyPool(IOpenSkySettings(params.settings).poolAddress()).withdraw(\\n                        offerData.reserveId,\\n                        params.borrowAmount - lenderAmount - protocolFee,\\n                        msg.sender\\n                    );\\n                }\\n                // transfer oToken\\n                if (protocolFee > 0)\\n                    IERC20(reserve.oTokenAddress).safeTransfer(\\n                        IOpenSkySettings(params.settings).daoVaultAddress(),\\n                        protocolFee\\n                    );\\n            } else {\\n                //  (params.borrowAmount > lenderAmount && params.borrowAmount < (lenderAmount + protocolFee))\\n                //step1: lender part\\n                IERC20(reserve.oTokenAddress).safeTransferFrom(\\n                    offerData.signer,\\n                    IOpenSkySettings(params.settings).daoVaultAddress(),\\n                    params.borrowAmount - lenderAmount\\n                );\\n\\n                // step2:borrower part. mint oToken to vault\\n                IERC20(reserve.underlyingAsset).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    lenderAmount + protocolFee - params.borrowAmount\\n                );\\n                IERC20(reserve.underlyingAsset).approve(\\n                    IOpenSkySettings(params.settings).poolAddress(),\\n                    lenderAmount + protocolFee - params.borrowAmount\\n                );\\n                IOpenSkyPool(IOpenSkySettings(params.settings).poolAddress()).deposit(\\n                    offerData.reserveId,\\n                    lenderAmount + protocolFee - params.borrowAmount,\\n                    IOpenSkySettings(params.settings).daoVaultAddress(),\\n                    0\\n                );\\n            }\\n        }\\n\\n        // ////////////////\\n\\n        // end old loan\\n        BespokeLogic.burnLoanNft(_loans, params.loanId, IOpenSkyBespokeSettings(params.bespokeSettings));\\n\\n        // create new loan\\n        uint256 newLoanId = BespokeLogic.mintLoanNFT(\\n            _loanIdTracker,\\n            msg.sender,\\n            offerData.signer,\\n            IOpenSkyBespokeSettings(params.bespokeSettings)\\n        );\\n\\n        BespokeLogic.createLoanWhenTakeLend(\\n            _loans,\\n            offerData,\\n            newLoanId, // new\\n            params.borrowAmount,\\n            params.borrowDuration,\\n            IOpenSkyBespokeSettings(params.bespokeSettings),\\n            loanData.tokenId // same as old loan\\n        );\\n\\n        emit Rollover(\\n            params.offerHash,\\n            params.loanId,\\n            newLoanId,\\n            offerData.signer, // lender,\\n            msg.sender, // borrower,\\n            offerData.nonce\\n        );\\n    }\\n\\n    // TODO bespoke to bespoke using ETH\\n    // TODO bespoke to pool\\n    // TODO pool to bespoke\\n}\\n\",\"keccak256\":\"0xac9edcc2eac81484855a72f4b08c227c65a62619a035585bcfbc37138c254665\",\"license\":\"MIT\"},\"contracts/bespokemarket/libraries/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\nimport {IERC1271} from '@openzeppelin/contracts/interfaces/IERC1271.sol';\\n\\n/**\\n * @title SignatureChecker\\n * @notice This library allows verification of signatures for both EOAs and contracts.\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @notice Recovers the signer of a signature (for EOA)\\n     * @param hash the hash containing the signed mesage\\n     * @param v parameter (27 or 28). This prevents maleability since the public key recovery equation has two possible solutions.\\n     * @param r parameter\\n     * @param s parameter\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // https://ethereum.stackexchange.com/questions/83174/is-it-best-practice-to-check-signature-malleability-in-ecrecover\\n        // https://crypto.iacr.org/2019/affevents/wac/medias/Heninger-BiasedNonceSense.pdf\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            'BM_SIGNATURE_INVALID_S_PARAMETER'\\n        );\\n\\n        require(v == 27 || v == 28, 'BM_SIGNATURE_INVALID_V_PARAMETER');\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), 'BM_SIGNATURE_INVALID_SIGNER');\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @notice Returns whether the signer matches the signed message\\n     * @param hash the hash containing the signed mesage\\n     * @param signer the signer address to confirm message validity\\n     * @param v parameter (27 or 28)\\n     * @param r parameter\\n     * @param s parameter\\n     * @param domainSeparator paramer to prevent signature being executed in other chains and environments\\n     * @return true --> if valid // false --> if invalid\\n     */\\n    function verify(\\n        bytes32 hash,\\n        address signer,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        bytes32 domainSeparator\\n    ) internal view returns (bool) {\\n        // \\\\x19\\\\x01 is the standardized encoding prefix\\n        // https://eips.ethereum.org/EIPS/eip-712#specification\\n        bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', domainSeparator, hash));\\n        if (Address.isContract(signer)) {\\n            // 0x1626ba7e is the interfaceId for signature contracts (see IERC1271)\\n            return IERC1271(signer).isValidSignature(digest, abi.encodePacked(r, s, v)) == 0x1626ba7e;\\n        } else {\\n            return recover(digest, v, r, s) == signer;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d997d9be9ec81d9643d9fc9f1f72d917ab1196add37ae6f9bc1ad378daa829d\",\"license\":\"MIT\"},\"contracts/bespokemarket/libraries/TakeBorrowOfferLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport '../../libraries/math/MathUtils.sol';\\nimport '../../libraries/math/WadRayMath.sol';\\nimport '../../interfaces/IOpenSkyPool.sol';\\nimport '../../interfaces/IOpenSkySettings.sol';\\nimport '../../libraries/types/DataTypes.sol';\\nimport '../../libraries/math/PercentageMath.sol';\\nimport '../../dependencies/weth/IWETH.sol';\\n\\nimport '../../interfaces/IOpenSkySettings.sol';\\nimport '../../interfaces/IOpenSkyPool.sol';\\n\\nimport './BespokeTypes.sol';\\nimport './SignatureChecker.sol';\\nimport '../interfaces/IOpenSkyBespokeSettings.sol';\\nimport '../interfaces/IOpenSkyBespokeLendOfferStrategy.sol';\\n\\nimport './BespokeLogic.sol';\\n\\nlibrary TakeBorrowOfferLogic {\\n    using SafeERC20 for IERC20;\\n\\n    event TakeBorrowOffer(\\n        bytes32 offerHash,\\n        uint256 indexed loanId,\\n        address indexed lender,\\n        address indexed borrower,\\n        uint256 nonce\\n    );\\n\\n    event TakeBorrowOfferETH(\\n        bytes32 offerHash,\\n        uint256 indexed loanId,\\n        address indexed lender,\\n        address indexed borrower,\\n        uint256 nonce\\n    );\\n\\n    function executeTakeBorrowOffer(\\n        mapping(address => mapping(uint256 => bool)) storage _nonce,\\n        mapping(address => uint256) storage minNonce,\\n        mapping(uint256 => BespokeTypes.LoanData) storage _loans,\\n        BespokeTypes.Counter storage _loanIdTracker,\\n        BespokeTypes.Offer memory offerData,\\n        BespokeTypes.executeTakeBorrowParams memory params\\n    ) public {\\n        // validate\\n        address underlyingAsset = IOpenSkyPool(IOpenSkySettings(params.settings).poolAddress())\\n            .getReserveData(offerData.reserveId)\\n            .underlyingAsset;\\n\\n        // comment validation\\n        BespokeLogic.validateOfferCommon(\\n            _nonce,\\n            minNonce,\\n            offerData,\\n            params.offerHash,\\n            underlyingAsset,\\n            params.amount,\\n            params.duration,\\n            params.domainSeparator,\\n            IOpenSkyBespokeSettings(params.bespokeSettings),\\n            IOpenSkySettings(params.settings)\\n        );\\n        // prevents replay\\n        _nonce[offerData.signer][offerData.nonce] = true;\\n\\n        //_transferNFT(offerData.nftAddress, offerData.signer, address(this), offerData.tokenId, offerData.tokenAmount);\\n        BespokeLogic.transferNFTIn(\\n            offerData.nftAddress,\\n            offerData.signer,\\n            offerData.tokenId,\\n            offerData.tokenAmount,\\n            IOpenSkyBespokeSettings(params.bespokeSettings)\\n        );\\n\\n        // oToken balance\\n        DataTypes.ReserveData memory reserve = IOpenSkyPool(IOpenSkySettings(params.settings).poolAddress())\\n            .getReserveData(offerData.reserveId);\\n        (uint256 oTokenToUse, uint256 inputAmount) = calculateTokenToUse(\\n            offerData.reserveId,\\n            reserve.oTokenAddress,\\n            msg.sender,\\n            params.amount,\\n            params.settings\\n        );\\n\\n        if (oTokenToUse > 0) {\\n            // transfer oToken from lender\\n            IERC20(reserve.oTokenAddress).safeTransferFrom(msg.sender, address(this), oTokenToUse);\\n\\n            // withdraw underlying to borrower\\n            IOpenSkyPool(IOpenSkySettings(params.settings).poolAddress()).withdraw(\\n                offerData.reserveId,\\n                oTokenToUse,\\n                offerData.signer\\n            );\\n        }\\n\\n        if (inputAmount > 0) {\\n            IERC20(reserve.underlyingAsset).safeTransferFrom(msg.sender, offerData.signer, inputAmount);\\n        }\\n\\n        uint256 loanId = BespokeLogic.mintLoanNFT(\\n            _loanIdTracker,\\n            offerData.signer,\\n            msg.sender,\\n            IOpenSkyBespokeSettings(params.bespokeSettings)\\n        );\\n\\n        BespokeLogic.createLoan(\\n            _loans,\\n            offerData,\\n            loanId,\\n            params.amount,\\n            params.duration,\\n            IOpenSkyBespokeSettings(params.bespokeSettings)\\n        );\\n\\n        emit TakeBorrowOffer(params.offerHash, loanId, msg.sender, offerData.signer, offerData.nonce);\\n    }\\n\\n    function executeTakeBorrowOfferETH(\\n        mapping(address => mapping(uint256 => bool)) storage _nonce,\\n        mapping(address => uint256) storage minNonce,\\n        mapping(uint256 => BespokeTypes.LoanData) storage _loans,\\n        BespokeTypes.Counter storage _loanIdTracker,\\n        BespokeTypes.Offer memory offerData,\\n        BespokeTypes.executeTakeBorrowParams memory params,\\n        IWETH WETH\\n    ) public {\\n        // validate\\n        address underlyingAsset = IOpenSkyPool(IOpenSkySettings(params.settings).poolAddress())\\n            .getReserveData(offerData.reserveId)\\n            .underlyingAsset;\\n\\n        // comment validation\\n        BespokeLogic.validateOfferCommon(\\n            _nonce,\\n            minNonce,\\n            offerData,\\n            params.offerHash,\\n            underlyingAsset,\\n            params.amount,\\n            params.duration,\\n            params.domainSeparator,\\n            IOpenSkyBespokeSettings(params.bespokeSettings),\\n            IOpenSkySettings(params.settings)\\n        );\\n\\n        // prevents replay\\n        _nonce[offerData.signer][offerData.nonce] = true;\\n\\n        BespokeLogic.transferNFTIn(\\n            offerData.nftAddress,\\n            offerData.signer,\\n            offerData.tokenId,\\n            offerData.tokenAmount,\\n            IOpenSkyBespokeSettings(params.bespokeSettings)\\n        );\\n\\n        // oWeth balance\\n        address oTokenAddress = IOpenSkyPool(IOpenSkySettings(params.settings).poolAddress())\\n            .getReserveData(offerData.reserveId)\\n            .oTokenAddress;\\n        (uint256 oTokenToUse, uint256 inputETH) = calculateTokenToUse(\\n            offerData.reserveId,\\n            oTokenAddress,\\n            msg.sender,\\n            params.amount,\\n            params.settings\\n        );\\n\\n        if (oTokenToUse > 0) {\\n            IERC20(oTokenAddress).safeTransferFrom(msg.sender, address(this), oTokenToUse);\\n            // oWETH => WETH\\n            IOpenSkyPool(IOpenSkySettings(params.settings).poolAddress()).withdraw(\\n                offerData.reserveId,\\n                oTokenToUse,\\n                address(this)\\n            );\\n        }\\n        if (inputETH > 0) {\\n            require(msg.value >= inputETH, 'BM_TAKE_BORROW_OFFER_ETH_INPUT_NOT_ENOUGH');\\n            // convert to WETH\\n            WETH.deposit{value: inputETH}();\\n        }\\n\\n        // transfer WETH to borrower\\n        require(WETH.balanceOf(address(this)) >= params.amount, 'BM_TAKE_BORROW_OFFER_ETH_BALANCE_NOT_ENOUGH');\\n        WETH.transferFrom(address(this), offerData.signer, params.amount);\\n\\n        uint256 loanId = BespokeLogic.mintLoanNFT(\\n            _loanIdTracker,\\n            offerData.signer,\\n            msg.sender,\\n            IOpenSkyBespokeSettings(params.bespokeSettings)\\n        );\\n\\n        BespokeLogic.createLoan(\\n            _loans,\\n            offerData,\\n            loanId,\\n            params.amount,\\n            params.duration,\\n            IOpenSkyBespokeSettings(params.bespokeSettings)\\n        );\\n\\n        // refund remaining dust eth\\n        if (msg.value > inputETH) {\\n            uint256 refundAmount = msg.value - inputETH;\\n            _safeTransferETH(msg.sender, refundAmount);\\n        }\\n\\n        emit TakeBorrowOfferETH(params.offerHash, loanId, msg.sender, offerData.signer, offerData.nonce);\\n    }\\n\\n    function _safeTransferETH(address recipient, uint256 amount) internal {\\n        (bool success, ) = recipient.call{value: amount}('');\\n        require(success, 'BM_ETH_TRANSFER_FAILED');\\n    }\\n\\n    function calculateTokenToUse(\\n        uint256 reserveId,\\n        address oTokenAddress,\\n        address lender,\\n        uint256 supplyAmount,\\n        address settings\\n    ) internal view returns (uint256 oTokenToUse, uint256 inputAmount) {\\n        uint256 oTokenBalance = IERC20(oTokenAddress).balanceOf(lender);\\n        uint256 availableLiquidity = IOpenSkyPool(IOpenSkySettings(settings).poolAddress()).getAvailableLiquidity(\\n            reserveId\\n        );\\n        oTokenBalance = availableLiquidity > oTokenBalance ? oTokenBalance : availableLiquidity;\\n        oTokenToUse = oTokenBalance < supplyAmount ? oTokenBalance : supplyAmount;\\n        inputAmount = oTokenBalance < supplyAmount ? supplyAmount - oTokenBalance : 0;\\n    }\\n}\\n\",\"keccak256\":\"0x4bfe43d26cb0c13ea4d9b012da319a92f4fdaa0af87b6f312cfd227581448ecb\",\"license\":\"MIT\"},\"contracts/bespokemarket/libraries/TakeLendOfferLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport '../../libraries/math/MathUtils.sol';\\nimport '../../libraries/math/WadRayMath.sol';\\nimport '../../interfaces/IOpenSkyPool.sol';\\nimport '../../interfaces/IOpenSkySettings.sol';\\nimport '../../libraries/types/DataTypes.sol';\\nimport '../../libraries/math/PercentageMath.sol';\\n\\nimport '../../interfaces/IOpenSkySettings.sol';\\nimport '../../interfaces/IOpenSkyPool.sol';\\n\\nimport './BespokeTypes.sol';\\nimport './SignatureChecker.sol';\\nimport '../interfaces/IOpenSkyBespokeSettings.sol';\\nimport '../interfaces/IOpenSkyBespokeLendOfferStrategy.sol';\\n\\nimport './BespokeLogic.sol';\\n\\nlibrary TakeLendOfferLogic {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using PercentageMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    event TakeLendOffer(\\n        bytes32 offerHash,\\n        uint256 indexed loanId,\\n        address indexed lender,\\n        address indexed borrower,\\n        uint256 nonce\\n    );\\n\\n    function executeTakeLendOffer(\\n        mapping(address => mapping(uint256 => bool)) storage _nonce,\\n        mapping(address => uint256) storage minNonce,\\n        mapping(uint256 => BespokeTypes.LoanData) storage _loans,\\n        BespokeTypes.Counter storage _loanIdTracker,\\n        BespokeTypes.Offer memory offerData,\\n        BespokeTypes.executeTakeLendParams memory params\\n    ) public {\\n        // validate\\n        address underlyingAsset = IOpenSkyPool(IOpenSkySettings(params.settings).poolAddress())\\n            .getReserveData(offerData.reserveId)\\n            .underlyingAsset;\\n\\n        // comment validation\\n        BespokeLogic.validateOfferCommon(\\n            _nonce,\\n            minNonce,\\n            offerData,\\n            params.offerHash,\\n            underlyingAsset,\\n            params.borrowAmount,\\n            params.borrowDuration,\\n            params.domainSeparator,\\n            IOpenSkyBespokeSettings(params.bespokeSettings),\\n            IOpenSkySettings(params.settings)\\n        );\\n        validateTakeLendOffer(_nonce, minNonce, offerData, params);\\n\\n        // prevents replay\\n        _nonce[offerData.signer][offerData.nonce] = true;\\n\\n        // transfer nft  TODO check what will happen if tokenAmount not equal 1\\n        BespokeLogic.transferNFTIn(\\n            offerData.nftAddress,\\n            msg.sender,\\n            params.tokenId,\\n            offerData.tokenAmount,\\n            IOpenSkyBespokeSettings(params.bespokeSettings)\\n        );\\n\\n        // step1: transfer oToken from lender\\n        address oTokenAddress = IOpenSkyPool(IOpenSkySettings(params.settings).poolAddress())\\n            .getReserveData(offerData.reserveId)\\n            .oTokenAddress;\\n        IERC20(oTokenAddress).safeTransferFrom(offerData.signer, address(this), params.borrowAmount);\\n\\n        // step2: withdraw underlying to borrower\\n        IOpenSkyPool(IOpenSkySettings(params.settings).poolAddress()).withdraw(\\n            offerData.reserveId,\\n            params.borrowAmount,\\n            msg.sender\\n        );\\n\\n        // mint loanNft\\n        uint256 loanId = BespokeLogic.mintLoanNFT(\\n            _loanIdTracker,\\n            msg.sender,\\n            offerData.signer,\\n            IOpenSkyBespokeSettings(params.bespokeSettings)\\n        );\\n        // create loan\\n        BespokeLogic.createLoanWhenTakeLend(\\n            _loans,\\n            offerData,\\n            loanId,\\n            params.borrowAmount,\\n            params.borrowDuration,\\n            IOpenSkyBespokeSettings(params.bespokeSettings),\\n            params.tokenId\\n        );\\n\\n        emit TakeLendOffer(params.offerHash, loanId, offerData.signer, msg.sender, offerData.nonce);\\n    }\\n\\n    function validateTakeLendOffer(\\n        mapping(address => mapping(uint256 => bool)) storage _nonce,\\n        mapping(address => uint256) storage minNonce,\\n        BespokeTypes.Offer memory offerData,\\n        BespokeTypes.executeTakeLendParams memory params\\n    ) public {\\n        address underlyingAsset = IOpenSkyPool(IOpenSkySettings(params.settings).poolAddress())\\n            .getReserveData(offerData.reserveId)\\n            .underlyingAsset;\\n\\n        require(\\n            SignatureChecker.verify(\\n                params.offerHash,\\n                offerData.signer,\\n                offerData.v,\\n                offerData.r,\\n                offerData.s,\\n                params.domainSeparator\\n            ),\\n            'BM_TAKE_LEND_SIGNATURE_INVALID'\\n        );\\n\\n        require(offerData.strategy != address(0), 'BM_TAKE_LEND_STRATEGY_EMPTY');\\n\\n        //validate strategy\\n        require(\\n            IOpenSkyBespokeLendOfferStrategy(offerData.strategy).tokenIdMatchOffer(\\n                offerData,\\n                BespokeTypes.LendOfferTakeParams({taker: msg.sender, tokenId: params.tokenId, params: params.params})\\n            ) == true,\\n            'BM_BM_TAKE_LEND_STRATEGY_NOT_PASS'\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x74582f962ab56188823799c1524b9d6f13aff2fe90b4b13a013abef6c8e0ceb6\",\"license\":\"MIT\"},\"contracts/dependencies/weth/IWETH.sol\":{\"content\":\"pragma solidity 0.8.10;\\n\\ninterface IWETH {\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x58e84c715a8587d2685d905f79018c85ff42b628f5a8ca4c115342dea17053ab\"},\"contracts/interfaces/IACLManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IACLManager {\\n    function addEmergencyAdmin(address admin) external;\\n    \\n    function isEmergencyAdmin(address admin) external view returns (bool);\\n    \\n    function removeEmergencyAdmin(address admin) external;\\n    \\n    function addGovernance(address admin) external;\\n    \\n    function isGovernance(address admin) external view returns (bool);\\n\\n    function removeGovernance(address admin) external;\\n\\n    function addPoolAdmin(address admin) external;\\n\\n    function isPoolAdmin(address admin) external view returns (bool);\\n\\n    function removePoolAdmin(address admin) external;\\n\\n    function addLiquidationOperator(address address_) external;\\n\\n    function isLiquidationOperator(address address_) external view returns (bool);\\n\\n    function removeLiquidationOperator(address address_) external;\\n\\n    function addAirdropOperator(address address_) external;\\n\\n    function isAirdropOperator(address address_) external view returns (bool);\\n\\n    function removeAirdropOperator(address address_) external;\\n}\\n\",\"keccak256\":\"0x0e77d3bdc88ba10cd78a9a80350bbf0d4120a1d0ac7c7911bef8c8cb389cf42f\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyFlashClaimReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IOpenSkyFlashClaimReceiver {\\n    function executeOperation(\\n        address[] calldata nftAddresses,\\n        uint256[] calldata tokenIds,\\n        address initiator,\\n        address operator,\\n        bytes calldata params\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x20c9cbf82dc555a3e1f468dc755742af0dedb3ab5165b975b473e55870d0fbe4\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IOpenSkyPool\\n * @author OpenSky Labs\\n * @notice Defines the basic interface for an OpenSky Pool.\\n **/\\n\\ninterface IOpenSkyPool {\\n    /*\\n     * @dev Emitted on create()\\n     * @param reserveId The ID of the reserve\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param oTokenAddress The address of the oToken\\n     * @param name The name to use for oToken\\n     * @param symbol The symbol to use for oToken\\n     * @param decimals The decimals of the oToken\\n     */\\n    event Create(\\n        uint256 indexed reserveId,\\n        address indexed underlyingAsset,\\n        address indexed oTokenAddress,\\n        string name,\\n        string symbol,\\n        uint8 decimals\\n    );\\n\\n    /*\\n     * @dev Emitted on setTreasuryFactor()\\n     * @param reserveId The ID of the reserve\\n     * @param factor The new treasury factor of the reserve\\n     */\\n    event SetTreasuryFactor(uint256 indexed reserveId, uint256 factor);\\n\\n    /*\\n     * @dev Emitted on setInterestModelAddress()\\n     * @param reserveId The ID of the reserve\\n     * @param interestModelAddress The address of the interest model contract\\n     */\\n    event SetInterestModelAddress(uint256 indexed reserveId, address interestModelAddress);\\n\\n    /*\\n     * @dev Emitted on openMoneyMarket()\\n     * @param reserveId The ID of the reserve\\n     */\\n    event OpenMoneyMarket(uint256 reserveId);\\n\\n    /*\\n     * @dev Emitted on closeMoneyMarket()\\n     * @param reserveId The ID of the reserve\\n     */\\n    event CloseMoneyMarket(uint256 reserveId);\\n\\n    /*\\n     * @dev Emitted on deposit()\\n     * @param reserveId The ID of the reserve\\n     * @param onBehalfOf The address that will receive the oTokens\\n     * @param amount The amount of ETH to be deposited\\n     * @param referralCode integrators are assigned a referral code and can potentially receive rewards\\n     * 0 if the action is executed directly by the user, without any intermediaries\\n     */\\n    event Deposit(uint256 indexed reserveId, address indexed onBehalfOf, uint256 amount, uint256 referralCode);\\n\\n    /*\\n     * @dev Emitted on withdraw()\\n     * @param reserveId The ID of the reserve\\n     * @param onBehalfOf The address that will receive assets withdrawed\\n     * @param amount The amount to be withdrawn\\n     */\\n    event Withdraw(uint256 indexed reserveId, address indexed onBehalfOf, uint256 amount);\\n\\n    /*\\n     * @dev Emitted on borrow()\\n     * @param reserveId The ID of the reserve\\n     * @param user The address initiating the withdrawal(), owner of oTokens\\n     * @param onBehalfOf The address that will receive the ETH and the loan NFT\\n     * @param loanId The loan ID\\n     */\\n    event Borrow(\\n        uint256 indexed reserveId,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 indexed loanId\\n    );\\n\\n    /*\\n     * @dev Emitted on repay()\\n     * @param reserveId The ID of the reserve\\n     * @param repayer The address initiating the repayment()\\n     * @param onBehalfOf The address that will receive the pledged NFT\\n     * @param loanId The ID of the loan\\n     * @param repayAmount The borrow balance of the loan when it was repaid\\n     * @param penalty The penalty of the loan for either early or overdue repayment\\n     */\\n    event Repay(\\n        uint256 indexed reserveId,\\n        address repayer,\\n        address indexed onBehalfOf,\\n        uint256 indexed loanId,\\n        uint256 repayAmount,\\n        uint256 penalty\\n    );\\n\\n    /*\\n     * @dev Emitted on extend()\\n     * @param reserveId The ID of the reserve\\n     * @param onBehalfOf The owner address of loan NFT\\n     * @param oldLoanId The ID of the old loan\\n     * @param newLoanId The ID of the new loan\\n     */\\n    event Extend(uint256 indexed reserveId, address indexed onBehalfOf, uint256 oldLoanId, uint256 newLoanId);\\n\\n    /*\\n     * @dev Emitted on startLiquidation()\\n     * @param reserveId The ID of the reserve\\n     * @param loanId The ID of the loan\\n     * @param nftAddress The address of the NFT used as collateral\\n     * @param tokenId The ID of the NFT used as collateral\\n     * @param operator The address initiating startLiquidation()\\n     */\\n    event StartLiquidation(\\n        uint256 indexed reserveId,\\n        uint256 indexed loanId,\\n        address indexed nftAddress,\\n        uint256 tokenId,\\n        address operator\\n    );\\n\\n    /*\\n     * @dev Emitted on endLiquidation()\\n     * @param reserveId The ID of the reserve\\n     * @param loanId The ID of the loan\\n     * @param nftAddress The address of the NFT used as collateral\\n     * @param tokenId The ID of the NFT used as collateral\\n     * @param operator\\n     * @param repayAmount The amount used to repay, must be equal to or greater than the borrowBalance, excess part will be shared by all the lenders\\n     * @param borrowBalance The borrow balance of the loan\\n     */\\n    event EndLiquidation(\\n        uint256 indexed reserveId,\\n        uint256 indexed loanId,\\n        address indexed nftAddress,\\n        uint256 tokenId,\\n        address operator,\\n        uint256 repayAmount,\\n        uint256 borrowBalance\\n    );\\n\\n    /**\\n     * @notice Creates a reserve\\n     * @dev Only callable by the pool admin role\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param name The name of the oToken\\n     * @param symbol The symbol for the oToken\\n     * @param decimals The decimals of the oToken\\n     **/\\n    function create(\\n        address underlyingAsset,\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals\\n    ) external;\\n\\n    /**\\n     * @notice Updates the treasury factor of a reserve\\n     * @dev Only callable by the pool admin role\\n     * @param reserveId The ID of the reserve\\n     * @param factor The new treasury factor of the reserve\\n     **/\\n    function setTreasuryFactor(uint256 reserveId, uint256 factor) external;\\n\\n    /**\\n     * @notice Updates the interest model address of a reserve\\n     * @dev Only callable by the pool admin role\\n     * @param reserveId The ID of the reserve\\n     * @param interestModelAddress The new address of the interest model contract\\n     **/\\n    function setInterestModelAddress(uint256 reserveId, address interestModelAddress) external;\\n\\n    /**\\n     * @notice Open the money market\\n     * @dev Only callable by the emergency admin role\\n     * @param reserveId The ID of the reserve\\n     **/\\n    function openMoneyMarket(uint256 reserveId) external;\\n\\n    /**\\n     * @notice Close the money market\\n     * @dev Only callable by the emergency admin role\\n     * @param reserveId The ID of the reserve\\n     **/\\n    function closeMoneyMarket(uint256 reserveId) external;\\n\\n    /**\\n     * @dev Deposits ETH into the reserve.\\n     * @param reserveId The ID of the reserve\\n     * @param referralCode integrators are assigned a referral code and can potentially receive rewards\\n     **/\\n    function deposit(uint256 reserveId, uint256 amount, address onBehalfOf, uint256 referralCode) external;\\n\\n    /**\\n     * @dev withdraws the ETH from reserve.\\n     * @param reserveId The ID of the reserve\\n     * @param amount amount of oETH to withdraw and receive native ETH\\n     **/\\n    function withdraw(uint256 reserveId, uint256 amount, address onBehalfOf) external;\\n\\n    /**\\n     * @dev Borrows ETH from reserve using an NFT as collateral and will receive a loan NFT as receipt.\\n     * @param reserveId The ID of the reserve\\n     * @param amount amount of ETH user will borrow\\n     * @param duration The desired duration of the loan\\n     * @param nftAddress The collateral NFT address\\n     * @param tokenId The ID of the NFT\\n     * @param onBehalfOf address of the user who will receive ETH and loan NFT.\\n     **/\\n    function borrow(\\n        uint256 reserveId,\\n        uint256 amount,\\n        uint256 duration,\\n        address nftAddress,\\n        uint256 tokenId,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Repays a loan, as a result the corresponding loan NFT owner will receive the collateralized NFT.\\n     * @param loanId The ID of the loan the user will repay\\n     */\\n    function repay(uint256 loanId) external returns (uint256);\\n\\n    /**\\n     * @dev Extends creates a new loan and terminates the old loan.\\n     * @param loanId The loan ID to extend\\n     * @param amount The amount of ERC20 token the user will borrow in the new loan\\n     * @param duration The selected duration the user will borrow in the new loan\\n     * @param onBehalfOf The address will borrow in the new loan\\n     **/\\n    function extend(\\n        uint256 loanId,\\n        uint256 amount,\\n        uint256 duration,\\n        address onBehalfOf\\n    ) external returns (uint256, uint256);\\n\\n    /**\\n     * @dev Starts liquidation for a loan when it's in LIQUIDATABLE status\\n     * @param loanId The ID of the loan which will be liquidated\\n     */\\n    function startLiquidation(uint256 loanId) external;\\n\\n    /**\\n     * @dev Completes liquidation for a loan which will be repaid.\\n     * @param loanId The ID of the liquidated loan that will be repaid.\\n     * @param amount The amount of the token that will be repaid.\\n     */\\n    function endLiquidation(uint256 loanId, uint256 amount) external;\\n\\n    /**\\n     * @dev Returns the state of the reserve\\n     * @param reserveId The ID of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getReserveData(uint256 reserveId) external view returns (DataTypes.ReserveData memory);\\n\\n    /**\\n     * @dev Returns the normalized income of the reserve\\n     * @param reserveId The ID of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(uint256 reserveId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the remaining liquidity of the reserve\\n     * @param reserveId The ID of the reserve\\n     * @return The reserve's withdrawable balance\\n     */\\n    function getAvailableLiquidity(uint256 reserveId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the instantaneous borrow limit value of a special NFT\\n     * @param nftAddress The address of the NFT\\n     * @param tokenId The ID of the NFT\\n     * @return The NFT's borrow limit\\n     */\\n    function getBorrowLimitByOracle(\\n        uint256 reserveId,\\n        address nftAddress,\\n        uint256 tokenId\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the sum of all users borrow balances include borrow interest accrued\\n     * @param reserveId The ID of the reserve\\n     * @return The total borrow balance of the reserve\\n     */\\n    function getTotalBorrowBalance(uint256 reserveId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns TVL (total value locked) of the reserve.\\n     * @param reserveId The ID of the reserve\\n     * @return The reserve's TVL\\n     */\\n    function getTVL(uint256 reserveId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd98aee1cefc2e2c3178c22435666292f9b8a1df1e4b24b17a182d8df357951a9\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkySettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\nimport '../libraries/types/DataTypes.sol';\\n\\ninterface IOpenSkySettings {\\n    event InitPoolAddress(address operator, address address_);\\n    event InitLoanAddress(address operator, address address_);\\n    event InitVaultFactoryAddress(address operator, address address_);\\n    event InitIncentiveControllerAddress(address operator, address address_);\\n    event InitWETHGatewayAddress(address operator, address address_);\\n    event InitPunkGatewayAddress(address operator, address address_);\\n    event InitDaoVaultAddress(address operator, address address_);\\n\\n    event AddToWhitelist(address operator, uint256 reserveId, address nft);\\n    event RemoveFromWhitelist(address operator, uint256 reserveId, address nft);\\n    event SetReserveFactor(address operator, uint256 factor);\\n    event SetPrepaymentFeeFactor(address operator, uint256 factor);\\n    event SetOverdueLoanFeeFactor(address operator, uint256 factor);\\n    event SetMoneyMarketAddress(address operator, address address_);\\n    event SetTreasuryAddress(address operator, address address_);\\n    event SetACLManagerAddress(address operator, address address_);\\n    event SetLoanDescriptorAddress(address operator, address address_);\\n    event SetNftPriceOracleAddress(address operator, address address_);\\n    event SetInterestRateStrategyAddress(address operator, address address_);\\n    event AddLiquidator(address operator, address address_);\\n    event RemoveLiquidator(address operator, address address_);\\n\\n    function poolAddress() external view returns (address);\\n\\n    function loanAddress() external view returns (address);\\n\\n    function vaultFactoryAddress() external view returns (address);\\n\\n    function incentiveControllerAddress() external view returns (address);\\n\\n    function wethGatewayAddress() external view returns (address);\\n\\n    function punkGatewayAddress() external view returns (address);\\n\\n    function inWhitelist(uint256 reserveId, address nft) external view returns (bool);\\n\\n    function getWhitelistDetail(uint256 reserveId, address nft) external view returns (DataTypes.WhitelistInfo memory);\\n\\n    function reserveFactor() external view returns (uint256); // treasury ratio\\n\\n    function MAX_RESERVE_FACTOR() external view returns (uint256);\\n\\n    function prepaymentFeeFactor() external view returns (uint256);\\n\\n    function overdueLoanFeeFactor() external view returns (uint256);\\n\\n    function moneyMarketAddress() external view returns (address);\\n\\n    function treasuryAddress() external view returns (address);\\n\\n    function daoVaultAddress() external view returns (address);\\n\\n    function ACLManagerAddress() external view returns (address);\\n\\n    function loanDescriptorAddress() external view returns (address);\\n\\n    function nftPriceOracleAddress() external view returns (address);\\n\\n    function interestRateStrategyAddress() external view returns (address);\\n    \\n    function isLiquidator(address liquidator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd5c1c2468464891b3ce379c8a03bc21c2c67fcf0c7493e3b35fd573fa21ea448\",\"license\":\"MIT\"},\"contracts/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    // common\\n    string public constant MATH_MULTIPLICATION_OVERFLOW = '100';\\n    string public constant MATH_ADDITION_OVERFLOW = '101';\\n    string public constant MATH_DIVISION_BY_ZERO = '102';\\n\\n    string public constant ETH_TRANSFER_FAILED = '110';\\n    string public constant RECEIVE_NOT_ALLOWED = '111';\\n    string public constant FALLBACK_NOT_ALLOWED = '112';\\n    string public constant APPROVAL_FAILED = '113';\\n\\n    // setting/factor\\n    string public constant SETTING_ZERO_ADDRESS_NOT_ALLOWED = '115';\\n    string public constant SETTING_RESERVE_FACTOR_NOT_ALLOWED = '116';\\n    string public constant SETTING_WHITELIST_INVALID_RESERVE_ID = '117';\\n    string public constant SETTING_WHITELIST_NFT_ADDRESS_IS_ZERO = '118';\\n    string public constant SETTING_WHITELIST_NFT_DURATION_OUT_OF_ORDER = '119';\\n    string public constant SETTING_WHITELIST_NFT_NAME_EMPTY = '120';\\n    string public constant SETTING_WHITELIST_NFT_SYMBOL_EMPTY = '121';\\n    string public constant SETTING_WHITELIST_NFT_LTV_NOT_ALLOWED = '122';\\n\\n    // settings/acl\\n    string public constant ACL_ONLY_GOVERNANCE_CAN_CALL = '200';\\n    string public constant ACL_ONLY_EMERGENCY_ADMIN_CAN_CALL = '201';\\n    string public constant ACL_ONLY_POOL_ADMIN_CAN_CALL = '202';\\n    string public constant ACL_ONLY_LIQUIDATOR_CAN_CALL = '203';\\n    string public constant ACL_ONLY_AIRDROP_OPERATOR_CAN_CALL = '204';\\n    string public constant ACL_ONLY_POOL_CAN_CALL = '205';\\n\\n    // lending & borrowing\\n    // reserve\\n    string public constant RESERVE_DOES_NOT_EXIST = '300';\\n    string public constant RESERVE_LIQUIDITY_INSUFFICIENT = '301';\\n    string public constant RESERVE_INDEX_OVERFLOW = '302';\\n    string public constant RESERVE_SWITCH_MONEY_MARKET_STATE_ERROR = '303';\\n    string public constant RESERVE_TREASURY_FACTOR_NOT_ALLOWED = '304';\\n    string public constant RESERVE_TOKEN_CAN_NOT_BE_CLAIMED = '305';\\n\\n    // token\\n    string public constant AMOUNT_SCALED_IS_ZERO = '310';\\n    string public constant AMOUNT_TRANSFER_OVERFLOW = '311';\\n\\n    //deposit\\n    string public constant DEPOSIT_AMOUNT_SHOULD_BE_BIGGER_THAN_ZERO = '320';\\n\\n    // withdraw\\n    string public constant WITHDRAW_AMOUNT_NOT_ALLOWED = '321';\\n    string public constant WITHDRAW_LIQUIDITY_NOT_SUFFICIENT = '322';\\n\\n    // borrow\\n    string public constant BORROW_DURATION_NOT_ALLOWED = '330';\\n    string public constant BORROW_AMOUNT_EXCEED_BORROW_LIMIT = '331';\\n    string public constant NFT_ADDRESS_IS_NOT_IN_WHITELIST = '332';\\n\\n    // repay\\n    string public constant REPAY_STATUS_ERROR = '333';\\n    string public constant REPAY_MSG_VALUE_ERROR = '334';\\n\\n    // extend\\n    string public constant EXTEND_STATUS_ERROR = '335';\\n    string public constant EXTEND_MSG_VALUE_ERROR = '336';\\n\\n    // liquidate\\n    string public constant START_LIQUIDATION_STATUS_ERROR = '360';\\n    string public constant END_LIQUIDATION_STATUS_ERROR = '361';\\n    string public constant END_LIQUIDATION_AMOUNT_ERROR = '362';\\n\\n    // loan\\n    string public constant LOAN_DOES_NOT_EXIST = '400';\\n    string public constant LOAN_SET_STATUS_ERROR = '401';\\n    string public constant LOAN_REPAYER_IS_NOT_OWNER = '402';\\n    string public constant LOAN_LIQUIDATING_STATUS_CAN_NOT_BE_UPDATED = '403';\\n    string public constant LOAN_CALLER_IS_NOT_OWNER = '404';\\n    string public constant LOAN_COLLATERAL_NFT_CAN_NOT_BE_CLAIMED = '405';\\n\\n    string public constant FLASHCLAIM_EXECUTOR_ERROR = '410';\\n    string public constant FLASHCLAIM_STATUS_ERROR = '411';\\n\\n    // money market\\n    string public constant MONEY_MARKET_DEPOSIT_AMOUNT_NOT_ALLOWED = '500';\\n    string public constant MONEY_MARKET_WITHDRAW_AMOUNT_NOT_ALLOWED = '501';\\n    string public constant MONEY_MARKET_APPROVAL_FAILED = '502';\\n    string public constant MONEY_MARKET_DELEGATE_CALL_ERROR = '503';\\n    string public constant MONEY_MARKET_REQUIRE_DELEGATE_CALL = '504';\\n    string public constant MONEY_MARKET_WITHDRAW_AMOUNT_NOT_MATCH = '505';\\n\\n    // price oracle\\n    string public constant PRICE_ORACLE_HAS_NO_PRICE_FEED = '600';\\n    string public constant PRICE_ORACLE_INCORRECT_TIMESTAMP = '601';\\n    string public constant PRICE_ORACLE_PARAMS_ERROR = '602';\\n}\\n\",\"keccak256\":\"0xc4e38b51f80e5ad6eeacd323b4ac0798c5ca51d7a2d0c9fc2ba52aafa8a064b8\",\"license\":\"MIT\"},\"contracts/libraries/math/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {WadRayMath} from './WadRayMath.sol';\\n\\nlibrary MathUtils {\\n    using WadRayMath for uint256;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n     * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate linearly accumulated during the timeDelta, in ray\\n     **/\\n\\n    function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp) external view returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 timeDifference = block.timestamp - (uint256(lastUpdateTimestamp));\\n\\n        return (rate * timeDifference) / SECONDS_PER_YEAR + WadRayMath.ray();\\n    }\\n\\n    function calculateBorrowInterest(\\n        uint256 borrowRate,\\n        uint256 amount,\\n        uint256 duration\\n    ) external pure returns (uint256) {\\n        return amount.rayMul(borrowRate.rayMul(duration).rayDiv(SECONDS_PER_YEAR));\\n    }\\n\\n    function calculateBorrowInterestPerSecond(uint256 borrowRate, uint256 amount) external pure returns (uint256) {\\n        return amount.rayMul(borrowRate).rayDiv(SECONDS_PER_YEAR);\\n    }\\n\\n    function calculateLoanSupplyRate(\\n        uint256 availableLiquidity,\\n        uint256 totalBorrows,\\n        uint256 borrowRate\\n    ) external pure returns (uint256 loanSupplyRate, uint256 utilizationRate) {\\n        utilizationRate = (totalBorrows == 0 && availableLiquidity == 0)\\n            ? 0\\n            : totalBorrows.rayDiv(availableLiquidity + totalBorrows);\\n        loanSupplyRate = utilizationRate.rayMul(borrowRate);\\n    }\\n}\\n\",\"keccak256\":\"0xe06262969c3e10f221573fd7bfdf3a89942957b5d957a6110cb5e933d2bdbff6\",\"license\":\"MIT\"},\"contracts/libraries/math/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../helpers/Errors.sol';\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded half up\\n **/\\n\\nlibrary PercentageMath {\\n  uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\n  uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\n\\n  /**\\n   * @dev Executes a percentage multiplication\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The percentage of value\\n   **/\\n  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    if (value == 0 || percentage == 0) {\\n      return 0;\\n    }\\n\\n    require(\\n      value <= (type(uint256).max - HALF_PERCENT) / percentage,\\n      Errors.MATH_MULTIPLICATION_OVERFLOW\\n    );\\n\\n    return (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\\n  }\\n\\n  /**\\n   * @dev Executes a percentage division\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The value divided the percentage\\n   **/\\n  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    require(percentage != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfPercentage = percentage / 2;\\n\\n    require(\\n      value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR,\\n      Errors.MATH_MULTIPLICATION_OVERFLOW\\n    );\\n\\n    return (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\n  }\\n}\\n\",\"keccak256\":\"0xe8333e1a929245e4198f87645eae3fc8749e8e29f505427b38ec8ca035434953\",\"license\":\"MIT\"},\"contracts/libraries/math/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {Errors} from '../helpers/Errors.sol';\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @return One ray, 1e27\\n     **/\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    /**\\n     * @return One wad, 1e18\\n     **/\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e27/2\\n     **/\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e18/2\\n     **/\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     **/\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfWAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * b + halfWAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     **/\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * WAD + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfRAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * b + halfRAY) / RAY;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, truncating the mantissa\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMulTruncate(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return (a * b) / RAY;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * RAY + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, truncating the mantissa\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDivTruncate(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        return (a * RAY) / b;\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @param a Ray\\n     * @return a casted to wad, rounded half up to the nearest wad\\n     **/\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n        uint256 result = halfRatio + a;\\n        require(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\\n\\n        return result / WAD_RAY_RATIO;\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @param a Wad\\n     * @return a converted in ray\\n     **/\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        uint256 result = a * WAD_RAY_RATIO;\\n        require(result / WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4bf6b9a00c5e9938726d173f11b56de8edd92e17593e4dfa61a3ce7336756c6b\",\"license\":\"MIT\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        uint256 reserveId;\\n        address underlyingAsset;\\n        address oTokenAddress;\\n        address moneyMarketAddress;\\n        uint128 lastSupplyIndex;\\n        uint256 borrowingInterestPerSecond;\\n        uint256 lastMoneyMarketBalance;\\n        uint40 lastUpdateTimestamp;\\n        uint256 totalBorrows;\\n        address interestModelAddress;\\n        uint256 treasuryFactor;\\n        bool isMoneyMarketOn;\\n    }\\n\\n    struct LoanData {\\n        uint256 reserveId;\\n        address nftAddress;\\n        uint256 tokenId;\\n        address borrower;\\n        uint256 amount;\\n        uint128 borrowRate;\\n        uint128 interestPerSecond;\\n        uint40 borrowBegin;\\n        uint40 borrowDuration;\\n        uint40 borrowOverdueTime;\\n        uint40 liquidatableTime;\\n        uint40 extendableTime;\\n        uint40 borrowEnd;\\n        LoanStatus status;\\n    }\\n\\n    enum LoanStatus {\\n        NONE,\\n        BORROWING,\\n        EXTENDABLE,\\n        OVERDUE,\\n        LIQUIDATABLE,\\n        LIQUIDATING\\n    }\\n\\n    struct WhitelistInfo {\\n        bool enabled;\\n        string name;\\n        string symbol;\\n        uint256 LTV;\\n        uint256 minBorrowDuration;\\n        uint256 maxBorrowDuration;\\n        uint256 extendableDuration;\\n        uint256 overdueDuration;\\n    }\\n}\\n\",\"keccak256\":\"0x487cd1dedb3146da46144bc8f0e5b970c5173efa8c19700184b8207c1ee3fc55\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162004227380380620042278339810160408190526200003491620000db565b6200003f336200006e565b6000805460ff60a01b19169055600180556001600160a01b0392831660805290821660a0521660c05262000125565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000d657600080fd5b919050565b600080600060608486031215620000f157600080fd5b620000fc84620000be565b92506200010c60208501620000be565b91506200011c60408501620000be565b90509250925092565b60805160a05160c05161403f620001e86000396000818161065301528181611416015261289a0152600081816103e90152818161086d01528181610eaa01528181611081015281816113c6015281816116570152818161201a0152818161209701526127b401526000818161068701528181610ed9015281816110b0015281816113ee0152818161167f015281816116cc015281816117f101528181611d70015281816121260152818161225a0152818161247901526127e3015261403f6000f3fe6080604052600436106102085760003560e01c80636b52b36511610118578063ad5c4648116100a0578063cae595531161006f578063cae59553146106f0578063e3185e1214610710578063f23a6e6114610730578063f2fde38b1461075c578063f7a494c31461077c57610253565b8063ad5c464814610641578063ade97ab514610675578063bc197c81146106a9578063bc6bc0cd146106d557610253565b80638bf1badd116100e75780638bf1badd146105965780638da5cb5b146105b657806396e59682146105d4578063a3d5b255146105f4578063aa99fa981461061457610253565b80636b52b3651461052c578063715018a61461054c5780638456cb591461056157806384e5cec51461057657610253565b806329c55f061161019b5780633f4ba83a1161016a5780633f4ba83a1461047e5780634f070916146104935780635c622a0e146104b35780635c975abb146104e0578063622fe39f146104ff57610253565b806329c55f06146103d75780632f844ea81461042357806333bf615614610443578063371fd8e61461045e57610253565b80630fef19d8116101d75780630fef19d814610332578063150b7a02146103525780631c187495146103965780632247463e146103c457610253565b806301ffc9a71461029b57806303282d6e146102d05780630647ee20146102f25780630795debe1461031257610253565b366102535760405162461bcd60e51b8152602060048201526016602482015275109357d49150d152559157d393d517d0531313d5d15160521b60448201526064015b60405180910390fd5b60405162461bcd60e51b815260206004820152601760248201527f424d5f46414c4c4241434b5f4e4f545f414c4c4f574544000000000000000000604482015260640161024a565b3480156102a757600080fd5b506102bb6102b6366004612e64565b61078f565b60405190151581526020015b60405180910390f35b3480156102dc57600080fd5b506102f06102eb366004612f3f565b6107c6565b005b3480156102fe57600080fd5b506102bb61030d366004612fc1565b610dbf565b34801561031e57600080fd5b506102f061032d36600461328c565b610e12565b34801561033e57600080fd5b506102f061034d36600461330c565b610ff0565b34801561035e57600080fd5b5061037d61036d366004613359565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016102c7565b3480156103a257600080fd5b506103b66103b13660046133c4565b6111bf565b6040519081526020016102c7565b6102f06103d23660046133c4565b61134d565b3480156103e357600080fd5b5061040b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102c7565b34801561042f57600080fd5b506102f061043e3660046133dd565b611493565b34801561044f57600080fd5b5061037d636cdb3d1360e11b81565b34801561046a57600080fd5b506102f06104793660046133c4565b6115dd565b34801561048a57600080fd5b506102f06116c8565b34801561049f57600080fd5b506102f06104ae36600461341e565b6117ed565b3480156104bf57600080fd5b506104d36104ce3660046133c4565b61196e565b6040516102c79190613489565b3480156104ec57600080fd5b50600054600160a01b900460ff166102bb565b34801561050b57600080fd5b5061051f61051a3660046133c4565b611b03565b6040516102c79190613497565b34801561053857600080fd5b506103b66105473660046133c4565b611cdf565b34801561055857600080fd5b506102f0611d06565b34801561056d57600080fd5b506102f0611d6c565b34801561058257600080fd5b506102f06105913660046133c4565b611e8e565b3480156105a257600080fd5b506102f06105b13660046133c4565b611f76565b3480156105c257600080fd5b506000546001600160a01b031661040b565b3480156105e057600080fd5b506103b66105ef3660046133c4565b612063565b34801561060057600080fd5b506102f061060f36600461341e565b612122565b34801561062057600080fd5b506103b661062f3660046135ac565b60026020526000908152604090205481565b34801561064d57600080fd5b5061040b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561068157600080fd5b5061040b7f000000000000000000000000000000000000000000000000000000000000000081565b3480156106b557600080fd5b5061037d6106c436600461363d565b63bc197c8160e01b95945050505050565b3480156106e157600080fd5b5061037d6380ac58cd60e01b81565b3480156106fc57600080fd5b506102f061070b3660046136d0565b612256565b34801561071c57600080fd5b506102f061072b366004613734565b612475565b34801561073c57600080fd5b5061037d61074b3660046137f2565b63f23a6e6160e01b95945050505050565b34801561076857600080fd5b506102f06107773660046135ac565b61265b565b6102f061078a36600461330c565b612723565b60006001600160e01b03198216630271189760e51b14806107c057506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008581856001600160401b038111156107e2576107e2612fed565b60405190808252806020026020018201604052801561080b578160200160208202803683370190505b5090506000866001600160401b0381111561082857610828612fed565b604051908082528060200260200182016040528015610851578160200160208202803683370190505b509050600093505b86841015610acb57336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb322a836040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ed919061385a565b6001600160a01b0316636352211e8a8a8881811061090d5761090d613877565b905060200201356040518263ffffffff1660e01b815260040161093291815260200190565b602060405180830381865afa15801561094f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610973919061385a565b6001600160a01b0316146109d35760405162461bcd60e51b815260206004820152602160248201527f424d5f464c415348434c41494d5f43414c4c45525f49535f4e4f545f4f574e456044820152602960f91b606482015260840161024a565b60006109f68989878181106109ea576109ea613877565b90506020020135611b03565b90506003816101c001516003811115610a1157610a1161345f565b1415610a5f5760405162461bcd60e51b815260206004820152601a60248201527f424d5f464c415348434c41494d5f5354415455535f4552524f52000000000000604482015260640161024a565b8060200151838681518110610a7657610a76613877565b60200260200101906001600160a01b031690816001600160a01b0316815250508060400151828681518110610aad57610aad613877565b60209081029190910101525083610ac3816138a3565b945050610859565b600093505b86841015610b9957818481518110610aea57610aea613877565b60200260200101516001600160a01b03166342842e0e308b848881518110610b1457610b14613877565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015610b6e57600080fd5b505af1158015610b82573d6000803e3d6000fd5b505050508380610b91906138a3565b945050610ad0565b604051628e896f60e41b81526001600160a01b038416906308e896f090610bce9085908590339030908d908d906004016138e7565b6020604051808303816000875af1158015610bed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1191906139a0565b610c5d5760405162461bcd60e51b815260206004820152601c60248201527f424d5f464c415348434c41494d5f4558454355544f525f4552524f5200000000604482015260640161024a565b600093505b86841015610db457818481518110610c7c57610c7c613877565b60200260200101516001600160a01b03166342842e0e8a30848881518110610ca657610ca6613877565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015610d0057600080fd5b505af1158015610d14573d6000803e3d6000fd5b50505050808481518110610d2a57610d2a613877565b6020026020010151828581518110610d4457610d44613877565b60200260200101516001600160a01b03168a6001600160a01b03167f6bac1c66016500cd7b62d69e86268760baac6cd34a70003af66ffa8a97983216610d873390565b6040516001600160a01b03909116815260200160405180910390a483610dac816138a3565b945050610c62565b505050505050505050565b6001600160a01b038216600090815260036020908152604080832084845290915281205460ff16158015610e0b57506001600160a01b0383166000908152600260205260409020548210155b9392505050565b600054600160a01b900460ff1615610e3c5760405162461bcd60e51b815260040161024a906139bd565b60026001541415610e5f5760405162461bcd60e51b815260040161024a906139e7565b600260018190555073975F102A77DfCEdCdf511b21d01561FA88F7a2ff63ff2300f460036002600560048a6040518061010001604052808c81526020018b81526020018a81526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001610f0e6128db565b8152602001738EDf2dc4A22AcFB3aF927c2985170866D9D1Bc926304432eed8f6040518263ffffffff1660e01b8152600401610f4a9190613bdb565b602060405180830381865af4158015610f67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8b9190613bee565b8152602001898152506040518763ffffffff1660e01b8152600401610fb596959493929190613c07565b60006040518083038186803b158015610fcd57600080fd5b505af4158015610fe1573d6000803e3d6000fd5b50506001805550505050505050565b600054600160a01b900460ff161561101a5760405162461bcd60e51b815260040161024a906139bd565b6002600154141561103d5760405162461bcd60e51b815260040161024a906139e7565b60026001819055507396b961a5643743536FCBE924dBA478056a438eA763c5cbf0dc6003600260056004886040518060c001604052808a81526020018981526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020016110e56128db565b8152602001738EDf2dc4A22AcFB3aF927c2985170866D9D1Bc926304432eed8d6040518263ffffffff1660e01b81526004016111219190613bdb565b602060405180830381865af415801561113e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111629190613bee565b8152506040518763ffffffff1660e01b815260040161118696959493929190613cea565b60006040518083038186803b15801561119e57600080fd5b505af41580156111b2573d6000803e3d6000fd5b5050600180555050505050565b600081815260056020818152604080842081516101e0810183528154815260018201546001600160a01b039081169482019490945260028201549281019290925260038082015460608401526004820154841660808401529381015460a083015260068101546001600160801b0380821660c0850152600160801b9091041660e0830152600781015480841661010084015264ffffffffff600160a01b82048116610120850152600160c81b90910481166101408401526008820154808216610160850152650100000000008104909116610180840152600160501b81049093166101a08301528493919290916101c084019160ff600160f01b90910416908111156112cd576112cd61345f565b60038111156112de576112de61345f565b815250509050600081610160015164ffffffffff1642106112ff574261130d565b81610160015164ffffffffff165b905061134561133183610140015164ffffffffff168361298090919063ffffffff16565b60e08401516001600160801b03169061298c565b949350505050565b600260015414156113705760405162461bcd60e51b815260040161024a906139e7565b600260015560008181526005602052604090205481906113a25760405162461bcd60e51b815260040161024a90613d26565b60405162c1340760e51b815260056004820152602481018390526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660448301527f0000000000000000000000000000000000000000000000000000000000000000811660648301527f0000000000000000000000000000000000000000000000000000000000000000166084820152737115e9815A49cDF76a8aa30C9ee9656660Eed0b39063182680e09060a4015b60006040518083038186803b15801561147357600080fd5b505af4158015611487573d6000803e3d6000fd5b50506001805550505050565b806114e05760405162461bcd60e51b815260206004820152601960248201527f424d5f43414e43454c5f43414e4e4f545f42455f454d50545900000000000000604482015260640161024a565b60005b81811015611595573360009081526002602052604090205483838381811061150d5761150d613877565b9050602002013510156115325760405162461bcd60e51b815260040161024a90613d5d565b33600090815260036020526040812060019185858581811061155657611556613877565b90506020020135815260200190815260200160002060006101000a81548160ff021916908315150217905550808061158d906138a3565b9150506114e3565b50336001600160a01b03167fac0004ba1a2ea62c1d6de00ade33246fa25432a7148f9e20cce8d9fea7493aa183836040516115d1929190613dd5565b60405180910390a25050565b600260015414156116005760405162461bcd60e51b815260040161024a906139e7565b600260015560008181526005602052604090205481906116325760405162461bcd60e51b815260040161024a90613d26565b6040516306d8c6df60e01b815260056004820152602481018390526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660448301527f0000000000000000000000000000000000000000000000000000000000000000166064820152737115e9815A49cDF76a8aa30C9ee9656660Eed0b3906306d8c6df9060840161145b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015611728573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174c919061385a565b90506001600160a01b038116632500f2b6336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156117a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c691906139a0565b6117e25760405162461bcd60e51b815260040161024a90613de9565b6117ea612a48565b50565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa15801561184d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611871919061385a565b90506001600160a01b038116639078c85a336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156118c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118eb91906139a0565b6119075760405162461bcd60e51b815260040161024a90613e2d565b61191b6001600160a01b0385168484612ae5565b826001600160a01b0316846001600160a01b03167f81275949a17d84915b61eeb24587a501cc8863011afba1ed12f3f6c5bdfd6a218460405161196091815260200190565b60405180910390a350505050565b600081815260056020818152604080842081516101e0810183528154815260018201546001600160a01b039081169482019490945260028201549281019290925260038082015460608401526004820154841660808401529381015460a083015260068101546001600160801b0380821660c0850152600160801b9091041660e0830152600781015480841661010084015264ffffffffff600160a01b82048116610120850152600160c81b90910481166101408401526008820154808216610160850152650100000000008104909116610180840152600160501b81049093166101a08301528493919290916101c084019160ff600160f01b9091041690811115611a7c57611a7c61345f565b6003811115611a8d57611a8d61345f565b905250600084815260056020526040902060080154909150600160f01b900460ff166001816003811115611ac357611ac361345f565b1415610e0b574282610180015164ffffffffff161015611ae557506003610e0b565b4282610160015164ffffffffff161015610e0b575060029392505050565b611b80604080516101e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a08101829052906101c082015290565b600082815260056020818152604080842081516101e0810183528154815260018201546001600160a01b039081169482019490945260028201549281019290925260038082015460608401526004820154841660808401529381015460a083015260068101546001600160801b0380821660c0850152600160801b9091041660e08301526007810154808416610100840152600160a01b810464ffffffffff908116610120850152600160c81b90910481166101408401526008820154808216610160850152650100000000008104909116610180840152600160501b81049093166101a0830152909290916101c0840191600160f01b90910460ff1690811115611c8d57611c8d61345f565b6003811115611c9e57611c9e61345f565b9052509050611cac8361196e565b816101c001906003811115611cc357611cc361345f565b90816003811115611cd657611cd661345f565b90525092915050565b60006107c0611ced836111bf565b6000848152600560208190526040909120015490612b3c565b6000546001600160a01b03163314611d605760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161024a565b611d6a6000612b48565b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015611dcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df0919061385a565b90506001600160a01b038116632500f2b6336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611e46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6a91906139a0565b611e865760405162461bcd60e51b815260040161024a90613de9565b6117ea612b98565b336000908152600260205260409020548111611ebc5760405162461bcd60e51b815260040161024a90613d5d565b33600090815260026020526040902054611ed9906207a120613e72565b8110611f275760405162461bcd60e51b815260206004820152601c60248201527f424d5f43414e43454c5f43414e4e4f545f43414e43454c5f4d4f524500000000604482015260640161024a565b3360008181526002602052604090819020839055517f3472ca53ce86826d0cf2457fc20b0aadb9ff559e29da4c38e37e98fb8edd966d90611f6b9084815260200190565b60405180910390a250565b600054600160a01b900460ff1615611fa05760405162461bcd60e51b815260040161024a906139bd565b60026001541415611fc35760405162461bcd60e51b815260040161024a906139e7565b60026001556000818152600560205260409020548190611ff55760405162461bcd60e51b815260040161024a90613d26565b604051635430170f60e11b815260056004820152602481018390526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660448201527370683cA418e02E8336Ce0E46E532b663Dbb960939063a8602e1e9060640161145b565b60008061206f83611b03565b905060006002826101c00151600381111561208c5761208c61345f565b1415610e0b576113457f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d7a5a9d36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121179190613bee565b60a084015190612bfd565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015612182573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a6919061385a565b90506001600160a01b038116632500f2b6336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156121fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222091906139a0565b61223c5760405162461bcd60e51b815260040161024a90613de9565b6122506001600160a01b0385168484612ae5565b50505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122da919061385a565b90506001600160a01b038116639078c85a336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015612330573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235491906139a0565b6123705760405162461bcd60e51b815260040161024a90613e2d565b60005b8281101561242057856001600160a01b03166342842e0e308787878681811061239e5761239e613877565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b1580156123f557600080fd5b505af1158015612409573d6000803e3d6000fd5b505050508080612418906138a3565b915050612373565b50836001600160a01b0316856001600160a01b03167f6c6b18e67b757c02ba92ef0f54038fc2135767acf9bef174b8780835ff4558228585604051612466929190613dd5565b60405180910390a35050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f9919061385a565b90506001600160a01b038116639078c85a336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561254f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257391906139a0565b61258f5760405162461bcd60e51b815260040161024a90613e2d565b604051631759616b60e11b81526001600160a01b038a1690632eb2c2d6906125c99030908c908c908c908c908c908c908c90600401613e8a565b600060405180830381600087803b1580156125e357600080fd5b505af11580156125f7573d6000803e3d6000fd5b50505050876001600160a01b0316896001600160a01b03167fc8144f7a11a69e58de79275b3e7420b4942b4e8318a0e0aa9ccb457c60387b0289898989898960405161264896959493929190613edf565b60405180910390a3505050505050505050565b6000546001600160a01b031633146126b55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161024a565b6001600160a01b03811661271a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161024a565b6117ea81612b48565b600054600160a01b900460ff161561274d5760405162461bcd60e51b815260040161024a906139bd565b600260015414156127705760405162461bcd60e51b815260040161024a906139e7565b60026001819055507396b961a5643743536FCBE924dBA478056a438eA763d90ab2606003600260056004886040518060c001604052808a81526020018981526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020016128186128db565b8152602001738EDf2dc4A22AcFB3aF927c2985170866D9D1Bc926304432eed8d6040518263ffffffff1660e01b81526004016128549190613bdb565b602060405180830381865af4158015612871573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128959190613bee565b8152507f00000000000000000000000000000000000000000000000000000000000000006040518863ffffffff1660e01b81526004016111869796959493929190613f28565b604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527ff0cf7ce475272740cae17eb3cadd6d254800be81c53f84a2f273b99036471c62918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b6000610e0b8284613f82565b6000821580612999575081155b156129a6575060006107c0565b816129be60026b033b2e3c9fd0803ce8000000613f99565b6129ca90600019613f82565b6129d49190613f99565b8311156040518060400160405280600381526020016203130360ec1b81525090612a115760405162461bcd60e51b815260040161024a9190613fbb565b506b033b2e3c9fd0803ce8000000612a2a600282613f99565b612a348486613fce565b612a3e9190613e72565b610e0b9190613f99565b600054600160a01b900460ff16612a985760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161024a565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612b37908490612c87565b505050565b6000610e0b8284613e72565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600054600160a01b900460ff1615612bc25760405162461bcd60e51b815260040161024a906139bd565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612ac83390565b6000821580612c0a575081155b15612c17575060006107c0565b81612c256002612710613f99565b612c3190600019613f82565b612c3b9190613f99565b8311156040518060400160405280600381526020016203130360ec1b81525090612c785760405162461bcd60e51b815260040161024a9190613fbb565b50612710612a2a600282613f99565b6000612cdc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612d599092919063ffffffff16565b805190915015612b375780806020019051810190612cfa91906139a0565b612b375760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161024a565b6060611345848460008585843b612db25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161024a565b600080866001600160a01b03168587604051612dce9190613fed565b60006040518083038185875af1925050503d8060008114612e0b576040519150601f19603f3d011682016040523d82523d6000602084013e612e10565b606091505b5091509150612e20828286612e2b565b979650505050505050565b60608315612e3a575081610e0b565b825115612e4a5782518084602001fd5b8160405162461bcd60e51b815260040161024a9190613fbb565b600060208284031215612e7657600080fd5b81356001600160e01b031981168114610e0b57600080fd5b6001600160a01b03811681146117ea57600080fd5b8035612eae81612e8e565b919050565b60008083601f840112612ec557600080fd5b5081356001600160401b03811115612edc57600080fd5b6020830191508360208260051b8501011115612ef757600080fd5b9250929050565b60008083601f840112612f1057600080fd5b5081356001600160401b03811115612f2757600080fd5b602083019150836020828501011115612ef757600080fd5b600080600080600060608688031215612f5757600080fd5b8535612f6281612e8e565b945060208601356001600160401b0380821115612f7e57600080fd5b612f8a89838a01612eb3565b90965094506040880135915080821115612fa357600080fd5b50612fb088828901612efe565b969995985093965092949392505050565b60008060408385031215612fd457600080fd5b8235612fdf81612e8e565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60405161028081016001600160401b038111828210171561302657613026612fed565b60405290565b604051601f8201601f191681016001600160401b038111828210171561305457613054612fed565b604052919050565b803560068110612eae57600080fd5b80151581146117ea57600080fd5b8035612eae8161306b565b803564ffffffffff81168114612eae57600080fd5b80356001600160801b0381168114612eae57600080fd5b600082601f8301126130c157600080fd5b81356001600160401b038111156130da576130da612fed565b6130ed601f8201601f191660200161302c565b81815284602083860101111561310257600080fd5b816020850160208301376000918101602001919091529392505050565b803560ff81168114612eae57600080fd5b6000610280828403121561314357600080fd5b61314b613003565b90506131568261305c565b815261316460208301613079565b60208201526040820135604082015261317f60608301612ea3565b60608201526080820135608082015260a082013560a08201526131a460c08301612ea3565b60c082015260e082013560e08201526101008083013581830152506101206131cd818401613084565b908201526101406131df838201613084565b908201526101606131f1838201613099565b90820152610180613203838201612ea3565b908201526101a082810135908201526101c080830135908201526101e061322b818401612ea3565b90820152610200828101356001600160401b0381111561324a57600080fd5b613256858286016130b0565b82840152505061022061326a81840161311f565b9082015261024082810135908201526102609182013591810191909152919050565b600080600080600060a086880312156132a457600080fd5b85356001600160401b03808211156132bb57600080fd5b6132c789838a01613130565b965060208801359550604088013594506060880135935060808801359150808211156132f257600080fd5b506132ff888289016130b0565b9150509295509295909350565b60008060006060848603121561332157600080fd5b83356001600160401b0381111561333757600080fd5b61334386828701613130565b9660208601359650604090950135949350505050565b6000806000806080858703121561336f57600080fd5b843561337a81612e8e565b9350602085013561338a81612e8e565b92506040850135915060608501356001600160401b038111156133ac57600080fd5b6133b8878288016130b0565b91505092959194509250565b6000602082840312156133d657600080fd5b5035919050565b600080602083850312156133f057600080fd5b82356001600160401b0381111561340657600080fd5b61341285828601612eb3565b90969095509350505050565b60008060006060848603121561343357600080fd5b833561343e81612e8e565b9250602084013561344e81612e8e565b929592945050506040919091013590565b634e487b7160e01b600052602160045260246000fd5b600481106134855761348561345f565b9052565b602081016107c08284613475565b815181526020808301516101e08301916134bb908401826001600160a01b03169052565b50604083015160408301526060830151606083015260808301516134ea60808401826001600160a01b03169052565b5060a083015160a083015260c083015161350f60c08401826001600160801b03169052565b5060e083015161352a60e08401826001600160801b03169052565b50610100838101516001600160a01b03908116918401919091526101208085015164ffffffffff90811691850191909152610140808601518216908501526101608086015182169085015261018080860151909116908401526101a080850151909116908301526101c0808401516135a482850182613475565b505092915050565b6000602082840312156135be57600080fd5b8135610e0b81612e8e565b600082601f8301126135da57600080fd5b813560206001600160401b038211156135f5576135f5612fed565b8160051b61360482820161302c565b928352848101820192828101908785111561361e57600080fd5b83870192505b84831015612e2057823582529183019190830190613624565b600080600080600060a0868803121561365557600080fd5b853561366081612e8e565b9450602086013561367081612e8e565b935060408601356001600160401b038082111561368c57600080fd5b61369889838a016135c9565b945060608801359150808211156136ae57600080fd5b6136ba89838a016135c9565b935060808801359150808211156132f257600080fd5b600080600080606085870312156136e657600080fd5b84356136f181612e8e565b9350602085013561370181612e8e565b925060408501356001600160401b0381111561371c57600080fd5b61372887828801612eb3565b95989497509550505050565b60008060008060008060008060a0898b03121561375057600080fd5b883561375b81612e8e565b9750602089013561376b81612e8e565b965060408901356001600160401b038082111561378757600080fd5b6137938c838d01612eb3565b909850965060608b01359150808211156137ac57600080fd5b6137b88c838d01612eb3565b909650945060808b01359150808211156137d157600080fd5b506137de8b828c01612efe565b999c989b5096995094979396929594505050565b600080600080600060a0868803121561380a57600080fd5b853561381581612e8e565b9450602086013561382581612e8e565b9350604086013592506060860135915060808601356001600160401b0381111561384e57600080fd5b6132ff888289016130b0565b60006020828403121561386c57600080fd5b8151610e0b81612e8e565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156138b7576138b761388d565b5060010190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60a0808252875190820181905260009060209060c0840190828b01845b828110156139295781516001600160a01b031684529284019290840190600101613904565b5050508381038285015288518082528983019183019060005b8181101561395e57835183529284019291840191600101613942565b50506001600160a01b03891660408601526001600160a01b038816606086015284810360808601526139918187896138be565b9b9a5050505050505050505050565b6000602082840312156139b257600080fd5b8151610e0b8161306b565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600681106134855761348561345f565b60005b83811015613a49578181015183820152602001613a31565b838111156122505750506000910152565b60008151808452613a72816020860160208601613a2e565b601f01601f19169290920160200192915050565b6000610280613a96848451613a1e565b6020830151613aa9602086018215159052565b50604083015160408501526060830151613ace60608601826001600160a01b03169052565b506080830151608085015260a083015160a085015260c0830151613afd60c08601826001600160a01b03169052565b5060e0838101519085015261010080840151908501526101208084015164ffffffffff908116918601919091526101408085015190911690850152610160808401516001600160801b031690850152610180808401516001600160a01b03908116918601919091526101a080850151908601526101c080850151908601526101e0808501519091169085015261020080840151818601839052613ba283870182613a5a565b9250505061022080840151613bbb8287018260ff169052565b505061024083810151908501526102609283015192909301919091525090565b602081526000610e0b6020830184613a86565b600060208284031215613c0057600080fd5b5051919050565b86815285602082015284604082015283606082015260c060808201526000613c3260c0830185613a86565b82810360a0840152610100845182526020850151602083015260408501516040830152606085015160018060a01b038082166060850152806080880151166080850152505060a085015160a083015260c085015160c083015260e08501518160e084015261399182840182613a5a565b8051825260208101516020830152604081015160018060a01b03808216604085015280606084015116606085015250506080810151608083015260a081015160a08301525050565b6000610160888352876020840152866040840152856060840152806080840152613d1681840186613a86565b915050612e2060a0830184613ca2565b60208082526018908201527f424d5f434845434b5f4c4f414e5f4e4f545f4558495354530000000000000000604082015260600190565b60208082526022908201527f424d5f43414e43454c5f4e4f4e43455f4c4f5745525f5448414e5f4355525245604082015261139560f21b606082015260800190565b81835260006001600160fb1b03831115613db857600080fd5b8260051b8083602087013760009401602001938452509192915050565b602081526000611345602083018486613d9f565b60208082526024908201527f424d5f41434c5f4f4e4c595f454d455247454e43595f41444d494e5f43414e5f60408201526310d0531360e21b606082015260800190565b60208082526025908201527f424d5f41434c5f4f4e4c595f41495244524f505f4f50455241544f525f43414e60408201526417d0d0531360da1b606082015260800190565b60008219821115613e8557613e8561388d565b500190565b6001600160a01b0389811682528816602082015260a060408201819052600090613eb7908301888a613d9f565b8281036060840152613eca818789613d9f565b905082810360808401526139918185876138be565b606081526000613ef360608301888a613d9f565b8281036020840152613f06818789613d9f565b90508281036040840152613f1b8185876138be565b9998505050505050505050565b6000610180898352886020840152876040840152866060840152806080840152613f5481840187613a86565b915050613f6460a0830185613ca2565b6001600160a01b039290921661016091909101529695505050505050565b600082821015613f9457613f9461388d565b500390565b600082613fb657634e487b7160e01b600052601260045260246000fd5b500490565b602081526000610e0b6020830184613a5a565b6000816000190483118215151615613fe857613fe861388d565b500290565b60008251613fff818460208701613a2e565b919091019291505056fea2646970667358221220622ab75db4d2378436f167395e77dca7eed6ba8dc4551734cbb448dd2557ec2264736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106102085760003560e01c80636b52b36511610118578063ad5c4648116100a0578063cae595531161006f578063cae59553146106f0578063e3185e1214610710578063f23a6e6114610730578063f2fde38b1461075c578063f7a494c31461077c57610253565b8063ad5c464814610641578063ade97ab514610675578063bc197c81146106a9578063bc6bc0cd146106d557610253565b80638bf1badd116100e75780638bf1badd146105965780638da5cb5b146105b657806396e59682146105d4578063a3d5b255146105f4578063aa99fa981461061457610253565b80636b52b3651461052c578063715018a61461054c5780638456cb591461056157806384e5cec51461057657610253565b806329c55f061161019b5780633f4ba83a1161016a5780633f4ba83a1461047e5780634f070916146104935780635c622a0e146104b35780635c975abb146104e0578063622fe39f146104ff57610253565b806329c55f06146103d75780632f844ea81461042357806333bf615614610443578063371fd8e61461045e57610253565b80630fef19d8116101d75780630fef19d814610332578063150b7a02146103525780631c187495146103965780632247463e146103c457610253565b806301ffc9a71461029b57806303282d6e146102d05780630647ee20146102f25780630795debe1461031257610253565b366102535760405162461bcd60e51b8152602060048201526016602482015275109357d49150d152559157d393d517d0531313d5d15160521b60448201526064015b60405180910390fd5b60405162461bcd60e51b815260206004820152601760248201527f424d5f46414c4c4241434b5f4e4f545f414c4c4f574544000000000000000000604482015260640161024a565b3480156102a757600080fd5b506102bb6102b6366004612e64565b61078f565b60405190151581526020015b60405180910390f35b3480156102dc57600080fd5b506102f06102eb366004612f3f565b6107c6565b005b3480156102fe57600080fd5b506102bb61030d366004612fc1565b610dbf565b34801561031e57600080fd5b506102f061032d36600461328c565b610e12565b34801561033e57600080fd5b506102f061034d36600461330c565b610ff0565b34801561035e57600080fd5b5061037d61036d366004613359565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016102c7565b3480156103a257600080fd5b506103b66103b13660046133c4565b6111bf565b6040519081526020016102c7565b6102f06103d23660046133c4565b61134d565b3480156103e357600080fd5b5061040b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102c7565b34801561042f57600080fd5b506102f061043e3660046133dd565b611493565b34801561044f57600080fd5b5061037d636cdb3d1360e11b81565b34801561046a57600080fd5b506102f06104793660046133c4565b6115dd565b34801561048a57600080fd5b506102f06116c8565b34801561049f57600080fd5b506102f06104ae36600461341e565b6117ed565b3480156104bf57600080fd5b506104d36104ce3660046133c4565b61196e565b6040516102c79190613489565b3480156104ec57600080fd5b50600054600160a01b900460ff166102bb565b34801561050b57600080fd5b5061051f61051a3660046133c4565b611b03565b6040516102c79190613497565b34801561053857600080fd5b506103b66105473660046133c4565b611cdf565b34801561055857600080fd5b506102f0611d06565b34801561056d57600080fd5b506102f0611d6c565b34801561058257600080fd5b506102f06105913660046133c4565b611e8e565b3480156105a257600080fd5b506102f06105b13660046133c4565b611f76565b3480156105c257600080fd5b506000546001600160a01b031661040b565b3480156105e057600080fd5b506103b66105ef3660046133c4565b612063565b34801561060057600080fd5b506102f061060f36600461341e565b612122565b34801561062057600080fd5b506103b661062f3660046135ac565b60026020526000908152604090205481565b34801561064d57600080fd5b5061040b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561068157600080fd5b5061040b7f000000000000000000000000000000000000000000000000000000000000000081565b3480156106b557600080fd5b5061037d6106c436600461363d565b63bc197c8160e01b95945050505050565b3480156106e157600080fd5b5061037d6380ac58cd60e01b81565b3480156106fc57600080fd5b506102f061070b3660046136d0565b612256565b34801561071c57600080fd5b506102f061072b366004613734565b612475565b34801561073c57600080fd5b5061037d61074b3660046137f2565b63f23a6e6160e01b95945050505050565b34801561076857600080fd5b506102f06107773660046135ac565b61265b565b6102f061078a36600461330c565b612723565b60006001600160e01b03198216630271189760e51b14806107c057506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008581856001600160401b038111156107e2576107e2612fed565b60405190808252806020026020018201604052801561080b578160200160208202803683370190505b5090506000866001600160401b0381111561082857610828612fed565b604051908082528060200260200182016040528015610851578160200160208202803683370190505b509050600093505b86841015610acb57336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb322a836040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ed919061385a565b6001600160a01b0316636352211e8a8a8881811061090d5761090d613877565b905060200201356040518263ffffffff1660e01b815260040161093291815260200190565b602060405180830381865afa15801561094f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610973919061385a565b6001600160a01b0316146109d35760405162461bcd60e51b815260206004820152602160248201527f424d5f464c415348434c41494d5f43414c4c45525f49535f4e4f545f4f574e456044820152602960f91b606482015260840161024a565b60006109f68989878181106109ea576109ea613877565b90506020020135611b03565b90506003816101c001516003811115610a1157610a1161345f565b1415610a5f5760405162461bcd60e51b815260206004820152601a60248201527f424d5f464c415348434c41494d5f5354415455535f4552524f52000000000000604482015260640161024a565b8060200151838681518110610a7657610a76613877565b60200260200101906001600160a01b031690816001600160a01b0316815250508060400151828681518110610aad57610aad613877565b60209081029190910101525083610ac3816138a3565b945050610859565b600093505b86841015610b9957818481518110610aea57610aea613877565b60200260200101516001600160a01b03166342842e0e308b848881518110610b1457610b14613877565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015610b6e57600080fd5b505af1158015610b82573d6000803e3d6000fd5b505050508380610b91906138a3565b945050610ad0565b604051628e896f60e41b81526001600160a01b038416906308e896f090610bce9085908590339030908d908d906004016138e7565b6020604051808303816000875af1158015610bed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1191906139a0565b610c5d5760405162461bcd60e51b815260206004820152601c60248201527f424d5f464c415348434c41494d5f4558454355544f525f4552524f5200000000604482015260640161024a565b600093505b86841015610db457818481518110610c7c57610c7c613877565b60200260200101516001600160a01b03166342842e0e8a30848881518110610ca657610ca6613877565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015610d0057600080fd5b505af1158015610d14573d6000803e3d6000fd5b50505050808481518110610d2a57610d2a613877565b6020026020010151828581518110610d4457610d44613877565b60200260200101516001600160a01b03168a6001600160a01b03167f6bac1c66016500cd7b62d69e86268760baac6cd34a70003af66ffa8a97983216610d873390565b6040516001600160a01b03909116815260200160405180910390a483610dac816138a3565b945050610c62565b505050505050505050565b6001600160a01b038216600090815260036020908152604080832084845290915281205460ff16158015610e0b57506001600160a01b0383166000908152600260205260409020548210155b9392505050565b600054600160a01b900460ff1615610e3c5760405162461bcd60e51b815260040161024a906139bd565b60026001541415610e5f5760405162461bcd60e51b815260040161024a906139e7565b600260018190555073__$f2bbf53d856d978c1f5e4330933069481a$__63ff2300f460036002600560048a6040518061010001604052808c81526020018b81526020018a81526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001610f0e6128db565b815260200173__$99340bd5a7874738aefb18e7cdd0ba78ce$__6304432eed8f6040518263ffffffff1660e01b8152600401610f4a9190613bdb565b602060405180830381865af4158015610f67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8b9190613bee565b8152602001898152506040518763ffffffff1660e01b8152600401610fb596959493929190613c07565b60006040518083038186803b158015610fcd57600080fd5b505af4158015610fe1573d6000803e3d6000fd5b50506001805550505050505050565b600054600160a01b900460ff161561101a5760405162461bcd60e51b815260040161024a906139bd565b6002600154141561103d5760405162461bcd60e51b815260040161024a906139e7565b600260018190555073__$d034307112fbb42c17024cd888eeadb556$__63c5cbf0dc6003600260056004886040518060c001604052808a81526020018981526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020016110e56128db565b815260200173__$99340bd5a7874738aefb18e7cdd0ba78ce$__6304432eed8d6040518263ffffffff1660e01b81526004016111219190613bdb565b602060405180830381865af415801561113e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111629190613bee565b8152506040518763ffffffff1660e01b815260040161118696959493929190613cea565b60006040518083038186803b15801561119e57600080fd5b505af41580156111b2573d6000803e3d6000fd5b5050600180555050505050565b600081815260056020818152604080842081516101e0810183528154815260018201546001600160a01b039081169482019490945260028201549281019290925260038082015460608401526004820154841660808401529381015460a083015260068101546001600160801b0380821660c0850152600160801b9091041660e0830152600781015480841661010084015264ffffffffff600160a01b82048116610120850152600160c81b90910481166101408401526008820154808216610160850152650100000000008104909116610180840152600160501b81049093166101a08301528493919290916101c084019160ff600160f01b90910416908111156112cd576112cd61345f565b60038111156112de576112de61345f565b815250509050600081610160015164ffffffffff1642106112ff574261130d565b81610160015164ffffffffff165b905061134561133183610140015164ffffffffff168361298090919063ffffffff16565b60e08401516001600160801b03169061298c565b949350505050565b600260015414156113705760405162461bcd60e51b815260040161024a906139e7565b600260015560008181526005602052604090205481906113a25760405162461bcd60e51b815260040161024a90613d26565b60405162c1340760e51b815260056004820152602481018390526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660448301527f0000000000000000000000000000000000000000000000000000000000000000811660648301527f000000000000000000000000000000000000000000000000000000000000000016608482015273__$cb2d98c3e8fdb912f01fe366012ef33d45$__9063182680e09060a4015b60006040518083038186803b15801561147357600080fd5b505af4158015611487573d6000803e3d6000fd5b50506001805550505050565b806114e05760405162461bcd60e51b815260206004820152601960248201527f424d5f43414e43454c5f43414e4e4f545f42455f454d50545900000000000000604482015260640161024a565b60005b81811015611595573360009081526002602052604090205483838381811061150d5761150d613877565b9050602002013510156115325760405162461bcd60e51b815260040161024a90613d5d565b33600090815260036020526040812060019185858581811061155657611556613877565b90506020020135815260200190815260200160002060006101000a81548160ff021916908315150217905550808061158d906138a3565b9150506114e3565b50336001600160a01b03167fac0004ba1a2ea62c1d6de00ade33246fa25432a7148f9e20cce8d9fea7493aa183836040516115d1929190613dd5565b60405180910390a25050565b600260015414156116005760405162461bcd60e51b815260040161024a906139e7565b600260015560008181526005602052604090205481906116325760405162461bcd60e51b815260040161024a90613d26565b6040516306d8c6df60e01b815260056004820152602481018390526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660448301527f000000000000000000000000000000000000000000000000000000000000000016606482015273__$cb2d98c3e8fdb912f01fe366012ef33d45$__906306d8c6df9060840161145b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015611728573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174c919061385a565b90506001600160a01b038116632500f2b6336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156117a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c691906139a0565b6117e25760405162461bcd60e51b815260040161024a90613de9565b6117ea612a48565b50565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa15801561184d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611871919061385a565b90506001600160a01b038116639078c85a336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156118c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118eb91906139a0565b6119075760405162461bcd60e51b815260040161024a90613e2d565b61191b6001600160a01b0385168484612ae5565b826001600160a01b0316846001600160a01b03167f81275949a17d84915b61eeb24587a501cc8863011afba1ed12f3f6c5bdfd6a218460405161196091815260200190565b60405180910390a350505050565b600081815260056020818152604080842081516101e0810183528154815260018201546001600160a01b039081169482019490945260028201549281019290925260038082015460608401526004820154841660808401529381015460a083015260068101546001600160801b0380821660c0850152600160801b9091041660e0830152600781015480841661010084015264ffffffffff600160a01b82048116610120850152600160c81b90910481166101408401526008820154808216610160850152650100000000008104909116610180840152600160501b81049093166101a08301528493919290916101c084019160ff600160f01b9091041690811115611a7c57611a7c61345f565b6003811115611a8d57611a8d61345f565b905250600084815260056020526040902060080154909150600160f01b900460ff166001816003811115611ac357611ac361345f565b1415610e0b574282610180015164ffffffffff161015611ae557506003610e0b565b4282610160015164ffffffffff161015610e0b575060029392505050565b611b80604080516101e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a08101829052906101c082015290565b600082815260056020818152604080842081516101e0810183528154815260018201546001600160a01b039081169482019490945260028201549281019290925260038082015460608401526004820154841660808401529381015460a083015260068101546001600160801b0380821660c0850152600160801b9091041660e08301526007810154808416610100840152600160a01b810464ffffffffff908116610120850152600160c81b90910481166101408401526008820154808216610160850152650100000000008104909116610180840152600160501b81049093166101a0830152909290916101c0840191600160f01b90910460ff1690811115611c8d57611c8d61345f565b6003811115611c9e57611c9e61345f565b9052509050611cac8361196e565b816101c001906003811115611cc357611cc361345f565b90816003811115611cd657611cd661345f565b90525092915050565b60006107c0611ced836111bf565b6000848152600560208190526040909120015490612b3c565b6000546001600160a01b03163314611d605760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161024a565b611d6a6000612b48565b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015611dcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df0919061385a565b90506001600160a01b038116632500f2b6336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611e46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6a91906139a0565b611e865760405162461bcd60e51b815260040161024a90613de9565b6117ea612b98565b336000908152600260205260409020548111611ebc5760405162461bcd60e51b815260040161024a90613d5d565b33600090815260026020526040902054611ed9906207a120613e72565b8110611f275760405162461bcd60e51b815260206004820152601c60248201527f424d5f43414e43454c5f43414e4e4f545f43414e43454c5f4d4f524500000000604482015260640161024a565b3360008181526002602052604090819020839055517f3472ca53ce86826d0cf2457fc20b0aadb9ff559e29da4c38e37e98fb8edd966d90611f6b9084815260200190565b60405180910390a250565b600054600160a01b900460ff1615611fa05760405162461bcd60e51b815260040161024a906139bd565b60026001541415611fc35760405162461bcd60e51b815260040161024a906139e7565b60026001556000818152600560205260409020548190611ff55760405162461bcd60e51b815260040161024a90613d26565b604051635430170f60e11b815260056004820152602481018390526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016604482015273__$6adc9fc567591ef512536f539e32424d55$__9063a8602e1e9060640161145b565b60008061206f83611b03565b905060006002826101c00151600381111561208c5761208c61345f565b1415610e0b576113457f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d7a5a9d36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121179190613bee565b60a084015190612bfd565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015612182573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a6919061385a565b90506001600160a01b038116632500f2b6336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156121fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222091906139a0565b61223c5760405162461bcd60e51b815260040161024a90613de9565b6122506001600160a01b0385168484612ae5565b50505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122da919061385a565b90506001600160a01b038116639078c85a336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015612330573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235491906139a0565b6123705760405162461bcd60e51b815260040161024a90613e2d565b60005b8281101561242057856001600160a01b03166342842e0e308787878681811061239e5761239e613877565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b1580156123f557600080fd5b505af1158015612409573d6000803e3d6000fd5b505050508080612418906138a3565b915050612373565b50836001600160a01b0316856001600160a01b03167f6c6b18e67b757c02ba92ef0f54038fc2135767acf9bef174b8780835ff4558228585604051612466929190613dd5565b60405180910390a35050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f9919061385a565b90506001600160a01b038116639078c85a336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561254f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257391906139a0565b61258f5760405162461bcd60e51b815260040161024a90613e2d565b604051631759616b60e11b81526001600160a01b038a1690632eb2c2d6906125c99030908c908c908c908c908c908c908c90600401613e8a565b600060405180830381600087803b1580156125e357600080fd5b505af11580156125f7573d6000803e3d6000fd5b50505050876001600160a01b0316896001600160a01b03167fc8144f7a11a69e58de79275b3e7420b4942b4e8318a0e0aa9ccb457c60387b0289898989898960405161264896959493929190613edf565b60405180910390a3505050505050505050565b6000546001600160a01b031633146126b55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161024a565b6001600160a01b03811661271a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161024a565b6117ea81612b48565b600054600160a01b900460ff161561274d5760405162461bcd60e51b815260040161024a906139bd565b600260015414156127705760405162461bcd60e51b815260040161024a906139e7565b600260018190555073__$d034307112fbb42c17024cd888eeadb556$__63d90ab2606003600260056004886040518060c001604052808a81526020018981526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020016128186128db565b815260200173__$99340bd5a7874738aefb18e7cdd0ba78ce$__6304432eed8d6040518263ffffffff1660e01b81526004016128549190613bdb565b602060405180830381865af4158015612871573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128959190613bee565b8152507f00000000000000000000000000000000000000000000000000000000000000006040518863ffffffff1660e01b81526004016111869796959493929190613f28565b604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527ff0cf7ce475272740cae17eb3cadd6d254800be81c53f84a2f273b99036471c62918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b6000610e0b8284613f82565b6000821580612999575081155b156129a6575060006107c0565b816129be60026b033b2e3c9fd0803ce8000000613f99565b6129ca90600019613f82565b6129d49190613f99565b8311156040518060400160405280600381526020016203130360ec1b81525090612a115760405162461bcd60e51b815260040161024a9190613fbb565b506b033b2e3c9fd0803ce8000000612a2a600282613f99565b612a348486613fce565b612a3e9190613e72565b610e0b9190613f99565b600054600160a01b900460ff16612a985760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161024a565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612b37908490612c87565b505050565b6000610e0b8284613e72565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600054600160a01b900460ff1615612bc25760405162461bcd60e51b815260040161024a906139bd565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612ac83390565b6000821580612c0a575081155b15612c17575060006107c0565b81612c256002612710613f99565b612c3190600019613f82565b612c3b9190613f99565b8311156040518060400160405280600381526020016203130360ec1b81525090612c785760405162461bcd60e51b815260040161024a9190613fbb565b50612710612a2a600282613f99565b6000612cdc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612d599092919063ffffffff16565b805190915015612b375780806020019051810190612cfa91906139a0565b612b375760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161024a565b6060611345848460008585843b612db25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161024a565b600080866001600160a01b03168587604051612dce9190613fed565b60006040518083038185875af1925050503d8060008114612e0b576040519150601f19603f3d011682016040523d82523d6000602084013e612e10565b606091505b5091509150612e20828286612e2b565b979650505050505050565b60608315612e3a575081610e0b565b825115612e4a5782518084602001fd5b8160405162461bcd60e51b815260040161024a9190613fbb565b600060208284031215612e7657600080fd5b81356001600160e01b031981168114610e0b57600080fd5b6001600160a01b03811681146117ea57600080fd5b8035612eae81612e8e565b919050565b60008083601f840112612ec557600080fd5b5081356001600160401b03811115612edc57600080fd5b6020830191508360208260051b8501011115612ef757600080fd5b9250929050565b60008083601f840112612f1057600080fd5b5081356001600160401b03811115612f2757600080fd5b602083019150836020828501011115612ef757600080fd5b600080600080600060608688031215612f5757600080fd5b8535612f6281612e8e565b945060208601356001600160401b0380821115612f7e57600080fd5b612f8a89838a01612eb3565b90965094506040880135915080821115612fa357600080fd5b50612fb088828901612efe565b969995985093965092949392505050565b60008060408385031215612fd457600080fd5b8235612fdf81612e8e565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60405161028081016001600160401b038111828210171561302657613026612fed565b60405290565b604051601f8201601f191681016001600160401b038111828210171561305457613054612fed565b604052919050565b803560068110612eae57600080fd5b80151581146117ea57600080fd5b8035612eae8161306b565b803564ffffffffff81168114612eae57600080fd5b80356001600160801b0381168114612eae57600080fd5b600082601f8301126130c157600080fd5b81356001600160401b038111156130da576130da612fed565b6130ed601f8201601f191660200161302c565b81815284602083860101111561310257600080fd5b816020850160208301376000918101602001919091529392505050565b803560ff81168114612eae57600080fd5b6000610280828403121561314357600080fd5b61314b613003565b90506131568261305c565b815261316460208301613079565b60208201526040820135604082015261317f60608301612ea3565b60608201526080820135608082015260a082013560a08201526131a460c08301612ea3565b60c082015260e082013560e08201526101008083013581830152506101206131cd818401613084565b908201526101406131df838201613084565b908201526101606131f1838201613099565b90820152610180613203838201612ea3565b908201526101a082810135908201526101c080830135908201526101e061322b818401612ea3565b90820152610200828101356001600160401b0381111561324a57600080fd5b613256858286016130b0565b82840152505061022061326a81840161311f565b9082015261024082810135908201526102609182013591810191909152919050565b600080600080600060a086880312156132a457600080fd5b85356001600160401b03808211156132bb57600080fd5b6132c789838a01613130565b965060208801359550604088013594506060880135935060808801359150808211156132f257600080fd5b506132ff888289016130b0565b9150509295509295909350565b60008060006060848603121561332157600080fd5b83356001600160401b0381111561333757600080fd5b61334386828701613130565b9660208601359650604090950135949350505050565b6000806000806080858703121561336f57600080fd5b843561337a81612e8e565b9350602085013561338a81612e8e565b92506040850135915060608501356001600160401b038111156133ac57600080fd5b6133b8878288016130b0565b91505092959194509250565b6000602082840312156133d657600080fd5b5035919050565b600080602083850312156133f057600080fd5b82356001600160401b0381111561340657600080fd5b61341285828601612eb3565b90969095509350505050565b60008060006060848603121561343357600080fd5b833561343e81612e8e565b9250602084013561344e81612e8e565b929592945050506040919091013590565b634e487b7160e01b600052602160045260246000fd5b600481106134855761348561345f565b9052565b602081016107c08284613475565b815181526020808301516101e08301916134bb908401826001600160a01b03169052565b50604083015160408301526060830151606083015260808301516134ea60808401826001600160a01b03169052565b5060a083015160a083015260c083015161350f60c08401826001600160801b03169052565b5060e083015161352a60e08401826001600160801b03169052565b50610100838101516001600160a01b03908116918401919091526101208085015164ffffffffff90811691850191909152610140808601518216908501526101608086015182169085015261018080860151909116908401526101a080850151909116908301526101c0808401516135a482850182613475565b505092915050565b6000602082840312156135be57600080fd5b8135610e0b81612e8e565b600082601f8301126135da57600080fd5b813560206001600160401b038211156135f5576135f5612fed565b8160051b61360482820161302c565b928352848101820192828101908785111561361e57600080fd5b83870192505b84831015612e2057823582529183019190830190613624565b600080600080600060a0868803121561365557600080fd5b853561366081612e8e565b9450602086013561367081612e8e565b935060408601356001600160401b038082111561368c57600080fd5b61369889838a016135c9565b945060608801359150808211156136ae57600080fd5b6136ba89838a016135c9565b935060808801359150808211156132f257600080fd5b600080600080606085870312156136e657600080fd5b84356136f181612e8e565b9350602085013561370181612e8e565b925060408501356001600160401b0381111561371c57600080fd5b61372887828801612eb3565b95989497509550505050565b60008060008060008060008060a0898b03121561375057600080fd5b883561375b81612e8e565b9750602089013561376b81612e8e565b965060408901356001600160401b038082111561378757600080fd5b6137938c838d01612eb3565b909850965060608b01359150808211156137ac57600080fd5b6137b88c838d01612eb3565b909650945060808b01359150808211156137d157600080fd5b506137de8b828c01612efe565b999c989b5096995094979396929594505050565b600080600080600060a0868803121561380a57600080fd5b853561381581612e8e565b9450602086013561382581612e8e565b9350604086013592506060860135915060808601356001600160401b0381111561384e57600080fd5b6132ff888289016130b0565b60006020828403121561386c57600080fd5b8151610e0b81612e8e565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156138b7576138b761388d565b5060010190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60a0808252875190820181905260009060209060c0840190828b01845b828110156139295781516001600160a01b031684529284019290840190600101613904565b5050508381038285015288518082528983019183019060005b8181101561395e57835183529284019291840191600101613942565b50506001600160a01b03891660408601526001600160a01b038816606086015284810360808601526139918187896138be565b9b9a5050505050505050505050565b6000602082840312156139b257600080fd5b8151610e0b8161306b565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600681106134855761348561345f565b60005b83811015613a49578181015183820152602001613a31565b838111156122505750506000910152565b60008151808452613a72816020860160208601613a2e565b601f01601f19169290920160200192915050565b6000610280613a96848451613a1e565b6020830151613aa9602086018215159052565b50604083015160408501526060830151613ace60608601826001600160a01b03169052565b506080830151608085015260a083015160a085015260c0830151613afd60c08601826001600160a01b03169052565b5060e0838101519085015261010080840151908501526101208084015164ffffffffff908116918601919091526101408085015190911690850152610160808401516001600160801b031690850152610180808401516001600160a01b03908116918601919091526101a080850151908601526101c080850151908601526101e0808501519091169085015261020080840151818601839052613ba283870182613a5a565b9250505061022080840151613bbb8287018260ff169052565b505061024083810151908501526102609283015192909301919091525090565b602081526000610e0b6020830184613a86565b600060208284031215613c0057600080fd5b5051919050565b86815285602082015284604082015283606082015260c060808201526000613c3260c0830185613a86565b82810360a0840152610100845182526020850151602083015260408501516040830152606085015160018060a01b038082166060850152806080880151166080850152505060a085015160a083015260c085015160c083015260e08501518160e084015261399182840182613a5a565b8051825260208101516020830152604081015160018060a01b03808216604085015280606084015116606085015250506080810151608083015260a081015160a08301525050565b6000610160888352876020840152866040840152856060840152806080840152613d1681840186613a86565b915050612e2060a0830184613ca2565b60208082526018908201527f424d5f434845434b5f4c4f414e5f4e4f545f4558495354530000000000000000604082015260600190565b60208082526022908201527f424d5f43414e43454c5f4e4f4e43455f4c4f5745525f5448414e5f4355525245604082015261139560f21b606082015260800190565b81835260006001600160fb1b03831115613db857600080fd5b8260051b8083602087013760009401602001938452509192915050565b602081526000611345602083018486613d9f565b60208082526024908201527f424d5f41434c5f4f4e4c595f454d455247454e43595f41444d494e5f43414e5f60408201526310d0531360e21b606082015260800190565b60208082526025908201527f424d5f41434c5f4f4e4c595f41495244524f505f4f50455241544f525f43414e60408201526417d0d0531360da1b606082015260800190565b60008219821115613e8557613e8561388d565b500190565b6001600160a01b0389811682528816602082015260a060408201819052600090613eb7908301888a613d9f565b8281036060840152613eca818789613d9f565b905082810360808401526139918185876138be565b606081526000613ef360608301888a613d9f565b8281036020840152613f06818789613d9f565b90508281036040840152613f1b8185876138be565b9998505050505050505050565b6000610180898352886020840152876040840152866060840152806080840152613f5481840187613a86565b915050613f6460a0830185613ca2565b6001600160a01b039290921661016091909101529695505050505050565b600082821015613f9457613f9461388d565b500390565b600082613fb657634e487b7160e01b600052601260045260246000fd5b500490565b602081526000610e0b6020830184613a5a565b6000816000190483118215151615613fe857613fe861388d565b500290565b60008251613fff818460208701613a2e565b919091019291505056fea2646970667358221220622ab75db4d2378436f167395e77dca7eed6ba8dc4551734cbb448dd2557ec2264736f6c634300080a0033",
  "libraries": {
    "BespokeTypes": "0x18DBb065e137198b4eE32F212d8442918143FaDF",
    "SignatureChecker": "0x36A273dc8d65393FCC5B392Ca437D19d05aC4724",
    "BespokeLogic": "0x8EDf2dc4A22AcFB3aF927c2985170866D9D1Bc92",
    "TakeLendOfferLogic": "0x975F102A77DfCEdCdf511b21d01561FA88F7a2ff",
    "TakeBorrowOfferLogic": "0x96b961a5643743536FCBE924dBA478056a438eA7",
    "ForecloseLogic": "0x70683cA418e02E8336Ce0E46E532b663Dbb96093",
    "RepayLogic": "0x7115e9815A49cDF76a8aa30C9ee9656660Eed0b3",
    "MathUtils": "0x6E79f2994Ad1a8eF022da72Cf9E2ae9D29710830",
    "PercentageMath": "0x76e304782A1773E8d693c8d36484CAc602C489E1",
    "WadRayMath": "0x8D04A88F02e5b79F1105297297B12661AD3CEF70"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "cancelAllBorrowOffersForSender(uint256)": {
        "params": {
          "minNonce_": "minimum user nonce"
        }
      },
      "cancelMultipleBorrowOffers(uint256[])": {
        "params": {
          "offerNonces": "array of borrowOffer nonces"
        }
      },
      "claimERC1155Airdrop(address,address,uint256[],uint256[],bytes)": {
        "params": {
          "amounts": "The amount of the ERC1155 tokens",
          "data": "packed params to pass to the receiver as extra information*",
          "ids": "The ID of the ERC1155 token",
          "to": "The address which will receive the ERC1155 tokens",
          "token": "The address of the airdropped token"
        }
      },
      "claimERC20Airdrop(address,address,uint256)": {
        "params": {
          "amount": "The amount of the ERC20 token*",
          "to": "The address which will receive ERC20 token",
          "token": "The address of the airdropped token"
        }
      },
      "claimERC721Airdrop(address,address,uint256[])": {
        "params": {
          "ids": "The ID of the ERC721 token*",
          "to": "The address which will receive the ERC721 token",
          "token": "The address of the airdropped token"
        }
      },
      "emergencyTokenTransfer(address,address,uint256)": {
        "details": "transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due direct transfers to the contract address.",
        "params": {
          "amount": "amount to send",
          "to": "recipient of the transfer",
          "token": "token to transfer"
        }
      },
      "flashClaim(address,uint256[],bytes)": {
        "details": "IMPORTANT There are security concerns for developers of flash loan receiver contracts that must be carefully considered",
        "params": {
          "loanIds": "The ID of loan being flash-borrowed",
          "params": "packed params to pass to the receiver as extra information*",
          "receiverAddress": "The address of the contract receiving the funds, implementing IFlashClaimReceiver interface"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pause pool for emergency case, can only be called by emergency admin."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpause pool for emergency case, can only be called by emergency admin."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cancelAllBorrowOffersForSender(uint256)": {
        "notice": "Cancel all pending offers for a sender"
      },
      "claimERC1155Airdrop(address,address,uint256[],uint256[],bytes)": {
        "notice": "Claim the ERC1155 token which has been airdropped to the loan contract"
      },
      "claimERC20Airdrop(address,address,uint256)": {
        "notice": "Claim the ERC20 token which has been airdropped to the loan contract"
      },
      "claimERC721Airdrop(address,address,uint256[])": {
        "notice": "Claim the ERC721 token which has been airdropped to the loan contract"
      },
      "flashClaim(address,uint256[],bytes)": {
        "notice": "Allows smart contracts to access the collateralized NFT within one transaction, as long as the amount taken plus a fee is returned"
      },
      "foreclose(uint256)": {
        "notice": "anyone can trigger but only OpenSkyLendNFT owner can receive collateral"
      },
      "repay(uint256)": {
        "notice": "Only OpenSkyBorrowNFT owner can repayOnly OpenSkyLendNFT owner can recieve the paymentThis function is not pausable for safety"
      },
      "repayETH(uint256)": {
        "notice": "Only OpenSkyBorrowNFT owner can repayOnly OpenSkyLendNFT owner can recieve the paymentThis function is not pausable for safety"
      },
      "takeBorrowOffer((uint8,bool,uint256,address,uint256,uint256,address,uint256,uint256,uint40,uint40,uint128,address,uint256,uint256,address,bytes,uint8,bytes32,bytes32),uint256,uint256)": {
        "notice": "take an borrowing offer using ERC20 include WETH"
      },
      "takeBorrowOfferETH((uint8,bool,uint256,address,uint256,uint256,address,uint256,uint256,uint40,uint40,uint128,address,uint256,uint256,address,bytes,uint8,bytes32,bytes32),uint256,uint256)": {
        "notice": "Take a borrow offer. Only for WETH reserve.Consider using taker's oWETH balance first, then ETH if oWETH is not enoughBorrower will receive WETH"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 387,
        "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1294,
        "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1379,
        "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 13267,
        "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
        "label": "minNonce",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13273,
        "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
        "label": "_nonce",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 13276,
        "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
        "label": "_loanIdTracker",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Counter)17166_storage"
      },
      {
        "astId": 13281,
        "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
        "label": "_loans",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(LoanData)17134_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(LoanStatus)17139": {
        "encoding": "inplace",
        "label": "enum BespokeTypes.LoanStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(LoanData)17134_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BespokeTypes.LoanData)",
        "numberOfBytes": "32",
        "value": "t_struct(LoanData)17134_storage"
      },
      "t_struct(Counter)17166_storage": {
        "encoding": "inplace",
        "label": "struct BespokeTypes.Counter",
        "members": [
          {
            "astId": 17165,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(LoanData)17134_storage": {
        "encoding": "inplace",
        "label": "struct BespokeTypes.LoanData",
        "members": [
          {
            "astId": 17104,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "reserveId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 17106,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "nftAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 17108,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "tokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 17110,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "tokenAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 17112,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "borrower",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 17114,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "amount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 17116,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "borrowRate",
            "offset": 0,
            "slot": "6",
            "type": "t_uint128"
          },
          {
            "astId": 17118,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "interestPerSecond",
            "offset": 16,
            "slot": "6",
            "type": "t_uint128"
          },
          {
            "astId": 17120,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "currency",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 17122,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "borrowDuration",
            "offset": 20,
            "slot": "7",
            "type": "t_uint40"
          },
          {
            "astId": 17124,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "borrowBegin",
            "offset": 25,
            "slot": "7",
            "type": "t_uint40"
          },
          {
            "astId": 17126,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "borrowOverdueTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint40"
          },
          {
            "astId": 17128,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "liquidatableTime",
            "offset": 5,
            "slot": "8",
            "type": "t_uint40"
          },
          {
            "astId": 17130,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "lender",
            "offset": 10,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 17133,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "status",
            "offset": 30,
            "slot": "8",
            "type": "t_enum(LoanStatus)17139"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      }
    }
  }
}