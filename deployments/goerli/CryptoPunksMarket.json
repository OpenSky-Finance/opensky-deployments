{
  "address": "0xb47c287eB1d8D9675eB456934FC0A1F557A1f657",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        }
      ],
      "name": "Assign",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromAddress",
          "type": "address"
        }
      ],
      "name": "PunkBidEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromAddress",
          "type": "address"
        }
      ],
      "name": "PunkBidWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        }
      ],
      "name": "PunkBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        }
      ],
      "name": "PunkNoLongerForSale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minValue",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        }
      ],
      "name": "PunkOffered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        }
      ],
      "name": "PunkTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        }
      ],
      "name": "acceptBidForPunk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allInitialOwnersAssigned",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPunksAssigned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        }
      ],
      "name": "buyPunk",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        }
      ],
      "name": "enterBidForPunk",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        }
      ],
      "name": "getPunk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "imageHash",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextPunkIndexToAssign",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minSalePriceInWei",
          "type": "uint256"
        }
      ],
      "name": "offerPunkForSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minSalePriceInWei",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        }
      ],
      "name": "offerPunkForSaleToAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pendingWithdrawals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "punkBids",
      "outputs": [
        {
          "internalType": "bool",
          "name": "hasBid",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "punkIndexToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        }
      ],
      "name": "punkNoLongerForSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "punksOfferedForSale",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isForSale",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minValue",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onlySellTo",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "punksRemainingToAssign",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        }
      ],
      "name": "setInitialOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "indices",
          "type": "uint256[]"
        }
      ],
      "name": "setInitialOwners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "standard",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        }
      ],
      "name": "transferPunk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        }
      ],
      "name": "withdrawBidForPunk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd626573970646e2291d9d207b3b50f639da028f1edc5f5142d74f37d6b752999",
  "receipt": {
    "to": null,
    "from": "0x218513C58A4781a5B88De6230caA29aBCe2Ccd75",
    "contractAddress": "0xb47c287eB1d8D9675eB456934FC0A1F557A1f657",
    "transactionIndex": 17,
    "gasUsed": "1855034",
    "logsBloom": "0x
    "blockHash": "0x22b6342eaf3d01e3deda6bfd46972803f36e33890f0eed179cb75c22a47b44e0",
    "transactionHash": "0xd626573970646e2291d9d207b3b50f639da028f1edc5f5142d74f37d6b752999",
    "logs": [],
    "blockNumber": 7429272,
    "cumulativeGasUsed": "8009312",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "10ffdf3ff1a6c8dbdc8b1350fe4bf88a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"Assign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"}],\"name\":\"PunkBidEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"}],\"name\":\"PunkBidWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"PunkBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"PunkNoLongerForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"PunkOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"PunkTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"}],\"name\":\"acceptBidForPunk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allInitialOwnersAssigned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPunksAssigned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"buyPunk\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"enterBidForPunk\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"getPunk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imageHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPunkIndexToAssign\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSalePriceInWei\",\"type\":\"uint256\"}],\"name\":\"offerPunkForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSalePriceInWei\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"offerPunkForSaleToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"punkBids\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasBid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"punkIndexToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"punkNoLongerForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"punksOfferedForSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isForSale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onlySellTo\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"punksRemainingToAssign\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"setInitialOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"}],\"name\":\"setInitialOwners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"transferPunk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawBidForPunk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/cryptopunk/CryptoPunksMarketMock.sol\":\"CryptoPunksMarket\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/mocks/cryptopunk/CryptoPunksMarketMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ncontract CryptoPunksMarket {\\n\\n    // You can use this hash to verify the image file containing all the punks\\n    string public imageHash = \\\"ac39af4793119ee46bbff351d8cb6b5f23da60222126add4268e261199a2921b\\\";\\n\\n    address owner;\\n\\n    string public standard = 'CryptoPunks';\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n    uint256 public totalSupply;\\n\\n    uint public nextPunkIndexToAssign = 0;\\n\\n    bool public allPunksAssigned = false;\\n    uint public punksRemainingToAssign = 0;\\n\\n    //mapping (address => uint) public addressToPunkIndex;\\n    mapping (uint => address) public punkIndexToAddress;\\n\\n    /* This creates an array with all balances */\\n    mapping (address => uint256) public balanceOf;\\n\\n    struct Offer {\\n        bool isForSale;\\n        uint punkIndex;\\n        address seller;\\n        uint minValue;          // in ether\\n        address onlySellTo;     // specify to sell only to a specific person\\n    }\\n\\n    struct Bid {\\n        bool hasBid;\\n        uint punkIndex;\\n        address bidder;\\n        uint value;\\n    }\\n\\n    // A record of punks that are offered for sale at a specific minimum value, and perhaps to a specific person\\n    mapping (uint => Offer) public punksOfferedForSale;\\n\\n    // A record of the highest punk bid\\n    mapping (uint => Bid) public punkBids;\\n\\n    mapping (address => uint) public pendingWithdrawals;\\n\\n    event Assign(address indexed to, uint256 punkIndex);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event PunkTransfer(address indexed from, address indexed to, uint256 punkIndex);\\n    event PunkOffered(uint indexed punkIndex, uint minValue, address indexed toAddress);\\n    event PunkBidEntered(uint indexed punkIndex, uint value, address indexed fromAddress);\\n    event PunkBidWithdrawn(uint indexed punkIndex, uint value, address indexed fromAddress);\\n    event PunkBought(uint indexed punkIndex, uint value, address indexed fromAddress, address indexed toAddress);\\n    event PunkNoLongerForSale(uint indexed punkIndex);\\n\\n    /* Initializes contract with initial supply tokens to the creator of the contract */\\n    constructor() public payable {\\n        //        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\\n        owner = msg.sender;\\n        totalSupply = 10000;                        // Update total supply\\n        punksRemainingToAssign = totalSupply;\\n        name = \\\"CRYPTOPUNKS\\\";                                   // Set the name for display purposes\\n        symbol = \\\"PUNKS\\\";                               // Set the symbol for display purposes\\n        decimals = 0;                                       // Amount of decimals for display purposes\\n    }\\n\\n    function setInitialOwner(address to, uint punkIndex) public {\\n        if (msg.sender != owner) revert();\\n        if (allPunksAssigned) revert();\\n        if (punkIndex >= 10000) revert();\\n        if (punkIndexToAddress[punkIndex] != to) {\\n            if (punkIndexToAddress[punkIndex] != address(0)) {\\n                balanceOf[punkIndexToAddress[punkIndex]]--;\\n            } else {\\n                punksRemainingToAssign--;\\n            }\\n            punkIndexToAddress[punkIndex] = to;\\n            balanceOf[to]++;\\n            emit Assign(to, punkIndex);\\n        }\\n    }\\n\\n    function setInitialOwners(address[] memory addresses, uint[] memory indices) public {\\n        if (msg.sender != owner) revert();\\n        uint n = addresses.length;\\n        for (uint i = 0; i < n; i++) {\\n            setInitialOwner(addresses[i], indices[i]);\\n        }\\n    }\\n\\n    function allInitialOwnersAssigned() public {\\n        if (msg.sender != owner) revert();\\n        allPunksAssigned = true;\\n    }\\n\\n    function getPunk(uint punkIndex) public {\\n        if (!allPunksAssigned) revert();\\n        if (punksRemainingToAssign == 0) revert();\\n        if (punkIndexToAddress[punkIndex] != address(0)) revert();\\n        if (punkIndex >= 10000) revert();\\n        punkIndexToAddress[punkIndex] = msg.sender;\\n        balanceOf[msg.sender]++;\\n        punksRemainingToAssign--;\\n        emit Assign(msg.sender, punkIndex);\\n    }\\n\\n    // Transfer ownership of a punk to another user without requiring payment\\n    function transferPunk(address to, uint punkIndex) public {\\n        if (!allPunksAssigned) revert();\\n        if (punkIndexToAddress[punkIndex] != msg.sender) revert();\\n        if (punkIndex >= 10000) revert();\\n        if (punksOfferedForSale[punkIndex].isForSale) {\\n            punkNoLongerForSale(punkIndex);\\n        }\\n        punkIndexToAddress[punkIndex] = to;\\n        balanceOf[msg.sender]--;\\n        balanceOf[to]++;\\n        emit Transfer(msg.sender, to, 1);\\n        emit PunkTransfer(msg.sender, to, punkIndex);\\n        // Check for the case where there is a bid from the new owner and refund it.\\n        // Any other bid can stay in place.\\n        Bid memory bid = punkBids[punkIndex];\\n        if (bid.bidder == to) {\\n            // Kill bid and refund value\\n            pendingWithdrawals[to] += bid.value;\\n            punkBids[punkIndex] = Bid(false, punkIndex, address(0), 0);\\n        }\\n    }\\n\\n    function punkNoLongerForSale(uint punkIndex) public {\\n        if (!allPunksAssigned) revert();\\n        if (punkIndexToAddress[punkIndex] != msg.sender) revert();\\n        if (punkIndex >= 10000) revert();\\n        punksOfferedForSale[punkIndex] = Offer(false, punkIndex, msg.sender, 0, address(0));\\n        emit PunkNoLongerForSale(punkIndex);\\n    }\\n\\n    function offerPunkForSale(uint punkIndex, uint minSalePriceInWei) public {\\n        if (!allPunksAssigned) revert();\\n        if (punkIndexToAddress[punkIndex] != msg.sender) revert();\\n        if (punkIndex >= 10000) revert();\\n        punksOfferedForSale[punkIndex] = Offer(true, punkIndex, msg.sender, minSalePriceInWei, address(0));\\n        emit PunkOffered(punkIndex, minSalePriceInWei, address(0));\\n    }\\n\\n    function offerPunkForSaleToAddress(uint punkIndex, uint minSalePriceInWei, address toAddress) public {\\n        if (!allPunksAssigned) revert();\\n        if (punkIndexToAddress[punkIndex] != msg.sender) revert();\\n        if (punkIndex >= 10000) revert();\\n        punksOfferedForSale[punkIndex] = Offer(true, punkIndex, msg.sender, minSalePriceInWei, toAddress);\\n        emit PunkOffered(punkIndex, minSalePriceInWei, toAddress);\\n    }\\n\\n    function buyPunk(uint punkIndex) public payable {\\n        if (!allPunksAssigned) revert();\\n        Offer memory offer = punksOfferedForSale[punkIndex];\\n        if (punkIndex >= 10000) revert();\\n        if (!offer.isForSale) revert();                // punk not actually for sale\\n        if (offer.onlySellTo != address(0) && offer.onlySellTo != msg.sender) revert();  // punk not supposed to be sold to this user\\n        if (msg.value < offer.minValue) revert();      // Didn't send enough ETH\\n        if (offer.seller != punkIndexToAddress[punkIndex]) revert(); // Seller no longer owner of punk\\n\\n        address seller = offer.seller;\\n\\n        punkIndexToAddress[punkIndex] = msg.sender;\\n        balanceOf[seller]--;\\n        balanceOf[msg.sender]++;\\n        emit Transfer(seller, msg.sender, 1);\\n\\n        punkNoLongerForSale(punkIndex);\\n        pendingWithdrawals[seller] += msg.value;\\n        emit PunkBought(punkIndex, msg.value, seller, msg.sender);\\n\\n        // Check for the case where there is a bid from the new owner and refund it.\\n        // Any other bid can stay in place.\\n        Bid memory bid = punkBids[punkIndex];\\n        if (bid.bidder == msg.sender) {\\n            // Kill bid and refund value\\n            pendingWithdrawals[msg.sender] += bid.value;\\n            punkBids[punkIndex] = Bid(false, punkIndex, address(0), 0);\\n        }\\n    }\\n\\n    function withdraw() public {\\n        if (!allPunksAssigned) revert();\\n        uint amount = pendingWithdrawals[msg.sender];\\n        // Remember to zero the pending refund before\\n        // sending to prevent re-entrancy attacks\\n        pendingWithdrawals[msg.sender] = 0;\\n        payable(msg.sender).transfer(amount);\\n    }\\n\\n    function enterBidForPunk(uint punkIndex) public payable {\\n        if (punkIndex >= 10000) revert();\\n        if (!allPunksAssigned) revert();\\n        if (punkIndexToAddress[punkIndex] == address(0)) revert();\\n        if (punkIndexToAddress[punkIndex] == msg.sender) revert();\\n        if (msg.value == 0) revert();\\n        Bid memory existing = punkBids[punkIndex];\\n        if (msg.value <= existing.value) revert();\\n        if (existing.value > 0) {\\n            // Refund the failing bid\\n            pendingWithdrawals[existing.bidder] += existing.value;\\n        }\\n        punkBids[punkIndex] = Bid(true, punkIndex, msg.sender, msg.value);\\n        emit PunkBidEntered(punkIndex, msg.value, msg.sender);\\n    }\\n\\n    function acceptBidForPunk(uint punkIndex, uint minPrice) public {\\n        if (punkIndex >= 10000) revert();\\n        if (!allPunksAssigned) revert();\\n        if (punkIndexToAddress[punkIndex] != msg.sender) revert();\\n        address seller = msg.sender;\\n        Bid memory bid = punkBids[punkIndex];\\n        if (bid.value == 0) revert();\\n        if (bid.value < minPrice) revert();\\n\\n        punkIndexToAddress[punkIndex] = bid.bidder;\\n        balanceOf[seller]--;\\n        balanceOf[bid.bidder]++;\\n        emit Transfer(seller, bid.bidder, 1);\\n\\n        punksOfferedForSale[punkIndex] = Offer(false, punkIndex, bid.bidder, 0, address(0));\\n        uint amount = bid.value;\\n        punkBids[punkIndex] = Bid(false, punkIndex, address(0), 0);\\n        pendingWithdrawals[seller] += amount;\\n        emit PunkBought(punkIndex, bid.value, seller, bid.bidder);\\n    }\\n\\n    function withdrawBidForPunk(uint punkIndex) public {\\n        if (punkIndex >= 10000) revert();\\n        if (!allPunksAssigned) revert();\\n        if (punkIndexToAddress[punkIndex] == address(0)) revert();\\n        if (punkIndexToAddress[punkIndex] == msg.sender) revert();\\n        Bid memory bid = punkBids[punkIndex];\\n        if (bid.bidder != msg.sender) revert();\\n        emit PunkBidWithdrawn(punkIndex, bid.value, msg.sender);\\n        uint amount = bid.value;\\n        punkBids[punkIndex] = Bid(false, punkIndex, address(0), 0);\\n        // Refund the bid money\\n        payable(msg.sender).transfer(amount);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb545dbeb97fe2e51b418bcd50976a4e96ed5f433ead37298851e291734dca0ad\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604090815260808181529062001ea560a03980516200002991600091602090910190620000ff565b5060408051808201909152600b8082526a43727970746f50756e6b7360a81b60209092019182526200005e91600291620000ff565b5060006007556008805460ff19169055600180546001600160a01b03191633179055612710600681905560095560408051808201909152600b8082526a43525950544f50554e4b5360a81b6020909201918252620000bf91600391620000ff565b506040805180820190915260058082526450554e4b5360d81b6020909201918252620000ee91600491620000ff565b506005805460ff19169055620001e2565b8280546200010d90620001a5565b90600052602060002090601f0160209004810192826200013157600085556200017c565b82601f106200014c57805160ff19168380011785556200017c565b828001600101855582156200017c579182015b828111156200017c5782518255916020019190600101906200015f565b506200018a9291506200018e565b5090565b5b808211156200018a57600081556001016200018f565b600181811c90821680620001ba57607f821691505b60208210811415620001dc57634e487b7160e01b600052602260045260246000fd5b50919050565b611cb380620001f26000396000f3fe60806040526004361061019c5760003560e01c806370a08231116100ec578063a75a90491161008a578063c44193c311610064578063c44193c314610550578063c81d1d5b14610570578063f3f4370314610590578063f6eeff1e146105bd57600080fd5b8063a75a9049146104fa578063bf31196f1461051a578063c0d6ce631461053a57600080fd5b80638264fe98116100c65780638264fe98146104925780638b72a2ec146104a557806395d89b41146104c5578063979bc638146104da57600080fd5b806370a08231146104265780637ecedac9146104535780638126c38a1461046857600080fd5b806339c5dde61161015957806352f29a251161013357806352f29a251461032a57806358178168146103405780635a3b7e421461038e5780636e743fa9146103a357600080fd5b806339c5dde6146102e05780633ccfd60b1461030057806351605d801461031557600080fd5b806306fdde03146101a1578063088f11f3146101cc578063091dbfd21461025b57806318160ddd1461027057806323165b7514610294578063313ce567146102b4575b600080fd5b3480156101ad57600080fd5b506101b66105dd565b6040516101c39190611909565b60405180910390f35b3480156101d857600080fd5b506102256101e736600461195e565b600c602052600090815260409020805460018201546002830154600384015460049094015460ff9093169391926001600160a01b0391821692911685565b60408051951515865260208601949094526001600160a01b0392831693850193909352606084015216608082015260a0016101c3565b61026e61026936600461195e565b61066b565b005b34801561027c57600080fd5b5061028660065481565b6040519081526020016101c3565b3480156102a057600080fd5b5061026e6102af366004611977565b610823565b3480156102c057600080fd5b506005546102ce9060ff1681565b60405160ff90911681526020016101c3565b3480156102ec57600080fd5b5061026e6102fb366004611a8b565b610bcb565b34801561030c57600080fd5b5061026e610c43565b34801561032157600080fd5b506101b6610c97565b34801561033657600080fd5b5061028660075481565b34801561034c57600080fd5b5061037661035b36600461195e565b600a602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101c3565b34801561039a57600080fd5b506101b6610ca4565b3480156103af57600080fd5b506103f56103be36600461195e565b600d60205260009081526040902080546001820154600283015460039093015460ff9092169290916001600160a01b039091169084565b6040516101c39493929190931515845260208401929092526001600160a01b03166040830152606082015260800190565b34801561043257600080fd5b50610286610441366004611b4b565b600b6020526000908152604090205481565b34801561045f57600080fd5b5061026e610cb1565b34801561047457600080fd5b506008546104829060ff1681565b60405190151581526020016101c3565b61026e6104a036600461195e565b610cd7565b3480156104b157600080fd5b5061026e6104c0366004611b6d565b610fe3565b3480156104d157600080fd5b506101b6611235565b3480156104e657600080fd5b5061026e6104f536600461195e565b611242565b34801561050657600080fd5b5061026e610515366004611b6d565b6113e3565b34801561052657600080fd5b5061026e610535366004611b97565b611534565b34801561054657600080fd5b5061028660095481565b34801561055c57600080fd5b5061026e61056b366004611977565b61163e565b34801561057c57600080fd5b5061026e61058b36600461195e565b61173d565b34801561059c57600080fd5b506102866105ab366004611b4b565b600e6020526000908152604090205481565b3480156105c957600080fd5b5061026e6105d836600461195e565b611813565b600380546105ea90611bcc565b80601f016020809104026020016040519081016040528092919081815260200182805461061690611bcc565b80156106635780601f1061063857610100808354040283529160200191610663565b820191906000526020600020905b81548152906001019060200180831161064657829003601f168201915b505050505081565b612710811061067957600080fd5b60085460ff1661068857600080fd5b6000818152600a60205260409020546001600160a01b03166106a957600080fd5b6000818152600a60205260409020546001600160a01b03163314156106cd57600080fd5b346106d757600080fd5b6000818152600d60209081526040918290208251608081018452815460ff161515815260018201549281019290925260028101546001600160a01b03169282019290925260039091015460608201819052341161073357600080fd5b6060810151156107745760608101516040808301516001600160a01b03166000908152600e602052908120805490919061076e908490611c1d565b90915550505b604080516080810182526001808252602080830186815233848601818152346060870181815260008b8152600d87528990209751885460ff1916901515178855935195870195909555516002860180546001600160a01b0319166001600160a01b0390921691909117905590516003909401939093559251908152909184917f5b859394fabae0c1ba88baffe67e751ab5248d2e879028b8c8d6897b0519f56a91015b60405180910390a35050565b612710821061083157600080fd5b60085460ff1661084057600080fd5b6000828152600a60205260409020546001600160a01b0316331461086357600080fd5b6000828152600d60209081526040918290208251608081018452815460ff161515815260018201549281019290925260028101546001600160a01b031692820192909252600390910154606082018190523391906108c057600080fd5b82816060015110156108d157600080fd5b6040818101516000868152600a602090815283822080546001600160a01b0319166001600160a01b039485161790559185168152600b90915290812080549161091983611c35565b90915550506040808201516001600160a01b03166000908152600b60205290812080549161094683611c4c565b919050555080604001516001600160a01b0316826001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600160405161099591815260200190565b60405180910390a36040518060a0016040528060001515815260200185815260200182604001516001600160a01b031681526020016000815260200160006001600160a01b0316815250600c600086815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506060820151816003015560808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550905050600081606001519050604051806080016040528060001515815260200186815260200160006001600160a01b031681526020016000815250600d600087815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506060820151816003015590505080600e6000856001600160a01b03166001600160a01b031681526020019081526020016000206000828254610b679190611c1d565b9250508190555081604001516001600160a01b0316836001600160a01b0316867f58e5d5a525e3b40bc15abaa38b5882678db1ee68befd2f60bafe3a7fd06db9e38560600151604051610bbc91815260200190565b60405180910390a45050505050565b6001546001600160a01b03163314610be257600080fd5b815160005b81811015610c3d57610c2b848281518110610c0457610c04611c67565b6020026020010151848381518110610c1e57610c1e611c67565b60200260200101516113e3565b80610c3581611c4c565b915050610be7565b50505050565b60085460ff16610c5257600080fd5b336000818152600e6020526040808220805490839055905190929183156108fc02918491818181858888f19350505050158015610c93573d6000803e3d6000fd5b5050565b600080546105ea90611bcc565b600280546105ea90611bcc565b6001546001600160a01b03163314610cc857600080fd5b6008805460ff19166001179055565b60085460ff16610ce657600080fd5b6000818152600c6020908152604091829020825160a081018452815460ff161515815260018201549281019290925260028101546001600160a01b0390811693830193909352600381015460608301526004015490911660808201526127108210610d5057600080fd5b8051610d5b57600080fd5b60808101516001600160a01b031615801590610d84575060808101516001600160a01b03163314155b15610d8e57600080fd5b8060600151341015610d9f57600080fd5b6000828152600a60205260409081902054908201516001600160a01b03908116911614610dcb57600080fd5b6040808201516000848152600a602090815283822080546001600160a01b031916331790556001600160a01b0383168252600b905291822080549192610e1083611c35565b9091555050336000908152600b60205260408120805491610e3083611c4c565b90915550506040516001815233906001600160a01b038316907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3610e7f83611813565b6001600160a01b0381166000908152600e602052604081208054349290610ea7908490611c1d565b909155505060405134815233906001600160a01b0383169085907f58e5d5a525e3b40bc15abaa38b5882678db1ee68befd2f60bafe3a7fd06db9e39060200160405180910390a46000838152600d60209081526040918290208251608081018452815460ff161515815260018201549281019290925260028101546001600160a01b031692820183905260030154606082015290331415610c3d576060810151336000908152600e602052604081208054909190610f66908490611c1d565b9091555050604080516080810182526000808252602080830188815283850183815260608501848152998452600d909252939091209151825460ff19169015151782559151600182015590516002820180546001600160a01b0319166001600160a01b039092169190911790559351600390940193909355505050565b60085460ff16610ff257600080fd5b6000818152600a60205260409020546001600160a01b0316331461101557600080fd5b612710811061102357600080fd5b6000818152600c602052604090205460ff16156110435761104381611813565b6000818152600a6020908152604080832080546001600160a01b0319166001600160a01b038716179055338352600b909152812080549161108383611c35565b90915550506001600160a01b0382166000908152600b602052604081208054916110ac83611c4c565b9091555050604051600181526001600160a01b0383169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a36040518181526001600160a01b0383169033907f05af636b70da6819000c49f85b21fa82081c632069bb626f30932034099107d89060200160405180910390a36000818152600d60209081526040918290208251608081018452815460ff161515815260018201549281019290925260028101546001600160a01b039081169383018490526003909101546060830152909190841614156112305760608101516001600160a01b0384166000908152600e6020526040812080549091906111ba908490611c1d565b9091555050604080516080810182526000808252602080830186815283850183815260608501848152888552600d909352949092209251835460ff19169015151783559051600183015591516002820180546001600160a01b0319166001600160a01b0390921691909117905590516003909101555b505050565b600480546105ea90611bcc565b612710811061125057600080fd5b60085460ff1661125f57600080fd5b6000818152600a60205260409020546001600160a01b031661128057600080fd5b6000818152600a60205260409020546001600160a01b03163314156112a457600080fd5b6000818152600d60209081526040918290208251608081018452815460ff161515815260018201549281019290925260028101546001600160a01b03169282018390526003015460608201529033146112fc57600080fd5b336001600160a01b0316827f6f30e1ee4d81dcc7a8a478577f65d2ed2edb120565960ac45fe7c50551c87932836060015160405161133c91815260200190565b60405180910390a36060818101516040805160808101825260008082526020808301888152838501838152968401838152898452600d9092528483209351845460ff191690151517845551600184015594516002830180546001600160a01b0319166001600160a01b03909216919091179055935160039091015551909133916108fc84150291849190818181858888f19350505050158015610c3d573d6000803e3d6000fd5b6001546001600160a01b031633146113fa57600080fd5b60085460ff161561140a57600080fd5b612710811061141857600080fd5b6000818152600a60205260409020546001600160a01b03838116911614610c93576000818152600a60205260409020546001600160a01b031615611490576000818152600a60209081526040808320546001600160a01b03168352600b909152812080549161148683611c35565b91905055506114a6565b600980549060006114a083611c35565b91905055505b6000818152600a6020908152604080832080546001600160a01b0319166001600160a01b0387169081179091558352600b90915281208054916114e883611c4c565b9190505550816001600160a01b03167f8a0e37b73a0d9c82e205d4d1a3ff3d0b57ce5f4d7bccf6bac03336dc101cb7ba8260405161152891815260200190565b60405180910390a25050565b60085460ff1661154357600080fd5b6000838152600a60205260409020546001600160a01b0316331461156657600080fd5b612710831061157457600080fd5b6040805160a0810182526001808252602080830187815233848601908152606085018881526001600160a01b038881166080880181815260008d8152600c88528a90209851895460ff191690151517895594519688019690965591516002870180546001600160a01b031990811692851692909217905590516003870155915160049095018054909216941693909317909255915184815285917f3c7b682d5da98001a9b8cbda6c647d2c63d698a4184fd1d55e2ce7b66f5d21eb910160405180910390a3505050565b60085460ff1661164d57600080fd5b6000828152600a60205260409020546001600160a01b0316331461167057600080fd5b612710821061167e57600080fd5b6040805160a0810182526001808252602080830186815233848601908152606085018781526000608087018181528a8252600c86528882209751885460ff191690151517885593519587019590955590516002860180546001600160a01b03199081166001600160a01b0393841617909155915160038701559151600490950180549091169490911693909317909255915183815284917f3c7b682d5da98001a9b8cbda6c647d2c63d698a4184fd1d55e2ce7b66f5d21eb9101610817565b60085460ff1661174c57600080fd5b60095461175857600080fd5b6000818152600a60205260409020546001600160a01b03161561177a57600080fd5b612710811061178857600080fd5b6000818152600a6020908152604080832080546001600160a01b031916339081179091558352600b90915281208054916117c183611c4c565b9091555050600980549060006117d683611c35565b909155505060405181815233907f8a0e37b73a0d9c82e205d4d1a3ff3d0b57ce5f4d7bccf6bac03336dc101cb7ba9060200160405180910390a250565b60085460ff1661182257600080fd5b6000818152600a60205260409020546001600160a01b0316331461184557600080fd5b612710811061185357600080fd5b6040805160a08101825260008082526020808301858152338486019081526060850184815260808601858152888652600c9094528685209551865460ff191690151517865591516001860155516002850180546001600160a01b03199081166001600160a01b0393841617909155915160038601559151600490940180549091169390911692909217909155905182917fb0e0a660b4e50f26f0b7ce75c24655fc76cc66e3334a54ff410277229fa10bd491a250565b600060208083528351808285015260005b818110156119365785810183015185820160400152820161191a565b81811115611948576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561197057600080fd5b5035919050565b6000806040838503121561198a57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156119d8576119d8611999565b604052919050565b600067ffffffffffffffff8211156119fa576119fa611999565b5060051b60200190565b80356001600160a01b0381168114611a1b57600080fd5b919050565b600082601f830112611a3157600080fd5b81356020611a46611a41836119e0565b6119af565b82815260059290921b84018101918181019086841115611a6557600080fd5b8286015b84811015611a805780358352918301918301611a69565b509695505050505050565b60008060408385031215611a9e57600080fd5b823567ffffffffffffffff80821115611ab657600080fd5b818501915085601f830112611aca57600080fd5b81356020611ada611a41836119e0565b82815260059290921b84018101918181019089841115611af957600080fd5b948201945b83861015611b1e57611b0f86611a04565b82529482019490820190611afe565b96505086013592505080821115611b3457600080fd5b50611b4185828601611a20565b9150509250929050565b600060208284031215611b5d57600080fd5b611b6682611a04565b9392505050565b60008060408385031215611b8057600080fd5b611b8983611a04565b946020939093013593505050565b600080600060608486031215611bac57600080fd5b8335925060208401359150611bc360408501611a04565b90509250925092565b600181811c90821680611be057607f821691505b60208210811415611c0157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611c3057611c30611c07565b500190565b600081611c4457611c44611c07565b506000190190565b6000600019821415611c6057611c60611c07565b5060010190565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220d630415128d02529d125c02cc9f111deda6a1a2ff0a585e0d146135b40e5404664736f6c634300080a003361633339616634373933313139656534366262666633353164386362366235663233646136303232323132366164643432363865323631313939613239323162",
  "deployedBytecode": "0x60806040526004361061019c5760003560e01c806370a08231116100ec578063a75a90491161008a578063c44193c311610064578063c44193c314610550578063c81d1d5b14610570578063f3f4370314610590578063f6eeff1e146105bd57600080fd5b8063a75a9049146104fa578063bf31196f1461051a578063c0d6ce631461053a57600080fd5b80638264fe98116100c65780638264fe98146104925780638b72a2ec146104a557806395d89b41146104c5578063979bc638146104da57600080fd5b806370a08231146104265780637ecedac9146104535780638126c38a1461046857600080fd5b806339c5dde61161015957806352f29a251161013357806352f29a251461032a57806358178168146103405780635a3b7e421461038e5780636e743fa9146103a357600080fd5b806339c5dde6146102e05780633ccfd60b1461030057806351605d801461031557600080fd5b806306fdde03146101a1578063088f11f3146101cc578063091dbfd21461025b57806318160ddd1461027057806323165b7514610294578063313ce567146102b4575b600080fd5b3480156101ad57600080fd5b506101b66105dd565b6040516101c39190611909565b60405180910390f35b3480156101d857600080fd5b506102256101e736600461195e565b600c602052600090815260409020805460018201546002830154600384015460049094015460ff9093169391926001600160a01b0391821692911685565b60408051951515865260208601949094526001600160a01b0392831693850193909352606084015216608082015260a0016101c3565b61026e61026936600461195e565b61066b565b005b34801561027c57600080fd5b5061028660065481565b6040519081526020016101c3565b3480156102a057600080fd5b5061026e6102af366004611977565b610823565b3480156102c057600080fd5b506005546102ce9060ff1681565b60405160ff90911681526020016101c3565b3480156102ec57600080fd5b5061026e6102fb366004611a8b565b610bcb565b34801561030c57600080fd5b5061026e610c43565b34801561032157600080fd5b506101b6610c97565b34801561033657600080fd5b5061028660075481565b34801561034c57600080fd5b5061037661035b36600461195e565b600a602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101c3565b34801561039a57600080fd5b506101b6610ca4565b3480156103af57600080fd5b506103f56103be36600461195e565b600d60205260009081526040902080546001820154600283015460039093015460ff9092169290916001600160a01b039091169084565b6040516101c39493929190931515845260208401929092526001600160a01b03166040830152606082015260800190565b34801561043257600080fd5b50610286610441366004611b4b565b600b6020526000908152604090205481565b34801561045f57600080fd5b5061026e610cb1565b34801561047457600080fd5b506008546104829060ff1681565b60405190151581526020016101c3565b61026e6104a036600461195e565b610cd7565b3480156104b157600080fd5b5061026e6104c0366004611b6d565b610fe3565b3480156104d157600080fd5b506101b6611235565b3480156104e657600080fd5b5061026e6104f536600461195e565b611242565b34801561050657600080fd5b5061026e610515366004611b6d565b6113e3565b34801561052657600080fd5b5061026e610535366004611b97565b611534565b34801561054657600080fd5b5061028660095481565b34801561055c57600080fd5b5061026e61056b366004611977565b61163e565b34801561057c57600080fd5b5061026e61058b36600461195e565b61173d565b34801561059c57600080fd5b506102866105ab366004611b4b565b600e6020526000908152604090205481565b3480156105c957600080fd5b5061026e6105d836600461195e565b611813565b600380546105ea90611bcc565b80601f016020809104026020016040519081016040528092919081815260200182805461061690611bcc565b80156106635780601f1061063857610100808354040283529160200191610663565b820191906000526020600020905b81548152906001019060200180831161064657829003601f168201915b505050505081565b612710811061067957600080fd5b60085460ff1661068857600080fd5b6000818152600a60205260409020546001600160a01b03166106a957600080fd5b6000818152600a60205260409020546001600160a01b03163314156106cd57600080fd5b346106d757600080fd5b6000818152600d60209081526040918290208251608081018452815460ff161515815260018201549281019290925260028101546001600160a01b03169282019290925260039091015460608201819052341161073357600080fd5b6060810151156107745760608101516040808301516001600160a01b03166000908152600e602052908120805490919061076e908490611c1d565b90915550505b604080516080810182526001808252602080830186815233848601818152346060870181815260008b8152600d87528990209751885460ff1916901515178855935195870195909555516002860180546001600160a01b0319166001600160a01b0390921691909117905590516003909401939093559251908152909184917f5b859394fabae0c1ba88baffe67e751ab5248d2e879028b8c8d6897b0519f56a91015b60405180910390a35050565b612710821061083157600080fd5b60085460ff1661084057600080fd5b6000828152600a60205260409020546001600160a01b0316331461086357600080fd5b6000828152600d60209081526040918290208251608081018452815460ff161515815260018201549281019290925260028101546001600160a01b031692820192909252600390910154606082018190523391906108c057600080fd5b82816060015110156108d157600080fd5b6040818101516000868152600a602090815283822080546001600160a01b0319166001600160a01b039485161790559185168152600b90915290812080549161091983611c35565b90915550506040808201516001600160a01b03166000908152600b60205290812080549161094683611c4c565b919050555080604001516001600160a01b0316826001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600160405161099591815260200190565b60405180910390a36040518060a0016040528060001515815260200185815260200182604001516001600160a01b031681526020016000815260200160006001600160a01b0316815250600c600086815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506060820151816003015560808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550905050600081606001519050604051806080016040528060001515815260200186815260200160006001600160a01b031681526020016000815250600d600087815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506060820151816003015590505080600e6000856001600160a01b03166001600160a01b031681526020019081526020016000206000828254610b679190611c1d565b9250508190555081604001516001600160a01b0316836001600160a01b0316867f58e5d5a525e3b40bc15abaa38b5882678db1ee68befd2f60bafe3a7fd06db9e38560600151604051610bbc91815260200190565b60405180910390a45050505050565b6001546001600160a01b03163314610be257600080fd5b815160005b81811015610c3d57610c2b848281518110610c0457610c04611c67565b6020026020010151848381518110610c1e57610c1e611c67565b60200260200101516113e3565b80610c3581611c4c565b915050610be7565b50505050565b60085460ff16610c5257600080fd5b336000818152600e6020526040808220805490839055905190929183156108fc02918491818181858888f19350505050158015610c93573d6000803e3d6000fd5b5050565b600080546105ea90611bcc565b600280546105ea90611bcc565b6001546001600160a01b03163314610cc857600080fd5b6008805460ff19166001179055565b60085460ff16610ce657600080fd5b6000818152600c6020908152604091829020825160a081018452815460ff161515815260018201549281019290925260028101546001600160a01b0390811693830193909352600381015460608301526004015490911660808201526127108210610d5057600080fd5b8051610d5b57600080fd5b60808101516001600160a01b031615801590610d84575060808101516001600160a01b03163314155b15610d8e57600080fd5b8060600151341015610d9f57600080fd5b6000828152600a60205260409081902054908201516001600160a01b03908116911614610dcb57600080fd5b6040808201516000848152600a602090815283822080546001600160a01b031916331790556001600160a01b0383168252600b905291822080549192610e1083611c35565b9091555050336000908152600b60205260408120805491610e3083611c4c565b90915550506040516001815233906001600160a01b038316907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3610e7f83611813565b6001600160a01b0381166000908152600e602052604081208054349290610ea7908490611c1d565b909155505060405134815233906001600160a01b0383169085907f58e5d5a525e3b40bc15abaa38b5882678db1ee68befd2f60bafe3a7fd06db9e39060200160405180910390a46000838152600d60209081526040918290208251608081018452815460ff161515815260018201549281019290925260028101546001600160a01b031692820183905260030154606082015290331415610c3d576060810151336000908152600e602052604081208054909190610f66908490611c1d565b9091555050604080516080810182526000808252602080830188815283850183815260608501848152998452600d909252939091209151825460ff19169015151782559151600182015590516002820180546001600160a01b0319166001600160a01b039092169190911790559351600390940193909355505050565b60085460ff16610ff257600080fd5b6000818152600a60205260409020546001600160a01b0316331461101557600080fd5b612710811061102357600080fd5b6000818152600c602052604090205460ff16156110435761104381611813565b6000818152600a6020908152604080832080546001600160a01b0319166001600160a01b038716179055338352600b909152812080549161108383611c35565b90915550506001600160a01b0382166000908152600b602052604081208054916110ac83611c4c565b9091555050604051600181526001600160a01b0383169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a36040518181526001600160a01b0383169033907f05af636b70da6819000c49f85b21fa82081c632069bb626f30932034099107d89060200160405180910390a36000818152600d60209081526040918290208251608081018452815460ff161515815260018201549281019290925260028101546001600160a01b039081169383018490526003909101546060830152909190841614156112305760608101516001600160a01b0384166000908152600e6020526040812080549091906111ba908490611c1d565b9091555050604080516080810182526000808252602080830186815283850183815260608501848152888552600d909352949092209251835460ff19169015151783559051600183015591516002820180546001600160a01b0319166001600160a01b0390921691909117905590516003909101555b505050565b600480546105ea90611bcc565b612710811061125057600080fd5b60085460ff1661125f57600080fd5b6000818152600a60205260409020546001600160a01b031661128057600080fd5b6000818152600a60205260409020546001600160a01b03163314156112a457600080fd5b6000818152600d60209081526040918290208251608081018452815460ff161515815260018201549281019290925260028101546001600160a01b03169282018390526003015460608201529033146112fc57600080fd5b336001600160a01b0316827f6f30e1ee4d81dcc7a8a478577f65d2ed2edb120565960ac45fe7c50551c87932836060015160405161133c91815260200190565b60405180910390a36060818101516040805160808101825260008082526020808301888152838501838152968401838152898452600d9092528483209351845460ff191690151517845551600184015594516002830180546001600160a01b0319166001600160a01b03909216919091179055935160039091015551909133916108fc84150291849190818181858888f19350505050158015610c3d573d6000803e3d6000fd5b6001546001600160a01b031633146113fa57600080fd5b60085460ff161561140a57600080fd5b612710811061141857600080fd5b6000818152600a60205260409020546001600160a01b03838116911614610c93576000818152600a60205260409020546001600160a01b031615611490576000818152600a60209081526040808320546001600160a01b03168352600b909152812080549161148683611c35565b91905055506114a6565b600980549060006114a083611c35565b91905055505b6000818152600a6020908152604080832080546001600160a01b0319166001600160a01b0387169081179091558352600b90915281208054916114e883611c4c565b9190505550816001600160a01b03167f8a0e37b73a0d9c82e205d4d1a3ff3d0b57ce5f4d7bccf6bac03336dc101cb7ba8260405161152891815260200190565b60405180910390a25050565b60085460ff1661154357600080fd5b6000838152600a60205260409020546001600160a01b0316331461156657600080fd5b612710831061157457600080fd5b6040805160a0810182526001808252602080830187815233848601908152606085018881526001600160a01b038881166080880181815260008d8152600c88528a90209851895460ff191690151517895594519688019690965591516002870180546001600160a01b031990811692851692909217905590516003870155915160049095018054909216941693909317909255915184815285917f3c7b682d5da98001a9b8cbda6c647d2c63d698a4184fd1d55e2ce7b66f5d21eb910160405180910390a3505050565b60085460ff1661164d57600080fd5b6000828152600a60205260409020546001600160a01b0316331461167057600080fd5b612710821061167e57600080fd5b6040805160a0810182526001808252602080830186815233848601908152606085018781526000608087018181528a8252600c86528882209751885460ff191690151517885593519587019590955590516002860180546001600160a01b03199081166001600160a01b0393841617909155915160038701559151600490950180549091169490911693909317909255915183815284917f3c7b682d5da98001a9b8cbda6c647d2c63d698a4184fd1d55e2ce7b66f5d21eb9101610817565b60085460ff1661174c57600080fd5b60095461175857600080fd5b6000818152600a60205260409020546001600160a01b03161561177a57600080fd5b612710811061178857600080fd5b6000818152600a6020908152604080832080546001600160a01b031916339081179091558352600b90915281208054916117c183611c4c565b9091555050600980549060006117d683611c35565b909155505060405181815233907f8a0e37b73a0d9c82e205d4d1a3ff3d0b57ce5f4d7bccf6bac03336dc101cb7ba9060200160405180910390a250565b60085460ff1661182257600080fd5b6000818152600a60205260409020546001600160a01b0316331461184557600080fd5b612710811061185357600080fd5b6040805160a08101825260008082526020808301858152338486019081526060850184815260808601858152888652600c9094528685209551865460ff191690151517865591516001860155516002850180546001600160a01b03199081166001600160a01b0393841617909155915160038601559151600490940180549091169390911692909217909155905182917fb0e0a660b4e50f26f0b7ce75c24655fc76cc66e3334a54ff410277229fa10bd491a250565b600060208083528351808285015260005b818110156119365785810183015185820160400152820161191a565b81811115611948576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561197057600080fd5b5035919050565b6000806040838503121561198a57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156119d8576119d8611999565b604052919050565b600067ffffffffffffffff8211156119fa576119fa611999565b5060051b60200190565b80356001600160a01b0381168114611a1b57600080fd5b919050565b600082601f830112611a3157600080fd5b81356020611a46611a41836119e0565b6119af565b82815260059290921b84018101918181019086841115611a6557600080fd5b8286015b84811015611a805780358352918301918301611a69565b509695505050505050565b60008060408385031215611a9e57600080fd5b823567ffffffffffffffff80821115611ab657600080fd5b818501915085601f830112611aca57600080fd5b81356020611ada611a41836119e0565b82815260059290921b84018101918181019089841115611af957600080fd5b948201945b83861015611b1e57611b0f86611a04565b82529482019490820190611afe565b96505086013592505080821115611b3457600080fd5b50611b4185828601611a20565b9150509250929050565b600060208284031215611b5d57600080fd5b611b6682611a04565b9392505050565b60008060408385031215611b8057600080fd5b611b8983611a04565b946020939093013593505050565b600080600060608486031215611bac57600080fd5b8335925060208401359150611bc360408501611a04565b90509250925092565b600181811c90821680611be057607f821691505b60208210811415611c0157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611c3057611c30611c07565b500190565b600081611c4457611c44611c07565b506000190190565b6000600019821415611c6057611c60611c07565b5060010190565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220d630415128d02529d125c02cc9f111deda6a1a2ff0a585e0d146135b40e5404664736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4,
        "contract": "contracts/mocks/cryptopunk/CryptoPunksMarketMock.sol:CryptoPunksMarket",
        "label": "imageHash",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 6,
        "contract": "contracts/mocks/cryptopunk/CryptoPunksMarketMock.sol:CryptoPunksMarket",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9,
        "contract": "contracts/mocks/cryptopunk/CryptoPunksMarketMock.sol:CryptoPunksMarket",
        "label": "standard",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 11,
        "contract": "contracts/mocks/cryptopunk/CryptoPunksMarketMock.sol:CryptoPunksMarket",
        "label": "name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 13,
        "contract": "contracts/mocks/cryptopunk/CryptoPunksMarketMock.sol:CryptoPunksMarket",
        "label": "symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 15,
        "contract": "contracts/mocks/cryptopunk/CryptoPunksMarketMock.sol:CryptoPunksMarket",
        "label": "decimals",
        "offset": 0,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 17,
        "contract": "contracts/mocks/cryptopunk/CryptoPunksMarketMock.sol:CryptoPunksMarket",
        "label": "totalSupply",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 20,
        "contract": "contracts/mocks/cryptopunk/CryptoPunksMarketMock.sol:CryptoPunksMarket",
        "label": "nextPunkIndexToAssign",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 23,
        "contract": "contracts/mocks/cryptopunk/CryptoPunksMarketMock.sol:CryptoPunksMarket",
        "label": "allPunksAssigned",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 26,
        "contract": "contracts/mocks/cryptopunk/CryptoPunksMarketMock.sol:CryptoPunksMarket",
        "label": "punksRemainingToAssign",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 30,
        "contract": "contracts/mocks/cryptopunk/CryptoPunksMarketMock.sol:CryptoPunksMarket",
        "label": "punkIndexToAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 34,
        "contract": "contracts/mocks/cryptopunk/CryptoPunksMarketMock.sol:CryptoPunksMarket",
        "label": "balanceOf",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 59,
        "contract": "contracts/mocks/cryptopunk/CryptoPunksMarketMock.sol:CryptoPunksMarket",
        "label": "punksOfferedForSale",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(Offer)45_storage)"
      },
      {
        "astId": 64,
        "contract": "contracts/mocks/cryptopunk/CryptoPunksMarketMock.sol:CryptoPunksMarket",
        "label": "punkBids",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(Bid)54_storage)"
      },
      {
        "astId": 68,
        "contract": "contracts/mocks/cryptopunk/CryptoPunksMarketMock.sol:CryptoPunksMarket",
        "label": "pendingWithdrawals",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Bid)54_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CryptoPunksMarket.Bid)",
        "numberOfBytes": "32",
        "value": "t_struct(Bid)54_storage"
      },
      "t_mapping(t_uint256,t_struct(Offer)45_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CryptoPunksMarket.Offer)",
        "numberOfBytes": "32",
        "value": "t_struct(Offer)45_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bid)54_storage": {
        "encoding": "inplace",
        "label": "struct CryptoPunksMarket.Bid",
        "members": [
          {
            "astId": 47,
            "contract": "contracts/mocks/cryptopunk/CryptoPunksMarketMock.sol:CryptoPunksMarket",
            "label": "hasBid",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 49,
            "contract": "contracts/mocks/cryptopunk/CryptoPunksMarketMock.sol:CryptoPunksMarket",
            "label": "punkIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 51,
            "contract": "contracts/mocks/cryptopunk/CryptoPunksMarketMock.sol:CryptoPunksMarket",
            "label": "bidder",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 53,
            "contract": "contracts/mocks/cryptopunk/CryptoPunksMarketMock.sol:CryptoPunksMarket",
            "label": "value",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Offer)45_storage": {
        "encoding": "inplace",
        "label": "struct CryptoPunksMarket.Offer",
        "members": [
          {
            "astId": 36,
            "contract": "contracts/mocks/cryptopunk/CryptoPunksMarketMock.sol:CryptoPunksMarket",
            "label": "isForSale",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 38,
            "contract": "contracts/mocks/cryptopunk/CryptoPunksMarketMock.sol:CryptoPunksMarket",
            "label": "punkIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 40,
            "contract": "contracts/mocks/cryptopunk/CryptoPunksMarketMock.sol:CryptoPunksMarket",
            "label": "seller",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 42,
            "contract": "contracts/mocks/cryptopunk/CryptoPunksMarketMock.sol:CryptoPunksMarket",
            "label": "minValue",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 44,
            "contract": "contracts/mocks/cryptopunk/CryptoPunksMarketMock.sol:CryptoPunksMarket",
            "label": "onlySellTo",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}