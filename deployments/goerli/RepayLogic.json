{
  "address": "0xB9e1D4Cc62200347943e3FD0F88068feBfC4d046",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "Repay",
      "type": "event"
    }
  ],
  "transactionHash": "0xbc4b6639a954fb1aec796d8da3db1ea7757b473d6b6d0bd6b699d786ed201a45",
  "receipt": {
    "to": null,
    "from": "0x218513C58A4781a5B88De6230caA29aBCe2Ccd75",
    "contractAddress": "0xB9e1D4Cc62200347943e3FD0F88068feBfC4d046",
    "transactionIndex": 90,
    "gasUsed": "891573",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9f05f9e7ab1b97938e4be7a9a739b6c09a14feb6ed0bfda14554c119c1a7808c",
    "transactionHash": "0xbc4b6639a954fb1aec796d8da3db1ea7757b473d6b6d0bd6b699d786ed201a45",
    "logs": [],
    "blockNumber": 8098651,
    "cumulativeGasUsed": "21793619",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "d098b2fcaa0d3900bd9713b45ea5b08d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Repay\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bespokemarket/libraries/RepayLogic.sol\":\"RepayLogic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x14351164423eade7f2dbac5ca9ab8aeded8694f3b2d7a9e0114a2b3b6558198d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/bespokemarket/interfaces/IOpenSkyBespokeLoanNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '../libraries/BespokeTypes.sol';\\n\\ninterface IOpenSkyBespokeLoanNFT is IERC721 {\\n    event Mint(uint256 indexed tokenId, address indexed recipient);\\n    event Burn(uint256 tokenId);\\n    event SetLoanDescriptorAddress(address operator, address descriptorAddress);\\n\\n    function mint(uint256 tokenId, address account) external;\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function getLoanData(uint256 tokenId) external returns (BespokeTypes.LoanData memory);\\n}\\n\",\"keccak256\":\"0x6b6d44dc42af37ea65172148dca4969992f5c9b833479fee071d3977f697e1fb\",\"license\":\"MIT\"},\"contracts/bespokemarket/interfaces/IOpenSkyBespokeSettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\nimport '../libraries/BespokeTypes.sol';\\n\\ninterface IOpenSkyBespokeSettings {\\n    event InitLoanAddress(address operator, address borrowLoanAddress, address lendLoanAddress);\\n    event InitMarketAddress(address operator, address address_);\\n\\n    event SetReserveFactor(address operator, uint256 factor);\\n    event SetOverdueLoanFeeFactor(address operator, uint256 factor);\\n\\n    event SetMinBorrowDuration(address operator, uint256 factor);\\n    event SetMaxBorrowDuration(address operator, uint256 factor);\\n    event SetOverdueDuration(address operator, uint256 factor);\\n\\n    // nft whitelist\\n    event OpenWhitelist(address operator);\\n    event CloseWhitelist(address operator);\\n    event AddToWhitelist(address operator, address nft);\\n    event RemoveFromWhitelist(address operator, address nft);\\n\\n    // currency whitelist\\n    event AddCurrency(address operator, address currency);\\n    event RemoveCurrency(address operator, address currency);\\n\\n    // strategy whitelist list\\n    event AddStrategy(address operator, address address_);\\n    event RemoveStrategy(address operator, address address_);\\n\\n    // setting for nft transfer adapter \\n    event InitDefaultNftTransferAdapter(address ERC721DefaultTransferAdapter, address ERC1155DefaultTransferAdapter);\\n    event AddNftTransferAdapter(address operator, address nftAddress, address adapterAddress);\\n    event RemoveNftTransferAdapter(address operator, address nftAddress);\\n\\n    // settings for currency transfer adapter \\n    event InitDefaultCurrencyTransferAdapter(address currencyDefaultTransferAdapter);\\n    event AddCurrencyTransferAdapter(address operator, address currencyAddress, address adapterAddress);\\n    event RemoveCurrencyTransferAdapter(address operator, address currencyAddress);\\n\\n    function marketAddress() external view returns (address);\\n\\n    function borrowLoanAddress() external view returns (address);\\n\\n    function lendLoanAddress() external view returns (address);\\n\\n    function minBorrowDuration() external view returns (uint256);\\n\\n    function maxBorrowDuration() external view returns (uint256);\\n\\n    function overdueDuration() external view returns (uint256);\\n\\n    function reserveFactor() external view returns (uint256);\\n\\n    function MAX_RESERVE_FACTOR() external view returns (uint256);\\n\\n    function overdueLoanFeeFactor() external view returns (uint256);\\n\\n    function isWhitelistOn() external view returns (bool);\\n\\n    function inWhitelist(address nft) external view returns (bool);\\n\\n    function getWhitelistDetail(address nft) external view returns (BespokeTypes.WhitelistInfo memory);\\n\\n    function getBorrowDurationConfig(address nftAddress)\\n        external\\n        view\\n        returns (\\n            uint256 minBorrowDuration,\\n            uint256 maxBorrowDuration,\\n            uint256 overdueDuration\\n        );\\n\\n    function isCurrencyWhitelisted(address currency) external view returns (bool);\\n\\n    function getCurrencyTransferAdapter(address currency) external view returns (address adapter);\\n\\n    function getNftTransferAdapter(address nftAddress) external view returns (address);\\n\\n    function isStrategyWhitelisted(address address_) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x432ec7fd5c555d237eb15a6c6702dcf18acf5b36485ea7fc3541a9a89c9502aa\",\"license\":\"MIT\"},\"contracts/bespokemarket/interfaces/ITransferAdapterCurrency.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../libraries/BespokeTypes.sol';\\n\\ninterface ITransferAdapterCurrency {\\n    function transferOnLend(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        BespokeTypes.Offer memory offerData\\n    ) external;\\n\\n    function transferOnRepay(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        BespokeTypes.LoanData memory loanData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7a3d03a4df2f0433dc9403d5a9192023b30d08117afa4493be465c01a3daa656\",\"license\":\"MIT\"},\"contracts/bespokemarket/interfaces/ITransferAdapterNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface ITransferAdapterNFT {\\n    function transferCollateralIn(\\n        address collection,\\n        address from,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n\\n    function transferCollateralOut(\\n        address collection,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n\\n    function transferCollateralOutOnForeclose(\\n        address collection,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x02724098b358ab512dfb7a5989d1c29901e79fd8501b72d5b86eb8c44841bdab\",\"license\":\"MIT\"},\"contracts/bespokemarket/libraries/BespokeLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport '../../libraries/math/MathUtils.sol';\\nimport '../../libraries/math/WadRayMath.sol';\\nimport '../../libraries/math/PercentageMath.sol';\\n\\nimport '../interfaces/IOpenSkyBespokeSettings.sol';\\nimport '../interfaces/IOpenSkyBespokeLoanNFT.sol';\\nimport './BespokeTypes.sol';\\nimport './SignatureChecker.sol';\\n\\nlibrary BespokeLogic {\\n    using PercentageMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    // keccak256(\\\"Offer(bool isProrated,bool autoConvertWhenRepay,uint8 offerType,address tokenAddress,uint256 tokenId,uint256 tokenAmount,address signer,uint256 borrowAmountMin,uint256 borrowAmountMax,uint40 borrowDurationMin,uint40 borrowDurationMax,uint128 borrowRate,address currency,address lendAsset,uint256 nonce,uint256 nonceMaxTimes,uint256 deadline,address strategy,bytes params)\\\")\\n    bytes32 internal constant OFFER_HASH = 0x5898afb02f4982fe09fa9b4daac8eb8efd917a7c9412c0671717c798ae97aa99;\\n\\n    function hashOffer(BespokeTypes.Offer memory offerData) public pure returns (bytes32) {\\n        return\\n            keccak256(\\n                bytes.concat(\\n                    abi.encode(\\n                        OFFER_HASH,\\n                        offerData.isProrated,\\n                        offerData.autoConvertWhenRepay,\\n                        offerData.offerType,\\n                        offerData.tokenAddress,\\n                        offerData.tokenId,\\n                        offerData.tokenAmount,\\n                        offerData.signer,\\n                        offerData.borrowAmountMin,\\n                        offerData.borrowAmountMax,\\n                        offerData.borrowDurationMin,\\n                        offerData.borrowDurationMax,\\n                        offerData.borrowRate\\n                    ),\\n                    abi.encode(\\n                        offerData.currency,\\n                        offerData.lendAsset,\\n                        offerData.nonce,\\n                        offerData.nonceMaxTimes,\\n                        offerData.deadline,\\n                        offerData.strategy,\\n                        keccak256(offerData.params)\\n                    )\\n                )\\n            );\\n    }\\n\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f, // keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n                    0xf0cf7ce475272740cae17eb3cadd6d254800be81c53f84a2f273b99036471c62, // keccak256(\\\"OpenSkyBespokeMarket\\\")\\n                    0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6, // keccak256(bytes(\\\"1\\\")) for versionId = 1\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    function validateOfferCommon(\\n        mapping(address => mapping(uint256 => BespokeTypes.NonceInfo)) storage _nonce,\\n        mapping(address => uint256) storage minNonce,\\n        BespokeTypes.Offer memory offerData,\\n        bytes32 offerHash,\\n        uint256 amount,\\n        uint256 duration,\\n        bytes32 DOMAIN_SEPARATOR,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS //,\\n    ) public view {\\n        // check nonce\\n        require(\\n            !_nonce[offerData.signer][offerData.nonce].invalid && offerData.nonce >= minNonce[offerData.signer],\\n            'BM_TAKE_OFFER_NONCE_INVALID'\\n        );\\n        require(offerData.nonceMaxTimes >= 1, 'BM_TAKE_OFFER_NONCE_MAX_TIMES_INVALIDE');\\n\\n        require(\\n            _nonce[offerData.signer][offerData.nonce].usedTimes < offerData.nonceMaxTimes,\\n            'BM_TAKE_OFFER_NONCE_EXHAUST'\\n        );\\n\\n        if (_nonce[offerData.signer][offerData.nonce].offerHash != 0) {\\n            require(\\n                _nonce[offerData.signer][offerData.nonce].offerHash == offerHash,\\n                'BM_TAKE_OFFER_NONCE_USED_BY_OTHER_OFFER'\\n            );\\n        }\\n\\n        require(BESPOKE_SETTINGS.isCurrencyWhitelisted(offerData.currency), 'BM_TAKE_BORROW_CURRENCY_NOT_IN_WHITELIST');\\n\\n        require(\\n            !BESPOKE_SETTINGS.isWhitelistOn() || BESPOKE_SETTINGS.inWhitelist(offerData.tokenAddress),\\n            'BM_TAKE_BORROW_NFT_NOT_IN_WHITELIST'\\n        );\\n\\n        require(block.timestamp <= offerData.deadline, 'BM_TAKE_BORROW_SIGNING_EXPIRATION');\\n\\n        (uint256 minBorrowDuration, uint256 maxBorrowDuration, ) = BESPOKE_SETTINGS.getBorrowDurationConfig(\\n            offerData.tokenAddress\\n        );\\n\\n        // check borrow duration\\n        require(\\n            offerData.borrowDurationMin <= offerData.borrowDurationMax &&\\n                offerData.borrowDurationMin >= minBorrowDuration &&\\n                offerData.borrowDurationMax <= maxBorrowDuration,\\n            'BM_TAKE_BORROW_OFFER_DURATION_NOT_ALLOWED'\\n        );\\n\\n        require(\\n            duration > 0 && duration >= offerData.borrowDurationMin && duration <= offerData.borrowDurationMax,\\n            'BM_TAKE_BORROW_TAKER_DURATION_NOT_ALLOWED'\\n        );\\n\\n        // check borrow amount\\n        require(\\n            offerData.borrowAmountMin > 0 && offerData.borrowAmountMin <= offerData.borrowAmountMax,\\n            'BM_TAKE_BORROW_OFFER_AMOUNT_NOT_ALLOWED'\\n        );\\n\\n        require(\\n            amount >= offerData.borrowAmountMin && amount <= offerData.borrowAmountMax,\\n            'BM_TAKE_BORROW_SUPPLY_AMOUNT_NOT_ALLOWED'\\n        );\\n        require(\\n            SignatureChecker.verify(\\n                offerHash,\\n                offerData.signer,\\n                offerData.v,\\n                offerData.r,\\n                offerData.s,\\n                DOMAIN_SEPARATOR\\n            ),\\n            'BM_TAKE_BORROW_SIGNATURE_INVALID'\\n        );\\n    }\\n\\n    function createLoan(\\n        mapping(uint256 => BespokeTypes.LoanData) storage _loans,\\n        BespokeTypes.Offer memory offerData,\\n        uint256 loanId,\\n        uint256 supplyAmount,\\n        uint256 supplyDuration,\\n        address nftManager,\\n        uint256 tokenId,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS\\n    ) public {\\n        uint256 borrowRateRay = uint256(offerData.borrowRate).rayDiv(10000);\\n        (, , uint256 overdueDuration) = BESPOKE_SETTINGS.getBorrowDurationConfig(offerData.tokenAddress);\\n\\n        BespokeTypes.LoanData memory loan = BespokeTypes.LoanData({\\n            tokenAddress: offerData.tokenAddress,\\n            tokenId: tokenId,\\n            tokenAmount: offerData.tokenAmount,\\n            nftManager: nftManager,\\n            borrower: offerData.offerType == BespokeTypes.OfferType.BORROW ? offerData.signer : msg.sender,\\n            lender: offerData.offerType == BespokeTypes.OfferType.BORROW ? msg.sender : offerData.signer,\\n            amount: supplyAmount,\\n            borrowRate: uint128(borrowRateRay),\\n            interestPerSecond: uint128(MathUtils.calculateBorrowInterestPerSecond(borrowRateRay, supplyAmount)),\\n            currency: offerData.currency,\\n            lendAsset: offerData.lendAsset,\\n            reserveFactor: BESPOKE_SETTINGS.reserveFactor(),\\n            overdueLoanFeeFactor: BESPOKE_SETTINGS.overdueLoanFeeFactor(),\\n            borrowDuration: uint40(supplyDuration),\\n            borrowBegin: uint40(block.timestamp),\\n            borrowOverdueTime: uint40(block.timestamp + supplyDuration),\\n            liquidatableTime: uint40(block.timestamp + supplyDuration + overdueDuration),\\n            isProrated: offerData.isProrated,\\n            autoConvertWhenRepay: offerData.autoConvertWhenRepay,\\n            status: BespokeTypes.LoanStatus.BORROWING\\n        });\\n\\n        _loans[loanId] = loan;\\n    }\\n\\n    function getLoanStatus(BespokeTypes.LoanData memory loan) public view returns (BespokeTypes.LoanStatus) {\\n        BespokeTypes.LoanStatus status = loan.status;\\n        if (status == BespokeTypes.LoanStatus.BORROWING) {\\n            if (loan.liquidatableTime < block.timestamp) {\\n                status = BespokeTypes.LoanStatus.LIQUIDATABLE;\\n            } else if (loan.borrowOverdueTime < block.timestamp) {\\n                status = BespokeTypes.LoanStatus.OVERDUE;\\n            }\\n        }\\n        return status;\\n    }\\n\\n    function getLoanDataWithStatus(BespokeTypes.LoanData memory loan)\\n        public\\n        view\\n        returns (BespokeTypes.LoanData memory)\\n    {\\n        loan.status = getLoanStatus(loan);\\n        return loan;\\n    }\\n\\n    function getLoanParties(IOpenSkyBespokeSettings BESPOKE_SETTINGS, uint256 loanId)\\n        public\\n        view\\n        returns (address borrower, address lender)\\n    {\\n        lender = IERC721(BESPOKE_SETTINGS.lendLoanAddress()).ownerOf(loanId);\\n        borrower = IERC721(BESPOKE_SETTINGS.borrowLoanAddress()).ownerOf(loanId);\\n    }\\n\\n    function getBorrowInterest(BespokeTypes.LoanData memory loan) public view returns (uint256) {\\n        uint256 endTime = block.timestamp < loan.borrowOverdueTime\\n            ? (loan.isProrated ? block.timestamp : loan.borrowOverdueTime)\\n            : loan.borrowOverdueTime;\\n        return uint256(loan.interestPerSecond).rayMul(endTime -loan.borrowBegin);\\n    }\\n\\n    // @dev principal + interest\\n    function getBorrowBalance(BespokeTypes.LoanData memory loan) public view returns (uint256) {\\n        return loan.amount + getBorrowInterest(loan);\\n    }\\n\\n    function getPenalty(BespokeTypes.LoanData memory loan) public view returns (uint256) {\\n        BespokeTypes.LoanData memory loan = getLoanDataWithStatus(loan);\\n        uint256 penalty = 0;\\n        if (loan.status == BespokeTypes.LoanStatus.OVERDUE) {\\n            penalty = loan.amount.percentMul(loan.overdueLoanFeeFactor);\\n        }\\n        return penalty;\\n    }\\n\\n    function calculateRepayAmountAndProtocolFee(BespokeTypes.LoanData memory loan)\\n        public\\n        view\\n        returns (\\n            uint256 total,\\n            uint256 lenderAmount,\\n            uint256 protocolFee\\n        )\\n    {\\n        uint256 penalty = getPenalty(loan);\\n        total = getBorrowBalance(loan) + penalty;\\n        protocolFee = (getBorrowInterest(loan) + penalty).percentMul(loan.reserveFactor);\\n        lenderAmount = total - protocolFee;\\n    }\\n\\n    function burnLoanNft(\\n        mapping(uint256 => BespokeTypes.LoanData) storage _loans,\\n        uint256 tokenId,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS\\n    ) public {\\n        IOpenSkyBespokeLoanNFT(BESPOKE_SETTINGS.borrowLoanAddress()).burn(tokenId);\\n        IOpenSkyBespokeLoanNFT(BESPOKE_SETTINGS.lendLoanAddress()).burn(tokenId);\\n        delete _loans[tokenId];\\n    }\\n\\n    function mintLoanNFT(\\n        BespokeTypes.Counter storage _loanIdTracker,\\n        address borrower,\\n        address lender,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS\\n    ) internal returns (uint256) {\\n        _loanIdTracker._value = _loanIdTracker._value + 1;\\n        uint256 tokenId = _loanIdTracker._value;\\n\\n        IOpenSkyBespokeLoanNFT(BESPOKE_SETTINGS.borrowLoanAddress()).mint(tokenId, borrower);\\n        IOpenSkyBespokeLoanNFT(BESPOKE_SETTINGS.lendLoanAddress()).mint(tokenId, lender);\\n\\n        return tokenId;\\n    }\\n}\\n\",\"keccak256\":\"0x95df091a5a184b1a5c14009283b322e112910f1c31d594f90f95a0f326be3dad\",\"license\":\"MIT\"},\"contracts/bespokemarket/libraries/BespokeTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary BespokeTypes {\\n    struct Offer {\\n        bool isProrated; // whether to pay interest a fixed-time when repay early\\n        bool autoConvertWhenRepay; // when currency!=lendAsset, whether to convert currency to lendAsset for lender when reapy\\n        OfferType offerType;\\n        address tokenAddress;\\n        uint256 tokenId;\\n        uint256 tokenAmount; // 1 for ERC721, 1+ for ERC1155\\n        address signer; //borrower or lender\\n        uint256 borrowAmountMin;\\n        uint256 borrowAmountMax;\\n        uint40 borrowDurationMin;\\n        uint40 borrowDurationMax;\\n        uint128 borrowRate;\\n        address currency;\\n        address lendAsset; // for a lend offer, using which oToken to lend; for a borrow offer, same as currency\\n        uint256 nonce;\\n        uint256 nonceMaxTimes;\\n        uint256 deadline;\\n        address strategy; // used for lend offer\\n        bytes params;\\n        uint8 v; // v: parameter (27 or 28)\\n        bytes32 r; // r: parameter\\n        bytes32 s; // s: parameter\\n    }\\n\\n    struct LoanData {\\n        address tokenAddress;\\n        uint256 tokenId;\\n        uint256 tokenAmount; // 1 for ERC721, 1+ for ERC1155\\n        address nftManager;\\n        address borrower;\\n        address lender;\\n        uint256 amount;\\n        uint128 borrowRate;\\n        uint128 interestPerSecond;\\n        address currency;\\n        address lendAsset;\\n        uint256 reserveFactor;\\n        uint256 overdueLoanFeeFactor;\\n        uint40 borrowDuration;\\n        uint40 borrowBegin;\\n        uint40 borrowOverdueTime;\\n        uint40 liquidatableTime;\\n        bool isProrated;\\n        bool autoConvertWhenRepay;\\n        LoanStatus status;\\n    }\\n\\n    enum OfferType {\\n        BORROW, // borrow offer\\n        LEND // lend offer\\n    }\\n\\n    struct TakeBorrowInfo {\\n        uint256 borrowAmount;\\n        uint256 borrowDuration;\\n    }\\n\\n    struct TakeLendInfo {\\n        uint256 borrowAmount;\\n        uint256 borrowDuration;\\n        uint256 tokenId;\\n        address onBehalfOf;\\n        bytes params;\\n    }\\n\\n    // params for lend strategy\\n    struct TakeLendInfoForStrategy {\\n        address taker;\\n        uint256 tokenId;\\n        bytes params;\\n    }\\n\\n    enum LoanStatus {\\n        NONE,\\n        BORROWING,\\n        OVERDUE,\\n        LIQUIDATABLE\\n    }\\n\\n    struct WhitelistInfo {\\n        bool enabled;\\n        uint256 minBorrowDuration;\\n        uint256 maxBorrowDuration;\\n        uint256 overdueDuration;\\n    }\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    struct NonceInfo {\\n        bool invalid;\\n        uint256 usedTimes;\\n        bytes32 offerHash;\\n    }\\n}\\n\",\"keccak256\":\"0x6663847bac654c215f57c43414bed03ec949eb61d8c9e88acd7109ba07094113\",\"license\":\"MIT\"},\"contracts/bespokemarket/libraries/RepayLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport '../../interfaces/IOpenSkySettings.sol';\\n\\nimport '../interfaces/IOpenSkyBespokeSettings.sol';\\nimport '../interfaces/ITransferAdapterCurrency.sol';\\nimport '../interfaces/ITransferAdapterNFT.sol';\\n\\nimport './BespokeTypes.sol';\\nimport './BespokeLogic.sol';\\n\\nlibrary RepayLogic {\\n    using SafeERC20 for IERC20;\\n\\n    event Repay(uint256 indexed loanId, address indexed operator, address indexed receiver);\\n\\n    function repay(\\n        mapping(uint256 => BespokeTypes.LoanData) storage _loans,\\n        uint256 loanId,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS,\\n        IOpenSkySettings SETTINGS\\n    ) public {\\n        BespokeTypes.LoanData memory loanData = BespokeLogic.getLoanDataWithStatus(_loans[loanId]);\\n        require(\\n            loanData.status == BespokeTypes.LoanStatus.BORROWING || loanData.status == BespokeTypes.LoanStatus.OVERDUE,\\n            'BM_REPAY_STATUS_ERROR'\\n        );\\n\\n        (address borrower, address lender) = BespokeLogic.getLoanParties(BESPOKE_SETTINGS, loanId);\\n\\n        (uint256 repayTotal, uint256 lenderAmount, uint256 protocolFee) = BespokeLogic\\n            .calculateRepayAmountAndProtocolFee(loanData);\\n        address currencyTransferAdapter = BESPOKE_SETTINGS.getCurrencyTransferAdapter(loanData.lendAsset);\\n\\n        IERC20(loanData.currency).safeTransferFrom(msg.sender, address(this), lenderAmount);\\n        IERC20(loanData.currency).approve(currencyTransferAdapter, lenderAmount);\\n        ITransferAdapterCurrency(currencyTransferAdapter).transferOnRepay(\\n            loanData.lendAsset,\\n            address(this),\\n            lender,\\n            lenderAmount,\\n            loanData\\n        );\\n\\n        // protocol income\\n        if (protocolFee > 0) {\\n            IERC20(loanData.currency).safeTransferFrom(msg.sender, SETTINGS.daoVaultAddress(), protocolFee);\\n        }\\n\\n        ITransferAdapterNFT(loanData.nftManager).transferCollateralOut(\\n            loanData.tokenAddress,\\n            borrower,\\n            loanData.tokenId,\\n            loanData.tokenAmount\\n        );\\n\\n        BespokeLogic.burnLoanNft(_loans, loanId, BESPOKE_SETTINGS);\\n\\n        emit Repay(loanId, msg.sender, borrower);\\n    }\\n}\\n\",\"keccak256\":\"0x179392eb85787939afc53e750282dea83addb1e4ca08291d59f42c8231c0c2ab\",\"license\":\"MIT\"},\"contracts/bespokemarket/libraries/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\nimport {IERC1271} from '@openzeppelin/contracts/interfaces/IERC1271.sol';\\n\\n/**\\n * @title SignatureChecker\\n * @notice This library allows verification of signatures for both EOAs and contracts.\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @notice Recovers the signer of a signature (for EOA)\\n     * @param hash the hash containing the signed mesage\\n     * @param v parameter (27 or 28). This prevents maleability since the public key recovery equation has two possible solutions.\\n     * @param r parameter\\n     * @param s parameter\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // https://ethereum.stackexchange.com/questions/83174/is-it-best-practice-to-check-signature-malleability-in-ecrecover\\n        // https://crypto.iacr.org/2019/affevents/wac/medias/Heninger-BiasedNonceSense.pdf\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            'BM_SIGNATURE_INVALID_S_PARAMETER'\\n        );\\n\\n        require(v == 27 || v == 28, 'BM_SIGNATURE_INVALID_V_PARAMETER');\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), 'BM_SIGNATURE_INVALID_SIGNER');\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @notice Returns whether the signer matches the signed message\\n     * @param hash the hash containing the signed mesage\\n     * @param signer the signer address to confirm message validity\\n     * @param v parameter (27 or 28)\\n     * @param r parameter\\n     * @param s parameter\\n     * @param domainSeparator paramer to prevent signature being executed in other chains and environments\\n     * @return true --> if valid // false --> if invalid\\n     */\\n    function verify(\\n        bytes32 hash,\\n        address signer,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        bytes32 domainSeparator\\n    ) internal view returns (bool) {\\n        // \\\\x19\\\\x01 is the standardized encoding prefix\\n        // https://eips.ethereum.org/EIPS/eip-712#specification\\n        bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', domainSeparator, hash));\\n        if (Address.isContract(signer)) {\\n            // 0x1626ba7e is the interfaceId for signature contracts (see IERC1271)\\n            return IERC1271(signer).isValidSignature(digest, abi.encodePacked(r, s, v)) == 0x1626ba7e;\\n        } else {\\n            return recover(digest, v, r, s) == signer;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d997d9be9ec81d9643d9fc9f1f72d917ab1196add37ae6f9bc1ad378daa829d\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkySettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\nimport '../libraries/types/DataTypes.sol';\\n\\ninterface IOpenSkySettings {\\n    event InitPoolAddress(address operator, address address_);\\n    event InitLoanAddress(address operator, address address_);\\n    event InitVaultFactoryAddress(address operator, address address_);\\n    event InitIncentiveControllerAddress(address operator, address address_);\\n    event InitWETHGatewayAddress(address operator, address address_);\\n    event InitPunkGatewayAddress(address operator, address address_);\\n    event InitDaoVaultAddress(address operator, address address_);\\n\\n    event AddToWhitelist(address operator, uint256 reserveId, address nft);\\n    event RemoveFromWhitelist(address operator, uint256 reserveId, address nft);\\n    event SetReserveFactor(address operator, uint256 factor);\\n    event SetPrepaymentFeeFactor(address operator, uint256 factor);\\n    event SetOverdueLoanFeeFactor(address operator, uint256 factor);\\n    event SetMoneyMarketAddress(address operator, address address_);\\n    event SetTreasuryAddress(address operator, address address_);\\n    event SetACLManagerAddress(address operator, address address_);\\n    event SetLoanDescriptorAddress(address operator, address address_);\\n    event SetNftPriceOracleAddress(address operator, address address_);\\n    event SetInterestRateStrategyAddress(address operator, address address_);\\n    event AddLiquidator(address operator, address address_);\\n    event RemoveLiquidator(address operator, address address_);\\n\\n    function poolAddress() external view returns (address);\\n\\n    function loanAddress() external view returns (address);\\n\\n    function vaultFactoryAddress() external view returns (address);\\n\\n    function incentiveControllerAddress() external view returns (address);\\n\\n    function wethGatewayAddress() external view returns (address);\\n\\n    function punkGatewayAddress() external view returns (address);\\n\\n    function inWhitelist(uint256 reserveId, address nft) external view returns (bool);\\n\\n    function getWhitelistDetail(uint256 reserveId, address nft) external view returns (DataTypes.WhitelistInfo memory);\\n\\n    function reserveFactor() external view returns (uint256); // treasury ratio\\n\\n    function MAX_RESERVE_FACTOR() external view returns (uint256);\\n\\n    function prepaymentFeeFactor() external view returns (uint256);\\n\\n    function overdueLoanFeeFactor() external view returns (uint256);\\n\\n    function moneyMarketAddress() external view returns (address);\\n\\n    function treasuryAddress() external view returns (address);\\n\\n    function daoVaultAddress() external view returns (address);\\n\\n    function ACLManagerAddress() external view returns (address);\\n\\n    function loanDescriptorAddress() external view returns (address);\\n\\n    function nftPriceOracleAddress() external view returns (address);\\n\\n    function interestRateStrategyAddress() external view returns (address);\\n    \\n    function isLiquidator(address liquidator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd5c1c2468464891b3ce379c8a03bc21c2c67fcf0c7493e3b35fd573fa21ea448\",\"license\":\"MIT\"},\"contracts/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    // common\\n    string public constant MATH_MULTIPLICATION_OVERFLOW = '100';\\n    string public constant MATH_ADDITION_OVERFLOW = '101';\\n    string public constant MATH_DIVISION_BY_ZERO = '102';\\n\\n    string public constant ETH_TRANSFER_FAILED = '110';\\n    string public constant RECEIVE_NOT_ALLOWED = '111';\\n    string public constant FALLBACK_NOT_ALLOWED = '112';\\n    string public constant APPROVAL_FAILED = '113';\\n\\n    // setting/factor\\n    string public constant SETTING_ZERO_ADDRESS_NOT_ALLOWED = '115';\\n    string public constant SETTING_RESERVE_FACTOR_NOT_ALLOWED = '116';\\n    string public constant SETTING_WHITELIST_INVALID_RESERVE_ID = '117';\\n    string public constant SETTING_WHITELIST_NFT_ADDRESS_IS_ZERO = '118';\\n    string public constant SETTING_WHITELIST_NFT_DURATION_OUT_OF_ORDER = '119';\\n    string public constant SETTING_WHITELIST_NFT_NAME_EMPTY = '120';\\n    string public constant SETTING_WHITELIST_NFT_SYMBOL_EMPTY = '121';\\n    string public constant SETTING_WHITELIST_NFT_LTV_NOT_ALLOWED = '122';\\n\\n    // settings/acl\\n    string public constant ACL_ONLY_GOVERNANCE_CAN_CALL = '200';\\n    string public constant ACL_ONLY_EMERGENCY_ADMIN_CAN_CALL = '201';\\n    string public constant ACL_ONLY_POOL_ADMIN_CAN_CALL = '202';\\n    string public constant ACL_ONLY_LIQUIDATOR_CAN_CALL = '203';\\n    string public constant ACL_ONLY_AIRDROP_OPERATOR_CAN_CALL = '204';\\n    string public constant ACL_ONLY_POOL_CAN_CALL = '205';\\n\\n    // lending & borrowing\\n    // reserve\\n    string public constant RESERVE_DOES_NOT_EXIST = '300';\\n    string public constant RESERVE_LIQUIDITY_INSUFFICIENT = '301';\\n    string public constant RESERVE_INDEX_OVERFLOW = '302';\\n    string public constant RESERVE_SWITCH_MONEY_MARKET_STATE_ERROR = '303';\\n    string public constant RESERVE_TREASURY_FACTOR_NOT_ALLOWED = '304';\\n    string public constant RESERVE_TOKEN_CAN_NOT_BE_CLAIMED = '305';\\n\\n    // token\\n    string public constant AMOUNT_SCALED_IS_ZERO = '310';\\n    string public constant AMOUNT_TRANSFER_OVERFLOW = '311';\\n\\n    //deposit\\n    string public constant DEPOSIT_AMOUNT_SHOULD_BE_BIGGER_THAN_ZERO = '320';\\n\\n    // withdraw\\n    string public constant WITHDRAW_AMOUNT_NOT_ALLOWED = '321';\\n    string public constant WITHDRAW_LIQUIDITY_NOT_SUFFICIENT = '322';\\n\\n    // borrow\\n    string public constant BORROW_DURATION_NOT_ALLOWED = '330';\\n    string public constant BORROW_AMOUNT_EXCEED_BORROW_LIMIT = '331';\\n    string public constant NFT_ADDRESS_IS_NOT_IN_WHITELIST = '332';\\n\\n    // repay\\n    string public constant REPAY_STATUS_ERROR = '333';\\n    string public constant REPAY_MSG_VALUE_ERROR = '334';\\n\\n    // extend\\n    string public constant EXTEND_STATUS_ERROR = '335';\\n    string public constant EXTEND_MSG_VALUE_ERROR = '336';\\n\\n    // liquidate\\n    string public constant START_LIQUIDATION_STATUS_ERROR = '360';\\n    string public constant END_LIQUIDATION_STATUS_ERROR = '361';\\n    string public constant END_LIQUIDATION_AMOUNT_ERROR = '362';\\n\\n    // loan\\n    string public constant LOAN_DOES_NOT_EXIST = '400';\\n    string public constant LOAN_SET_STATUS_ERROR = '401';\\n    string public constant LOAN_REPAYER_IS_NOT_OWNER = '402';\\n    string public constant LOAN_LIQUIDATING_STATUS_CAN_NOT_BE_UPDATED = '403';\\n    string public constant LOAN_CALLER_IS_NOT_OWNER = '404';\\n    string public constant LOAN_COLLATERAL_NFT_CAN_NOT_BE_CLAIMED = '405';\\n\\n    string public constant FLASHCLAIM_EXECUTOR_ERROR = '410';\\n    string public constant FLASHCLAIM_STATUS_ERROR = '411';\\n\\n    // money market\\n    string public constant MONEY_MARKET_DEPOSIT_AMOUNT_NOT_ALLOWED = '500';\\n    string public constant MONEY_MARKET_WITHDRAW_AMOUNT_NOT_ALLOWED = '501';\\n    string public constant MONEY_MARKET_APPROVAL_FAILED = '502';\\n    string public constant MONEY_MARKET_DELEGATE_CALL_ERROR = '503';\\n    string public constant MONEY_MARKET_REQUIRE_DELEGATE_CALL = '504';\\n    string public constant MONEY_MARKET_WITHDRAW_AMOUNT_NOT_MATCH = '505';\\n\\n    // price oracle\\n    string public constant PRICE_ORACLE_HAS_NO_PRICE_FEED = '600';\\n    string public constant PRICE_ORACLE_INCORRECT_TIMESTAMP = '601';\\n    string public constant PRICE_ORACLE_PARAMS_ERROR = '602';\\n}\\n\",\"keccak256\":\"0xc4e38b51f80e5ad6eeacd323b4ac0798c5ca51d7a2d0c9fc2ba52aafa8a064b8\",\"license\":\"MIT\"},\"contracts/libraries/math/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {WadRayMath} from './WadRayMath.sol';\\n\\nlibrary MathUtils {\\n    using WadRayMath for uint256;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n     * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate linearly accumulated during the timeDelta, in ray\\n     **/\\n\\n    function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp) external view returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 timeDifference = block.timestamp - (uint256(lastUpdateTimestamp));\\n\\n        return (rate * timeDifference) / SECONDS_PER_YEAR + WadRayMath.ray();\\n    }\\n\\n    function calculateBorrowInterest(\\n        uint256 borrowRate,\\n        uint256 amount,\\n        uint256 duration\\n    ) external pure returns (uint256) {\\n        return amount.rayMul(borrowRate.rayMul(duration).rayDiv(SECONDS_PER_YEAR));\\n    }\\n\\n    function calculateBorrowInterestPerSecond(uint256 borrowRate, uint256 amount) external pure returns (uint256) {\\n        return amount.rayMul(borrowRate).rayDiv(SECONDS_PER_YEAR);\\n    }\\n\\n    function calculateLoanSupplyRate(\\n        uint256 availableLiquidity,\\n        uint256 totalBorrows,\\n        uint256 borrowRate\\n    ) external pure returns (uint256 loanSupplyRate, uint256 utilizationRate) {\\n        utilizationRate = (totalBorrows == 0 && availableLiquidity == 0)\\n            ? 0\\n            : totalBorrows.rayDiv(availableLiquidity + totalBorrows);\\n        loanSupplyRate = utilizationRate.rayMul(borrowRate);\\n    }\\n}\\n\",\"keccak256\":\"0xe06262969c3e10f221573fd7bfdf3a89942957b5d957a6110cb5e933d2bdbff6\",\"license\":\"MIT\"},\"contracts/libraries/math/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../helpers/Errors.sol';\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded half up\\n **/\\n\\nlibrary PercentageMath {\\n  uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\n  uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\n\\n  /**\\n   * @dev Executes a percentage multiplication\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The percentage of value\\n   **/\\n  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    if (value == 0 || percentage == 0) {\\n      return 0;\\n    }\\n\\n    require(\\n      value <= (type(uint256).max - HALF_PERCENT) / percentage,\\n      Errors.MATH_MULTIPLICATION_OVERFLOW\\n    );\\n\\n    return (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\\n  }\\n\\n  /**\\n   * @dev Executes a percentage division\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The value divided the percentage\\n   **/\\n  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    require(percentage != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfPercentage = percentage / 2;\\n\\n    require(\\n      value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR,\\n      Errors.MATH_MULTIPLICATION_OVERFLOW\\n    );\\n\\n    return (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\n  }\\n}\\n\",\"keccak256\":\"0xe8333e1a929245e4198f87645eae3fc8749e8e29f505427b38ec8ca035434953\",\"license\":\"MIT\"},\"contracts/libraries/math/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {Errors} from '../helpers/Errors.sol';\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @return One ray, 1e27\\n     **/\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    /**\\n     * @return One wad, 1e18\\n     **/\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e27/2\\n     **/\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e18/2\\n     **/\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     **/\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfWAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * b + halfWAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     **/\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * WAD + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfRAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * b + halfRAY) / RAY;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, truncating the mantissa\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMulTruncate(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return (a * b) / RAY;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * RAY + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, truncating the mantissa\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDivTruncate(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        return (a * RAY) / b;\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @param a Ray\\n     * @return a casted to wad, rounded half up to the nearest wad\\n     **/\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n        uint256 result = halfRatio + a;\\n        require(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\\n\\n        return result / WAD_RAY_RATIO;\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @param a Wad\\n     * @return a converted in ray\\n     **/\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        uint256 result = a * WAD_RAY_RATIO;\\n        require(result / WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4bf6b9a00c5e9938726d173f11b56de8edd92e17593e4dfa61a3ce7336756c6b\",\"license\":\"MIT\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        uint256 reserveId;\\n        address underlyingAsset;\\n        address oTokenAddress;\\n        address moneyMarketAddress;\\n        uint128 lastSupplyIndex;\\n        uint256 borrowingInterestPerSecond;\\n        uint256 lastMoneyMarketBalance;\\n        uint40 lastUpdateTimestamp;\\n        uint256 totalBorrows;\\n        address interestModelAddress;\\n        uint256 treasuryFactor;\\n        bool isMoneyMarketOn;\\n    }\\n\\n    struct LoanData {\\n        uint256 reserveId;\\n        address nftAddress;\\n        uint256 tokenId;\\n        address borrower;\\n        uint256 amount;\\n        uint128 borrowRate;\\n        uint128 interestPerSecond;\\n        uint40 borrowBegin;\\n        uint40 borrowDuration;\\n        uint40 borrowOverdueTime;\\n        uint40 liquidatableTime;\\n        uint40 extendableTime;\\n        uint40 borrowEnd;\\n        LoanStatus status;\\n    }\\n\\n    enum LoanStatus {\\n        NONE,\\n        BORROWING,\\n        EXTENDABLE,\\n        OVERDUE,\\n        LIQUIDATABLE,\\n        LIQUIDATING\\n    }\\n\\n    struct WhitelistInfo {\\n        bool enabled;\\n        string name;\\n        string symbol;\\n        uint256 LTV;\\n        uint256 minBorrowDuration;\\n        uint256 maxBorrowDuration;\\n        uint256 extendableDuration;\\n        uint256 overdueDuration;\\n    }\\n}\\n\",\"keccak256\":\"0x487cd1dedb3146da46144bc8f0e5b970c5173efa8c19700184b8207c1ee3fc55\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610f2961003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c806306d8c6df1461003a575b600080fd5b81801561004657600080fd5b5061005a61005536600461087d565b61005c565b005b60008381526020859052604080822090516319e28c3360e21b81527381DEe8bd810EECb3E7840A9116608457Fb1b32e09163678a30cc916100a091906004016108ff565b61028060405180830381865af41580156100be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e29190610ad7565b9050600181610260015160038111156100fd576100fd6108c7565b148061011f57506002816102600151600381111561011d5761011d6108c7565b145b6101685760405162461bcd60e51b81526020600482015260156024820152742126afa922a820acafa9aa20aa2aa9afa2a92927a960591b60448201526064015b60405180910390fd5b6040516351cb15df60e01b81526001600160a01b03841660048201526024810185905260009081907381DEe8bd810EECb3E7840A9116608457Fb1b32e0906351cb15df906044016040805180830381865af41580156101cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ef9190610c30565b9150915060008060007381DEe8bd810EECb3E7840A9116608457Fb1b32e0634a150a4b876040518263ffffffff1660e01b815260040161022f9190610dbe565b606060405180830381865af415801561024c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102709190610dd3565b61014089015160405163bc98c24760e01b81526001600160a01b0391821660048201529396509194509250600091908a169063bc98c24790602401602060405180830381865afa1580156102c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ec9190610e01565b61012088015190915061030a906001600160a01b03163330866105b4565b61012087015160405163095ea7b360e01b81526001600160a01b038381166004830152602482018690529091169063095ea7b3906044016020604051808303816000875af1158015610360573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103849190610e1e565b50610140870151604051623f194360e51b81526001600160a01b038316916307e32860916103bd919030908a9089908e90600401610e39565b600060405180830381600087803b1580156103d757600080fd5b505af11580156103eb573d6000803e3d6000fd5b5050505060008211156104755761047533896001600160a01b0316633d6a38446040518163ffffffff1660e01b8152600401602060405180830381865afa15801561043a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045e9190610e01565b6101208a01516001600160a01b03169190856105b4565b6060870151875160208901516040808b01519051631aad9c3160e11b81526001600160a01b0393841660048201528a841660248201526044810192909252606482015291169063355b386290608401600060405180830381600087803b1580156104de57600080fd5b505af11580156104f2573d6000803e3d6000fd5b505060405163f84ea9c160e01b8152600481018e9052602481018d90526001600160a01b038c1660448201527381DEe8bd810EECb3E7840A9116608457Fb1b32e0925063f84ea9c1915060640160006040518083038186803b15801561055757600080fd5b505af415801561056b573d6000803e3d6000fd5b50506040516001600160a01b03891692503391508c907fa5c8e6070bf4562423664ac9492b3657056156fa769f36225f4184835ce1e6b090600090a45050505050505050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261060e908590610614565b50505050565b6000610669826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166106eb9092919063ffffffff16565b8051909150156106e657808060200190518101906106879190610e1e565b6106e65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161015f565b505050565b60606106fa8484600085610704565b90505b9392505050565b6060824710156107655760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161015f565b843b6107b35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161015f565b600080866001600160a01b031685876040516107cf9190610ea4565b60006040518083038185875af1925050503d806000811461080c576040519150601f19603f3d011682016040523d82523d6000602084013e610811565b606091505b509150915061082182828661082c565b979650505050505050565b6060831561083b5750816106fd565b82511561084b5782518084602001fd5b8160405162461bcd60e51b815260040161015f9190610ec0565b6001600160a01b038116811461087a57600080fd5b50565b6000806000806080858703121561089357600080fd5b843593506020850135925060408501356108ac81610865565b915060608501356108bc81610865565b939692955090935050565b634e487b7160e01b600052602160045260246000fd5b600481106108fb57634e487b7160e01b600052602160045260246000fd5b9052565b81546001600160a01b031681526102808101600183015460208301526002830154604083015260038301546001600160a01b039081166060840152600484015481166080808501919091526005850154821660a0850152600685015460c085015260078501546001600160801b03811660e0860152901c61010084015260088401548116610120840152600984015416610140830152600a830154610160830152600b830154610180830152600c83015464ffffffffff8082166101a0850152602882901c81166101c08501526109e56101e08501828460501c1664ffffffffff169052565b6109fe6102008501828460781c1664ffffffffff169052565b50610a14610220840160ff8360a01c1615159052565b610a29610240840160ff8360a81c1615159052565b610a3d610260840160ff8360b01c166108dd565b5092915050565b604051610280810167ffffffffffffffff81118282101715610a7657634e487b7160e01b600052604160045260246000fd5b60405290565b8051610a8781610865565b919050565b80516001600160801b0381168114610a8757600080fd5b805164ffffffffff81168114610a8757600080fd5b80518015158114610a8757600080fd5b805160048110610a8757600080fd5b60006102808284031215610aea57600080fd5b610af2610a44565b610afb83610a7c565b81526020830151602082015260408301516040820152610b1d60608401610a7c565b6060820152610b2e60808401610a7c565b6080820152610b3f60a08401610a7c565b60a082015260c083015160c0820152610b5a60e08401610a8c565b60e0820152610100610b6d818501610a8c565b90820152610120610b7f848201610a7c565b90820152610140610b91848201610a7c565b90820152610160838101519082015261018080840151908201526101a0610bb9818501610aa3565b908201526101c0610bcb848201610aa3565b908201526101e0610bdd848201610aa3565b90820152610200610bef848201610aa3565b90820152610220610c01848201610ab8565b90820152610240610c13848201610ab8565b90820152610260610c25848201610ac8565b908201529392505050565b60008060408385031215610c4357600080fd5b8251610c4e81610865565b6020840151909250610c5f81610865565b809150509250929050565b80516001600160a01b0316825260208101516020830152604081015160408301526060810151610ca560608401826001600160a01b03169052565b506080810151610cc060808401826001600160a01b03169052565b5060a0810151610cdb60a08401826001600160a01b03169052565b5060c081015160c083015260e0810151610d0060e08401826001600160801b03169052565b50610100818101516001600160801b031690830152610120808201516001600160a01b03908116918401919091526101408083015190911690830152610160808201519083015261018080820151908301526101a08082015164ffffffffff908116918401919091526101c0808301518216908401526101e080830151821690840152610200808301519091169083015261022080820151151590830152610240808201511515908301526102608082015161060e828501826108dd565b6102808101610dcd8284610c6a565b92915050565b600080600060608486031215610de857600080fd5b8351925060208401519150604084015190509250925092565b600060208284031215610e1357600080fd5b81516106fd81610865565b600060208284031215610e3057600080fd5b6106fd82610ab8565b6001600160a01b038681168252858116602083015284166040820152606081018390526103008101610e6e6080830184610c6a565b9695505050505050565b60005b83811015610e93578181015183820152602001610e7b565b8381111561060e5750506000910152565b60008251610eb6818460208701610e78565b9190910192915050565b6020815260008251806020840152610edf816040850160208701610e78565b601f01601f1916919091016040019291505056fea2646970667358221220a9e077f20956899370ee6c643c990f2897315fb9ff57299d61059342c9310ba564736f6c634300080a0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c806306d8c6df1461003a575b600080fd5b81801561004657600080fd5b5061005a61005536600461087d565b61005c565b005b60008381526020859052604080822090516319e28c3360e21b815273__$99340bd5a7874738aefb18e7cdd0ba78ce$__9163678a30cc916100a091906004016108ff565b61028060405180830381865af41580156100be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e29190610ad7565b9050600181610260015160038111156100fd576100fd6108c7565b148061011f57506002816102600151600381111561011d5761011d6108c7565b145b6101685760405162461bcd60e51b81526020600482015260156024820152742126afa922a820acafa9aa20aa2aa9afa2a92927a960591b60448201526064015b60405180910390fd5b6040516351cb15df60e01b81526001600160a01b038416600482015260248101859052600090819073__$99340bd5a7874738aefb18e7cdd0ba78ce$__906351cb15df906044016040805180830381865af41580156101cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ef9190610c30565b91509150600080600073__$99340bd5a7874738aefb18e7cdd0ba78ce$__634a150a4b876040518263ffffffff1660e01b815260040161022f9190610dbe565b606060405180830381865af415801561024c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102709190610dd3565b61014089015160405163bc98c24760e01b81526001600160a01b0391821660048201529396509194509250600091908a169063bc98c24790602401602060405180830381865afa1580156102c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ec9190610e01565b61012088015190915061030a906001600160a01b03163330866105b4565b61012087015160405163095ea7b360e01b81526001600160a01b038381166004830152602482018690529091169063095ea7b3906044016020604051808303816000875af1158015610360573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103849190610e1e565b50610140870151604051623f194360e51b81526001600160a01b038316916307e32860916103bd919030908a9089908e90600401610e39565b600060405180830381600087803b1580156103d757600080fd5b505af11580156103eb573d6000803e3d6000fd5b5050505060008211156104755761047533896001600160a01b0316633d6a38446040518163ffffffff1660e01b8152600401602060405180830381865afa15801561043a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045e9190610e01565b6101208a01516001600160a01b03169190856105b4565b6060870151875160208901516040808b01519051631aad9c3160e11b81526001600160a01b0393841660048201528a841660248201526044810192909252606482015291169063355b386290608401600060405180830381600087803b1580156104de57600080fd5b505af11580156104f2573d6000803e3d6000fd5b505060405163f84ea9c160e01b8152600481018e9052602481018d90526001600160a01b038c16604482015273__$99340bd5a7874738aefb18e7cdd0ba78ce$__925063f84ea9c1915060640160006040518083038186803b15801561055757600080fd5b505af415801561056b573d6000803e3d6000fd5b50506040516001600160a01b03891692503391508c907fa5c8e6070bf4562423664ac9492b3657056156fa769f36225f4184835ce1e6b090600090a45050505050505050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261060e908590610614565b50505050565b6000610669826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166106eb9092919063ffffffff16565b8051909150156106e657808060200190518101906106879190610e1e565b6106e65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161015f565b505050565b60606106fa8484600085610704565b90505b9392505050565b6060824710156107655760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161015f565b843b6107b35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161015f565b600080866001600160a01b031685876040516107cf9190610ea4565b60006040518083038185875af1925050503d806000811461080c576040519150601f19603f3d011682016040523d82523d6000602084013e610811565b606091505b509150915061082182828661082c565b979650505050505050565b6060831561083b5750816106fd565b82511561084b5782518084602001fd5b8160405162461bcd60e51b815260040161015f9190610ec0565b6001600160a01b038116811461087a57600080fd5b50565b6000806000806080858703121561089357600080fd5b843593506020850135925060408501356108ac81610865565b915060608501356108bc81610865565b939692955090935050565b634e487b7160e01b600052602160045260246000fd5b600481106108fb57634e487b7160e01b600052602160045260246000fd5b9052565b81546001600160a01b031681526102808101600183015460208301526002830154604083015260038301546001600160a01b039081166060840152600484015481166080808501919091526005850154821660a0850152600685015460c085015260078501546001600160801b03811660e0860152901c61010084015260088401548116610120840152600984015416610140830152600a830154610160830152600b830154610180830152600c83015464ffffffffff8082166101a0850152602882901c81166101c08501526109e56101e08501828460501c1664ffffffffff169052565b6109fe6102008501828460781c1664ffffffffff169052565b50610a14610220840160ff8360a01c1615159052565b610a29610240840160ff8360a81c1615159052565b610a3d610260840160ff8360b01c166108dd565b5092915050565b604051610280810167ffffffffffffffff81118282101715610a7657634e487b7160e01b600052604160045260246000fd5b60405290565b8051610a8781610865565b919050565b80516001600160801b0381168114610a8757600080fd5b805164ffffffffff81168114610a8757600080fd5b80518015158114610a8757600080fd5b805160048110610a8757600080fd5b60006102808284031215610aea57600080fd5b610af2610a44565b610afb83610a7c565b81526020830151602082015260408301516040820152610b1d60608401610a7c565b6060820152610b2e60808401610a7c565b6080820152610b3f60a08401610a7c565b60a082015260c083015160c0820152610b5a60e08401610a8c565b60e0820152610100610b6d818501610a8c565b90820152610120610b7f848201610a7c565b90820152610140610b91848201610a7c565b90820152610160838101519082015261018080840151908201526101a0610bb9818501610aa3565b908201526101c0610bcb848201610aa3565b908201526101e0610bdd848201610aa3565b90820152610200610bef848201610aa3565b90820152610220610c01848201610ab8565b90820152610240610c13848201610ab8565b90820152610260610c25848201610ac8565b908201529392505050565b60008060408385031215610c4357600080fd5b8251610c4e81610865565b6020840151909250610c5f81610865565b809150509250929050565b80516001600160a01b0316825260208101516020830152604081015160408301526060810151610ca560608401826001600160a01b03169052565b506080810151610cc060808401826001600160a01b03169052565b5060a0810151610cdb60a08401826001600160a01b03169052565b5060c081015160c083015260e0810151610d0060e08401826001600160801b03169052565b50610100818101516001600160801b031690830152610120808201516001600160a01b03908116918401919091526101408083015190911690830152610160808201519083015261018080820151908301526101a08082015164ffffffffff908116918401919091526101c0808301518216908401526101e080830151821690840152610200808301519091169083015261022080820151151590830152610240808201511515908301526102608082015161060e828501826108dd565b6102808101610dcd8284610c6a565b92915050565b600080600060608486031215610de857600080fd5b8351925060208401519150604084015190509250925092565b600060208284031215610e1357600080fd5b81516106fd81610865565b600060208284031215610e3057600080fd5b6106fd82610ab8565b6001600160a01b038681168252858116602083015284166040820152606081018390526103008101610e6e6080830184610c6a565b9695505050505050565b60005b83811015610e93578181015183820152602001610e7b565b8381111561060e5750506000910152565b60008251610eb6818460208701610e78565b9190910192915050565b6020815260008251806020840152610edf816040850160208701610e78565b601f01601f1916919091016040019291505056fea2646970667358221220a9e077f20956899370ee6c643c990f2897315fb9ff57299d61059342c9310ba564736f6c634300080a0033",
  "libraries": {
    "BespokeTypes": "0x12A7b08B9a6e74f9D15dd38a1e5A74583B63c824",
    "BespokeLogic": "0x81DEe8bd810EECb3E7840A9116608457Fb1b32e0"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}