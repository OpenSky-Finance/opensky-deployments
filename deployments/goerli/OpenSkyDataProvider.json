{
  "address": "0xAc9B7D4A9656b3b50896775C8FDB252b50608531",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IOpenSkySettings",
          "name": "settings",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "SETTINGS",
      "outputs": [
        {
          "internalType": "contract IOpenSkySettings",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        }
      ],
      "name": "getAvailableLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidityAmountToAdd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidityAmountToRemove",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmountToAdd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmountToRemove",
          "type": "uint256"
        }
      ],
      "name": "getBorrowRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "getLoanData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "loanId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrows",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "borrowBegin",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowDuration",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowOverdueTime",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "liquidatableTime",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "extendableTime",
              "type": "uint40"
            },
            {
              "internalType": "uint128",
              "name": "borrowRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "interestPerSecond",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "penalty",
              "type": "uint256"
            },
            {
              "internalType": "enum DataTypes.LoanStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct IOpenSkyDataProvider.LoanData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        }
      ],
      "name": "getLoanSupplyRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getLoansByUser",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        }
      ],
      "name": "getMoneyMarketSupplyRateInstant",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        }
      ],
      "name": "getReserveData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "reserveId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "underlyingAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oTokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "TVL",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalDeposits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrowsBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "availableLiquidity",
              "type": "uint256"
            }
          ],
          "internalType": "struct IOpenSkyDataProvider.ReserveData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getSupplyBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        }
      ],
      "name": "getSupplyRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        }
      ],
      "name": "getTVL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        }
      ],
      "name": "getTotalBorrowBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcf09925cf53d725a20d8ea3a1cc956311a6e183a2a0134d4d8ad523acde9d564",
  "receipt": {
    "to": null,
    "from": "0x218513C58A4781a5B88De6230caA29aBCe2Ccd75",
    "contractAddress": "0xAc9B7D4A9656b3b50896775C8FDB252b50608531",
    "transactionIndex": 18,
    "gasUsed": "1696068",
    "logsBloom": "0x
    "blockHash": "0x127a75314164e7d3dc4d9cb9cecf112bc0ae7db1650cc6a996fb16d021a6f563",
    "transactionHash": "0xcf09925cf53d725a20d8ea3a1cc956311a6e183a2a0134d4d8ad523acde9d564",
    "logs": [],
    "blockNumber": 7472938,
    "cumulativeGasUsed": "6232938",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x632dF1254955449dAf2D1c1554D4A064929d3AD0"
  ],
  "solcInputHash": "905a7e4bfca685ef9237fca5da489fd1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IOpenSkySettings\",\"name\":\"settings\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"SETTINGS\",\"outputs\":[{\"internalType\":\"contract IOpenSkySettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"getAvailableLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAmountToAdd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAmountToRemove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountToAdd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountToRemove\",\"type\":\"uint256\"}],\"name\":\"getBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"borrowBegin\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowDuration\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowOverdueTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"liquidatableTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"extendableTime\",\"type\":\"uint40\"},{\"internalType\":\"uint128\",\"name\":\"borrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"interestPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"internalType\":\"enum DataTypes.LoanStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct IOpenSkyDataProvider.LoanData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"getLoanSupplyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLoansByUser\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"getMoneyMarketSupplyRateInstant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"getReserveData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"TVL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowsBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"}],\"internalType\":\"struct IOpenSkyDataProvider.ReserveData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getSupplyBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"getSupplyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"getTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"getTotalBorrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/misc/OpenSkyDataProvider.sol\":\"OpenSkyDataProvider\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../libraries/types/DataTypes.sol';\\n\\ninterface IOpenSkyDataProvider {\\n    struct ReserveData {\\n        uint256 reserveId;\\n        address underlyingAsset;\\n        address oTokenAddress;\\n        uint256 TVL;\\n        uint256 totalDeposits;\\n        uint256 totalBorrowsBalance;\\n        uint256 supplyRate;\\n        uint256 borrowRate;\\n        uint256 availableLiquidity;\\n    }\\n\\n    struct LoanData {\\n        uint256 loanId;\\n        uint256 totalBorrows;\\n        uint256 borrowBalance;\\n        uint40 borrowBegin;\\n        uint40 borrowDuration;\\n        uint40 borrowOverdueTime;\\n        uint40 liquidatableTime;\\n        uint40 extendableTime;\\n        uint128 borrowRate;\\n        uint128 interestPerSecond;\\n        uint256 penalty;\\n        DataTypes.LoanStatus status;\\n    }\\n\\n    function getReserveData(uint256 reserveId) external view returns (ReserveData memory);\\n\\n    function getTVL(uint256 reserveId) external view returns (uint256);\\n\\n    function getTotalBorrowBalance(uint256 reserveId) external view returns (uint256);\\n\\n    function getAvailableLiquidity(uint256 reserveId) external view returns (uint256);\\n\\n    function getSupplyRate(uint256 reserveId) external view returns (uint256);\\n\\n    function getLoanSupplyRate(uint256 reserveId) external view returns (uint256);\\n\\n    function getBorrowRate(\\n        uint256 reserveId,\\n        uint256 liquidityAmountToAdd,\\n        uint256 liquidityAmountToRemove,\\n        uint256 borrowAmountToAdd,\\n        uint256 borrowAmountToRemove\\n    ) external view returns (uint256);\\n\\n    function getMoneyMarketSupplyRateInstant(uint256 reserveId) external view returns (uint256);\\n\\n    function getSupplyBalance(uint256 reserveId, address account) external view returns (uint256);\\n\\n    function getLoanData(uint256 loanId) external view returns (LoanData memory);\\n\\n    function getLoansByUser(address account) external view returns (uint256[] memory arr);\\n}\\n\",\"keccak256\":\"0xa3ce14bdc1c9ee6c0f02cd5e4a78aa2275e0bfcc87c21a2152e1a037a2ba5b0e\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IOpenSkyInterestRateStrategy\\n * @author OpenSky Labs\\n * @notice Interface for the calculation of the interest rates\\n */\\ninterface IOpenSkyInterestRateStrategy {\\n    /**\\n     * @dev Emitted on setBaseBorrowRate()\\n     * @param reserveId The id of the reserve\\n     * @param baseRate The base rate has been set\\n     **/\\n    event SetBaseBorrowRate(\\n        uint256 indexed reserveId,\\n        uint256 indexed baseRate\\n    );\\n\\n    /**\\n     * @notice Returns the borrow rate of a reserve\\n     * @param reserveId The id of the reserve\\n     * @param totalDeposits The total deposits amount of the reserve\\n     * @param totalBorrows The total borrows amount of the reserve\\n     * @return The borrow rate, expressed in ray\\n     **/\\n    function getBorrowRate(uint256 reserveId, uint256 totalDeposits, uint256 totalBorrows) external view returns (uint256); \\n}\\n\",\"keccak256\":\"0xfa5ff4ed50344092c9559d27b9318c0804c03ff464b6989fc2743d5e61b42252\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyLoan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '../libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IOpenSkyLoan\\n * @author OpenSky Labs\\n * @notice Defines the basic interface for OpenSkyLoan.  This loan NFT is composable and can be used in other DeFi protocols \\n **/\\ninterface IOpenSkyLoan is IERC721 {\\n\\n    /**\\n     * @dev Emitted on mint()\\n     * @param tokenId The ID of the loan\\n     * @param recipient The address that will receive the loan NFT\\n     **/\\n    event Mint(uint256 indexed tokenId, address indexed recipient);\\n\\n    /**\\n     * @dev Emitted on end()\\n     * @param tokenId The ID of the loan\\n     * @param onBehalfOf The address the repayer is repaying for\\n     * @param repayer The address of the user initiating the repayment()\\n     **/\\n    event End(uint256 indexed tokenId, address indexed onBehalfOf, address indexed repayer);\\n\\n    /**\\n     * @dev Emitted on startLiquidation()\\n     * @param tokenId The ID of the loan\\n     * @param liquidator The address of the liquidator\\n     **/\\n    event StartLiquidation(uint256 indexed tokenId, address indexed liquidator);\\n\\n    /**\\n     * @dev Emitted on endLiquidation()\\n     * @param tokenId The ID of the loan\\n     * @param liquidator The address of the liquidator\\n     **/\\n    event EndLiquidation(uint256 indexed tokenId, address indexed liquidator);\\n\\n    /**\\n     * @dev Emitted on updateStatus()\\n     * @param tokenId The ID of the loan\\n     * @param status The status of loan\\n     **/\\n    event UpdateStatus(uint256 indexed tokenId, DataTypes.LoanStatus indexed status);\\n\\n    /**\\n     * @dev Emitted on flashClaim()\\n     * @param receiver The address of the flash loan receiver contract\\n     * @param sender The address that will receive tokens\\n     * @param nftAddress The address of the collateralized NFT\\n     * @param tokenId The ID of collateralized NFT\\n     **/\\n    event FlashClaim(address indexed receiver, address sender, address indexed nftAddress, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted on claimERC20Airdrop()\\n     * @param token The address of the ERC20 token\\n     * @param to The address that will receive the ERC20 tokens\\n     * @param amount The amount of the tokens\\n     **/\\n    event ClaimERC20Airdrop(address indexed token, address indexed to, uint256 amount);\\n\\n    /**\\n     * @dev Emitted on claimERC721Airdrop()\\n     * @param token The address of ERC721 token\\n     * @param to The address that will receive the eRC721 tokens\\n     * @param ids The ID of the token\\n     **/\\n    event ClaimERC721Airdrop(address indexed token, address indexed to, uint256[] ids);\\n\\n    /**\\n     * @dev Emitted on claimERC1155Airdrop()\\n     * @param token The address of the ERC1155 token\\n     * @param to The address that will receive the ERC1155 tokens\\n     * @param ids The ID of the token\\n     * @param amounts The amount of the tokens\\n     * @param data packed params to pass to the receiver as extra information\\n     **/\\n    event ClaimERC1155Airdrop(address indexed token, address indexed to, uint256[] ids, uint256[] amounts, bytes data);\\n\\n    /**\\n     * @notice Mints a loan NFT to user\\n     * @param reserveId The ID of the reserve\\n     * @param borrower The address of the borrower\\n     * @param nftAddress The contract address of the collateralized NFT \\n     * @param nftTokenId The ID of the collateralized NFT\\n     * @param amount The amount of the loan\\n     * @param duration The duration of the loan\\n     * @param borrowRate The borrow rate of the loan\\n     * @return loanId and loan data\\n     **/\\n    function mint(\\n        uint256 reserveId,\\n        address borrower,\\n        address nftAddress,\\n        uint256 nftTokenId,\\n        uint256 amount,\\n        uint256 duration,\\n        uint256 borrowRate\\n    ) external returns (uint256 loanId, DataTypes.LoanData memory loan);\\n\\n    /**\\n     * @notice Starts liquidation of the loan in default\\n     * @param tokenId The ID of the defaulted loan\\n     **/\\n    function startLiquidation(uint256 tokenId) external;\\n\\n    /**\\n     * @notice Ends liquidation of a loan that is fully settled\\n     * @param tokenId The ID of the loan\\n     **/\\n    function endLiquidation(uint256 tokenId) external;\\n\\n    /**\\n     * @notice Terminates the loan\\n     * @param tokenId The ID of the loan\\n     * @param onBehalfOf The address the repayer is repaying for\\n     * @param repayer The address of the repayer\\n     **/\\n    function end(uint256 tokenId, address onBehalfOf, address repayer) external;\\n    \\n    /**\\n     * @notice Returns the loan data\\n     * @param tokenId The ID of the loan\\n     * @return The details of the loan\\n     **/\\n    function getLoanData(uint256 tokenId) external view returns (DataTypes.LoanData calldata);\\n\\n    /**\\n     * @notice Returns the status of a loan\\n     * @param tokenId The ID of the loan\\n     * @return The status of the loan\\n     **/\\n    function getStatus(uint256 tokenId) external view returns (DataTypes.LoanStatus);\\n\\n    /**\\n     * @notice Returns the borrow interest of the loan\\n     * @param tokenId The ID of the loan\\n     * @return The borrow interest of the loan\\n     **/\\n    function getBorrowInterest(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the borrow balance of a loan, including borrow interest\\n     * @param tokenId The ID of the loan\\n     * @return The borrow balance of the loan\\n     **/\\n    function getBorrowBalance(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the penalty fee of the loan\\n     * @param tokenId The ID of the loan\\n     * @return The penalty fee of the loan\\n     **/\\n    function getPenalty(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the ID of the loan\\n     * @param nftAddress The address of the collateralized NFT\\n     * @param tokenId The ID of the collateralized NFT\\n     * @return The ID of the loan\\n     **/\\n    function getLoanId(address nftAddress, uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Allows smart contracts to access the collateralized NFT within one transaction,\\n     * as long as the amount taken plus a fee is returned\\n     * @dev IMPORTANT There are security concerns for developers of flash loan receiver contracts that must be carefully considered\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IOpenSkyFlashClaimReceiver interface\\n     * @param loanIds The ID of loan being flash-borrowed\\n     * @param params packed params to pass to the receiver as extra information\\n     **/\\n    function flashClaim(\\n        address receiverAddress,\\n        uint256[] calldata loanIds,\\n        bytes calldata params\\n    ) external;\\n\\n    /**\\n     * @notice Claim the ERC20 token which has been airdropped to the loan contract\\n     * @param token The address of the airdropped token\\n     * @param to The address which will receive ERC20 token\\n     * @param amount The amount of the ERC20 token\\n     **/\\n    function claimERC20Airdrop(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Claim the ERC721 token which has been airdropped to the loan contract\\n     * @param token The address of the airdropped token\\n     * @param to The address which will receive the ERC721 token\\n     * @param ids The ID of the ERC721 token\\n     **/\\n    function claimERC721Airdrop(\\n        address token,\\n        address to,\\n        uint256[] calldata ids\\n    ) external;\\n\\n    /**\\n     * @notice Claim the ERC1155 token which has been airdropped to the loan contract\\n     * @param token The address of the airdropped token\\n     * @param to The address which will receive the ERC1155 tokens\\n     * @param ids The ID of the ERC1155 token\\n     * @param amounts The amount of the ERC1155 tokens\\n     * @param data packed params to pass to the receiver as extra information\\n     **/\\n    function claimERC1155Airdrop(\\n        address token,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xac386c73607e7b408e702f0946d474834bed10fa50d862a0e8cd062e457207ce\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyMoneyMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IOpenSkyMoneyMarket {\\n\\n    function depositCall(address asset, uint256 amount) external;\\n\\n    function withdrawCall(address asset, uint256 amount, address to) external;\\n\\n    function getMoneyMarketToken(address asset) external view returns (address);\\n\\n    function getBalance(address asset, address account) external view returns (uint256);\\n\\n    function getSupplyRate(address asset) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x87887f907caba2855a72b6a85ebe10487dea1a9f2ce88325173c81c21fa32d9e\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyOToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IOpenSkyOToken is IERC20 {\\n    event Mint(address indexed account, uint256 amount, uint256 index);\\n    event Burn(address indexed account, uint256 amount, uint256 index);\\n    event MintToTreasury(address treasury, uint256 amount, uint256 index);\\n    event Deposit(uint256 amount);\\n    event Withdraw(uint256 amount);\\n\\n    function mint(\\n        address account,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n\\n    function burn(\\n        address account,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n\\n    function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n    function deposit(uint256 amount) external;\\n\\n    function withdraw(uint256 amount, address to) external;\\n\\n    function scaledBalanceOf(address account) external view returns (uint256);\\n\\n    function principleBalanceOf(address account) external view returns (uint256);\\n\\n    function scaledTotalSupply() external view returns (uint256);\\n\\n    function principleTotalSupply() external view returns (uint256);\\n\\n    function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n    function claimERC20Rewards(address token) external;\\n}\\n\",\"keccak256\":\"0x555e35dcdc4163429b75012557aafaa786a3b5afdda354edcd76210440ce1b08\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IOpenSkyPool\\n * @author OpenSky Labs\\n * @notice Defines the basic interface for an OpenSky Pool.\\n **/\\n\\ninterface IOpenSkyPool {\\n    /*\\n     * @dev Emitted on create()\\n     * @param reserveId The ID of the reserve\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param oTokenAddress The address of the oToken\\n     * @param name The name to use for oToken\\n     * @param symbol The symbol to use for oToken\\n     * @param decimals The decimals of the oToken\\n     */\\n    event Create(\\n        uint256 indexed reserveId,\\n        address indexed underlyingAsset,\\n        address indexed oTokenAddress,\\n        string name,\\n        string symbol,\\n        uint8 decimals\\n    );\\n\\n    /*\\n     * @dev Emitted on setTreasuryFactor()\\n     * @param reserveId The ID of the reserve\\n     * @param factor The new treasury factor of the reserve\\n     */\\n    event SetTreasuryFactor(uint256 indexed reserveId, uint256 factor);\\n\\n    /*\\n     * @dev Emitted on setInterestModelAddress()\\n     * @param reserveId The ID of the reserve\\n     * @param interestModelAddress The address of the interest model contract\\n     */\\n    event SetInterestModelAddress(uint256 indexed reserveId, address interestModelAddress);\\n\\n    /*\\n     * @dev Emitted on openMoneyMarket()\\n     * @param reserveId The ID of the reserve\\n     */\\n    event OpenMoneyMarket(uint256 reserveId);\\n\\n    /*\\n     * @dev Emitted on closeMoneyMarket()\\n     * @param reserveId The ID of the reserve\\n     */\\n    event CloseMoneyMarket(uint256 reserveId);\\n\\n    /*\\n     * @dev Emitted on deposit()\\n     * @param reserveId The ID of the reserve\\n     * @param onBehalfOf The address that will receive the oTokens\\n     * @param amount The amount of ETH to be deposited\\n     * @param referralCode integrators are assigned a referral code and can potentially receive rewards\\n     * 0 if the action is executed directly by the user, without any intermediaries\\n     */\\n    event Deposit(uint256 indexed reserveId, address indexed onBehalfOf, uint256 amount, uint256 referralCode);\\n\\n    /*\\n     * @dev Emitted on withdraw()\\n     * @param reserveId The ID of the reserve\\n     * @param onBehalfOf The address that will receive assets withdrawed\\n     * @param amount The amount to be withdrawn\\n     */\\n    event Withdraw(uint256 indexed reserveId, address indexed onBehalfOf, uint256 amount);\\n\\n    /*\\n     * @dev Emitted on borrow()\\n     * @param reserveId The ID of the reserve\\n     * @param user The address initiating the withdrawal(), owner of oTokens\\n     * @param onBehalfOf The address that will receive the ETH and the loan NFT\\n     * @param loanId The loan ID\\n     */\\n    event Borrow(\\n        uint256 indexed reserveId,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 indexed loanId\\n    );\\n\\n    /*\\n     * @dev Emitted on repay()\\n     * @param reserveId The ID of the reserve\\n     * @param repayer The address initiating the repayment()\\n     * @param onBehalfOf The address that will receive the pledged NFT\\n     * @param loanId The ID of the loan\\n     * @param repayAmount The borrow balance of the loan when it was repaid\\n     * @param penalty The penalty of the loan for either early or overdue repayment\\n     */\\n    event Repay(\\n        uint256 indexed reserveId,\\n        address repayer,\\n        address indexed onBehalfOf,\\n        uint256 indexed loanId,\\n        uint256 repayAmount,\\n        uint256 penalty\\n    );\\n\\n    /*\\n     * @dev Emitted on extend()\\n     * @param reserveId The ID of the reserve\\n     * @param onBehalfOf The owner address of loan NFT\\n     * @param oldLoanId The ID of the old loan\\n     * @param newLoanId The ID of the new loan\\n     */\\n    event Extend(uint256 indexed reserveId, address indexed onBehalfOf, uint256 oldLoanId, uint256 newLoanId);\\n\\n    /*\\n     * @dev Emitted on startLiquidation()\\n     * @param reserveId The ID of the reserve\\n     * @param loanId The ID of the loan\\n     * @param nftAddress The address of the NFT used as collateral\\n     * @param tokenId The ID of the NFT used as collateral\\n     * @param operator The address initiating startLiquidation()\\n     */\\n    event StartLiquidation(\\n        uint256 indexed reserveId,\\n        uint256 indexed loanId,\\n        address indexed nftAddress,\\n        uint256 tokenId,\\n        address operator\\n    );\\n\\n    /*\\n     * @dev Emitted on endLiquidation()\\n     * @param reserveId The ID of the reserve\\n     * @param loanId The ID of the loan\\n     * @param nftAddress The address of the NFT used as collateral\\n     * @param tokenId The ID of the NFT used as collateral\\n     * @param operator\\n     * @param repayAmount The amount used to repay, must be equal to or greater than the borrowBalance, excess part will be shared by all the lenders\\n     * @param borrowBalance The borrow balance of the loan\\n     */\\n    event EndLiquidation(\\n        uint256 indexed reserveId,\\n        uint256 indexed loanId,\\n        address indexed nftAddress,\\n        uint256 tokenId,\\n        address operator,\\n        uint256 repayAmount,\\n        uint256 borrowBalance\\n    );\\n\\n    /**\\n     * @notice Creates a reserve\\n     * @dev Only callable by the pool admin role\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param name The name of the oToken\\n     * @param symbol The symbol for the oToken\\n     * @param decimals The decimals of the oToken\\n     **/\\n    function create(\\n        address underlyingAsset,\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals\\n    ) external;\\n\\n    /**\\n     * @notice Updates the treasury factor of a reserve\\n     * @dev Only callable by the pool admin role\\n     * @param reserveId The ID of the reserve\\n     * @param factor The new treasury factor of the reserve\\n     **/\\n    function setTreasuryFactor(uint256 reserveId, uint256 factor) external;\\n\\n    /**\\n     * @notice Updates the interest model address of a reserve\\n     * @dev Only callable by the pool admin role\\n     * @param reserveId The ID of the reserve\\n     * @param interestModelAddress The new address of the interest model contract\\n     **/\\n    function setInterestModelAddress(uint256 reserveId, address interestModelAddress) external;\\n\\n    /**\\n     * @notice Open the money market\\n     * @dev Only callable by the emergency admin role\\n     * @param reserveId The ID of the reserve\\n     **/\\n    function openMoneyMarket(uint256 reserveId) external;\\n\\n    /**\\n     * @notice Close the money market\\n     * @dev Only callable by the emergency admin role\\n     * @param reserveId The ID of the reserve\\n     **/\\n    function closeMoneyMarket(uint256 reserveId) external;\\n\\n    /**\\n     * @dev Deposits ETH into the reserve.\\n     * @param reserveId The ID of the reserve\\n     * @param referralCode integrators are assigned a referral code and can potentially receive rewards\\n     **/\\n    function deposit(uint256 reserveId, uint256 amount, address onBehalfOf, uint256 referralCode) external;\\n\\n    /**\\n     * @dev withdraws the ETH from reserve.\\n     * @param reserveId The ID of the reserve\\n     * @param amount amount of oETH to withdraw and receive native ETH\\n     **/\\n    function withdraw(uint256 reserveId, uint256 amount, address onBehalfOf) external;\\n\\n    /**\\n     * @dev Borrows ETH from reserve using an NFT as collateral and will receive a loan NFT as receipt.\\n     * @param reserveId The ID of the reserve\\n     * @param amount amount of ETH user will borrow\\n     * @param duration The desired duration of the loan\\n     * @param nftAddress The collateral NFT address\\n     * @param tokenId The ID of the NFT\\n     * @param onBehalfOf address of the user who will receive ETH and loan NFT.\\n     **/\\n    function borrow(\\n        uint256 reserveId,\\n        uint256 amount,\\n        uint256 duration,\\n        address nftAddress,\\n        uint256 tokenId,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Repays a loan, as a result the corresponding loan NFT owner will receive the collateralized NFT.\\n     * @param loanId The ID of the loan the user will repay\\n     */\\n    function repay(uint256 loanId) external returns (uint256);\\n\\n    /**\\n     * @dev Extends creates a new loan and terminates the old loan.\\n     * @param loanId The loan ID to extend\\n     * @param amount The amount of ERC20 token the user will borrow in the new loan\\n     * @param duration The selected duration the user will borrow in the new loan\\n     * @param onBehalfOf The address will borrow in the new loan\\n     **/\\n    function extend(\\n        uint256 loanId,\\n        uint256 amount,\\n        uint256 duration,\\n        address onBehalfOf\\n    ) external returns (uint256, uint256);\\n\\n    /**\\n     * @dev Starts liquidation for a loan when it's in LIQUIDATABLE status\\n     * @param loanId The ID of the loan which will be liquidated\\n     */\\n    function startLiquidation(uint256 loanId) external;\\n\\n    /**\\n     * @dev Completes liquidation for a loan which will be repaid.\\n     * @param loanId The ID of the liquidated loan that will be repaid.\\n     * @param amount The amount of the token that will be repaid.\\n     */\\n    function endLiquidation(uint256 loanId, uint256 amount) external;\\n\\n    /**\\n     * @dev Returns the state of the reserve\\n     * @param reserveId The ID of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getReserveData(uint256 reserveId) external view returns (DataTypes.ReserveData memory);\\n\\n    /**\\n     * @dev Returns the normalized income of the reserve\\n     * @param reserveId The ID of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(uint256 reserveId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the remaining liquidity of the reserve\\n     * @param reserveId The ID of the reserve\\n     * @return The reserve's withdrawable balance\\n     */\\n    function getAvailableLiquidity(uint256 reserveId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the instantaneous borrow limit value of a special NFT\\n     * @param nftAddress The address of the NFT\\n     * @param tokenId The ID of the NFT\\n     * @return The NFT's borrow limit\\n     */\\n    function getBorrowLimitByOracle(\\n        uint256 reserveId,\\n        address nftAddress,\\n        uint256 tokenId\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the sum of all users borrow balances include borrow interest accrued\\n     * @param reserveId The ID of the reserve\\n     * @return The total borrow balance of the reserve\\n     */\\n    function getTotalBorrowBalance(uint256 reserveId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns TVL (total value locked) of the reserve.\\n     * @param reserveId The ID of the reserve\\n     * @return The reserve's TVL\\n     */\\n    function getTVL(uint256 reserveId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd98aee1cefc2e2c3178c22435666292f9b8a1df1e4b24b17a182d8df357951a9\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkySettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\nimport '../libraries/types/DataTypes.sol';\\n\\ninterface IOpenSkySettings {\\n    event InitPoolAddress(address operator, address address_);\\n    event InitLoanAddress(address operator, address address_);\\n    event InitVaultFactoryAddress(address operator, address address_);\\n    event InitIncentiveControllerAddress(address operator, address address_);\\n    event InitWETHGatewayAddress(address operator, address address_);\\n    event InitPunkGatewayAddress(address operator, address address_);\\n    event InitDaoVaultAddress(address operator, address address_);\\n\\n    event AddToWhitelist(address operator, uint256 reserveId, address nft);\\n    event RemoveFromWhitelist(address operator, uint256 reserveId, address nft);\\n    event SetReserveFactor(address operator, uint256 factor);\\n    event SetPrepaymentFeeFactor(address operator, uint256 factor);\\n    event SetOverdueLoanFeeFactor(address operator, uint256 factor);\\n    event SetMoneyMarketAddress(address operator, address address_);\\n    event SetTreasuryAddress(address operator, address address_);\\n    event SetACLManagerAddress(address operator, address address_);\\n    event SetLoanDescriptorAddress(address operator, address address_);\\n    event SetNftPriceOracleAddress(address operator, address address_);\\n    event SetInterestRateStrategyAddress(address operator, address address_);\\n    event AddLiquidator(address operator, address address_);\\n    event RemoveLiquidator(address operator, address address_);\\n\\n    function poolAddress() external view returns (address);\\n\\n    function loanAddress() external view returns (address);\\n\\n    function vaultFactoryAddress() external view returns (address);\\n\\n    function incentiveControllerAddress() external view returns (address);\\n\\n    function wethGatewayAddress() external view returns (address);\\n\\n    function punkGatewayAddress() external view returns (address);\\n\\n    function inWhitelist(uint256 reserveId, address nft) external view returns (bool);\\n\\n    function getWhitelistDetail(uint256 reserveId, address nft) external view returns (DataTypes.WhitelistInfo memory);\\n\\n    function reserveFactor() external view returns (uint256); // treasury ratio\\n\\n    function MAX_RESERVE_FACTOR() external view returns (uint256);\\n\\n    function prepaymentFeeFactor() external view returns (uint256);\\n\\n    function overdueLoanFeeFactor() external view returns (uint256);\\n\\n    function moneyMarketAddress() external view returns (address);\\n\\n    function treasuryAddress() external view returns (address);\\n\\n    function daoVaultAddress() external view returns (address);\\n\\n    function ACLManagerAddress() external view returns (address);\\n\\n    function loanDescriptorAddress() external view returns (address);\\n\\n    function nftPriceOracleAddress() external view returns (address);\\n\\n    function interestRateStrategyAddress() external view returns (address);\\n    \\n    function isLiquidator(address liquidator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd5c1c2468464891b3ce379c8a03bc21c2c67fcf0c7493e3b35fd573fa21ea448\",\"license\":\"MIT\"},\"contracts/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    // common\\n    string public constant MATH_MULTIPLICATION_OVERFLOW = '100';\\n    string public constant MATH_ADDITION_OVERFLOW = '101';\\n    string public constant MATH_DIVISION_BY_ZERO = '102';\\n\\n    string public constant ETH_TRANSFER_FAILED = '110';\\n    string public constant RECEIVE_NOT_ALLOWED = '111';\\n    string public constant FALLBACK_NOT_ALLOWED = '112';\\n    string public constant APPROVAL_FAILED = '113';\\n\\n    // setting/factor\\n    string public constant SETTING_ZERO_ADDRESS_NOT_ALLOWED = '115';\\n    string public constant SETTING_RESERVE_FACTOR_NOT_ALLOWED = '116';\\n    string public constant SETTING_WHITELIST_INVALID_RESERVE_ID = '117';\\n    string public constant SETTING_WHITELIST_NFT_ADDRESS_IS_ZERO = '118';\\n    string public constant SETTING_WHITELIST_NFT_DURATION_OUT_OF_ORDER = '119';\\n    string public constant SETTING_WHITELIST_NFT_NAME_EMPTY = '120';\\n    string public constant SETTING_WHITELIST_NFT_SYMBOL_EMPTY = '121';\\n    string public constant SETTING_WHITELIST_NFT_LTV_NOT_ALLOWED = '122';\\n\\n    // settings/acl\\n    string public constant ACL_ONLY_GOVERNANCE_CAN_CALL = '200';\\n    string public constant ACL_ONLY_EMERGENCY_ADMIN_CAN_CALL = '201';\\n    string public constant ACL_ONLY_POOL_ADMIN_CAN_CALL = '202';\\n    string public constant ACL_ONLY_LIQUIDATOR_CAN_CALL = '203';\\n    string public constant ACL_ONLY_AIRDROP_OPERATOR_CAN_CALL = '204';\\n    string public constant ACL_ONLY_POOL_CAN_CALL = '205';\\n\\n    // lending & borrowing\\n    // reserve\\n    string public constant RESERVE_DOES_NOT_EXIST = '300';\\n    string public constant RESERVE_LIQUIDITY_INSUFFICIENT = '301';\\n    string public constant RESERVE_INDEX_OVERFLOW = '302';\\n    string public constant RESERVE_SWITCH_MONEY_MARKET_STATE_ERROR = '303';\\n    string public constant RESERVE_TREASURY_FACTOR_NOT_ALLOWED = '304';\\n    string public constant RESERVE_TOKEN_CAN_NOT_BE_CLAIMED = '305';\\n\\n    // token\\n    string public constant AMOUNT_SCALED_IS_ZERO = '310';\\n    string public constant AMOUNT_TRANSFER_OVERFLOW = '311';\\n\\n    //deposit\\n    string public constant DEPOSIT_AMOUNT_SHOULD_BE_BIGGER_THAN_ZERO = '320';\\n\\n    // withdraw\\n    string public constant WITHDRAW_AMOUNT_NOT_ALLOWED = '321';\\n    string public constant WITHDRAW_LIQUIDITY_NOT_SUFFICIENT = '322';\\n\\n    // borrow\\n    string public constant BORROW_DURATION_NOT_ALLOWED = '330';\\n    string public constant BORROW_AMOUNT_EXCEED_BORROW_LIMIT = '331';\\n    string public constant NFT_ADDRESS_IS_NOT_IN_WHITELIST = '332';\\n\\n    // repay\\n    string public constant REPAY_STATUS_ERROR = '333';\\n    string public constant REPAY_MSG_VALUE_ERROR = '334';\\n\\n    // extend\\n    string public constant EXTEND_STATUS_ERROR = '335';\\n    string public constant EXTEND_MSG_VALUE_ERROR = '336';\\n\\n    // liquidate\\n    string public constant START_LIQUIDATION_STATUS_ERROR = '360';\\n    string public constant END_LIQUIDATION_STATUS_ERROR = '361';\\n    string public constant END_LIQUIDATION_AMOUNT_ERROR = '362';\\n\\n    // loan\\n    string public constant LOAN_DOES_NOT_EXIST = '400';\\n    string public constant LOAN_SET_STATUS_ERROR = '401';\\n    string public constant LOAN_REPAYER_IS_NOT_OWNER = '402';\\n    string public constant LOAN_LIQUIDATING_STATUS_CAN_NOT_BE_UPDATED = '403';\\n    string public constant LOAN_CALLER_IS_NOT_OWNER = '404';\\n    string public constant LOAN_COLLATERAL_NFT_CAN_NOT_BE_CLAIMED = '405';\\n\\n    string public constant FLASHCLAIM_EXECUTOR_ERROR = '410';\\n    string public constant FLASHCLAIM_STATUS_ERROR = '411';\\n\\n    // money market\\n    string public constant MONEY_MARKET_DEPOSIT_AMOUNT_NOT_ALLOWED = '500';\\n    string public constant MONEY_MARKET_WITHDRAW_AMOUNT_NOT_ALLOWED = '501';\\n    string public constant MONEY_MARKET_APPROVAL_FAILED = '502';\\n    string public constant MONEY_MARKET_DELEGATE_CALL_ERROR = '503';\\n    string public constant MONEY_MARKET_REQUIRE_DELEGATE_CALL = '504';\\n    string public constant MONEY_MARKET_WITHDRAW_AMOUNT_NOT_MATCH = '505';\\n\\n    // price oracle\\n    string public constant PRICE_ORACLE_HAS_NO_PRICE_FEED = '600';\\n    string public constant PRICE_ORACLE_INCORRECT_TIMESTAMP = '601';\\n    string public constant PRICE_ORACLE_PARAMS_ERROR = '602';\\n}\\n\",\"keccak256\":\"0xc4e38b51f80e5ad6eeacd323b4ac0798c5ca51d7a2d0c9fc2ba52aafa8a064b8\",\"license\":\"MIT\"},\"contracts/libraries/math/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {WadRayMath} from './WadRayMath.sol';\\n\\nlibrary MathUtils {\\n    using WadRayMath for uint256;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n     * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate linearly accumulated during the timeDelta, in ray\\n     **/\\n\\n    function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp) external view returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 timeDifference = block.timestamp - (uint256(lastUpdateTimestamp));\\n\\n        return (rate * timeDifference) / SECONDS_PER_YEAR + WadRayMath.ray();\\n    }\\n\\n    function calculateBorrowInterest(\\n        uint256 borrowRate,\\n        uint256 amount,\\n        uint256 duration\\n    ) external pure returns (uint256) {\\n        return amount.rayMul(borrowRate.rayMul(duration).rayDiv(SECONDS_PER_YEAR));\\n    }\\n\\n    function calculateBorrowInterestPerSecond(uint256 borrowRate, uint256 amount) external pure returns (uint256) {\\n        return amount.rayMul(borrowRate).rayDiv(SECONDS_PER_YEAR);\\n    }\\n\\n    function calculateLoanSupplyRate(\\n        uint256 availableLiquidity,\\n        uint256 totalBorrows,\\n        uint256 borrowRate\\n    ) external pure returns (uint256 loanSupplyRate, uint256 utilizationRate) {\\n        utilizationRate = (totalBorrows == 0 && availableLiquidity == 0)\\n            ? 0\\n            : totalBorrows.rayDiv(availableLiquidity + totalBorrows);\\n        loanSupplyRate = utilizationRate.rayMul(borrowRate);\\n    }\\n}\\n\",\"keccak256\":\"0xe06262969c3e10f221573fd7bfdf3a89942957b5d957a6110cb5e933d2bdbff6\",\"license\":\"MIT\"},\"contracts/libraries/math/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {Errors} from '../helpers/Errors.sol';\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @return One ray, 1e27\\n     **/\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    /**\\n     * @return One wad, 1e18\\n     **/\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e27/2\\n     **/\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e18/2\\n     **/\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     **/\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfWAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * b + halfWAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     **/\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * WAD + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfRAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * b + halfRAY) / RAY;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, truncating the mantissa\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMulTruncate(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return (a * b) / RAY;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * RAY + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, truncating the mantissa\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDivTruncate(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        return (a * RAY) / b;\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @param a Ray\\n     * @return a casted to wad, rounded half up to the nearest wad\\n     **/\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n        uint256 result = halfRatio + a;\\n        require(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\\n\\n        return result / WAD_RAY_RATIO;\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @param a Wad\\n     * @return a converted in ray\\n     **/\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        uint256 result = a * WAD_RAY_RATIO;\\n        require(result / WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4bf6b9a00c5e9938726d173f11b56de8edd92e17593e4dfa61a3ce7336756c6b\",\"license\":\"MIT\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        uint256 reserveId;\\n        address underlyingAsset;\\n        address oTokenAddress;\\n        address moneyMarketAddress;\\n        uint128 lastSupplyIndex;\\n        uint256 borrowingInterestPerSecond;\\n        uint256 lastMoneyMarketBalance;\\n        uint40 lastUpdateTimestamp;\\n        uint256 totalBorrows;\\n        address interestModelAddress;\\n        uint256 treasuryFactor;\\n        bool isMoneyMarketOn;\\n    }\\n\\n    struct LoanData {\\n        uint256 reserveId;\\n        address nftAddress;\\n        uint256 tokenId;\\n        address borrower;\\n        uint256 amount;\\n        uint128 borrowRate;\\n        uint128 interestPerSecond;\\n        uint40 borrowBegin;\\n        uint40 borrowDuration;\\n        uint40 borrowOverdueTime;\\n        uint40 liquidatableTime;\\n        uint40 extendableTime;\\n        uint40 borrowEnd;\\n        LoanStatus status;\\n    }\\n\\n    enum LoanStatus {\\n        NONE,\\n        BORROWING,\\n        EXTENDABLE,\\n        OVERDUE,\\n        LIQUIDATABLE,\\n        LIQUIDATING\\n    }\\n\\n    struct WhitelistInfo {\\n        bool enabled;\\n        string name;\\n        string symbol;\\n        uint256 LTV;\\n        uint256 minBorrowDuration;\\n        uint256 maxBorrowDuration;\\n        uint256 extendableDuration;\\n        uint256 overdueDuration;\\n    }\\n}\\n\",\"keccak256\":\"0x487cd1dedb3146da46144bc8f0e5b970c5173efa8c19700184b8207c1ee3fc55\",\"license\":\"MIT\"},\"contracts/misc/OpenSkyDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\n\\nimport '../interfaces/IOpenSkySettings.sol';\\nimport '../interfaces/IOpenSkyMoneyMarket.sol';\\nimport '../interfaces/IOpenSkyDataProvider.sol';\\nimport '../interfaces/IOpenSkyPool.sol';\\nimport '../interfaces/IOpenSkyOToken.sol';\\nimport '../interfaces/IOpenSkyLoan.sol';\\nimport '../interfaces/IOpenSkyInterestRateStrategy.sol';\\n\\nimport '../libraries/math/WadRayMath.sol';\\nimport '../libraries/math/MathUtils.sol';\\nimport '../libraries/types/DataTypes.sol';\\n\\ncontract OpenSkyDataProvider is IOpenSkyDataProvider {\\n    using WadRayMath for uint256;\\n\\n    IOpenSkySettings public immutable SETTINGS;\\n\\n    constructor(IOpenSkySettings settings) {\\n        SETTINGS = settings;\\n    }\\n\\n    function getReserveData(uint256 reserveId) external view override returns (ReserveData memory) {\\n        IOpenSkyPool pool = IOpenSkyPool(SETTINGS.poolAddress());\\n        DataTypes.ReserveData memory reserve = pool.getReserveData(reserveId);\\n        IERC20 oToken = IERC20(reserve.oTokenAddress);\\n        return\\n            ReserveData({\\n                reserveId: reserveId,\\n                underlyingAsset: reserve.underlyingAsset,\\n                oTokenAddress: reserve.oTokenAddress,\\n                TVL: pool.getTVL(reserveId),\\n                totalDeposits: oToken.totalSupply(),\\n                totalBorrowsBalance: pool.getTotalBorrowBalance(reserveId),\\n                supplyRate: getSupplyRate(reserveId),\\n                borrowRate: getBorrowRate(reserveId, 0, 0, 0, 0),\\n                availableLiquidity: pool.getAvailableLiquidity(reserveId)\\n            });\\n    }\\n\\n    function getTVL(uint256 reserveId) external view override returns (uint256) {\\n        return IOpenSkyPool(SETTINGS.poolAddress()).getTVL(reserveId);\\n    }\\n\\n    function getTotalBorrowBalance(uint256 reserveId) external view override returns (uint256) {\\n        return IOpenSkyPool(SETTINGS.poolAddress()).getTotalBorrowBalance(reserveId);\\n    }\\n\\n    function getAvailableLiquidity(uint256 reserveId) external view override returns (uint256) {\\n        return IOpenSkyPool(SETTINGS.poolAddress()).getAvailableLiquidity(reserveId);\\n    }\\n\\n    function getSupplyRate(uint256 reserveId) public view override returns (uint256) {\\n        DataTypes.ReserveData memory reserve = IOpenSkyPool(SETTINGS.poolAddress()).getReserveData(reserveId);\\n\\n        uint256 tvl = IOpenSkyOToken(reserve.oTokenAddress).principleTotalSupply();\\n\\n        (, uint256 utilizationRate) = MathUtils.calculateLoanSupplyRate(\\n            tvl,\\n            reserve.totalBorrows,\\n            getBorrowRate(reserveId, 0, 0, 0, 0)\\n        );\\n\\n        return\\n            getLoanSupplyRate(reserveId) + ((WadRayMath.ray() - utilizationRate).rayMul(getMoneyMarketSupplyRateInstant(reserveId)));\\n    }\\n\\n    function getLoanSupplyRate(uint256 reserveId) public view override returns (uint256) {\\n        DataTypes.ReserveData memory reserve = IOpenSkyPool(SETTINGS.poolAddress()).getReserveData(reserveId);\\n        uint256 tvl = IOpenSkyOToken(reserve.oTokenAddress).principleTotalSupply();\\n        (uint256 loanSupplyRate, ) = MathUtils.calculateLoanSupplyRate(\\n            tvl,\\n            reserve.totalBorrows,\\n            getBorrowRate(reserveId, 0, 0, 0, 0)\\n        );\\n        return loanSupplyRate;\\n    }\\n\\n    function getMoneyMarketSupplyRateInstant(uint256 reserveId) public view override returns (uint256) {\\n        DataTypes.ReserveData memory reserve = IOpenSkyPool(SETTINGS.poolAddress()).getReserveData(reserveId);\\n        if (reserve.isMoneyMarketOn) {\\n            return IOpenSkyMoneyMarket(reserve.moneyMarketAddress).getSupplyRate(reserve.underlyingAsset);\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function getBorrowRate(\\n        uint256 reserveId,\\n        uint256 liquidityAmountToAdd,\\n        uint256 liquidityAmountToRemove,\\n        uint256 borrowAmountToAdd,\\n        uint256 borrowAmountToRemove\\n    ) public view override returns (uint256) {\\n        DataTypes.ReserveData memory reserve = IOpenSkyPool(SETTINGS.poolAddress()).getReserveData(reserveId);\\n        return\\n            IOpenSkyInterestRateStrategy(reserve.interestModelAddress).getBorrowRate(\\n                reserveId,\\n                IOpenSkyOToken(reserve.oTokenAddress).totalSupply() + liquidityAmountToAdd - liquidityAmountToRemove,\\n                reserve.totalBorrows + borrowAmountToAdd - borrowAmountToRemove\\n            );\\n    }\\n\\n    function getSupplyBalance(uint256 reserveId, address account) external view override returns (uint256) {\\n        DataTypes.ReserveData memory reserve = IOpenSkyPool(SETTINGS.poolAddress()).getReserveData(reserveId);\\n        return IERC20(reserve.oTokenAddress).balanceOf(account);\\n    }\\n\\n    function getLoanData(uint256 loanId) external view override returns (LoanData memory) {\\n        IOpenSkyLoan loanNFT = IOpenSkyLoan(SETTINGS.loanAddress());\\n        DataTypes.LoanData memory loan = loanNFT.getLoanData(loanId);\\n        return\\n            LoanData({\\n                loanId: loanId,\\n                totalBorrows: loan.amount,\\n                borrowBalance: loanNFT.getBorrowBalance(loanId),\\n                borrowBegin: loan.borrowBegin,\\n                borrowDuration: loan.borrowDuration,\\n                borrowOverdueTime: loan.borrowOverdueTime,\\n                liquidatableTime: loan.liquidatableTime,\\n                extendableTime: loan.extendableTime,\\n                borrowRate: loan.borrowRate,\\n                interestPerSecond: loan.interestPerSecond,\\n                penalty: loanNFT.getPenalty(loanId),\\n                status: loan.status\\n            });\\n    }\\n\\n    function getLoansByUser(address account) external view override returns (uint256[] memory) {\\n        IERC721Enumerable loanNFT = IERC721Enumerable(SETTINGS.loanAddress());\\n        uint256 amount = loanNFT.balanceOf(account);\\n        uint256[] memory ids = new uint256[](amount > 0 ? amount : 0);\\n        for (uint256 i = 0; i < amount; ++i) {\\n            ids[i] = loanNFT.tokenOfOwnerByIndex(account, i);\\n        }\\n        return ids;\\n    }\\n}\\n\",\"keccak256\":\"0x1c2ed2e14bd9e3e0005333e63e4110db18f70b17bc4e156e78d29cd8aa51aa44\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051611e96380380611e9683398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051611dbe6100d86000396000818161020b0152818161026f015281816103670152818161041a015281816106190152818161083401528181610a1d01528181610d180152818161103b015281816111a9015281816113b101526115f50152611dbe6000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806391541e051161007157806391541e051461015857806395f76652146101e0578063a08a09d3146101f3578063ade97ab514610206578063d955759d14610245578063ee4cc84c1461025857600080fd5b80630aad628b146100b95780632235ae0f146100df5780633e842090146100f2578063423989e4146101125780635bdf347714610125578063622fe39f14610138575b600080fd5b6100cc6100c7366004611767565b61026b565b6040519081526020015b60405180910390f35b6100cc6100ed366004611767565b610363565b610105610100366004611798565b610414565b6040516100d691906117b5565b6100cc6101203660046117f9565b610614565b6100cc610133366004611767565b61082f565b61014b610146366004611767565b6109b4565b6040516100d6919061186c565b61016b610166366004611767565b610cb3565b60408051825181526020808401516001600160a01b0390811691830191909152838301511691810191909152606080830151908201526080808301519082015260a0808301519082015260c0808301519082015260e080830151908201526101009182015191810191909152610120016100d6565b6100cc6101ee36600461195e565b611036565b6100cc610201366004611767565b6111a4565b61022d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100d6565b6100cc610253366004611767565b6113ac565b6100cc610266366004611767565b6115f1565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ef919061199e565b6001600160a01b0316630aad628b836040518263ffffffff1660e01b815260040161031c91815260200190565b602060405180830381865afa158015610339573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035d91906119bb565b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e7919061199e565b6001600160a01b0316632235ae0f836040518263ffffffff1660e01b815260040161031c91815260200190565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166335bc868a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610476573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049a919061199e565b6040516370a0823160e01b81526001600160a01b0385811660048301529192506000918316906370a0823190602401602060405180830381865afa1580156104e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050a91906119bb565b9050600080821161051c57600061051e565b815b67ffffffffffffffff811115610536576105366119d4565b60405190808252806020026020018201604052801561055f578160200160208202803683370190505b50905060005b8281101561060b57604051632f745c5960e01b81526001600160a01b03878116600483015260248201839052851690632f745c5990604401602060405180830381865afa1580156105ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105de91906119bb565b8282815181106105f0576105f06119ea565b602090810291909101015261060481611a16565b9050610565565b50949350505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610675573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610699919061199e565b6001600160a01b03166391541e05886040518263ffffffff1660e01b81526004016106c691815260200190565b61018060405180830381865afa1580156106e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107089190611ad7565b90508061012001516001600160a01b03166315f2405388878985604001516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610763573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078791906119bb565b6107919190611ba0565b61079b9190611bb8565b86888661010001516107ad9190611ba0565b6107b79190611bb8565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401602060405180830381865afa158015610800573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082491906119bb565b979650505050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b4919061199e565b6001600160a01b03166391541e05846040518263ffffffff1660e01b81526004016108e191815260200190565b61018060405180830381865afa1580156108ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109239190611ad7565b9050806101600151156109ab5760608101516020820151604051636b5441a960e01b81526001600160a01b039182166004820152911690636b5441a990602401602060405180830381865afa158015610980573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a491906119bb565b9392505050565b50600092915050565b610a196040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081018290529061016082015290565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166335bc868a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9d919061199e565b60405163622fe39f60e01b8152600481018590529091506000906001600160a01b0383169063622fe39f906024016101c060405180830381865afa158015610ae9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0d9190611bde565b905060405180610180016040528085815260200182608001518152602001836001600160a01b0316636b52b365876040518263ffffffff1660e01b8152600401610b5991815260200190565b602060405180830381865afa158015610b76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9a91906119bb565b81526020018260e0015164ffffffffff16815260200182610100015164ffffffffff16815260200182610120015164ffffffffff16815260200182610140015164ffffffffff16815260200182610160015164ffffffffff1681526020018260a001516001600160801b031681526020018260c001516001600160801b03168152602001836001600160a01b03166396e59682876040518263ffffffff1660e01b8152600401610c4c91815260200190565b602060405180830381865afa158015610c69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8d91906119bb565b8152602001826101a001516005811115610ca957610ca9611834565b9052949350505050565b610d146040518061012001604052806000815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d98919061199e565b6040516391541e0560e01b8152600481018590529091506000906001600160a01b038316906391541e059060240161018060405180830381865afa158015610de4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e089190611ad7565b905060008160400151905060405180610120016040528086815260200183602001516001600160a01b0316815260200183604001516001600160a01b03168152602001846001600160a01b031663ee4cc84c886040518263ffffffff1660e01b8152600401610e7991815260200190565b602060405180830381865afa158015610e96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eba91906119bb565b8152602001826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610efd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2191906119bb565b8152602001846001600160a01b0316632235ae0f886040518263ffffffff1660e01b8152600401610f5491815260200190565b602060405180830381865afa158015610f71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9591906119bb565b8152602001610fa3876113ac565b8152602001610fb787600080600080610614565b8152602001846001600160a01b0316630aad628b886040518263ffffffff1660e01b8152600401610fea91815260200190565b602060405180830381865afa158015611007573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102b91906119bb565b905295945050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015611097573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bb919061199e565b6001600160a01b03166391541e05856040518263ffffffff1660e01b81526004016110e891815260200190565b61018060405180830381865afa158015611106573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112a9190611ad7565b60408082015190516370a0823160e01b81526001600160a01b0386811660048301529293509116906370a0823190602401602060405180830381865afa158015611178573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119c91906119bb565b949350505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015611205573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611229919061199e565b6001600160a01b03166391541e05846040518263ffffffff1660e01b815260040161125691815260200190565b61018060405180830381865afa158015611274573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112989190611ad7565b9050600081604001516001600160a01b0316631f07e4df6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130291906119bb565b90506000734751eD03f5214C62630A26239E5E3933c5d0b6F463db53f3888385610100015161133689600080600080610614565b6040516001600160e01b031960e086901b1681526004810193909352602483019190915260448201526064016040805180830381865af415801561137e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a29190611cce565b5095945050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa15801561140d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611431919061199e565b6001600160a01b03166391541e05846040518263ffffffff1660e01b815260040161145e91815260200190565b61018060405180830381865afa15801561147c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a09190611ad7565b9050600081604001516001600160a01b0316631f07e4df6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150a91906119bb565b90506000734751eD03f5214C62630A26239E5E3933c5d0b6F463db53f3888385610100015161153e89600080600080610614565b6040516001600160e01b031960e086901b1681526004810193909352602483019190915260448201526064016040805180830381865af4158015611586573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115aa9190611cce565b9150506115d56115b98661082f565b6115cf836b033b2e3c9fd0803ce8000000611bb8565b906116a2565b6115de866111a4565b6115e89190611ba0565b95945050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015611651573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611675919061199e565b6001600160a01b031663ee4cc84c836040518263ffffffff1660e01b815260040161031c91815260200190565b60008215806116af575081155b156116bc5750600061035d565b816116d460026b033b2e3c9fd0803ce8000000611cf2565b6116e090600019611bb8565b6116ea9190611cf2565b8311156040518060400160405280600381526020016203130360ec1b815250906117305760405162461bcd60e51b81526004016117279190611d14565b60405180910390fd5b506b033b2e3c9fd0803ce8000000611749600282611cf2565b6117538486611d69565b61175d9190611ba0565b6109a49190611cf2565b60006020828403121561177957600080fd5b5035919050565b6001600160a01b038116811461179557600080fd5b50565b6000602082840312156117aa57600080fd5b81356109a481611780565b6020808252825182820181905260009190848201906040850190845b818110156117ed578351835292840192918401916001016117d1565b50909695505050505050565b600080600080600060a0868803121561181157600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b634e487b7160e01b600052602160045260246000fd5b6006811061186857634e487b7160e01b600052602160045260246000fd5b9052565b60006101808201905082518252602083015160208301526040830151604083015260608301516118a5606084018264ffffffffff169052565b5060808301516118be608084018264ffffffffff169052565b5060a08301516118d760a084018264ffffffffff169052565b5060c08301516118f060c084018264ffffffffff169052565b5060e083015161190960e084018264ffffffffff169052565b50610100838101516001600160801b038116848301525050610120838101516001600160801b0381168483015250506101408381015190830152610160808401516119568285018261184a565b505092915050565b6000806040838503121561197157600080fd5b82359150602083013561198381611780565b809150509250929050565b805161199981611780565b919050565b6000602082840312156119b057600080fd5b81516109a481611780565b6000602082840312156119cd57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611a2a57611a2a611a00565b5060010190565b604051610180810167ffffffffffffffff81118282101715611a6357634e487b7160e01b600052604160045260246000fd5b60405290565b6040516101c0810167ffffffffffffffff81118282101715611a6357634e487b7160e01b600052604160045260246000fd5b80516001600160801b038116811461199957600080fd5b805164ffffffffff8116811461199957600080fd5b8051801515811461199957600080fd5b60006101808284031215611aea57600080fd5b611af2611a31565b82518152611b026020840161198e565b6020820152611b136040840161198e565b6040820152611b246060840161198e565b6060820152611b3560808401611a9b565b608082015260a083015160a082015260c083015160c0820152611b5a60e08401611ab2565b60e08201526101008381015190820152610120611b7881850161198e565b908201526101408381015190820152610160611b95818501611ac7565b908201529392505050565b60008219821115611bb357611bb3611a00565b500190565b600082821015611bca57611bca611a00565b500390565b80516006811061199957600080fd5b60006101c08284031215611bf157600080fd5b611bf9611a69565b82518152611c096020840161198e565b602082015260408301516040820152611c246060840161198e565b606082015260808301516080820152611c3f60a08401611a9b565b60a0820152611c5060c08401611a9b565b60c0820152611c6160e08401611ab2565b60e0820152610100611c74818501611ab2565b90820152610120611c86848201611ab2565b90820152610140611c98848201611ab2565b90820152610160611caa848201611ab2565b90820152610180611cbc848201611ab2565b908201526101a0611b95848201611bcf565b60008060408385031215611ce157600080fd5b505080516020909101519092909150565b600082611d0f57634e487b7160e01b600052601260045260246000fd5b500490565b600060208083528351808285015260005b81811015611d4157858101830151858201604001528201611d25565b81811115611d53576000604083870101525b50601f01601f1916929092016040019392505050565b6000816000190483118215151615611d8357611d83611a00565b50029056fea2646970667358221220c3b21fc2802f80dd54c9ee0e7aac987a4f9c9207b53bc7f686ce0eda8fce552164736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c806391541e051161007157806391541e051461015857806395f76652146101e0578063a08a09d3146101f3578063ade97ab514610206578063d955759d14610245578063ee4cc84c1461025857600080fd5b80630aad628b146100b95780632235ae0f146100df5780633e842090146100f2578063423989e4146101125780635bdf347714610125578063622fe39f14610138575b600080fd5b6100cc6100c7366004611767565b61026b565b6040519081526020015b60405180910390f35b6100cc6100ed366004611767565b610363565b610105610100366004611798565b610414565b6040516100d691906117b5565b6100cc6101203660046117f9565b610614565b6100cc610133366004611767565b61082f565b61014b610146366004611767565b6109b4565b6040516100d6919061186c565b61016b610166366004611767565b610cb3565b60408051825181526020808401516001600160a01b0390811691830191909152838301511691810191909152606080830151908201526080808301519082015260a0808301519082015260c0808301519082015260e080830151908201526101009182015191810191909152610120016100d6565b6100cc6101ee36600461195e565b611036565b6100cc610201366004611767565b6111a4565b61022d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100d6565b6100cc610253366004611767565b6113ac565b6100cc610266366004611767565b6115f1565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ef919061199e565b6001600160a01b0316630aad628b836040518263ffffffff1660e01b815260040161031c91815260200190565b602060405180830381865afa158015610339573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035d91906119bb565b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e7919061199e565b6001600160a01b0316632235ae0f836040518263ffffffff1660e01b815260040161031c91815260200190565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166335bc868a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610476573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049a919061199e565b6040516370a0823160e01b81526001600160a01b0385811660048301529192506000918316906370a0823190602401602060405180830381865afa1580156104e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050a91906119bb565b9050600080821161051c57600061051e565b815b67ffffffffffffffff811115610536576105366119d4565b60405190808252806020026020018201604052801561055f578160200160208202803683370190505b50905060005b8281101561060b57604051632f745c5960e01b81526001600160a01b03878116600483015260248201839052851690632f745c5990604401602060405180830381865afa1580156105ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105de91906119bb565b8282815181106105f0576105f06119ea565b602090810291909101015261060481611a16565b9050610565565b50949350505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610675573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610699919061199e565b6001600160a01b03166391541e05886040518263ffffffff1660e01b81526004016106c691815260200190565b61018060405180830381865afa1580156106e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107089190611ad7565b90508061012001516001600160a01b03166315f2405388878985604001516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610763573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078791906119bb565b6107919190611ba0565b61079b9190611bb8565b86888661010001516107ad9190611ba0565b6107b79190611bb8565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401602060405180830381865afa158015610800573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082491906119bb565b979650505050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b4919061199e565b6001600160a01b03166391541e05846040518263ffffffff1660e01b81526004016108e191815260200190565b61018060405180830381865afa1580156108ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109239190611ad7565b9050806101600151156109ab5760608101516020820151604051636b5441a960e01b81526001600160a01b039182166004820152911690636b5441a990602401602060405180830381865afa158015610980573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a491906119bb565b9392505050565b50600092915050565b610a196040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081018290529061016082015290565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166335bc868a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9d919061199e565b60405163622fe39f60e01b8152600481018590529091506000906001600160a01b0383169063622fe39f906024016101c060405180830381865afa158015610ae9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0d9190611bde565b905060405180610180016040528085815260200182608001518152602001836001600160a01b0316636b52b365876040518263ffffffff1660e01b8152600401610b5991815260200190565b602060405180830381865afa158015610b76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9a91906119bb565b81526020018260e0015164ffffffffff16815260200182610100015164ffffffffff16815260200182610120015164ffffffffff16815260200182610140015164ffffffffff16815260200182610160015164ffffffffff1681526020018260a001516001600160801b031681526020018260c001516001600160801b03168152602001836001600160a01b03166396e59682876040518263ffffffff1660e01b8152600401610c4c91815260200190565b602060405180830381865afa158015610c69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8d91906119bb565b8152602001826101a001516005811115610ca957610ca9611834565b9052949350505050565b610d146040518061012001604052806000815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d98919061199e565b6040516391541e0560e01b8152600481018590529091506000906001600160a01b038316906391541e059060240161018060405180830381865afa158015610de4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e089190611ad7565b905060008160400151905060405180610120016040528086815260200183602001516001600160a01b0316815260200183604001516001600160a01b03168152602001846001600160a01b031663ee4cc84c886040518263ffffffff1660e01b8152600401610e7991815260200190565b602060405180830381865afa158015610e96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eba91906119bb565b8152602001826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610efd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2191906119bb565b8152602001846001600160a01b0316632235ae0f886040518263ffffffff1660e01b8152600401610f5491815260200190565b602060405180830381865afa158015610f71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9591906119bb565b8152602001610fa3876113ac565b8152602001610fb787600080600080610614565b8152602001846001600160a01b0316630aad628b886040518263ffffffff1660e01b8152600401610fea91815260200190565b602060405180830381865afa158015611007573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102b91906119bb565b905295945050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015611097573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bb919061199e565b6001600160a01b03166391541e05856040518263ffffffff1660e01b81526004016110e891815260200190565b61018060405180830381865afa158015611106573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112a9190611ad7565b60408082015190516370a0823160e01b81526001600160a01b0386811660048301529293509116906370a0823190602401602060405180830381865afa158015611178573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119c91906119bb565b949350505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015611205573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611229919061199e565b6001600160a01b03166391541e05846040518263ffffffff1660e01b815260040161125691815260200190565b61018060405180830381865afa158015611274573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112989190611ad7565b9050600081604001516001600160a01b0316631f07e4df6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130291906119bb565b9050600073__$f742c272e27921345744ab659e4a493fb5$__63db53f3888385610100015161133689600080600080610614565b6040516001600160e01b031960e086901b1681526004810193909352602483019190915260448201526064016040805180830381865af415801561137e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a29190611cce565b5095945050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa15801561140d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611431919061199e565b6001600160a01b03166391541e05846040518263ffffffff1660e01b815260040161145e91815260200190565b61018060405180830381865afa15801561147c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a09190611ad7565b9050600081604001516001600160a01b0316631f07e4df6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150a91906119bb565b9050600073__$f742c272e27921345744ab659e4a493fb5$__63db53f3888385610100015161153e89600080600080610614565b6040516001600160e01b031960e086901b1681526004810193909352602483019190915260448201526064016040805180830381865af4158015611586573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115aa9190611cce565b9150506115d56115b98661082f565b6115cf836b033b2e3c9fd0803ce8000000611bb8565b906116a2565b6115de866111a4565b6115e89190611ba0565b95945050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015611651573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611675919061199e565b6001600160a01b031663ee4cc84c836040518263ffffffff1660e01b815260040161031c91815260200190565b60008215806116af575081155b156116bc5750600061035d565b816116d460026b033b2e3c9fd0803ce8000000611cf2565b6116e090600019611bb8565b6116ea9190611cf2565b8311156040518060400160405280600381526020016203130360ec1b815250906117305760405162461bcd60e51b81526004016117279190611d14565b60405180910390fd5b506b033b2e3c9fd0803ce8000000611749600282611cf2565b6117538486611d69565b61175d9190611ba0565b6109a49190611cf2565b60006020828403121561177957600080fd5b5035919050565b6001600160a01b038116811461179557600080fd5b50565b6000602082840312156117aa57600080fd5b81356109a481611780565b6020808252825182820181905260009190848201906040850190845b818110156117ed578351835292840192918401916001016117d1565b50909695505050505050565b600080600080600060a0868803121561181157600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b634e487b7160e01b600052602160045260246000fd5b6006811061186857634e487b7160e01b600052602160045260246000fd5b9052565b60006101808201905082518252602083015160208301526040830151604083015260608301516118a5606084018264ffffffffff169052565b5060808301516118be608084018264ffffffffff169052565b5060a08301516118d760a084018264ffffffffff169052565b5060c08301516118f060c084018264ffffffffff169052565b5060e083015161190960e084018264ffffffffff169052565b50610100838101516001600160801b038116848301525050610120838101516001600160801b0381168483015250506101408381015190830152610160808401516119568285018261184a565b505092915050565b6000806040838503121561197157600080fd5b82359150602083013561198381611780565b809150509250929050565b805161199981611780565b919050565b6000602082840312156119b057600080fd5b81516109a481611780565b6000602082840312156119cd57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611a2a57611a2a611a00565b5060010190565b604051610180810167ffffffffffffffff81118282101715611a6357634e487b7160e01b600052604160045260246000fd5b60405290565b6040516101c0810167ffffffffffffffff81118282101715611a6357634e487b7160e01b600052604160045260246000fd5b80516001600160801b038116811461199957600080fd5b805164ffffffffff8116811461199957600080fd5b8051801515811461199957600080fd5b60006101808284031215611aea57600080fd5b611af2611a31565b82518152611b026020840161198e565b6020820152611b136040840161198e565b6040820152611b246060840161198e565b6060820152611b3560808401611a9b565b608082015260a083015160a082015260c083015160c0820152611b5a60e08401611ab2565b60e08201526101008381015190820152610120611b7881850161198e565b908201526101408381015190820152610160611b95818501611ac7565b908201529392505050565b60008219821115611bb357611bb3611a00565b500190565b600082821015611bca57611bca611a00565b500390565b80516006811061199957600080fd5b60006101c08284031215611bf157600080fd5b611bf9611a69565b82518152611c096020840161198e565b602082015260408301516040820152611c246060840161198e565b606082015260808301516080820152611c3f60a08401611a9b565b60a0820152611c5060c08401611a9b565b60c0820152611c6160e08401611ab2565b60e0820152610100611c74818501611ab2565b90820152610120611c86848201611ab2565b90820152610140611c98848201611ab2565b90820152610160611caa848201611ab2565b90820152610180611cbc848201611ab2565b908201526101a0611b95848201611bcf565b60008060408385031215611ce157600080fd5b505080516020909101519092909150565b600082611d0f57634e487b7160e01b600052601260045260246000fd5b500490565b600060208083528351808285015260005b81811015611d4157858101830151858201604001528201611d25565b81811115611d53576000604083870101525b50601f01601f1916929092016040019392505050565b6000816000190483118215151615611d8357611d83611a00565b50029056fea2646970667358221220c3b21fc2802f80dd54c9ee0e7aac987a4f9c9207b53bc7f686ce0eda8fce552164736f6c634300080a0033",
  "libraries": {
    "DataTypes": "0xb207482883464624e487eCDB50906d8dbdA5Cdb2",
    "MathUtils": "0x4751eD03f5214C62630A26239E5E3933c5d0b6F4"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}