{
  "address": "0x6d3E347979e24ff1D2459175B20191eaB218c70e",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum BespokeTypes.OfferType",
              "name": "offerType",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "isProrated",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "reserveId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "borrowAmountMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowAmountMax",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "borrowDurationMin",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowDurationMax",
              "type": "uint40"
            },
            {
              "internalType": "uint128",
              "name": "borrowRate",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BespokeTypes.Offer",
          "name": "offerData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "internalType": "struct BespokeTypes.LendOfferTakeParams",
          "name": "takeInfo",
          "type": "tuple"
        }
      ],
      "name": "tokenIdMatchOffer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9d2a77c33c13c980376813c6855a9d42ccfed60dbafe01b5a72e44e8ccd8fd5e",
  "receipt": {
    "to": null,
    "from": "0x218513C58A4781a5B88De6230caA29aBCe2Ccd75",
    "contractAddress": "0x6d3E347979e24ff1D2459175B20191eaB218c70e",
    "transactionIndex": 43,
    "gasUsed": "412236",
    "logsBloom": "0x
    "blockHash": "0xfdbcc0c9df9c279c8f72f9aeee647fc2f83fa3104bb97431a1c04472e8e8f0be",
    "transactionHash": "0x9d2a77c33c13c980376813c6855a9d42ccfed60dbafe01b5a72e44e8ccd8fd5e",
    "logs": [],
    "blockNumber": 7940862,
    "cumulativeGasUsed": "7380195",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "5caf662bc955a4ee3750eea04101df77",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"enum BespokeTypes.OfferType\",\"name\":\"offerType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isProrated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountMax\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"borrowDurationMin\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowDurationMax\",\"type\":\"uint40\"},{\"internalType\":\"uint128\",\"name\":\"borrowRate\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct BespokeTypes.Offer\",\"name\":\"offerData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct BespokeTypes.LendOfferTakeParams\",\"name\":\"takeInfo\",\"type\":\"tuple\"}],\"name\":\"tokenIdMatchOffer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bespokemarket/offerStrategies/StrategyByAttribute.sol\":\"StrategyByAttribute\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1bbdc6813c021e138da527c44d2615931b0e5c7fa2f58369846ed288324a8\",\"license\":\"MIT\"},\"contracts/bespokemarket/libraries/BespokeTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary BespokeTypes {\\n    struct Offer {\\n        OfferType offerType;\\n        bool isProrated;\\n        uint256 reserveId;\\n        address nftAddress;\\n        uint256 tokenId;\\n        uint256 tokenAmount; // 1 for ERC721, 1+ for ERC1155\\n        address signer; //borrower\\n        uint256 borrowAmountMin;\\n        uint256 borrowAmountMax;\\n        uint40 borrowDurationMin;\\n        uint40 borrowDurationMax;\\n        uint128 borrowRate;\\n        address currency;\\n        uint256 nonce;\\n        uint256 deadline;\\n        address strategy;\\n        bytes params;\\n        uint8 v; // v: parameter (27 or 28)\\n        bytes32 r; // r: parameter\\n        bytes32 s; // s: parameter\\n    }\\n\\n    enum OfferType {\\n        BORROW, // borrow offer\\n        SINGLE, // single\\n        COLLECTION, // offer to collection\\n        MULTIPLE, // many. only for ERC721\\n        ATTRIBUTE, // by attribute\\n        PRIVATE // private\\n    }\\n\\n    // params for takeLendOffer\\n    struct LendOfferTakeParams {\\n        address taker;\\n        uint256 tokenId;\\n        bytes params;\\n    }\\n\\n    struct validateTakeLendOfferParams {\\n        bytes32 offerHash;\\n        address underlyingSpecified;\\n        uint256 borrowAmount;\\n        uint256 borrowDuration;\\n        bytes32 domainSeparator;\\n        address bespokeSettings;\\n        address settings;\\n    }\\n\\n    struct executeTakeLendParams {\\n        uint256 tokenId;\\n        uint256 borrowAmount; // new borrow amount\\n        uint256 borrowDuration; // new borrow duration\\n        address bespokeSettings;\\n        address settings;\\n        bytes32 domainSeparator;\\n        bytes32 offerHash;\\n        bytes params;\\n    }\\n\\n    struct executeTakeBorrowParams {\\n        uint256 amount;\\n        uint256 duration;\\n        address bespokeSettings;\\n        address settings;\\n        bytes32 domainSeparator;\\n        bytes32 offerHash;\\n    }\\n\\n    // repayAmount?\\n    // adminFee\\n    struct LoanData {\\n        uint256 reserveId;\\n        address nftAddress;\\n        uint256 tokenId;\\n        uint256 tokenAmount; // 1 for ERC721, 1+ for ERC1155\\n        address borrower;\\n        uint256 amount;\\n        uint128 borrowRate;\\n        uint128 interestPerSecond;\\n        address currency;\\n        uint40 borrowDuration;\\n        // after take offer\\n        uint40 borrowBegin;\\n        uint40 borrowOverdueTime;\\n        uint40 liquidatableTime;\\n        address lender;\\n        LoanStatus status;\\n    }\\n\\n    enum LoanStatus {\\n        NONE,\\n        BORROWING,\\n        OVERDUE,\\n        LIQUIDATABLE\\n    }\\n\\n    struct WhitelistInfo {\\n        bool enabled;\\n        uint256 minBorrowDuration;\\n        uint256 maxBorrowDuration;\\n        uint256 overdueDuration;\\n    }\\n\\n    struct executeRolloverParams {\\n        uint256 loanId;\\n        uint256 borrowAmount; // new borrow amount\\n        uint256 borrowDuration; // new borrow duration\\n        address bespokeSettings;\\n        address settings;\\n        bytes32 domainSeparator;\\n        bytes32 offerHash;\\n    }\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n}\\n\",\"keccak256\":\"0x8bcb02170fcb5b2e7070d9e2db95fbf6bd8f0c61df8177039101b77d2e606b8e\",\"license\":\"MIT\"},\"contracts/bespokemarket/offerStrategies/StrategyByAttribute.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\nimport {MerkleProof} from '@openzeppelin/contracts/utils/cryptography/MerkleProof.sol';\\n\\nimport '../libraries/BespokeTypes.sol';\\n\\ncontract StrategyByAttribute {\\n    function tokenIdMatchOffer(BespokeTypes.Offer memory offerData, BespokeTypes.LendOfferTakeParams memory takeInfo)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        if(offerData.offerType != BespokeTypes.OfferType.ATTRIBUTE) return false;\\n        \\n        // Precomputed merkleRoot (that contains the tokenIds that match a common characteristic)\\n        bytes32 merkleRoot = abi.decode(offerData.params, (bytes32));\\n\\n        // MerkleProof + indexInTree + tokenId\\n        bytes32[] memory merkleProof = abi.decode(takeInfo.params, (bytes32[]));\\n\\n        // Compute the node\\n        bytes32 node = keccak256(abi.encodePacked(takeInfo.tokenId));\\n\\n        return MerkleProof.verify(merkleProof, merkleRoot, node);\\n    }\\n}\\n\",\"keccak256\":\"0x626a12699cd0aeff93b9f19b9fcb5455d2207aaf0110c1c7695aee73c8fa0e00\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061067f806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80637c550d6014610030575b600080fd5b61004361003e36600461038d565b610057565b604051901515815260200160405180910390f35b600060048351600581111561006e5761006e610535565b1461007b575060006100f6565b6000836102000151806020019051810190610096919061054b565b9050600083604001518060200190518101906100b29190610564565b9050600084602001516040516020016100cd91815260200190565b6040516020818303038152906040528051906020012090506100f08284836100fc565b93505050505b92915050565b600081815b85518110156101a057600086828151811061011e5761011e61060a565b6020026020010151905080831161016057604080516020810185905290810182905260600160405160208183030381529060405280519060200120925061018d565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061019881610620565b915050610101565b509092149392505050565b634e487b7160e01b600052604160045260246000fd5b604051610280810167ffffffffffffffff811182821017156101e5576101e56101ab565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610214576102146101ab565b604052919050565b80356006811061022b57600080fd5b919050565b8035801515811461022b57600080fd5b80356001600160a01b038116811461022b57600080fd5b803564ffffffffff8116811461022b57600080fd5b80356fffffffffffffffffffffffffffffffff8116811461022b57600080fd5b600082601f83011261029d57600080fd5b813567ffffffffffffffff8111156102b7576102b76101ab565b6102ca601f8201601f19166020016101eb565b8181528460208386010111156102df57600080fd5b816020850160208301376000918101602001919091529392505050565b803560ff8116811461022b57600080fd5b60006060828403121561031f57600080fd5b6040516060810167ffffffffffffffff8282108183111715610343576103436101ab565b8160405282935061035385610240565b835260208501356020840152604085013591508082111561037357600080fd5b506103808582860161028c565b6040830152505092915050565b600080604083850312156103a057600080fd5b823567ffffffffffffffff808211156103b857600080fd5b9084019061028082870312156103cd57600080fd5b6103d56101c1565b6103de8361021c565b81526103ec60208401610230565b60208201526040830135604082015261040760608401610240565b60608201526080830135608082015260a083013560a082015261042c60c08401610240565b60c082015260e083013560e0820152610100808401358183015250610120610455818501610257565b90820152610140610467848201610257565b9082015261016061047984820161026c565b9082015261018061048b848201610240565b908201526101a083810135908201526101c080840135908201526101e06104b3818501610240565b9082015261020083810135838111156104cb57600080fd5b6104d78982870161028c565b8284015250506102206104eb8185016102fc565b90820152610240838101359082015261026092830135928101929092529092506020840135908082111561051e57600080fd5b5061052b8582860161030d565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561055d57600080fd5b5051919050565b6000602080838503121561057757600080fd5b825167ffffffffffffffff8082111561058f57600080fd5b818501915085601f8301126105a357600080fd5b8151818111156105b5576105b56101ab565b8060051b91506105c68483016101eb565b81815291830184019184810190888411156105e057600080fd5b938501935b838510156105fe578451825293850193908501906105e5565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561064257634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212203be48b262504695b96d412c4420914c7096ba2d3f9203b653bbea6e0433ccb2f64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80637c550d6014610030575b600080fd5b61004361003e36600461038d565b610057565b604051901515815260200160405180910390f35b600060048351600581111561006e5761006e610535565b1461007b575060006100f6565b6000836102000151806020019051810190610096919061054b565b9050600083604001518060200190518101906100b29190610564565b9050600084602001516040516020016100cd91815260200190565b6040516020818303038152906040528051906020012090506100f08284836100fc565b93505050505b92915050565b600081815b85518110156101a057600086828151811061011e5761011e61060a565b6020026020010151905080831161016057604080516020810185905290810182905260600160405160208183030381529060405280519060200120925061018d565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061019881610620565b915050610101565b509092149392505050565b634e487b7160e01b600052604160045260246000fd5b604051610280810167ffffffffffffffff811182821017156101e5576101e56101ab565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610214576102146101ab565b604052919050565b80356006811061022b57600080fd5b919050565b8035801515811461022b57600080fd5b80356001600160a01b038116811461022b57600080fd5b803564ffffffffff8116811461022b57600080fd5b80356fffffffffffffffffffffffffffffffff8116811461022b57600080fd5b600082601f83011261029d57600080fd5b813567ffffffffffffffff8111156102b7576102b76101ab565b6102ca601f8201601f19166020016101eb565b8181528460208386010111156102df57600080fd5b816020850160208301376000918101602001919091529392505050565b803560ff8116811461022b57600080fd5b60006060828403121561031f57600080fd5b6040516060810167ffffffffffffffff8282108183111715610343576103436101ab565b8160405282935061035385610240565b835260208501356020840152604085013591508082111561037357600080fd5b506103808582860161028c565b6040830152505092915050565b600080604083850312156103a057600080fd5b823567ffffffffffffffff808211156103b857600080fd5b9084019061028082870312156103cd57600080fd5b6103d56101c1565b6103de8361021c565b81526103ec60208401610230565b60208201526040830135604082015261040760608401610240565b60608201526080830135608082015260a083013560a082015261042c60c08401610240565b60c082015260e083013560e0820152610100808401358183015250610120610455818501610257565b90820152610140610467848201610257565b9082015261016061047984820161026c565b9082015261018061048b848201610240565b908201526101a083810135908201526101c080840135908201526101e06104b3818501610240565b9082015261020083810135838111156104cb57600080fd5b6104d78982870161028c565b8284015250506102206104eb8185016102fc565b90820152610240838101359082015261026092830135928101929092529092506020840135908082111561051e57600080fd5b5061052b8582860161030d565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561055d57600080fd5b5051919050565b6000602080838503121561057757600080fd5b825167ffffffffffffffff8082111561058f57600080fd5b818501915085601f8301126105a357600080fd5b8151818111156105b5576105b56101ab565b8060051b91506105c68483016101eb565b81815291830184019184810190888411156105e057600080fd5b938501935b838510156105fe578451825293850193908501906105e5565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561064257634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212203be48b262504695b96d412c4420914c7096ba2d3f9203b653bbea6e0433ccb2f64736f6c634300080a0033",
  "libraries": {
    "BespokeTypes": "0x18DBb065e137198b4eE32F212d8442918143FaDF"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}