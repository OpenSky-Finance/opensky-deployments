{
  "address": "0x07b9203b70427cdB15d752a6A8E9C028e595aF0f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAaveLendPoolAddressesProvider",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "contract IOpenSkyBespokeSettings",
          "name": "bespokeSettings",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLoanId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLoanId",
          "type": "uint256"
        }
      ],
      "name": "RefinanceBespokeToBespoke",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AAVE2_ADDRESSES_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IAaveLendPoolAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BESPOKE_SETTINGS",
      "outputs": [
        {
          "internalType": "contract IOpenSkyBespokeSettings",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aavePool",
      "outputs": [
        {
          "internalType": "contract IAaveLendPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "premiums",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "executeOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9b7358e8a0ed3687cc656df96341e47209e344f59391409208bbaec66439af3d",
  "receipt": {
    "to": null,
    "from": "0x218513C58A4781a5B88De6230caA29aBCe2Ccd75",
    "contractAddress": "0x07b9203b70427cdB15d752a6A8E9C028e595aF0f",
    "transactionIndex": 24,
    "gasUsed": "1898301",
    "logsBloom": "0x
    "blockHash": "0xd7cdc10a3f4c67b7ddf110bdbf47eed923d084e50a9e80c45db4c1b5fbe81d5e",
    "transactionHash": "0x9b7358e8a0ed3687cc656df96341e47209e344f59391409208bbaec66439af3d",
    "logs": [],
    "blockNumber": 8192662,
    "cumulativeGasUsed": "5634514",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9C3106e111a3317d3662F4a3f9622B6d17EC79fE",
    "0xf7fB2278991a44b1a3E9fC8D448ec5b9C3449D84"
  ],
  "solcInputHash": "bf686a93d2639096ee93f612756cfd09",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAaveLendPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"contract IOpenSkyBespokeSettings\",\"name\":\"bespokeSettings\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLoanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLoanId\",\"type\":\"uint256\"}],\"name\":\"RefinanceBespokeToBespoke\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AAVE2_ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAaveLendPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BESPOKE_SETTINGS\",\"outputs\":[{\"internalType\":\"contract IOpenSkyBespokeSettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aavePool\",\"outputs\":[{\"internalType\":\"contract IAaveLendPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/refinance/adapters/BespokeToBespokeAdapter.sol\":\"BespokeToBespokeAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x4716e860c041e651d2f2486399ea5a49ec12289e91b2763991a2fa3a70772acf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x8c578d9e30c8f2bb7ac01d108766df87d42b73d4d3638f01d494a894fe7c1f4b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x8756c97d6004b1ae21517a013bdec72fbf30be7852afb2f395871d280131b250\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/bespokemarket/interfaces/IOpenSkyBespokeMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../libraries/BespokeTypes.sol';\\n\\ninterface IOpenSkyBespokeMarket {\\n    event CancelAllOffers(address indexed sender, uint256 nonce);\\n\\n    event CancelMultipleOffers(address indexed sender, uint256[] nonces);\\n\\n    event TakeBorrowOffer(\\n        bytes32 offerHash,\\n        uint256 indexed loanId,\\n        address indexed lender,\\n        address indexed borrower,\\n        uint256 nonce\\n    );\\n\\n    event TakeLendOffer(\\n        bytes32 offerHash,\\n        uint256 indexed loanId,\\n        address indexed lender,\\n        address indexed borrower,\\n        address onBehalfOf,\\n        uint256 nonce,\\n        uint256 nonceOrder\\n    );\\n\\n    event Repay(uint256 indexed loanId, address indexed operator, address indexed receiver);\\n\\n    event Foreclose(uint256 indexed loanId, address indexed operator, address indexed receiver);\\n\\n    function takeBorrowOffer(\\n        BespokeTypes.Offer memory offerData,\\n        uint256 supplyAmount,\\n        uint256 supplyDuration,\\n        address lendAsset,\\n        bool autoConvertWhenRepay\\n    ) external returns (uint256);\\n\\n    function takeLendOffer(\\n        BespokeTypes.Offer memory offerData,\\n        uint256 tokenId,\\n        uint256 borrowAmount,\\n        uint256 borrowDuration,\\n        address onBehalfOf,\\n        bytes memory params\\n    ) external returns (uint256);\\n\\n    function repay(uint256 loanId) external;\\n\\n    function foreclose(uint256 loanId) external;\\n\\n    function cancelAllBorrowOffersForSender(uint256 minNonce_) external;\\n\\n    function cancelMultipleBorrowOffers(uint256[] calldata offerNonces) external;\\n\\n    function isValidNonce(address account, uint256 nonce) external view returns (bool);\\n\\n    function getLoanData(uint256 loanId) external view returns (BespokeTypes.LoanData memory);\\n\\n    function getStatus(uint256 loanId) external view returns (BespokeTypes.LoanStatus);\\n\\n    function getBorrowInterest(uint256 loanId) external view returns (uint256);\\n\\n    function getBorrowBalance(uint256 loanId) external view returns (uint256);\\n\\n    function getPenalty(uint256 loanId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x26e2311705ef5467421b2c14655f968cf91672decf9776eae50ac528c1122bee\",\"license\":\"MIT\"},\"contracts/bespokemarket/interfaces/IOpenSkyBespokeSettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\nimport '../libraries/BespokeTypes.sol';\\n\\ninterface IOpenSkyBespokeSettings {\\n    event InitLoanAddress(address operator, address borrowLoanAddress, address lendLoanAddress);\\n    event InitMarketAddress(address operator, address address_);\\n\\n    event SetReserveFactor(address operator, uint256 factor);\\n    event SetOverdueLoanFeeFactor(address operator, uint256 factor);\\n\\n    event SetMinBorrowDuration(address operator, uint256 factor);\\n    event SetMaxBorrowDuration(address operator, uint256 factor);\\n    event SetOverdueDuration(address operator, uint256 factor);\\n\\n    // nft whitelist\\n    event OpenWhitelist(address operator);\\n    event CloseWhitelist(address operator);\\n    event AddToWhitelist(address operator, address nft);\\n    event RemoveFromWhitelist(address operator, address nft);\\n\\n    // currency whitelist\\n    event AddCurrency(address operator, address currency);\\n    event RemoveCurrency(address operator, address currency);\\n\\n    // strategy whitelist list\\n    event AddStrategy(address operator, address address_);\\n    event RemoveStrategy(address operator, address address_);\\n\\n    // setting for nft transfer adapter \\n    event InitDefaultNftTransferAdapter(address ERC721DefaultTransferAdapter, address ERC1155DefaultTransferAdapter);\\n    event AddNftTransferAdapter(address operator, address nftAddress, address adapterAddress);\\n    event RemoveNftTransferAdapter(address operator, address nftAddress);\\n\\n    // settings for currency transfer adapter \\n    event InitDefaultCurrencyTransferAdapter(address currencyDefaultTransferAdapter);\\n    event AddCurrencyTransferAdapter(address operator, address currencyAddress, address adapterAddress);\\n    event RemoveCurrencyTransferAdapter(address operator, address currencyAddress);\\n\\n    function marketAddress() external view returns (address);\\n\\n    function borrowLoanAddress() external view returns (address);\\n\\n    function lendLoanAddress() external view returns (address);\\n\\n    function minBorrowDuration() external view returns (uint256);\\n\\n    function maxBorrowDuration() external view returns (uint256);\\n\\n    function overdueDuration() external view returns (uint256);\\n\\n    function reserveFactor() external view returns (uint256);\\n\\n    function MAX_RESERVE_FACTOR() external view returns (uint256);\\n\\n    function overdueLoanFeeFactor() external view returns (uint256);\\n\\n    function isWhitelistOn() external view returns (bool);\\n\\n    function inWhitelist(address nft) external view returns (bool);\\n\\n    function getWhitelistDetail(address nft) external view returns (BespokeTypes.WhitelistInfo memory);\\n\\n    function getBorrowDurationConfig(address nftAddress)\\n        external\\n        view\\n        returns (\\n            uint256 minBorrowDuration,\\n            uint256 maxBorrowDuration,\\n            uint256 overdueDuration\\n        );\\n\\n    function isCurrencyWhitelisted(address currency) external view returns (bool);\\n\\n    function getCurrencyTransferAdapter(address currency) external view returns (address adapter);\\n\\n    function getNftTransferAdapter(address nftAddress) external view returns (address);\\n\\n    function isStrategyWhitelisted(address address_) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x432ec7fd5c555d237eb15a6c6702dcf18acf5b36485ea7fc3541a9a89c9502aa\",\"license\":\"MIT\"},\"contracts/bespokemarket/libraries/BespokeTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary BespokeTypes {\\n    struct Offer {\\n        bool isProrated; // whether to pay interest a fixed-time when repay early\\n        bool autoConvertWhenRepay; // when currency!=lendAsset, whether to convert currency to lendAsset for lender when repay. Determined by lender.\\n        OfferType offerType;\\n        address tokenAddress;\\n        uint256 tokenId;\\n        uint256 tokenAmount; // 1 for ERC721, 1+ for ERC1155\\n        address signer; //borrower or lender\\n        uint256 borrowAmountMin;\\n        uint256 borrowAmountMax;\\n        uint40 borrowDurationMin;\\n        uint40 borrowDurationMax;\\n        uint128 borrowRate;\\n        address currency;  // Asset to borrow or receive when loan created. Borrower should also use it for repay.\\n        address lendAsset; // Using which token to lend. Determined by lender and should be zero address for borrow offer.\\n        uint256 nonce;\\n        uint256 nonceMaxTimes;// should be 1 for a borrow offer\\n        uint256 deadline;\\n        address strategy; // used for lend offer. should be zero address for borrow offer\\n        bytes params;\\n        uint8 v; // v: parameter (27 or 28)\\n        bytes32 r; // r: parameter\\n        bytes32 s; // s: parameter\\n    }\\n\\n    struct LoanData {\\n        address tokenAddress;\\n        uint256 tokenId;\\n        uint256 tokenAmount; // 1 for ERC721, 1+ for ERC1155\\n        address nftManager;\\n        address borrower;\\n        address lender;\\n        uint256 amount;\\n        uint128 borrowRate;\\n        uint128 interestPerSecond;\\n        address currency;\\n        address lendAsset;\\n        uint256 reserveFactor;\\n        uint256 overdueLoanFeeFactor;\\n        uint40 borrowDuration;\\n        uint40 borrowBegin;\\n        uint40 borrowOverdueTime;\\n        uint40 liquidatableTime;\\n        bool isProrated;\\n        bool autoConvertWhenRepay;\\n        LoanStatus status;\\n    }\\n\\n    enum OfferType {\\n        BORROW, // borrow offer\\n        LEND // lend offer\\n    }\\n\\n    struct TakeBorrowInfo {\\n        uint256 borrowAmount;\\n        uint256 borrowDuration;\\n        address lendAsset;\\n        bool autoConvertWhenRepay;\\n    }\\n\\n    struct TakeLendInfo {\\n        uint256 borrowAmount;\\n        uint256 borrowDuration;\\n        uint256 tokenId;\\n        address onBehalfOf;\\n        bytes params;\\n    }\\n\\n    // params for lend strategy\\n    struct TakeLendInfoForStrategy {\\n        address taker;\\n        uint256 tokenId;\\n        bytes params;\\n    }\\n\\n    enum LoanStatus {\\n        NONE,\\n        BORROWING,\\n        OVERDUE,\\n        LIQUIDATABLE\\n    }\\n\\n    struct WhitelistInfo {\\n        bool enabled;\\n        uint256 minBorrowDuration;\\n        uint256 maxBorrowDuration;\\n        uint256 overdueDuration;\\n    }\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    struct NonceInfo {\\n        bool invalid;\\n        uint256 usedTimes;\\n        bytes32 offerHash;\\n    }\\n}\\n\",\"keccak256\":\"0xc1c1fdc3ed498c4e500329e331e52c682d8b8f99cbc96337644ff3723de7191f\",\"license\":\"MIT\"},\"contracts/refinance/adapters/BespokeToBespokeAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol';\\n\\nimport '../interfaces/IAaveFlashLoanReceiver.sol';\\nimport '../interfaces/IAaveLendPoolAddressesProvider.sol';\\nimport '../interfaces/IAaveLendPool.sol';\\n\\nimport '../../bespokemarket/interfaces/IOpenSkyBespokeSettings.sol';\\nimport '../../bespokemarket/interfaces/IOpenSkyBespokeMarket.sol';\\nimport '../../bespokemarket/libraries/BespokeTypes.sol';\\n\\ncontract BespokeToBespokeAdapter is IAaveFlashLoanReceiver, ERC721Holder, ERC1155Holder {\\n    using SafeERC20 for IERC20;\\n\\n    IAaveLendPoolAddressesProvider public immutable AAVE2_ADDRESSES_PROVIDER;\\n    IOpenSkyBespokeSettings public immutable BESPOKE_SETTINGS;\\n\\n    event RefinanceBespokeToBespoke(\\n        address indexed asset,\\n        address indexed borrower,\\n        uint256 oldLoanId,\\n        uint256 newLoanId\\n    );\\n\\n    constructor(IAaveLendPoolAddressesProvider provider, IOpenSkyBespokeSettings bespokeSettings) {\\n        AAVE2_ADDRESSES_PROVIDER = provider;\\n        BESPOKE_SETTINGS = bespokeSettings;\\n    }\\n\\n    function aavePool() public view returns (IAaveLendPool) {\\n        return IAaveLendPool(AAVE2_ADDRESSES_PROVIDER.getLendingPool());\\n    }\\n\\n    struct LocalVars {\\n        uint256 loanId;\\n        uint256 repayAmount;\\n        address assetAddress;\\n        uint256 borrowAmount;\\n        uint256 borrowDuration;\\n        address borrower;\\n        uint256 needInput;\\n        bytes params;\\n        bytes params2;\\n        BespokeTypes.Offer offer;\\n        uint256 newLoanId;\\n    }\\n\\n    function executeOperation(\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums,\\n        address initiator,\\n        bytes calldata params\\n    ) external returns (bool) {\\n        require(\\n            assets.length == 1 && amounts.length == 1 && premiums.length == 1,\\n            'BM_FLASH_LOAN_MULTIPLE_ASSETS_NOT_SUPPORTED'\\n        );\\n        require(address(aavePool()) == msg.sender, 'BM_FLASH_LOAN_INVALID_CALLER');\\n\\n        LocalVars memory vars;\\n\\n        // decode\\n        (vars.params, vars.borrower) = abi.decode(params, (bytes, address));\\n        (vars.loanId, vars.borrowAmount, vars.borrowDuration, vars.params2) = abi.decode(\\n            vars.params,\\n            (uint256, uint256, uint256, bytes)\\n        );\\n        vars.offer = abi.decode(vars.params2, (BespokeTypes.Offer));\\n\\n        // get loan data before repay\\n        BespokeTypes.LoanData memory loan = IOpenSkyBespokeMarket(BESPOKE_SETTINGS.marketAddress()).getLoanData(\\n            vars.loanId\\n        );\\n\\n        require(loan.currency == vars.offer.currency, 'BM_FLASH_LOAN_CURRENCY_NOT_MATCH');\\n        require(loan.tokenAddress == vars.offer.tokenAddress, 'BM_FLASH_LOAN_TOKEN_ADDRESS_MATCH');\\n\\n        // OpenSkyBespokeBorrowNFT\\n        IERC721(BESPOKE_SETTINGS.borrowLoanAddress()).safeTransferFrom(vars.borrower, address(this), vars.loanId);\\n\\n        // repay loan\\n        vars.repayAmount =\\n            IOpenSkyBespokeMarket(BESPOKE_SETTINGS.marketAddress()).getPenalty(vars.loanId) +\\n            IOpenSkyBespokeMarket(BESPOKE_SETTINGS.marketAddress()).getBorrowBalance(vars.loanId);\\n\\n        require(vars.repayAmount <= amounts[0], 'BP_FLASH_LOAN_RECEIVE_MONEY_NOT_ENOUGH');\\n\\n        IERC20(assets[0]).approve(BESPOKE_SETTINGS.marketAddress(), vars.repayAmount);\\n        IOpenSkyBespokeMarket(BESPOKE_SETTINGS.marketAddress()).repay(vars.loanId);\\n\\n        // borrow again\\n        // TODO: Need to support erc1155?\\n        IERC721(loan.tokenAddress).approve(BESPOKE_SETTINGS.getNftTransferAdapter(loan.tokenAddress), loan.tokenId);\\n\\n        // only support single or colletcion offer\\n        vars.newLoanId = IOpenSkyBespokeMarket(BESPOKE_SETTINGS.marketAddress()).takeLendOffer(\\n            vars.offer,\\n            loan.tokenId,\\n            vars.borrowAmount,\\n            vars.borrowDuration,\\n            address(this),\\n            ''\\n        );\\n\\n        vars.needInput = vars.repayAmount + premiums[0];\\n\\n        // transfer erc20\\n        if (vars.borrowAmount > vars.needInput) {\\n            IERC20(assets[0]).safeTransfer(vars.borrower, vars.borrowAmount - vars.needInput);\\n        } else if (vars.borrowAmount < vars.needInput) {\\n            IERC20(assets[0]).safeTransferFrom(vars.borrower, address(this), vars.needInput - vars.borrowAmount);\\n        }\\n\\n        // transfer OpenSkyBespokeBorrowNFT\\n        IERC721(BESPOKE_SETTINGS.borrowLoanAddress()).safeTransferFrom(address(this), vars.borrower, vars.newLoanId);\\n\\n        //repay flashloan\\n        IERC20(assets[0]).approve(address(aavePool()), amounts[0] + premiums[0]);\\n\\n        emit RefinanceBespokeToBespoke(assets[0], vars.borrower, vars.loanId, vars.newLoanId);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x75b9e326b11ee0c016711f1edb61310e8b27c420882e0c876a717b3e3c1b324a\",\"license\":\"MIT\"},\"contracts/refinance/interfaces/IAaveFlashLoanReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IAaveFlashLoanReceiver interface\\n * @notice Interface for the Aave fee IFlashLoanReceiver.\\n * @author Bend\\n * @dev implement this interface to develop a flashloan-compatible flashLoanReceiver contract\\n **/\\ninterface IAaveFlashLoanReceiver {\\n    function executeOperation(\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums,\\n        address initiator,\\n        bytes calldata params\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x986f82d4190e9f67887c1953b2cd9e812e09136e068fd5505696254c7d0f535a\",\"license\":\"MIT\"},\"contracts/refinance/interfaces/IAaveLendPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IAaveLendPool {\\n    /**\\n     * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n     * For further details please visit https://developers.aave.com\\n     * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n     * @param assets The addresses of the assets being flash-borrowed\\n     * @param amounts The amounts amounts being flash-borrowed\\n     * @param modes Types of the debt to open if the flash loan is not returned:\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n}\\n\",\"keccak256\":\"0x59f9382730ef35f1275f305a4150d2f0bb8915a59c26afb36fa79c70ba3c7163\",\"license\":\"MIT\"},\"contracts/refinance/interfaces/IAaveLendPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IAaveLendPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the aave protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Bend\\n **/\\n// aave-v2\\ninterface IAaveLendPoolAddressesProvider {\\n    function getLendingPool() external view returns (address);\\n    \\n}\\n\",\"keccak256\":\"0x0b17e9759fac19511e4b73c150e9a03c115e2c41fa200fe800f45cce91417e3e\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200226f3803806200226f833981016040819052620000349162000065565b6001600160a01b039182166080521660a052620000a4565b6001600160a01b03811681146200006257600080fd5b50565b600080604083850312156200007957600080fd5b825162000086816200004c565b602084015190925062000099816200004c565b809150509250929050565b60805160a0516121606200010f600039600081816101300152818161033e0152818161051e0152818161061001528181610705015281816108b9015281816109b001528181610abe01528181610b900152610d9701526000818160ba015261101701526121606000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063920f5c841161005b578063920f5c8414610152578063a03e4bc314610165578063bc197c811461016d578063f23a6e611461018c57600080fd5b806301ffc9a71461008d57806311ea536e146100b5578063150b7a02146100f457806329c55f061461012b575b600080fd5b6100a061009b3660046114ad565b6101ab565b60405190151581526020015b60405180910390f35b6100dc7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100ac565b6101126101023660046115fe565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016100ac565b6100dc7f000000000000000000000000000000000000000000000000000000000000000081565b6100a06101603660046116b4565b6101e2565b6100dc611013565b61011261017b36600461182c565b63bc197c8160e01b95945050505050565b61011261019a3660046118d9565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b14806101dc57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006001891480156101f45750600187145b80156102005750600185145b6102655760405162461bcd60e51b815260206004820152602b60248201527f424d5f464c4153485f4c4f414e5f4d554c5449504c455f4153534554535f4e4f60448201526a1517d4d5541413d495115160aa1b60648201526084015b60405180910390fd5b3361026e611013565b6001600160a01b0316146102c45760405162461bcd60e51b815260206004820152601c60248201527f424d5f464c4153485f4c4f414e5f494e56414c49445f43414c4c455200000000604482015260640161025c565b6102cc61138e565b6102d883850185611941565b6001600160a01b031660a083015260e08201819052805161030191602091810182019101611a0b565b61010085018190526080850191909152606084019190915290825280516103319190810160209081019101611ac4565b81610120018190525060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663956236416040518163ffffffff1660e01b8152600401602060405180830381865afa15801561039a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103be9190611c6d565b825160405163622fe39f60e01b81526001600160a01b03929092169163622fe39f916103f09160040190815260200190565b61028060405180830381865afa15801561040e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104329190611c99565b905081610120015161018001516001600160a01b03168161012001516001600160a01b0316146104a45760405162461bcd60e51b815260206004820181905260248201527f424d5f464c4153485f4c4f414e5f43555252454e43595f4e4f545f4d41544348604482015260640161025c565b816101200151606001516001600160a01b031681600001516001600160a01b03161461051c5760405162461bcd60e51b815260206004820152602160248201527f424d5f464c4153485f4c4f414e5f544f4b454e5f414444524553535f4d4154436044820152600960fb1b606482015260840161025c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb322a836040518163ffffffff1660e01b8152600401602060405180830381865afa15801561057a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059e9190611c6d565b60a08301518351604051632142170760e11b81526001600160a01b03928316600482015230602482015260448101919091529116906342842e0e90606401600060405180830381600087803b1580156105f657600080fd5b505af115801561060a573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663956236416040518163ffffffff1660e01b8152600401602060405180830381865afa15801561066c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106909190611c6d565b8251604051636b52b36560e01b81526001600160a01b039290921691636b52b365916106c29160040190815260200190565b602060405180830381865afa1580156106df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107039190611df2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663956236416040518163ffffffff1660e01b8152600401602060405180830381865afa158015610761573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107859190611c6d565b8351604051634b72cb4160e11b81526001600160a01b0392909216916396e59682916107b79160040190815260200190565b602060405180830381865afa1580156107d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f89190611df2565b6108029190611e21565b6020830152898960008161081857610818611e39565b90506020020135826020015111156108815760405162461bcd60e51b815260206004820152602660248201527f42505f464c4153485f4c4f414e5f524543454956455f4d4f4e45595f4e4f545f60448201526508a9c9eaa8e960d31b606482015260840161025c565b8b8b600081811061089457610894611e39565b90506020020160208101906108a99190611e4f565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663956236416040518163ffffffff1660e01b8152600401602060405180830381865afa158015610915573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109399190611c6d565b60208501516040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610989573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ad9190611e6c565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663956236416040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a309190611c6d565b8251604051631b8fec7360e11b81526001600160a01b03929092169163371fd8e691610a629160040190815260200190565b600060405180830381600087803b158015610a7c57600080fd5b505af1158015610a90573d6000803e3d6000fd5b505082516040516398460c5f60e01b81526001600160a01b0391821660048201819052935063095ea7b392507f0000000000000000000000000000000000000000000000000000000000000000909116906398460c5f90602401602060405180830381865afa158015610b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2b9190611c6d565b60208401516040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610b7657600080fd5b505af1158015610b8a573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663956236416040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c109190611c6d565b6001600160a01b031663a2b8fe87836101200151836020015185606001518660800151306040518663ffffffff1660e01b8152600401610c54959493929190611ed5565b6020604051808303816000875af1158015610c73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c979190611df2565b6101408301528787600081610cae57610cae611e39565b905060200201358260200151610cc49190611e21565b60c0830181905260608301511115610d2f57610d2a8260a001518360c001518460600151610cf291906120e4565b8e8e6000818110610d0557610d05611e39565b9050602002016020810190610d1a9190611e4f565b6001600160a01b0316919061109c565b610d95565b8160c0015182606001511015610d9557610d958260a001513084606001518560c00151610d5c91906120e4565b8f8f6000818110610d6f57610d6f611e39565b9050602002016020810190610d849190611e4f565b6001600160a01b0316929190611104565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb322a836040518163ffffffff1660e01b8152600401602060405180830381865afa158015610df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e179190611c6d565b60a0830151610140840151604051632142170760e11b81523060048201526001600160a01b03928316602482015260448101919091529116906342842e0e90606401600060405180830381600087803b158015610e7357600080fd5b505af1158015610e87573d6000803e3d6000fd5b505050508b8b6000818110610e9e57610e9e611e39565b9050602002016020810190610eb39190611e4f565b6001600160a01b031663095ea7b3610ec9611013565b8a8a6000818110610edc57610edc611e39565b905060200201358d8d6000818110610ef657610ef6611e39565b90506020020135610f079190611e21565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610f52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f769190611e6c565b508160a001516001600160a01b03168c8c6000818110610f9857610f98611e39565b9050602002016020810190610fad9190611e4f565b6001600160a01b03167f537ec0d414de558d408ed2e0cb05ceee24cd9fc300600b10bf70398497d481088460000151856101400151604051610ff9929190918252602082015260400190565b60405180910390a35060019b9a5050505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630261bf8b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611073573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110979190611c6d565b905090565b6040516001600160a01b0383166024820152604481018290526110ff90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611142565b505050565b6040516001600160a01b038085166024830152831660448201526064810182905261113c9085906323b872dd60e01b906084016110c8565b50505050565b6000611197826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112149092919063ffffffff16565b8051909150156110ff57808060200190518101906111b59190611e6c565b6110ff5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161025c565b6060611223848460008561122d565b90505b9392505050565b60608247101561128e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161025c565b843b6112dc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161025c565b600080866001600160a01b031685876040516112f891906120fb565b60006040518083038185875af1925050503d8060008114611335576040519150601f19603f3d011682016040523d82523d6000602084013e61133a565b606091505b509150915061134a828286611355565b979650505050505050565b60608315611364575081611226565b8251156113745782518084602001fd5b8160405162461bcd60e51b815260040161025c9190612117565b604051806101600160405280600081526020016000815260200160006001600160a01b03168152602001600081526020016000815260200160006001600160a01b031681526020016000815260200160608152602001606081526020016114a0604080516102c081018252600080825260208201819052909182019081526000602082018190526040820181905260608083018290526080830182905260a0830182905260c0830182905260e08301829052610100830182905261012083018290526101408301829052610160830182905261018083018290526101a083018290526101c083018290526101e08301829052610200830152610220820181905261024082018190526102609091015290565b8152602001600081525090565b6000602082840312156114bf57600080fd5b81356001600160e01b03198116811461122657600080fd5b6001600160a01b03811681146114ec57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b6040516102c081016001600160401b0381118282101715611528576115286114ef565b60405290565b60405161028081016001600160401b0381118282101715611528576115286114ef565b604051601f8201601f191681016001600160401b0381118282101715611579576115796114ef565b604052919050565b60006001600160401b0382111561159a5761159a6114ef565b50601f01601f191660200190565b600082601f8301126115b957600080fd5b81356115cc6115c782611581565b611551565b8181528460208386010111156115e157600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561161457600080fd5b843561161f816114d7565b9350602085013561162f816114d7565b92506040850135915060608501356001600160401b0381111561165157600080fd5b61165d878288016115a8565b91505092959194509250565b60008083601f84011261167b57600080fd5b5081356001600160401b0381111561169257600080fd5b6020830191508360208260051b85010111156116ad57600080fd5b9250929050565b600080600080600080600080600060a08a8c0312156116d257600080fd5b89356001600160401b03808211156116e957600080fd5b6116f58d838e01611669565b909b50995060208c013591508082111561170e57600080fd5b61171a8d838e01611669565b909950975060408c013591508082111561173357600080fd5b61173f8d838e01611669565b909750955060608c01359150611754826114d7565b90935060808b0135908082111561176a57600080fd5b818c0191508c601f83011261177e57600080fd5b81358181111561178d57600080fd5b8d602082850101111561179f57600080fd5b6020830194508093505050509295985092959850929598565b600082601f8301126117c957600080fd5b813560206001600160401b038211156117e4576117e46114ef565b8160051b6117f3828201611551565b928352848101820192828101908785111561180d57600080fd5b83870192505b8483101561134a57823582529183019190830190611813565b600080600080600060a0868803121561184457600080fd5b853561184f816114d7565b9450602086013561185f816114d7565b935060408601356001600160401b038082111561187b57600080fd5b61188789838a016117b8565b9450606088013591508082111561189d57600080fd5b6118a989838a016117b8565b935060808801359150808211156118bf57600080fd5b506118cc888289016115a8565b9150509295509295909350565b600080600080600060a086880312156118f157600080fd5b85356118fc816114d7565b9450602086013561190c816114d7565b9350604086013592506060860135915060808601356001600160401b0381111561193557600080fd5b6118cc888289016115a8565b6000806040838503121561195457600080fd5b82356001600160401b0381111561196a57600080fd5b611976858286016115a8565b9250506020830135611987816114d7565b809150509250929050565b60005b838110156119ad578181015183820152602001611995565b8381111561113c5750506000910152565b600082601f8301126119cf57600080fd5b81516119dd6115c782611581565b8181528460208386010111156119f257600080fd5b611a03826020830160208701611992565b949350505050565b60008060008060808587031215611a2157600080fd5b84519350602085015192506040850151915060608501516001600160401b03811115611a4c57600080fd5b61165d878288016119be565b80518015158114611a6857600080fd5b919050565b805160028110611a6857600080fd5b8051611a68816114d7565b805164ffffffffff81168114611a6857600080fd5b80516001600160801b0381168114611a6857600080fd5b805160ff81168114611a6857600080fd5b600060208284031215611ad657600080fd5b81516001600160401b0380821115611aed57600080fd5b908301906102c08286031215611b0257600080fd5b611b0a611505565b611b1383611a58565b8152611b2160208401611a58565b6020820152611b3260408401611a6d565b6040820152611b4360608401611a7c565b60608201526080830151608082015260a083015160a0820152611b6860c08401611a7c565b60c082015260e083015160e0820152610100808401518183015250610120611b91818501611a87565b90820152610140611ba3848201611a87565b90820152610160611bb5848201611a9c565b90820152610180611bc7848201611a7c565b908201526101a0611bd9848201611a7c565b908201526101c083810151908201526101e080840151908201526102008084015190820152610220611c0c818501611a7c565b908201526102408381015183811115611c2457600080fd5b611c30888287016119be565b8284015250506102609150611c46828401611ab3565b9181019190915261028082810151908201526102a091820151918101919091529392505050565b600060208284031215611c7f57600080fd5b8151611226816114d7565b805160048110611a6857600080fd5b60006102808284031215611cac57600080fd5b611cb461152e565b611cbd83611a7c565b81526020830151602082015260408301516040820152611cdf60608401611a7c565b6060820152611cf060808401611a7c565b6080820152611d0160a08401611a7c565b60a082015260c083015160c0820152611d1c60e08401611a9c565b60e0820152610100611d2f818501611a9c565b90820152610120611d41848201611a7c565b90820152610140611d53848201611a7c565b90820152610160838101519082015261018080840151908201526101a0611d7b818501611a87565b908201526101c0611d8d848201611a87565b908201526101e0611d9f848201611a87565b90820152610200611db1848201611a87565b90820152610220611dc3848201611a58565b90820152610240611dd5848201611a58565b90820152610260611de7848201611c8a565b908201529392505050565b600060208284031215611e0457600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611e3457611e34611e0b565b500190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611e6157600080fd5b8135611226816114d7565b600060208284031215611e7e57600080fd5b61122682611a58565b60028110611ea557634e487b7160e01b600052602160045260246000fd5b9052565b60008151808452611ec1816020860160208601611992565b601f01601f19169290920160200192915050565b60c08152611ee860c08201875115159052565b60006020870151611efd60e084018215159052565b506040870151610100611f1281850183611e87565b60608901519150610120611f30818601846001600160a01b03169052565b60808a01519250610140838187015260a08b01519350610160848188015260c08c01519450610180611f6c818901876001600160a01b03169052565b60e08d015195506101a086818a0152858e015196506101c0955086868a0152848e015196506101e09450611fa8858a018864ffffffffff169052565b928d0151955061020092611fc48985018864ffffffffff169052565b918d0151955061022091611fe2898401886001600160801b03169052565b908d0151955061024090612000898301886001600160a01b03169052565b8d0151955061026061201c898201886001600160a01b03169052565b948d015161028089810191909152938d01516102a0808a0191909152928d01516102c0808a0191909152828e01516001600160a01b03166102e08a0152818e01516103008a018290529650939492939261207a6103808a0188611ea9565b9650808e0151935050505061209561032087018260ff169052565b5090890151610340850152979097015161036083015250602080820195909552604081019390935260608301919091526001600160a01b0316608082015280830360a090910152600082520190565b6000828210156120f6576120f6611e0b565b500390565b6000825161210d818460208701611992565b9190910192915050565b6020815260006112266020830184611ea956fea2646970667358221220dd52b43a81f33dc986b864c915b08766acd79626ef4ca4b6c3eecbf8f1b450c064736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063920f5c841161005b578063920f5c8414610152578063a03e4bc314610165578063bc197c811461016d578063f23a6e611461018c57600080fd5b806301ffc9a71461008d57806311ea536e146100b5578063150b7a02146100f457806329c55f061461012b575b600080fd5b6100a061009b3660046114ad565b6101ab565b60405190151581526020015b60405180910390f35b6100dc7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100ac565b6101126101023660046115fe565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016100ac565b6100dc7f000000000000000000000000000000000000000000000000000000000000000081565b6100a06101603660046116b4565b6101e2565b6100dc611013565b61011261017b36600461182c565b63bc197c8160e01b95945050505050565b61011261019a3660046118d9565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b14806101dc57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006001891480156101f45750600187145b80156102005750600185145b6102655760405162461bcd60e51b815260206004820152602b60248201527f424d5f464c4153485f4c4f414e5f4d554c5449504c455f4153534554535f4e4f60448201526a1517d4d5541413d495115160aa1b60648201526084015b60405180910390fd5b3361026e611013565b6001600160a01b0316146102c45760405162461bcd60e51b815260206004820152601c60248201527f424d5f464c4153485f4c4f414e5f494e56414c49445f43414c4c455200000000604482015260640161025c565b6102cc61138e565b6102d883850185611941565b6001600160a01b031660a083015260e08201819052805161030191602091810182019101611a0b565b61010085018190526080850191909152606084019190915290825280516103319190810160209081019101611ac4565b81610120018190525060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663956236416040518163ffffffff1660e01b8152600401602060405180830381865afa15801561039a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103be9190611c6d565b825160405163622fe39f60e01b81526001600160a01b03929092169163622fe39f916103f09160040190815260200190565b61028060405180830381865afa15801561040e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104329190611c99565b905081610120015161018001516001600160a01b03168161012001516001600160a01b0316146104a45760405162461bcd60e51b815260206004820181905260248201527f424d5f464c4153485f4c4f414e5f43555252454e43595f4e4f545f4d41544348604482015260640161025c565b816101200151606001516001600160a01b031681600001516001600160a01b03161461051c5760405162461bcd60e51b815260206004820152602160248201527f424d5f464c4153485f4c4f414e5f544f4b454e5f414444524553535f4d4154436044820152600960fb1b606482015260840161025c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb322a836040518163ffffffff1660e01b8152600401602060405180830381865afa15801561057a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059e9190611c6d565b60a08301518351604051632142170760e11b81526001600160a01b03928316600482015230602482015260448101919091529116906342842e0e90606401600060405180830381600087803b1580156105f657600080fd5b505af115801561060a573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663956236416040518163ffffffff1660e01b8152600401602060405180830381865afa15801561066c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106909190611c6d565b8251604051636b52b36560e01b81526001600160a01b039290921691636b52b365916106c29160040190815260200190565b602060405180830381865afa1580156106df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107039190611df2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663956236416040518163ffffffff1660e01b8152600401602060405180830381865afa158015610761573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107859190611c6d565b8351604051634b72cb4160e11b81526001600160a01b0392909216916396e59682916107b79160040190815260200190565b602060405180830381865afa1580156107d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f89190611df2565b6108029190611e21565b6020830152898960008161081857610818611e39565b90506020020135826020015111156108815760405162461bcd60e51b815260206004820152602660248201527f42505f464c4153485f4c4f414e5f524543454956455f4d4f4e45595f4e4f545f60448201526508a9c9eaa8e960d31b606482015260840161025c565b8b8b600081811061089457610894611e39565b90506020020160208101906108a99190611e4f565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663956236416040518163ffffffff1660e01b8152600401602060405180830381865afa158015610915573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109399190611c6d565b60208501516040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610989573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ad9190611e6c565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663956236416040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a309190611c6d565b8251604051631b8fec7360e11b81526001600160a01b03929092169163371fd8e691610a629160040190815260200190565b600060405180830381600087803b158015610a7c57600080fd5b505af1158015610a90573d6000803e3d6000fd5b505082516040516398460c5f60e01b81526001600160a01b0391821660048201819052935063095ea7b392507f0000000000000000000000000000000000000000000000000000000000000000909116906398460c5f90602401602060405180830381865afa158015610b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2b9190611c6d565b60208401516040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610b7657600080fd5b505af1158015610b8a573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663956236416040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c109190611c6d565b6001600160a01b031663a2b8fe87836101200151836020015185606001518660800151306040518663ffffffff1660e01b8152600401610c54959493929190611ed5565b6020604051808303816000875af1158015610c73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c979190611df2565b6101408301528787600081610cae57610cae611e39565b905060200201358260200151610cc49190611e21565b60c0830181905260608301511115610d2f57610d2a8260a001518360c001518460600151610cf291906120e4565b8e8e6000818110610d0557610d05611e39565b9050602002016020810190610d1a9190611e4f565b6001600160a01b0316919061109c565b610d95565b8160c0015182606001511015610d9557610d958260a001513084606001518560c00151610d5c91906120e4565b8f8f6000818110610d6f57610d6f611e39565b9050602002016020810190610d849190611e4f565b6001600160a01b0316929190611104565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb322a836040518163ffffffff1660e01b8152600401602060405180830381865afa158015610df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e179190611c6d565b60a0830151610140840151604051632142170760e11b81523060048201526001600160a01b03928316602482015260448101919091529116906342842e0e90606401600060405180830381600087803b158015610e7357600080fd5b505af1158015610e87573d6000803e3d6000fd5b505050508b8b6000818110610e9e57610e9e611e39565b9050602002016020810190610eb39190611e4f565b6001600160a01b031663095ea7b3610ec9611013565b8a8a6000818110610edc57610edc611e39565b905060200201358d8d6000818110610ef657610ef6611e39565b90506020020135610f079190611e21565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610f52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f769190611e6c565b508160a001516001600160a01b03168c8c6000818110610f9857610f98611e39565b9050602002016020810190610fad9190611e4f565b6001600160a01b03167f537ec0d414de558d408ed2e0cb05ceee24cd9fc300600b10bf70398497d481088460000151856101400151604051610ff9929190918252602082015260400190565b60405180910390a35060019b9a5050505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630261bf8b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611073573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110979190611c6d565b905090565b6040516001600160a01b0383166024820152604481018290526110ff90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611142565b505050565b6040516001600160a01b038085166024830152831660448201526064810182905261113c9085906323b872dd60e01b906084016110c8565b50505050565b6000611197826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112149092919063ffffffff16565b8051909150156110ff57808060200190518101906111b59190611e6c565b6110ff5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161025c565b6060611223848460008561122d565b90505b9392505050565b60608247101561128e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161025c565b843b6112dc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161025c565b600080866001600160a01b031685876040516112f891906120fb565b60006040518083038185875af1925050503d8060008114611335576040519150601f19603f3d011682016040523d82523d6000602084013e61133a565b606091505b509150915061134a828286611355565b979650505050505050565b60608315611364575081611226565b8251156113745782518084602001fd5b8160405162461bcd60e51b815260040161025c9190612117565b604051806101600160405280600081526020016000815260200160006001600160a01b03168152602001600081526020016000815260200160006001600160a01b031681526020016000815260200160608152602001606081526020016114a0604080516102c081018252600080825260208201819052909182019081526000602082018190526040820181905260608083018290526080830182905260a0830182905260c0830182905260e08301829052610100830182905261012083018290526101408301829052610160830182905261018083018290526101a083018290526101c083018290526101e08301829052610200830152610220820181905261024082018190526102609091015290565b8152602001600081525090565b6000602082840312156114bf57600080fd5b81356001600160e01b03198116811461122657600080fd5b6001600160a01b03811681146114ec57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b6040516102c081016001600160401b0381118282101715611528576115286114ef565b60405290565b60405161028081016001600160401b0381118282101715611528576115286114ef565b604051601f8201601f191681016001600160401b0381118282101715611579576115796114ef565b604052919050565b60006001600160401b0382111561159a5761159a6114ef565b50601f01601f191660200190565b600082601f8301126115b957600080fd5b81356115cc6115c782611581565b611551565b8181528460208386010111156115e157600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561161457600080fd5b843561161f816114d7565b9350602085013561162f816114d7565b92506040850135915060608501356001600160401b0381111561165157600080fd5b61165d878288016115a8565b91505092959194509250565b60008083601f84011261167b57600080fd5b5081356001600160401b0381111561169257600080fd5b6020830191508360208260051b85010111156116ad57600080fd5b9250929050565b600080600080600080600080600060a08a8c0312156116d257600080fd5b89356001600160401b03808211156116e957600080fd5b6116f58d838e01611669565b909b50995060208c013591508082111561170e57600080fd5b61171a8d838e01611669565b909950975060408c013591508082111561173357600080fd5b61173f8d838e01611669565b909750955060608c01359150611754826114d7565b90935060808b0135908082111561176a57600080fd5b818c0191508c601f83011261177e57600080fd5b81358181111561178d57600080fd5b8d602082850101111561179f57600080fd5b6020830194508093505050509295985092959850929598565b600082601f8301126117c957600080fd5b813560206001600160401b038211156117e4576117e46114ef565b8160051b6117f3828201611551565b928352848101820192828101908785111561180d57600080fd5b83870192505b8483101561134a57823582529183019190830190611813565b600080600080600060a0868803121561184457600080fd5b853561184f816114d7565b9450602086013561185f816114d7565b935060408601356001600160401b038082111561187b57600080fd5b61188789838a016117b8565b9450606088013591508082111561189d57600080fd5b6118a989838a016117b8565b935060808801359150808211156118bf57600080fd5b506118cc888289016115a8565b9150509295509295909350565b600080600080600060a086880312156118f157600080fd5b85356118fc816114d7565b9450602086013561190c816114d7565b9350604086013592506060860135915060808601356001600160401b0381111561193557600080fd5b6118cc888289016115a8565b6000806040838503121561195457600080fd5b82356001600160401b0381111561196a57600080fd5b611976858286016115a8565b9250506020830135611987816114d7565b809150509250929050565b60005b838110156119ad578181015183820152602001611995565b8381111561113c5750506000910152565b600082601f8301126119cf57600080fd5b81516119dd6115c782611581565b8181528460208386010111156119f257600080fd5b611a03826020830160208701611992565b949350505050565b60008060008060808587031215611a2157600080fd5b84519350602085015192506040850151915060608501516001600160401b03811115611a4c57600080fd5b61165d878288016119be565b80518015158114611a6857600080fd5b919050565b805160028110611a6857600080fd5b8051611a68816114d7565b805164ffffffffff81168114611a6857600080fd5b80516001600160801b0381168114611a6857600080fd5b805160ff81168114611a6857600080fd5b600060208284031215611ad657600080fd5b81516001600160401b0380821115611aed57600080fd5b908301906102c08286031215611b0257600080fd5b611b0a611505565b611b1383611a58565b8152611b2160208401611a58565b6020820152611b3260408401611a6d565b6040820152611b4360608401611a7c565b60608201526080830151608082015260a083015160a0820152611b6860c08401611a7c565b60c082015260e083015160e0820152610100808401518183015250610120611b91818501611a87565b90820152610140611ba3848201611a87565b90820152610160611bb5848201611a9c565b90820152610180611bc7848201611a7c565b908201526101a0611bd9848201611a7c565b908201526101c083810151908201526101e080840151908201526102008084015190820152610220611c0c818501611a7c565b908201526102408381015183811115611c2457600080fd5b611c30888287016119be565b8284015250506102609150611c46828401611ab3565b9181019190915261028082810151908201526102a091820151918101919091529392505050565b600060208284031215611c7f57600080fd5b8151611226816114d7565b805160048110611a6857600080fd5b60006102808284031215611cac57600080fd5b611cb461152e565b611cbd83611a7c565b81526020830151602082015260408301516040820152611cdf60608401611a7c565b6060820152611cf060808401611a7c565b6080820152611d0160a08401611a7c565b60a082015260c083015160c0820152611d1c60e08401611a9c565b60e0820152610100611d2f818501611a9c565b90820152610120611d41848201611a7c565b90820152610140611d53848201611a7c565b90820152610160838101519082015261018080840151908201526101a0611d7b818501611a87565b908201526101c0611d8d848201611a87565b908201526101e0611d9f848201611a87565b90820152610200611db1848201611a87565b90820152610220611dc3848201611a58565b90820152610240611dd5848201611a58565b90820152610260611de7848201611c8a565b908201529392505050565b600060208284031215611e0457600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611e3457611e34611e0b565b500190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611e6157600080fd5b8135611226816114d7565b600060208284031215611e7e57600080fd5b61122682611a58565b60028110611ea557634e487b7160e01b600052602160045260246000fd5b9052565b60008151808452611ec1816020860160208601611992565b601f01601f19169290920160200192915050565b60c08152611ee860c08201875115159052565b60006020870151611efd60e084018215159052565b506040870151610100611f1281850183611e87565b60608901519150610120611f30818601846001600160a01b03169052565b60808a01519250610140838187015260a08b01519350610160848188015260c08c01519450610180611f6c818901876001600160a01b03169052565b60e08d015195506101a086818a0152858e015196506101c0955086868a0152848e015196506101e09450611fa8858a018864ffffffffff169052565b928d0151955061020092611fc48985018864ffffffffff169052565b918d0151955061022091611fe2898401886001600160801b03169052565b908d0151955061024090612000898301886001600160a01b03169052565b8d0151955061026061201c898201886001600160a01b03169052565b948d015161028089810191909152938d01516102a0808a0191909152928d01516102c0808a0191909152828e01516001600160a01b03166102e08a0152818e01516103008a018290529650939492939261207a6103808a0188611ea9565b9650808e0151935050505061209561032087018260ff169052565b5090890151610340850152979097015161036083015250602080820195909552604081019390935260608301919091526001600160a01b0316608082015280830360a090910152600082520190565b6000828210156120f6576120f6611e0b565b500390565b6000825161210d818460208701611992565b9190910192915050565b6020815260006112266020830184611ea956fea2646970667358221220dd52b43a81f33dc986b864c915b08766acd79626ef4ca4b6c3eecbf8f1b450c064736f6c634300080a0033",
  "libraries": {
    "BespokeTypes": "0x057AEc26BA4EdD466A8A61A08804eA931BBD8C58"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}