{
  "address": "0xCEe3355f5478D1b102aefeD9Fd8cF81560F87607",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "SETTINGS_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "BESPOKE_SETTINGS_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "WETH_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "CancelAllOffers",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "nonces",
          "type": "uint256[]"
        }
      ],
      "name": "CancelMultipleOffers",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ClaimERC1155Airdrop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimERC20Airdrop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "ClaimERC721Airdrop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "FlashClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "Foreclose",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "RepayETH",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "offerHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "TakeBorrowOffer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "offerHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "TakeBorrowOfferETH",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "BESPOKE_SETTINGS",
      "outputs": [
        {
          "internalType": "contract IOpenSkyBespokeSettings",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTERFACE_ID_ERC1155",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTERFACE_ID_ERC721",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SETTINGS",
      "outputs": [
        {
          "internalType": "contract IOpenSkySettings",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minNonce_",
          "type": "uint256"
        }
      ],
      "name": "cancelAllBorrowOffersForSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "offerNonces",
          "type": "uint256[]"
        }
      ],
      "name": "cancelMultipleBorrowOffers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "claimERC1155Airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimERC20Airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "claimERC721Airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyTokenTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiverAddress",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "loanIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "flashClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "foreclose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "getBorrowBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "getBorrowInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "getLoanData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "reserveId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "borrowRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "interestPerSecond",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint40",
              "name": "borrowDuration",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowBegin",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowOverdueTime",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "liquidatableTime",
              "type": "uint40"
            },
            {
              "internalType": "address",
              "name": "lender",
              "type": "address"
            },
            {
              "internalType": "enum BespokeTypes.LoanStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct BespokeTypes.LoanData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "getPenalty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "getStatus",
      "outputs": [
        {
          "internalType": "enum BespokeTypes.LoanStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "isValidNonce",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nftBorrowStat",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "repayETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "reserveId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "borrowAmountMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowAmountMax",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "borrowDurationMin",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowDurationMax",
              "type": "uint40"
            },
            {
              "internalType": "uint128",
              "name": "borrowRate",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BespokeTypes.BorrowOffer",
          "name": "offerData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "supplyAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supplyDuration",
          "type": "uint256"
        }
      ],
      "name": "takeBorrowOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "reserveId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "borrowAmountMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowAmountMax",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "borrowDurationMin",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "borrowDurationMax",
              "type": "uint40"
            },
            {
              "internalType": "uint128",
              "name": "borrowRate",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BespokeTypes.BorrowOffer",
          "name": "offerData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "supplyAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supplyDuration",
          "type": "uint256"
        }
      ],
      "name": "takeBorrowOfferETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8e130433a8f7a6e945037aba893e676fbd2de3e94eda49889bccedc4a62e0bc1",
  "receipt": {
    "to": null,
    "from": "0x1a347f2aac8758E139C7401aEC878aD174C19c8a",
    "contractAddress": "0xCEe3355f5478D1b102aefeD9Fd8cF81560F87607",
    "transactionIndex": 69,
    "gasUsed": "5324045",
    "logsBloom": "0x
    "blockHash": "0x18abe39fa74d88835a8ebd368a49af65fd1077e35bb71932a08dba2e7251f705",
    "transactionHash": "0x8e130433a8f7a6e945037aba893e676fbd2de3e94eda49889bccedc4a62e0bc1",
    "logs": [
      {
        "transactionIndex": 69,
        "blockNumber": 15223886,
        "transactionHash": "0x8e130433a8f7a6e945037aba893e676fbd2de3e94eda49889bccedc4a62e0bc1",
        "address": "0xCEe3355f5478D1b102aefeD9Fd8cF81560F87607",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001a347f2aac8758e139c7401aec878ad174c19c8a"
        ],
        "data": "0x",
        "logIndex": 133,
        "blockHash": "0x18abe39fa74d88835a8ebd368a49af65fd1077e35bb71932a08dba2e7251f705"
      }
    ],
    "blockNumber": 15223886,
    "cumulativeGasUsed": "11399709",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x72A780B33915D6D229E7b31A729AE42963A57c73",
    "0x453359aCa6D52A3A104A65741F80918f96aD81D4",
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
  ],
  "solcInputHash": "0ca3f66e9bd5de21ebb7765f6cea382a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"SETTINGS_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"BESPOKE_SETTINGS_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"WETH_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"CancelAllOffers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nonces\",\"type\":\"uint256[]\"}],\"name\":\"CancelMultipleOffers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ClaimERC1155Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimERC20Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"ClaimERC721Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"FlashClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"Foreclose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"RepayETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"offerHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"TakeBorrowOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"offerHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"TakeBorrowOfferETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"BESPOKE_SETTINGS\",\"outputs\":[{\"internalType\":\"contract IOpenSkyBespokeSettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTERFACE_ID_ERC1155\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTERFACE_ID_ERC721\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SETTINGS\",\"outputs\":[{\"internalType\":\"contract IOpenSkySettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minNonce_\",\"type\":\"uint256\"}],\"name\":\"cancelAllBorrowOffersForSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"offerNonces\",\"type\":\"uint256[]\"}],\"name\":\"cancelMultipleBorrowOffers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"claimERC1155Airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimERC20Airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"claimERC721Airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"loanIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"flashClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"foreclose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getBorrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getBorrowInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"borrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"interestPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"borrowDuration\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowBegin\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowOverdueTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"liquidatableTime\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"enum BespokeTypes.LoanStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct BespokeTypes.LoanData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum BespokeTypes.LoanStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"isValidNonce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftBorrowStat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"repayETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountMax\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"borrowDurationMin\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowDurationMax\",\"type\":\"uint40\"},{\"internalType\":\"uint128\",\"name\":\"borrowRate\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct BespokeTypes.BorrowOffer\",\"name\":\"offerData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"supplyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyDuration\",\"type\":\"uint256\"}],\"name\":\"takeBorrowOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountMax\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"borrowDurationMin\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"borrowDurationMax\",\"type\":\"uint40\"},{\"internalType\":\"uint128\",\"name\":\"borrowRate\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct BespokeTypes.BorrowOffer\",\"name\":\"offerData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"supplyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyDuration\",\"type\":\"uint256\"}],\"name\":\"takeBorrowOfferETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"cancelAllBorrowOffersForSender(uint256)\":{\"params\":{\"minNonce_\":\"minimum user nonce\"}},\"cancelMultipleBorrowOffers(uint256[])\":{\"params\":{\"offerNonces\":\"array of borrowOffer nonces\"}},\"claimERC1155Airdrop(address,address,uint256[],uint256[],bytes)\":{\"params\":{\"amounts\":\"The amount of the ERC1155 tokens\",\"data\":\"packed params to pass to the receiver as extra information*\",\"ids\":\"The ID of the ERC1155 token\",\"to\":\"The address which will receive the ERC1155 tokens\",\"token\":\"The address of the airdropped token\"}},\"claimERC20Airdrop(address,address,uint256)\":{\"params\":{\"amount\":\"The amount of the ERC20 token*\",\"to\":\"The address which will receive ERC20 token\",\"token\":\"The address of the airdropped token\"}},\"claimERC721Airdrop(address,address,uint256[])\":{\"params\":{\"ids\":\"The ID of the ERC721 token*\",\"to\":\"The address which will receive the ERC721 token\",\"token\":\"The address of the airdropped token\"}},\"emergencyTokenTransfer(address,address,uint256)\":{\"details\":\"transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\",\"params\":{\"amount\":\"amount to send\",\"to\":\"recipient of the transfer\",\"token\":\"token to transfer\"}},\"flashClaim(address,uint256[],bytes)\":{\"details\":\"IMPORTANT There are security concerns for developers of flash loan receiver contracts that must be carefully considered\",\"params\":{\"loanIds\":\"The ID of loan being flash-borrowed\",\"params\":\"packed params to pass to the receiver as extra information*\",\"receiverAddress\":\"The address of the contract receiving the funds, implementing IFlashClaimReceiver interface\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pause pool for emergency case, can only be called by emergency admin.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpause pool for emergency case, can only be called by emergency admin.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelAllBorrowOffersForSender(uint256)\":{\"notice\":\"Cancel all pending offers for a sender\"},\"claimERC1155Airdrop(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Claim the ERC1155 token which has been airdropped to the loan contract\"},\"claimERC20Airdrop(address,address,uint256)\":{\"notice\":\"Claim the ERC20 token which has been airdropped to the loan contract\"},\"claimERC721Airdrop(address,address,uint256[])\":{\"notice\":\"Claim the ERC721 token which has been airdropped to the loan contract\"},\"flashClaim(address,uint256[],bytes)\":{\"notice\":\"Allows smart contracts to access the collateralized NFT within one transaction, as long as the amount taken plus a fee is returned\"},\"foreclose(uint256)\":{\"notice\":\"anyone can trigger but only OpenSkyLendNFT owner can receive collateral\"},\"repay(uint256)\":{\"notice\":\"Only OpenSkyBorrowNFT owner can repayOnly OpenSkyLendNFT owner can recieve the paymentThis function is not pausable for safety\"},\"repayETH(uint256)\":{\"notice\":\"Only OpenSkyBorrowNFT owner can repayOnly OpenSkyLendNFT owner can recieve the paymentThis function is not pausable for safety\"},\"takeBorrowOffer((uint256,address,uint256,uint256,address,uint256,uint256,uint40,uint40,uint128,address,uint256,uint256,uint8,bytes32,bytes32),uint256,uint256)\":{\"notice\":\"take an borrowing offer using ERC20 include WETH\"},\"takeBorrowOfferETH((uint256,address,uint256,uint256,address,uint256,uint256,uint40,uint40,uint128,address,uint256,uint256,uint8,bytes32,bytes32),uint256,uint256)\":{\"notice\":\"Take a borrow offer. Only for WETH reserve.Consider using taker's oWETH balance first, then ETH if oWETH is not enoughBorrower will receive WETH\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bespokemarket/OpenSkyBespokeMarket.sol\":\"OpenSkyBespokeMarket\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x14351164423eade7f2dbac5ca9ab8aeded8694f3b2d7a9e0114a2b3b6558198d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x4716e860c041e651d2f2486399ea5a49ec12289e91b2763991a2fa3a70772acf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x8c578d9e30c8f2bb7ac01d108766df87d42b73d4d3638f01d494a894fe7c1f4b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x8756c97d6004b1ae21517a013bdec72fbf30be7852afb2f395871d280131b250\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/bespokemarket/OpenSkyBespokeMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol';\\n\\nimport '../dependencies/weth/IWETH.sol';\\nimport '../libraries/math/PercentageMath.sol';\\nimport '../libraries/math/WadRayMath.sol';\\nimport '../libraries/math/MathUtils.sol';\\n\\nimport './libraries/BespokeTypes.sol';\\nimport './libraries/BespokeLogic.sol';\\n\\nimport '../interfaces/IOpenSkySettings.sol';\\nimport '../interfaces/IOpenSkyPool.sol';\\nimport '../interfaces/IACLManager.sol';\\nimport '../interfaces/IOpenSkyFlashClaimReceiver.sol';\\n\\nimport './interfaces/IOpenSkyBespokeLoanNFT.sol';\\nimport './interfaces/IOpenSkyBespokeMarket.sol';\\nimport './interfaces/IOpenSkyBespokeSettings.sol';\\n\\ncontract OpenSkyBespokeMarket is\\n    Context,\\n    Ownable,\\n    Pausable,\\n    ReentrancyGuard,\\n    ERC721Holder,\\n    ERC1155Holder,\\n    IOpenSkyBespokeMarket\\n{\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using PercentageMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    IOpenSkySettings public immutable SETTINGS;\\n    IOpenSkyBespokeSettings public immutable BESPOKE_SETTINGS;\\n    IWETH public immutable WETH;\\n\\n    // ERC721 interfaceID\\n    bytes4 public constant INTERFACE_ID_ERC721 = 0x80ac58cd;\\n    // ERC1155 interfaceID\\n    bytes4 public constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    mapping(address => uint256) public minNonce;\\n    mapping(address => mapping(uint256 => bool)) private _nonce;\\n\\n    uint256 private _loanIdTracker;\\n    mapping(uint256 => BespokeTypes.LoanData) internal _loans;\\n\\n    // nft address=> amount\\n    // tracking how many loans are ongoing for an nft\\n    mapping(address => uint256) public nftBorrowStat;\\n\\n    constructor(\\n        address SETTINGS_,\\n        address BESPOKE_SETTINGS_,\\n        address WETH_\\n    ) Pausable() ReentrancyGuard() {\\n        SETTINGS = IOpenSkySettings(SETTINGS_);\\n        BESPOKE_SETTINGS = IOpenSkyBespokeSettings(BESPOKE_SETTINGS_);\\n        WETH = IWETH(WETH_);\\n    }\\n\\n    /// @dev Only emergency admin can call functions marked by this modifier.\\n    modifier onlyEmergencyAdmin() {\\n        IACLManager ACLManager = IACLManager(SETTINGS.ACLManagerAddress());\\n        require(ACLManager.isEmergencyAdmin(_msgSender()), 'BM_ACL_ONLY_EMERGENCY_ADMIN_CAN_CALL');\\n        _;\\n    }\\n\\n    modifier onlyAirdropOperator() {\\n        IACLManager ACLManager = IACLManager(SETTINGS.ACLManagerAddress());\\n        require(ACLManager.isAirdropOperator(_msgSender()), 'BM_ACL_ONLY_AIRDROP_OPERATOR_CAN_CALL');\\n        _;\\n    }\\n\\n    modifier checkLoanExists(uint256 loanId) {\\n        require(_loans[loanId].reserveId > 0, 'BM_CHECK_LOAN_NOT_EXISTS');\\n        _;\\n    }\\n\\n    /// @dev Pause pool for emergency case, can only be called by emergency admin.\\n    function pause() external onlyEmergencyAdmin {\\n        _pause();\\n    }\\n\\n    /// @dev Unpause pool for emergency case, can only be called by emergency admin.\\n    function unpause() external onlyEmergencyAdmin {\\n        _unpause();\\n    }\\n\\n    /// @notice Cancel all pending offers for a sender\\n    /// @param minNonce_ minimum user nonce\\n    function cancelAllBorrowOffersForSender(uint256 minNonce_) external {\\n        require(minNonce_ > minNonce[msg.sender], 'BM_CANCEL_NONCE_LOWER_THAN_CURRENT');\\n        require(minNonce_ < minNonce[msg.sender] + 500000, 'BM_CANCEL_CANNOT_CANCEL_MORE');\\n        minNonce[msg.sender] = minNonce_;\\n\\n        emit CancelAllOffers(msg.sender, minNonce_);\\n    }\\n\\n    /// @param offerNonces array of borrowOffer nonces\\n    function cancelMultipleBorrowOffers(uint256[] calldata offerNonces) external {\\n        require(offerNonces.length > 0, 'BM_CANCEL_CANNOT_BE_EMPTY');\\n\\n        for (uint256 i = 0; i < offerNonces.length; i++) {\\n            require(offerNonces[i] >= minNonce[msg.sender], 'BM_CANCEL_NONCE_LOWER_THAN_CURRENT');\\n            _nonce[msg.sender][offerNonces[i]] = true;\\n        }\\n\\n        emit CancelMultipleOffers(msg.sender, offerNonces);\\n    }\\n\\n    function isValidNonce(address account, uint256 nonce) external view returns (bool) {\\n        return !_nonce[account][nonce] && nonce >= minNonce[account];\\n    }\\n\\n    /// @notice take an borrowing offer using ERC20 include WETH\\n    function takeBorrowOffer(\\n        BespokeTypes.BorrowOffer memory offerData,\\n        uint256 supplyAmount,\\n        uint256 supplyDuration\\n    ) public override whenNotPaused nonReentrant {\\n        bytes32 offerHash = BespokeLogic.hashBorrowOffer(offerData);\\n\\n        BespokeLogic.validateTakeBorrowOffer(\\n            _nonce,\\n            minNonce,\\n            offerData,\\n            offerHash,\\n            address(0),\\n            supplyAmount,\\n            supplyDuration,\\n            _getDomainSeparator(),\\n            BESPOKE_SETTINGS,\\n            SETTINGS\\n        );\\n\\n        // prevents replay\\n        _nonce[offerData.borrower][offerData.nonce] = true;\\n\\n        // transfer NFT\\n        _transferNFT(offerData.nftAddress, offerData.borrower, address(this), offerData.tokenId, offerData.tokenAmount);\\n\\n        // oToken balance\\n        DataTypes.ReserveData memory reserve = IOpenSkyPool(SETTINGS.poolAddress()).getReserveData(offerData.reserveId);\\n        (uint256 oTokenToUse, uint256 inputAmount) = _calculateTokenToUse(\\n            offerData.reserveId,\\n            reserve.oTokenAddress,\\n            _msgSender(),\\n            supplyAmount\\n        );\\n\\n        if (oTokenToUse > 0) {\\n            // transfer oToken from lender\\n            address oTokenAddress = IOpenSkyPool(SETTINGS.poolAddress())\\n                .getReserveData(offerData.reserveId)\\n                .oTokenAddress;\\n            IERC20(oTokenAddress).safeTransferFrom(_msgSender(), address(this), oTokenToUse);\\n\\n            // withdraw underlying to borrower\\n            IOpenSkyPool(SETTINGS.poolAddress()).withdraw(offerData.reserveId, oTokenToUse, offerData.borrower);\\n        }\\n\\n        if (inputAmount > 0) {\\n            IERC20(reserve.underlyingAsset).safeTransferFrom(_msgSender(), offerData.borrower, inputAmount);\\n        }\\n\\n        uint256 loanId = _mintLoanNFT(offerData.borrower, _msgSender(), offerData.nftAddress);\\n        BespokeLogic.createLoan(_loans, offerData, loanId, supplyAmount, supplyDuration, BESPOKE_SETTINGS);\\n\\n        emit TakeBorrowOffer(offerHash, loanId, _msgSender(), offerData.borrower, offerData.nonce);\\n    }\\n\\n    /// @notice Take a borrow offer. Only for WETH reserve.\\n    /// @notice Consider using taker's oWETH balance first, then ETH if oWETH is not enough\\n    /// @notice Borrower will receive WETH\\n    function takeBorrowOfferETH(\\n        BespokeTypes.BorrowOffer memory offerData,\\n        uint256 supplyAmount,\\n        uint256 supplyDuration\\n    ) public payable override whenNotPaused nonReentrant {\\n        bytes32 offerHash = BespokeLogic.hashBorrowOffer(offerData);\\n\\n        BespokeLogic.validateTakeBorrowOffer(\\n            _nonce,\\n            minNonce,\\n            offerData,\\n            offerHash,\\n            address(WETH),\\n            supplyAmount,\\n            supplyDuration,\\n            _getDomainSeparator(),\\n            BESPOKE_SETTINGS,\\n            SETTINGS\\n        );\\n\\n        // prevents replay\\n        _nonce[offerData.borrower][offerData.nonce] = true;\\n\\n        // transfer NFT\\n        _transferNFT(offerData.nftAddress, offerData.borrower, address(this), offerData.tokenId, offerData.tokenAmount);\\n\\n        // oWeth balance\\n        address oTokenAddress = IOpenSkyPool(SETTINGS.poolAddress()).getReserveData(offerData.reserveId).oTokenAddress;\\n        (uint256 oTokenToUse, uint256 inputETH) = _calculateTokenToUse(\\n            offerData.reserveId,\\n            oTokenAddress,\\n            _msgSender(),\\n            supplyAmount\\n        );\\n\\n        if (oTokenToUse > 0) {\\n            IERC20(oTokenAddress).safeTransferFrom(_msgSender(), address(this), oTokenToUse);\\n            // oWETH => WETH\\n            IOpenSkyPool(SETTINGS.poolAddress()).withdraw(offerData.reserveId, oTokenToUse, address(this));\\n        }\\n        if (inputETH > 0) {\\n            require(msg.value >= inputETH, 'BM_TAKE_BORROW_OFFER_ETH_INPUT_NOT_ENOUGH');\\n            // convert to WETH\\n            WETH.deposit{value: inputETH}();\\n        }\\n\\n        // transfer WETH to borrower\\n        require(WETH.balanceOf(address(this)) >= supplyAmount, 'BM_TAKE_BORROW_OFFER_ETH_BALANCE_NOT_ENOUGH');\\n        WETH.transferFrom(address(this), offerData.borrower, supplyAmount);\\n\\n        uint256 loanId = _mintLoanNFT(offerData.borrower, _msgSender(), offerData.nftAddress);\\n        BespokeLogic.createLoan(_loans, offerData, loanId, supplyAmount, supplyDuration, BESPOKE_SETTINGS);\\n\\n        // refund remaining dust eth\\n        if (msg.value > inputETH) {\\n            uint256 refundAmount = msg.value - inputETH;\\n            _safeTransferETH(msg.sender, refundAmount);\\n        }\\n\\n        emit TakeBorrowOfferETH(offerHash, loanId, _msgSender(), offerData.borrower, offerData.nonce);\\n    }\\n\\n    /// @notice Only OpenSkyBorrowNFT owner can repay\\n    /// @notice Only OpenSkyLendNFT owner can recieve the payment\\n    /// @notice This function is not pausable for safety\\n    function repay(uint256 loanId) public override nonReentrant checkLoanExists(loanId) {\\n        BespokeTypes.LoanData memory loanData = getLoanData(loanId);\\n        require(\\n            loanData.status == BespokeTypes.LoanStatus.BORROWING || loanData.status == BespokeTypes.LoanStatus.OVERDUE,\\n            'BM_REPAY_STATUS_ERROR'\\n        );\\n\\n        (address borrower, address lender) = _getLoanParties(loanId);\\n        require(_msgSender() == borrower, 'BM_REPAY_NOT_BORROW_NFT_OWNER');\\n\\n        (uint256 repayTotal, uint256 lenderAmount, uint256 protocolFee) = _calculateRepayAmountAndProtocolFee(loanId);\\n\\n        // repay oToken to lender\\n        address underlyingAsset = IOpenSkyPool(SETTINGS.poolAddress())\\n            .getReserveData(loanData.reserveId)\\n            .underlyingAsset;\\n        IERC20(underlyingAsset).safeTransferFrom(_msgSender(), address(this), repayTotal);\\n        IERC20(underlyingAsset).approve(SETTINGS.poolAddress(), lenderAmount);\\n        IOpenSkyPool(SETTINGS.poolAddress()).deposit(loanData.reserveId, lenderAmount, lender, 0);\\n\\n        // dao vault\\n        if (protocolFee > 0) IERC20(underlyingAsset).safeTransfer(SETTINGS.daoVaultAddress(), protocolFee);\\n\\n        // transfer nft back to borrower\\n        _transferNFT(loanData.nftAddress, address(this), borrower, loanData.tokenId, loanData.tokenAmount);\\n\\n        _burnLoanNft(loanId, loanData.nftAddress);\\n\\n        emit Repay(loanId, _msgSender());\\n    }\\n\\n    /// @notice Only OpenSkyBorrowNFT owner can repay\\n    /// @notice Only OpenSkyLendNFT owner can recieve the payment\\n    /// @notice This function is not pausable for safety\\n    function repayETH(uint256 loanId) public payable override nonReentrant checkLoanExists(loanId) {\\n        BespokeTypes.LoanData memory loanData = getLoanData(loanId);\\n        address underlyingAsset = IOpenSkyPool(SETTINGS.poolAddress())\\n            .getReserveData(loanData.reserveId)\\n            .underlyingAsset;\\n        require(underlyingAsset == address(WETH), 'BM_REPAY_ETH_ASSET_NOT_MATCH');\\n        require(\\n            loanData.status == BespokeTypes.LoanStatus.BORROWING || loanData.status == BespokeTypes.LoanStatus.OVERDUE,\\n            'BM_REPAY_STATUS_ERROR'\\n        );\\n\\n        (address borrower, address lender) = _getLoanParties(loanId);\\n        require(_msgSender() == borrower, 'BM_REPAY_NOT_BORROW_NFT_OWNER');\\n\\n        (uint256 repayTotal, uint256 lenderAmount, uint256 protocolFee) = _calculateRepayAmountAndProtocolFee(loanId);\\n\\n        require(msg.value >= repayTotal, 'BM_REPAY_ETH_INPUT_NOT_ENOUGH');\\n\\n        // convert to weth\\n        WETH.deposit{value: repayTotal}();\\n\\n        // transfer  to lender\\n        IERC20(underlyingAsset).approve(SETTINGS.poolAddress(), lenderAmount);\\n        IOpenSkyPool(SETTINGS.poolAddress()).deposit(loanData.reserveId, lenderAmount, lender, 0);\\n\\n        // dao vault\\n        if (protocolFee > 0) IERC20(underlyingAsset).safeTransfer(SETTINGS.daoVaultAddress(), protocolFee);\\n\\n        // transfer nft back to borrower\\n        _transferNFT(loanData.nftAddress, address(this), borrower, loanData.tokenId, loanData.tokenAmount);\\n\\n        _burnLoanNft(loanId, loanData.nftAddress);\\n\\n        // refund\\n        if (msg.value > repayTotal) _safeTransferETH(_msgSender(), msg.value - repayTotal);\\n\\n        emit RepayETH(loanId, _msgSender());\\n    }\\n\\n    /// @notice anyone can trigger but only OpenSkyLendNFT owner can receive collateral\\n    function foreclose(uint256 loanId) public override whenNotPaused nonReentrant checkLoanExists(loanId) {\\n        BespokeTypes.LoanData memory loanData = getLoanData(loanId);\\n        require(loanData.status == BespokeTypes.LoanStatus.LIQUIDATABLE, 'BM_FORECLOSE_STATUS_ERROR');\\n\\n        (, address lender) = _getLoanParties(loanId);\\n\\n        _transferNFT(loanData.nftAddress, address(this), lender, loanData.tokenId, loanData.tokenAmount);\\n\\n        _burnLoanNft(loanId, loanData.nftAddress);\\n\\n        emit Foreclose(loanId, _msgSender());\\n    }\\n\\n    function getLoanData(uint256 loanId) public view override returns (BespokeTypes.LoanData memory) {\\n        BespokeTypes.LoanData memory loan = _loans[loanId];\\n        loan.status = getStatus(loanId);\\n        return loan;\\n    }\\n\\n    function getStatus(uint256 loanId) public view override returns (BespokeTypes.LoanStatus) {\\n        BespokeTypes.LoanData memory loan = _loans[loanId];\\n        BespokeTypes.LoanStatus status = _loans[loanId].status;\\n        if (status == BespokeTypes.LoanStatus.BORROWING) {\\n            if (loan.liquidatableTime < block.timestamp) {\\n                status = BespokeTypes.LoanStatus.LIQUIDATABLE;\\n            } else if (loan.borrowOverdueTime < block.timestamp) {\\n                status = BespokeTypes.LoanStatus.OVERDUE;\\n            }\\n        }\\n        return status;\\n    }\\n\\n    function getBorrowInterest(uint256 loanId) public view override returns (uint256) {\\n        BespokeTypes.LoanData memory loan = _loans[loanId];\\n        uint256 endTime = block.timestamp < loan.borrowOverdueTime ? loan.borrowOverdueTime : block.timestamp;\\n        return uint256(loan.interestPerSecond).rayMul(endTime.sub(loan.borrowBegin));\\n    }\\n\\n    // @dev principal + fixed-price interest + extra interest(if overdue)\\n    function getBorrowBalance(uint256 loanId) public view override returns (uint256) {\\n        return _loans[loanId].amount.add(getBorrowInterest(loanId));\\n    }\\n\\n    function getPenalty(uint256 loanId) public view override returns (uint256) {\\n        BespokeTypes.LoanData memory loan = getLoanData(loanId);\\n        uint256 penalty = 0;\\n        if (loan.status == BespokeTypes.LoanStatus.OVERDUE) {\\n            penalty = loan.amount.percentMul(BESPOKE_SETTINGS.overdueLoanFeeFactor());\\n        }\\n        return penalty;\\n    }\\n\\n    function _calculateTokenToUse(\\n        uint256 reserveId,\\n        address oTokenAddress,\\n        address lender,\\n        uint256 supplyAmount\\n    ) internal view returns (uint256 oTokenToUse, uint256 inputAmount) {\\n        uint256 oTokenBalance = IERC20(oTokenAddress).balanceOf(lender);\\n        uint256 availableLiquidity = IOpenSkyPool(SETTINGS.poolAddress()).getAvailableLiquidity(reserveId);\\n        oTokenBalance = availableLiquidity > oTokenBalance ? oTokenBalance : availableLiquidity;\\n        oTokenToUse = oTokenBalance < supplyAmount ? oTokenBalance : supplyAmount;\\n        inputAmount = oTokenBalance < supplyAmount ? supplyAmount.sub(oTokenBalance) : 0;\\n    }\\n\\n    function _calculateRepayAmountAndProtocolFee(uint256 loanId)\\n        internal\\n        view\\n        returns (\\n            uint256 total,\\n            uint256 lenderAmount,\\n            uint256 protocolFee\\n        )\\n    {\\n        uint256 penalty = getPenalty(loanId);\\n        total = getBorrowBalance(loanId).add(penalty);\\n        protocolFee = getBorrowInterest(loanId).add(penalty).percentMul(BESPOKE_SETTINGS.reserveFactor());\\n        lenderAmount = total.sub(protocolFee);\\n    }\\n\\n    function _safeTransferETH(address recipient, uint256 amount) internal {\\n        (bool success, ) = recipient.call{value: amount}('');\\n        require(success, 'BM_ETH_TRANSFER_FAILED');\\n    }\\n\\n    function _mintLoanNFT(\\n        address borrower,\\n        address lender,\\n        address relatedCollateralNft\\n    ) internal returns (uint256) {\\n        _loanIdTracker = _loanIdTracker + 1;\\n        uint256 tokenId = _loanIdTracker;\\n\\n        IOpenSkyBespokeLoanNFT(BESPOKE_SETTINGS.borrowLoanAddress()).mint(tokenId, borrower);\\n        IOpenSkyBespokeLoanNFT(BESPOKE_SETTINGS.lendLoanAddress()).mint(tokenId, lender);\\n\\n        nftBorrowStat[relatedCollateralNft] += 1;\\n        return tokenId;\\n    }\\n\\n    function _burnLoanNft(uint256 tokenId, address relatedCollateralNft) internal {\\n        IOpenSkyBespokeLoanNFT(BESPOKE_SETTINGS.borrowLoanAddress()).burn(tokenId);\\n        IOpenSkyBespokeLoanNFT(BESPOKE_SETTINGS.lendLoanAddress()).burn(tokenId);\\n        nftBorrowStat[relatedCollateralNft] -= 1;\\n        delete _loans[tokenId];\\n    }\\n\\n    function _getLoanParties(uint256 loanId) internal returns (address borrower, address lender) {\\n        lender = IERC721(BESPOKE_SETTINGS.lendLoanAddress()).ownerOf(loanId);\\n        borrower = IERC721(BESPOKE_SETTINGS.borrowLoanAddress()).ownerOf(loanId);\\n    }\\n\\n    //\\n    /// @dev transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due\\n    /// direct transfers to the contract address.\\n    /// @param token token to transfer\\n    /// @param to recipient of the transfer\\n    /// @param amount amount to send\\n    function emergencyTokenTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external onlyEmergencyAdmin {\\n        IERC20(token).safeTransfer(to, amount);\\n    }\\n\\n    /// @inheritdoc IOpenSkyBespokeMarket\\n    function flashClaim(\\n        address receiverAddress,\\n        uint256[] calldata loanIds,\\n        bytes calldata params\\n    ) external override {\\n        uint256 i;\\n        IOpenSkyFlashClaimReceiver receiver = IOpenSkyFlashClaimReceiver(receiverAddress);\\n        // !!!CAUTION: receiver contract may reentry mint, burn, flashClaim again\\n\\n        // only loan owner can do flashClaim\\n        address[] memory nftAddresses = new address[](loanIds.length);\\n        uint256[] memory tokenIds = new uint256[](loanIds.length);\\n        for (i = 0; i < loanIds.length; i++) {\\n            require(\\n                IERC721(BESPOKE_SETTINGS.borrowLoanAddress()).ownerOf(loanIds[i]) == _msgSender(),\\n                'BM_FLASHCLAIM_CALLER_IS_NOT_OWNER'\\n            );\\n            BespokeTypes.LoanData memory loanData = getLoanData(loanIds[i]);\\n            require(loanData.status != BespokeTypes.LoanStatus.LIQUIDATABLE, 'BM_FLASHCLAIM_STATUS_ERROR');\\n            nftAddresses[i] = loanData.nftAddress;\\n            tokenIds[i] = loanData.tokenId;\\n        }\\n\\n        // step 1: moving underlying asset forward to receiver contract\\n        for (i = 0; i < loanIds.length; i++) {\\n            IERC721(nftAddresses[i]).safeTransferFrom(address(this), receiverAddress, tokenIds[i]);\\n        }\\n\\n        // setup 2: execute receiver contract, doing something like aidrop\\n        require(\\n            receiver.executeOperation(nftAddresses, tokenIds, _msgSender(), address(this), params),\\n            'BM_FLASHCLAIM_EXECUTOR_ERROR'\\n        );\\n\\n        // setup 3: moving underlying asset backword from receiver contract\\n        for (i = 0; i < loanIds.length; i++) {\\n            IERC721(nftAddresses[i]).safeTransferFrom(receiverAddress, address(this), tokenIds[i]);\\n            emit FlashClaim(receiverAddress, _msgSender(), nftAddresses[i], tokenIds[i]);\\n        }\\n    }\\n\\n    /// @inheritdoc IOpenSkyBespokeMarket\\n    function claimERC20Airdrop(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external override onlyAirdropOperator {\\n        // make sure that params are checked in admin contract\\n        IERC20(token).safeTransfer(to, amount);\\n        emit ClaimERC20Airdrop(token, to, amount);\\n    }\\n\\n    /// @inheritdoc IOpenSkyBespokeMarket\\n    function claimERC721Airdrop(\\n        address token,\\n        address to,\\n        uint256[] calldata ids\\n    ) external override onlyAirdropOperator {\\n        require(nftBorrowStat[token] == 0, 'BM_CLAIM_ERC721_AIRDROP_NOT_SUPPORTED');\\n        // make sure that params are checked in admin contract\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            IERC721(token).safeTransferFrom(address(this), to, ids[i]);\\n        }\\n        emit ClaimERC721Airdrop(token, to, ids);\\n    }\\n\\n    /// @inheritdoc IOpenSkyBespokeMarket\\n    function claimERC1155Airdrop(\\n        address token,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external override onlyAirdropOperator {\\n        require(nftBorrowStat[token] == 0, 'BM_CLAIM_ERC1155_AIRDROP_NOT_SUPPORTED');\\n        // make sure that params are checked in admin contract\\n        IERC1155(token).safeBatchTransferFrom(address(this), to, ids, amounts, data);\\n        emit ClaimERC1155Airdrop(token, to, ids, amounts, data);\\n    }\\n\\n    function _transferNFT(\\n        address collection,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal {\\n        if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC721)) {\\n            IERC721(collection).safeTransferFrom(from, to, tokenId);\\n        } else if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC1155)) {\\n            IERC1155(collection).safeTransferFrom(from, to, tokenId, amount, '');\\n        } else {\\n            revert('BM_NFT_NOT_SUPPORTED');\\n        }\\n    }\\n\\n    function _getDomainSeparator() internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f, // keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n                    0xf0cf7ce475272740cae17eb3cadd6d254800be81c53f84a2f273b99036471c62, // keccak256(\\\"OpenSkyBespokeMarket\\\")\\n                    0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6, // keccak256(bytes(\\\"1\\\")) for versionId = 1\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    receive() external payable {\\n        revert('BM_RECEIVE_NOT_ALLOWED');\\n    }\\n\\n    fallback() external payable {\\n        revert('BM_FALLBACK_NOT_ALLOWED');\\n    }\\n}\\n\",\"keccak256\":\"0x70f0b391c3b5ffbc4c3e741c330ade1a777a83e4d6599491f218dca3e094f0e9\",\"license\":\"MIT\"},\"contracts/bespokemarket/interfaces/IOpenSkyBespokeLoanNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '../libraries/BespokeTypes.sol';\\n\\ninterface IOpenSkyBespokeLoanNFT is IERC721 {\\n    event Mint(uint256 indexed tokenId, address indexed recipient);\\n    event Burn(uint256 tokenId);\\n    event SetLoanDescriptorAddress(address operator, address descriptorAddress);\\n\\n    function mint(uint256 tokenId, address account) external;\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function getLoanData(uint256 tokenId) external returns (BespokeTypes.LoanData memory);\\n}\\n\",\"keccak256\":\"0x6b6d44dc42af37ea65172148dca4969992f5c9b833479fee071d3977f697e1fb\",\"license\":\"MIT\"},\"contracts/bespokemarket/interfaces/IOpenSkyBespokeMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../libraries/BespokeTypes.sol';\\n\\ninterface IOpenSkyBespokeMarket {\\n    event CancelAllOffers(address indexed sender, uint256 nonce);\\n\\n    event CancelMultipleOffers(address indexed sender, uint256[] nonces);\\n\\n    event TakeBorrowOffer(\\n        bytes32 offerHash,\\n        uint256 indexed loanId,\\n        address indexed lender,\\n        address indexed borrower,\\n        uint256 nonce\\n    );\\n\\n    event TakeBorrowOfferETH(\\n        bytes32 offerHash,\\n        uint256 indexed loanId,\\n        address indexed lender,\\n        address indexed borrower,\\n        uint256 nonce\\n    );\\n\\n    event Repay(uint256 indexed loanId, address indexed borrower);\\n\\n    event RepayETH(uint256 indexed loanId, address indexed borrower);\\n\\n    event Foreclose(uint256 indexed loanId, address indexed lender);\\n\\n    event FlashClaim(address indexed receiver, address sender, address indexed nftAddress, uint256 indexed tokenId);\\n    event ClaimERC20Airdrop(address indexed token, address indexed to, uint256 amount);\\n    event ClaimERC721Airdrop(address indexed token, address indexed to, uint256[] ids);\\n    event ClaimERC1155Airdrop(address indexed token, address indexed to, uint256[] ids, uint256[] amounts, bytes data);\\n\\n    function takeBorrowOffer(\\n        BespokeTypes.BorrowOffer memory offerData,\\n        uint256 supplyAmount,\\n        uint256 supplyDuration\\n    ) external;\\n\\n    function takeBorrowOfferETH(\\n        BespokeTypes.BorrowOffer memory offerData,\\n        uint256 supplyAmount,\\n        uint256 supplyDuration\\n    ) external payable;\\n\\n    function repay(uint256 loanId) external;\\n\\n    function repayETH(uint256 loanId) external payable;\\n\\n    function foreclose(uint256 loanId) external;\\n\\n    function cancelAllBorrowOffersForSender(uint256 minNonce_) external;\\n\\n    function cancelMultipleBorrowOffers(uint256[] calldata offerNonces) external;\\n\\n    function isValidNonce(address account, uint256 nonce) external view returns (bool);\\n\\n    function getLoanData(uint256 loanId) external view returns (BespokeTypes.LoanData memory);\\n\\n    function getStatus(uint256 loanId) external view returns (BespokeTypes.LoanStatus);\\n\\n    function getBorrowInterest(uint256 loanId) external view returns (uint256);\\n\\n    function getBorrowBalance(uint256 loanId) external view returns (uint256);\\n\\n    function getPenalty(uint256 loanId) external view returns (uint256);\\n\\n    /**\\n     * @notice Allows smart contracts to access the collateralized NFT within one transaction,\\n     * as long as the amount taken plus a fee is returned\\n     * @dev IMPORTANT There are security concerns for developers of flash loan receiver contracts that must be carefully considered\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashClaimReceiver interface\\n     * @param loanIds The ID of loan being flash-borrowed\\n     * @param params packed params to pass to the receiver as extra information\\n     **/\\n    function flashClaim(\\n        address receiverAddress,\\n        uint256[] calldata loanIds,\\n        bytes calldata params\\n    ) external;\\n\\n    /**\\n     * @notice Claim the ERC20 token which has been airdropped to the loan contract\\n     * @param token The address of the airdropped token\\n     * @param to The address which will receive ERC20 token\\n     * @param amount The amount of the ERC20 token\\n     **/\\n    function claimERC20Airdrop(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Claim the ERC721 token which has been airdropped to the loan contract\\n     * @param token The address of the airdropped token\\n     * @param to The address which will receive the ERC721 token\\n     * @param ids The ID of the ERC721 token\\n     **/\\n    function claimERC721Airdrop(\\n        address token,\\n        address to,\\n        uint256[] calldata ids\\n    ) external;\\n\\n    /**\\n     * @notice Claim the ERC1155 token which has been airdropped to the loan contract\\n     * @param token The address of the airdropped token\\n     * @param to The address which will receive the ERC1155 tokens\\n     * @param ids The ID of the ERC1155 token\\n     * @param amounts The amount of the ERC1155 tokens\\n     * @param data packed params to pass to the receiver as extra information\\n     **/\\n    function claimERC1155Airdrop(\\n        address token,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa89af31d25197e1552f90fabc82fe08425e40d7ddd2a30cb4c59b4dbce67b4b4\",\"license\":\"MIT\"},\"contracts/bespokemarket/interfaces/IOpenSkyBespokeSettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\nimport '../libraries/BespokeTypes.sol';\\n\\ninterface IOpenSkyBespokeSettings {\\n    event InitLoanAddress(address operator, address borrowLoanAddress, address lendLoanAddress);\\n    event InitMarketAddress(address operator, address address_);\\n\\n    event SetReserveFactor(address operator, uint256 factor);\\n    event SetOverdueLoanFeeFactor(address operator, uint256 factor);\\n\\n    event SetMinBorrowDuration(address operator, uint256 factor);\\n    event SetMaxBorrowDuration(address operator, uint256 factor);\\n    event SetOverdueDuration(address operator, uint256 factor);\\n\\n    event OpenWhitelist(address operator);\\n    event CloseWhitelist(address operator);\\n    event AddToWhitelist(address operator, address nft);\\n    event RemoveFromWhitelist(address operator, address nft);\\n\\n    event AddCurrency(address operator, address currency);\\n    event RemoveCurrency(address operator, address currency);\\n\\n    function marketAddress() external view returns (address);\\n\\n    function borrowLoanAddress() external view returns (address);\\n\\n    function lendLoanAddress() external view returns (address);\\n\\n\\n    function minBorrowDuration() external view returns (uint256);\\n\\n    function maxBorrowDuration() external view returns (uint256);\\n\\n    function overdueDuration() external view returns (uint256);\\n\\n    function reserveFactor() external view returns (uint256);\\n\\n    function MAX_RESERVE_FACTOR() external view returns (uint256);\\n\\n    function overdueLoanFeeFactor() external view returns (uint256);\\n\\n    function isWhitelistOn() external view returns (bool);\\n\\n    function inWhitelist(address nft) external view returns (bool);\\n\\n    function getWhitelistDetail(address nft) external view returns (BespokeTypes.WhitelistInfo memory);\\n\\n    function getBorrowDurationConfig(address nftAddress)\\n        external\\n        view\\n        returns (\\n            uint256 minBorrowDuration,\\n            uint256 maxBorrowDuration,\\n            uint256 overdueDuration\\n        );\\n\\n    function isCurrencyWhitelisted(address currency) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0b6cb91d7952c11b601d5431abbdc4836a0bec67c9deb37ff483a3b9d7984eb0\",\"license\":\"MIT\"},\"contracts/bespokemarket/libraries/BespokeLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\n\\nimport '../../libraries/math/MathUtils.sol';\\nimport '../../libraries/math/WadRayMath.sol';\\nimport '../../interfaces/IOpenSkyPool.sol';\\nimport '../../interfaces/IOpenSkySettings.sol';\\n\\nimport './BespokeTypes.sol';\\nimport './SignatureChecker.sol';\\nimport '../interfaces/IOpenSkyBespokeSettings.sol';\\n\\nlibrary BespokeLogic {\\n    using WadRayMath for uint256;\\n    using SafeMath for uint256;\\n\\n    // keccak256(\\\"BorrowOffer(uint256 reserveId,address nftAddress,uint256 tokenId,uint256 tokenAmount,address borrower,uint256 borrowAmountMin,uint256 borrowAmountMax,uint40 borrowDurationMin,uint40 borrowDurationMax,uint128 borrowRate,address currency,uint256 nonce,uint256 deadline)\\\")\\n    bytes32 internal constant BORROW_OFFER_HASH = 0xacdf87371514724eb8e74db090d21dbc2361a02a72e2facac480fe7964ae4feb;\\n\\n    function hashBorrowOffer(BespokeTypes.BorrowOffer memory offerData) public pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    BORROW_OFFER_HASH,\\n                    offerData.reserveId,\\n                    offerData.nftAddress,\\n                    offerData.tokenId,\\n                    offerData.tokenAmount,\\n                    offerData.borrower,\\n                    offerData.borrowAmountMin,\\n                    offerData.borrowAmountMax,\\n                    offerData.borrowDurationMin,\\n                    offerData.borrowDurationMax,\\n                    offerData.borrowRate,\\n                    offerData.currency,\\n                    offerData.nonce,\\n                    offerData.deadline\\n                )\\n            );\\n    }\\n\\n    function validateTakeBorrowOffer(\\n        mapping(address => mapping(uint256 => bool)) storage _nonce,\\n        mapping(address => uint256) storage minNonce,\\n        BespokeTypes.BorrowOffer memory offerData,\\n        bytes32 offerHash,\\n        address underlyingSpecified,\\n        uint256 supplyAmount,\\n        uint256 supplyDuration,\\n        bytes32 DOMAIN_SEPARATOR,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS,\\n        IOpenSkySettings SETTINGS\\n    ) public {\\n        // check nonce\\n        require(\\n            !_nonce[offerData.borrower][offerData.nonce] && offerData.nonce >= minNonce[offerData.borrower],\\n            'BM_TAKE_BORROW_NONCE_INVALID'\\n        );\\n\\n        address underlyingAsset = IOpenSkyPool(SETTINGS.poolAddress())\\n            .getReserveData(offerData.reserveId)\\n            .underlyingAsset;\\n\\n        require(underlyingAsset == offerData.currency, 'BM_TAKE_BORROW_OFFER_ASSET_NOT_MATCH');\\n\\n        if (underlyingSpecified != address(0))\\n            require(underlyingAsset == underlyingSpecified, 'BM_TAKE_BORROW_OFFER_ASSET_SPECIFIED_NOT_MATCH');\\n\\n        require(BESPOKE_SETTINGS.isCurrencyWhitelisted(offerData.currency), 'BM_TAKE_BORROW_CURRENCY_NOT_IN_WHITELIST');\\n\\n        require(\\n            !BESPOKE_SETTINGS.isWhitelistOn() || BESPOKE_SETTINGS.inWhitelist(offerData.nftAddress),\\n            'BM_TAKE_BORROW_NFT_NOT_IN_WHITELIST'\\n        );\\n\\n        require(block.timestamp <= offerData.deadline, 'BM_TAKE_BORROW_SIGNING_EXPIRATION');\\n\\n        (uint256 minBorrowDuration, uint256 maxBorrowDuration, ) = BESPOKE_SETTINGS.getBorrowDurationConfig(\\n            offerData.nftAddress\\n        );\\n\\n        // check borrow duration\\n        require(\\n            offerData.borrowDurationMin <= offerData.borrowDurationMax &&\\n                offerData.borrowDurationMin >= minBorrowDuration &&\\n                offerData.borrowDurationMax <= maxBorrowDuration,\\n            'BM_TAKE_BORROW_OFFER_DURATION_NOT_ALLOWED'\\n        );\\n\\n        require(\\n            supplyDuration > 0 &&\\n                supplyDuration >= offerData.borrowDurationMin &&\\n                supplyDuration <= offerData.borrowDurationMax,\\n            'BM_TAKE_BORROW_TAKER_DURATION_NOT_ALLOWED'\\n        );\\n\\n        // check borrow amount\\n        require(\\n            offerData.borrowAmountMin > 0 && offerData.borrowAmountMin <= offerData.borrowAmountMax,\\n            'BM_TAKE_BORROW_OFFER_AMOUNT_NOT_ALLOWED'\\n        );\\n\\n        require(\\n            supplyAmount >= offerData.borrowAmountMin && supplyAmount <= offerData.borrowAmountMax,\\n            'BM_TAKE_BORROW_SUPPLY_AMOUNT_NOT_ALLOWED'\\n        );\\n        require(\\n            SignatureChecker.verify(\\n                offerHash,\\n                offerData.borrower,\\n                offerData.v,\\n                offerData.r,\\n                offerData.s,\\n                DOMAIN_SEPARATOR\\n            ),\\n            'BM_TAKE_BORROW_SIGNATURE_INVALID'\\n        );\\n    }\\n\\n    function createLoan(\\n        mapping(uint256 => BespokeTypes.LoanData) storage _loans,\\n        BespokeTypes.BorrowOffer memory offerData,\\n        uint256 loanId,\\n        uint256 supplyAmount,\\n        uint256 supplyDuration,\\n        IOpenSkyBespokeSettings BESPOKE_SETTINGS\\n    ) public {\\n        uint256 borrowRateRay = uint256(offerData.borrowRate).rayDiv(10000);\\n        (, , uint256 overdueDuration) = BESPOKE_SETTINGS.getBorrowDurationConfig(offerData.nftAddress);\\n\\n        BespokeTypes.LoanData memory loan = BespokeTypes.LoanData({\\n            reserveId: offerData.reserveId,\\n            nftAddress: offerData.nftAddress,\\n            tokenId: offerData.tokenId,\\n            tokenAmount: offerData.tokenAmount,\\n            borrower: offerData.borrower,\\n            amount: supplyAmount,\\n            borrowRate: uint128(borrowRateRay),\\n            interestPerSecond: uint128(MathUtils.calculateBorrowInterestPerSecond(borrowRateRay, supplyAmount)),\\n            currency: offerData.currency,\\n            borrowDuration: uint40(supplyDuration),\\n            borrowBegin: uint40(block.timestamp),\\n            borrowOverdueTime: uint40(block.timestamp.add(supplyDuration)),\\n            liquidatableTime: uint40(block.timestamp.add(supplyDuration).add(overdueDuration)),\\n            lender: msg.sender,\\n            status: BespokeTypes.LoanStatus.BORROWING\\n        });\\n\\n        _loans[loanId] = loan;\\n    }\\n}\\n\",\"keccak256\":\"0x984b51b1ee323d7140f88f246265bf0169d9cb3ee7d79874350d698d1cc83b19\",\"license\":\"MIT\"},\"contracts/bespokemarket/libraries/BespokeTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary BespokeTypes {\\n    struct BorrowOffer {\\n        uint256 reserveId;\\n        address nftAddress;\\n        uint256 tokenId;\\n        uint256 tokenAmount; // 1 for ERC721, 1+ for ERC1155\\n        address borrower;\\n        uint256 borrowAmountMin;\\n        uint256 borrowAmountMax;\\n        uint40 borrowDurationMin;\\n        uint40 borrowDurationMax;\\n        uint128 borrowRate;\\n        address currency;\\n        uint256 nonce;\\n        uint256 deadline;\\n        uint8 v; // v: parameter (27 or 28)\\n        bytes32 r; // r: parameter\\n        bytes32 s; // s: parameter\\n    }\\n\\n    struct LoanData {\\n        uint256 reserveId;\\n        address nftAddress;\\n        uint256 tokenId;\\n        uint256 tokenAmount; // 1 for ERC721, 1+ for ERC1155\\n        address borrower;\\n        uint256 amount;\\n        uint128 borrowRate;\\n        uint128 interestPerSecond;\\n        address currency;\\n        uint40 borrowDuration;\\n        // after take offer\\n        uint40 borrowBegin;\\n        uint40 borrowOverdueTime;\\n        uint40 liquidatableTime;\\n        address lender;\\n        LoanStatus status;\\n    }\\n\\n    enum LoanStatus {\\n        NONE,\\n        BORROWING,\\n        OVERDUE,\\n        LIQUIDATABLE\\n    }\\n\\n    struct WhitelistInfo {\\n        bool enabled;\\n        uint256 minBorrowDuration;\\n        uint256 maxBorrowDuration;\\n        uint256 overdueDuration;\\n    }\\n}\\n\",\"keccak256\":\"0x7adc607a70cf9d822f93a7f214937e57c769da7e3e304c594fee1b86fa8d68b0\",\"license\":\"MIT\"},\"contracts/bespokemarket/libraries/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\nimport {IERC1271} from '@openzeppelin/contracts/interfaces/IERC1271.sol';\\n\\n/**\\n * @title SignatureChecker\\n * @notice This library allows verification of signatures for both EOAs and contracts.\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @notice Recovers the signer of a signature (for EOA)\\n     * @param hash the hash containing the signed mesage\\n     * @param v parameter (27 or 28). This prevents maleability since the public key recovery equation has two possible solutions.\\n     * @param r parameter\\n     * @param s parameter\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // https://ethereum.stackexchange.com/questions/83174/is-it-best-practice-to-check-signature-malleability-in-ecrecover\\n        // https://crypto.iacr.org/2019/affevents/wac/medias/Heninger-BiasedNonceSense.pdf\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            'BM_SIGNATURE_INVALID_S_PARAMETER'\\n        );\\n\\n        require(v == 27 || v == 28, 'BM_SIGNATURE_INVALID_V_PARAMETER');\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), 'BM_SIGNATURE_INVALID_SIGNER');\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @notice Returns whether the signer matches the signed message\\n     * @param hash the hash containing the signed mesage\\n     * @param signer the signer address to confirm message validity\\n     * @param v parameter (27 or 28)\\n     * @param r parameter\\n     * @param s parameter\\n     * @param domainSeparator paramer to prevent signature being executed in other chains and environments\\n     * @return true --> if valid // false --> if invalid\\n     */\\n    function verify(\\n        bytes32 hash,\\n        address signer,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        bytes32 domainSeparator\\n    ) internal view returns (bool) {\\n        // \\\\x19\\\\x01 is the standardized encoding prefix\\n        // https://eips.ethereum.org/EIPS/eip-712#specification\\n        bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', domainSeparator, hash));\\n        if (Address.isContract(signer)) {\\n            // 0x1626ba7e is the interfaceId for signature contracts (see IERC1271)\\n            return IERC1271(signer).isValidSignature(digest, abi.encodePacked(r, s, v)) == 0x1626ba7e;\\n        } else {\\n            return recover(digest, v, r, s) == signer;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d997d9be9ec81d9643d9fc9f1f72d917ab1196add37ae6f9bc1ad378daa829d\",\"license\":\"MIT\"},\"contracts/dependencies/weth/IWETH.sol\":{\"content\":\"pragma solidity 0.8.10;\\n\\ninterface IWETH {\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x58e84c715a8587d2685d905f79018c85ff42b628f5a8ca4c115342dea17053ab\"},\"contracts/interfaces/IACLManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IACLManager {\\n    function addEmergencyAdmin(address admin) external;\\n    \\n    function isEmergencyAdmin(address admin) external view returns (bool);\\n    \\n    function removeEmergencyAdmin(address admin) external;\\n    \\n    function addGovernance(address admin) external;\\n    \\n    function isGovernance(address admin) external view returns (bool);\\n\\n    function removeGovernance(address admin) external;\\n\\n    function addPoolAdmin(address admin) external;\\n\\n    function isPoolAdmin(address admin) external view returns (bool);\\n\\n    function removePoolAdmin(address admin) external;\\n\\n    function addLiquidationOperator(address address_) external;\\n\\n    function isLiquidationOperator(address address_) external view returns (bool);\\n\\n    function removeLiquidationOperator(address address_) external;\\n\\n    function addAirdropOperator(address address_) external;\\n\\n    function isAirdropOperator(address address_) external view returns (bool);\\n\\n    function removeAirdropOperator(address address_) external;\\n}\\n\",\"keccak256\":\"0x0e77d3bdc88ba10cd78a9a80350bbf0d4120a1d0ac7c7911bef8c8cb389cf42f\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyFlashClaimReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IOpenSkyFlashClaimReceiver {\\n    function executeOperation(\\n        address[] calldata nftAddresses,\\n        uint256[] calldata tokenIds,\\n        address initiator,\\n        address operator,\\n        bytes calldata params\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x20c9cbf82dc555a3e1f468dc755742af0dedb3ab5165b975b473e55870d0fbe4\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IOpenSkyPool\\n * @author OpenSky Labs\\n * @notice Defines the basic interface for an OpenSky Pool.\\n **/\\n\\ninterface IOpenSkyPool {\\n    /*\\n     * @dev Emitted on create()\\n     * @param reserveId The ID of the reserve\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param oTokenAddress The address of the oToken\\n     * @param name The name to use for oToken\\n     * @param symbol The symbol to use for oToken\\n     * @param decimals The decimals of the oToken\\n     */\\n    event Create(\\n        uint256 indexed reserveId,\\n        address indexed underlyingAsset,\\n        address indexed oTokenAddress,\\n        string name,\\n        string symbol,\\n        uint8 decimals\\n    );\\n\\n    /*\\n     * @dev Emitted on setTreasuryFactor()\\n     * @param reserveId The ID of the reserve\\n     * @param factor The new treasury factor of the reserve\\n     */\\n    event SetTreasuryFactor(uint256 indexed reserveId, uint256 factor);\\n\\n    /*\\n     * @dev Emitted on setInterestModelAddress()\\n     * @param reserveId The ID of the reserve\\n     * @param interestModelAddress The address of the interest model contract\\n     */\\n    event SetInterestModelAddress(uint256 indexed reserveId, address interestModelAddress);\\n\\n    /*\\n     * @dev Emitted on openMoneyMarket()\\n     * @param reserveId The ID of the reserve\\n     */\\n    event OpenMoneyMarket(uint256 reserveId);\\n\\n    /*\\n     * @dev Emitted on closeMoneyMarket()\\n     * @param reserveId The ID of the reserve\\n     */\\n    event CloseMoneyMarket(uint256 reserveId);\\n\\n    /*\\n     * @dev Emitted on deposit()\\n     * @param reserveId The ID of the reserve\\n     * @param onBehalfOf The address that will receive the oTokens\\n     * @param amount The amount of ETH to be deposited\\n     * @param referralCode integrators are assigned a referral code and can potentially receive rewards\\n     * 0 if the action is executed directly by the user, without any intermediaries\\n     */\\n    event Deposit(uint256 indexed reserveId, address indexed onBehalfOf, uint256 amount, uint256 referralCode);\\n\\n    /*\\n     * @dev Emitted on withdraw()\\n     * @param reserveId The ID of the reserve\\n     * @param onBehalfOf The address that will receive assets withdrawed\\n     * @param amount The amount to be withdrawn\\n     */\\n    event Withdraw(uint256 indexed reserveId, address indexed onBehalfOf, uint256 amount);\\n\\n    /*\\n     * @dev Emitted on borrow()\\n     * @param reserveId The ID of the reserve\\n     * @param user The address initiating the withdrawal(), owner of oTokens\\n     * @param onBehalfOf The address that will receive the ETH and the loan NFT\\n     * @param loanId The loan ID\\n     */\\n    event Borrow(\\n        uint256 indexed reserveId,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 indexed loanId\\n    );\\n\\n    /*\\n     * @dev Emitted on repay()\\n     * @param reserveId The ID of the reserve\\n     * @param repayer The address initiating the repayment()\\n     * @param onBehalfOf The address that will receive the pledged NFT\\n     * @param loanId The ID of the loan\\n     * @param repayAmount The borrow balance of the loan when it was repaid\\n     * @param penalty The penalty of the loan for either early or overdue repayment\\n     */\\n    event Repay(\\n        uint256 indexed reserveId,\\n        address repayer,\\n        address indexed onBehalfOf,\\n        uint256 indexed loanId,\\n        uint256 repayAmount,\\n        uint256 penalty\\n    );\\n\\n    /*\\n     * @dev Emitted on extend()\\n     * @param reserveId The ID of the reserve\\n     * @param onBehalfOf The owner address of loan NFT\\n     * @param oldLoanId The ID of the old loan\\n     * @param newLoanId The ID of the new loan\\n     */\\n    event Extend(uint256 indexed reserveId, address indexed onBehalfOf, uint256 oldLoanId, uint256 newLoanId);\\n\\n    /*\\n     * @dev Emitted on startLiquidation()\\n     * @param reserveId The ID of the reserve\\n     * @param loanId The ID of the loan\\n     * @param nftAddress The address of the NFT used as collateral\\n     * @param tokenId The ID of the NFT used as collateral\\n     * @param operator The address initiating startLiquidation()\\n     */\\n    event StartLiquidation(\\n        uint256 indexed reserveId,\\n        uint256 indexed loanId,\\n        address indexed nftAddress,\\n        uint256 tokenId,\\n        address operator\\n    );\\n\\n    /*\\n     * @dev Emitted on endLiquidation()\\n     * @param reserveId The ID of the reserve\\n     * @param loanId The ID of the loan\\n     * @param nftAddress The address of the NFT used as collateral\\n     * @param tokenId The ID of the NFT used as collateral\\n     * @param operator\\n     * @param repayAmount The amount used to repay, must be equal to or greater than the borrowBalance, excess part will be shared by all the lenders\\n     * @param borrowBalance The borrow balance of the loan\\n     */\\n    event EndLiquidation(\\n        uint256 indexed reserveId,\\n        uint256 indexed loanId,\\n        address indexed nftAddress,\\n        uint256 tokenId,\\n        address operator,\\n        uint256 repayAmount,\\n        uint256 borrowBalance\\n    );\\n\\n    /**\\n     * @notice Creates a reserve\\n     * @dev Only callable by the pool admin role\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param name The name of the oToken\\n     * @param symbol The symbol for the oToken\\n     * @param decimals The decimals of the oToken\\n     **/\\n    function create(\\n        address underlyingAsset,\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals\\n    ) external;\\n\\n    /**\\n     * @notice Updates the treasury factor of a reserve\\n     * @dev Only callable by the pool admin role\\n     * @param reserveId The ID of the reserve\\n     * @param factor The new treasury factor of the reserve\\n     **/\\n    function setTreasuryFactor(uint256 reserveId, uint256 factor) external;\\n\\n    /**\\n     * @notice Updates the interest model address of a reserve\\n     * @dev Only callable by the pool admin role\\n     * @param reserveId The ID of the reserve\\n     * @param interestModelAddress The new address of the interest model contract\\n     **/\\n    function setInterestModelAddress(uint256 reserveId, address interestModelAddress) external;\\n\\n    /**\\n     * @notice Open the money market\\n     * @dev Only callable by the emergency admin role\\n     * @param reserveId The ID of the reserve\\n     **/\\n    function openMoneyMarket(uint256 reserveId) external;\\n\\n    /**\\n     * @notice Close the money market\\n     * @dev Only callable by the emergency admin role\\n     * @param reserveId The ID of the reserve\\n     **/\\n    function closeMoneyMarket(uint256 reserveId) external;\\n\\n    /**\\n     * @dev Deposits ETH into the reserve.\\n     * @param reserveId The ID of the reserve\\n     * @param referralCode integrators are assigned a referral code and can potentially receive rewards\\n     **/\\n    function deposit(uint256 reserveId, uint256 amount, address onBehalfOf, uint256 referralCode) external;\\n\\n    /**\\n     * @dev withdraws the ETH from reserve.\\n     * @param reserveId The ID of the reserve\\n     * @param amount amount of oETH to withdraw and receive native ETH\\n     **/\\n    function withdraw(uint256 reserveId, uint256 amount, address onBehalfOf) external;\\n\\n    /**\\n     * @dev Borrows ETH from reserve using an NFT as collateral and will receive a loan NFT as receipt.\\n     * @param reserveId The ID of the reserve\\n     * @param amount amount of ETH user will borrow\\n     * @param duration The desired duration of the loan\\n     * @param nftAddress The collateral NFT address\\n     * @param tokenId The ID of the NFT\\n     * @param onBehalfOf address of the user who will receive ETH and loan NFT.\\n     **/\\n    function borrow(\\n        uint256 reserveId,\\n        uint256 amount,\\n        uint256 duration,\\n        address nftAddress,\\n        uint256 tokenId,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Repays a loan, as a result the corresponding loan NFT owner will receive the collateralized NFT.\\n     * @param loanId The ID of the loan the user will repay\\n     */\\n    function repay(uint256 loanId) external returns (uint256);\\n\\n    /**\\n     * @dev Extends creates a new loan and terminates the old loan.\\n     * @param loanId The loan ID to extend\\n     * @param amount The amount of ERC20 token the user will borrow in the new loan\\n     * @param duration The selected duration the user will borrow in the new loan\\n     * @param onBehalfOf The address will borrow in the new loan\\n     **/\\n    function extend(\\n        uint256 loanId,\\n        uint256 amount,\\n        uint256 duration,\\n        address onBehalfOf\\n    ) external returns (uint256, uint256);\\n\\n    /**\\n     * @dev Starts liquidation for a loan when it's in LIQUIDATABLE status\\n     * @param loanId The ID of the loan which will be liquidated\\n     */\\n    function startLiquidation(uint256 loanId) external;\\n\\n    /**\\n     * @dev Completes liquidation for a loan which will be repaid.\\n     * @param loanId The ID of the liquidated loan that will be repaid.\\n     * @param amount The amount of the token that will be repaid.\\n     */\\n    function endLiquidation(uint256 loanId, uint256 amount) external;\\n\\n    /**\\n     * @dev Returns the state of the reserve\\n     * @param reserveId The ID of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getReserveData(uint256 reserveId) external view returns (DataTypes.ReserveData memory);\\n\\n    /**\\n     * @dev Returns the normalized income of the reserve\\n     * @param reserveId The ID of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(uint256 reserveId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the remaining liquidity of the reserve\\n     * @param reserveId The ID of the reserve\\n     * @return The reserve's withdrawable balance\\n     */\\n    function getAvailableLiquidity(uint256 reserveId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the instantaneous borrow limit value of a special NFT\\n     * @param nftAddress The address of the NFT\\n     * @param tokenId The ID of the NFT\\n     * @return The NFT's borrow limit\\n     */\\n    function getBorrowLimitByOracle(\\n        uint256 reserveId,\\n        address nftAddress,\\n        uint256 tokenId\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the sum of all users borrow balances include borrow interest accrued\\n     * @param reserveId The ID of the reserve\\n     * @return The total borrow balance of the reserve\\n     */\\n    function getTotalBorrowBalance(uint256 reserveId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns TVL (total value locked) of the reserve.\\n     * @param reserveId The ID of the reserve\\n     * @return The reserve's TVL\\n     */\\n    function getTVL(uint256 reserveId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd98aee1cefc2e2c3178c22435666292f9b8a1df1e4b24b17a182d8df357951a9\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkySettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\nimport '../libraries/types/DataTypes.sol';\\n\\ninterface IOpenSkySettings {\\n    event InitPoolAddress(address operator, address address_);\\n    event InitLoanAddress(address operator, address address_);\\n    event InitVaultFactoryAddress(address operator, address address_);\\n    event InitIncentiveControllerAddress(address operator, address address_);\\n    event InitWETHGatewayAddress(address operator, address address_);\\n    event InitPunkGatewayAddress(address operator, address address_);\\n    event InitDaoVaultAddress(address operator, address address_);\\n\\n    event AddToWhitelist(address operator, uint256 reserveId, address nft);\\n    event RemoveFromWhitelist(address operator, uint256 reserveId, address nft);\\n    event SetReserveFactor(address operator, uint256 factor);\\n    event SetPrepaymentFeeFactor(address operator, uint256 factor);\\n    event SetOverdueLoanFeeFactor(address operator, uint256 factor);\\n    event SetMoneyMarketAddress(address operator, address address_);\\n    event SetTreasuryAddress(address operator, address address_);\\n    event SetACLManagerAddress(address operator, address address_);\\n    event SetLoanDescriptorAddress(address operator, address address_);\\n    event SetNftPriceOracleAddress(address operator, address address_);\\n    event SetInterestRateStrategyAddress(address operator, address address_);\\n    event AddLiquidator(address operator, address address_);\\n    event RemoveLiquidator(address operator, address address_);\\n\\n    function poolAddress() external view returns (address);\\n\\n    function loanAddress() external view returns (address);\\n\\n    function vaultFactoryAddress() external view returns (address);\\n\\n    function incentiveControllerAddress() external view returns (address);\\n\\n    function wethGatewayAddress() external view returns (address);\\n\\n    function punkGatewayAddress() external view returns (address);\\n\\n    function inWhitelist(uint256 reserveId, address nft) external view returns (bool);\\n\\n    function getWhitelistDetail(uint256 reserveId, address nft) external view returns (DataTypes.WhitelistInfo memory);\\n\\n    function reserveFactor() external view returns (uint256); // treasury ratio\\n\\n    function MAX_RESERVE_FACTOR() external view returns (uint256);\\n\\n    function prepaymentFeeFactor() external view returns (uint256);\\n\\n    function overdueLoanFeeFactor() external view returns (uint256);\\n\\n    function moneyMarketAddress() external view returns (address);\\n\\n    function treasuryAddress() external view returns (address);\\n\\n    function daoVaultAddress() external view returns (address);\\n\\n    function ACLManagerAddress() external view returns (address);\\n\\n    function loanDescriptorAddress() external view returns (address);\\n\\n    function nftPriceOracleAddress() external view returns (address);\\n\\n    function interestRateStrategyAddress() external view returns (address);\\n    \\n    function isLiquidator(address liquidator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd5c1c2468464891b3ce379c8a03bc21c2c67fcf0c7493e3b35fd573fa21ea448\",\"license\":\"MIT\"},\"contracts/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    // common\\n    string public constant MATH_MULTIPLICATION_OVERFLOW = '100';\\n    string public constant MATH_ADDITION_OVERFLOW = '101';\\n    string public constant MATH_DIVISION_BY_ZERO = '102';\\n\\n    string public constant ETH_TRANSFER_FAILED = '110';\\n    string public constant RECEIVE_NOT_ALLOWED = '111';\\n    string public constant FALLBACK_NOT_ALLOWED = '112';\\n    string public constant APPROVAL_FAILED = '113';\\n\\n    // setting/factor\\n    string public constant SETTING_ZERO_ADDRESS_NOT_ALLOWED = '115';\\n    string public constant SETTING_RESERVE_FACTOR_NOT_ALLOWED = '116';\\n    string public constant SETTING_WHITELIST_INVALID_RESERVE_ID = '117';\\n    string public constant SETTING_WHITELIST_NFT_ADDRESS_IS_ZERO = '118';\\n    string public constant SETTING_WHITELIST_NFT_DURATION_OUT_OF_ORDER = '119';\\n    string public constant SETTING_WHITELIST_NFT_NAME_EMPTY = '120';\\n    string public constant SETTING_WHITELIST_NFT_SYMBOL_EMPTY = '121';\\n    string public constant SETTING_WHITELIST_NFT_LTV_NOT_ALLOWED = '122';\\n\\n    // settings/acl\\n    string public constant ACL_ONLY_GOVERNANCE_CAN_CALL = '200';\\n    string public constant ACL_ONLY_EMERGENCY_ADMIN_CAN_CALL = '201';\\n    string public constant ACL_ONLY_POOL_ADMIN_CAN_CALL = '202';\\n    string public constant ACL_ONLY_LIQUIDATOR_CAN_CALL = '203';\\n    string public constant ACL_ONLY_AIRDROP_OPERATOR_CAN_CALL = '204';\\n    string public constant ACL_ONLY_POOL_CAN_CALL = '205';\\n\\n    // lending & borrowing\\n    // reserve\\n    string public constant RESERVE_DOES_NOT_EXIST = '300';\\n    string public constant RESERVE_LIQUIDITY_INSUFFICIENT = '301';\\n    string public constant RESERVE_INDEX_OVERFLOW = '302';\\n    string public constant RESERVE_SWITCH_MONEY_MARKET_STATE_ERROR = '303';\\n    string public constant RESERVE_TREASURY_FACTOR_NOT_ALLOWED = '304';\\n    string public constant RESERVE_TOKEN_CAN_NOT_BE_CLAIMED = '305';\\n\\n    // token\\n    string public constant AMOUNT_SCALED_IS_ZERO = '310';\\n    string public constant AMOUNT_TRANSFER_OVERFLOW = '311';\\n\\n    //deposit\\n    string public constant DEPOSIT_AMOUNT_SHOULD_BE_BIGGER_THAN_ZERO = '320';\\n\\n    // withdraw\\n    string public constant WITHDRAW_AMOUNT_NOT_ALLOWED = '321';\\n    string public constant WITHDRAW_LIQUIDITY_NOT_SUFFICIENT = '322';\\n\\n    // borrow\\n    string public constant BORROW_DURATION_NOT_ALLOWED = '330';\\n    string public constant BORROW_AMOUNT_EXCEED_BORROW_LIMIT = '331';\\n    string public constant NFT_ADDRESS_IS_NOT_IN_WHITELIST = '332';\\n\\n    // repay\\n    string public constant REPAY_STATUS_ERROR = '333';\\n    string public constant REPAY_MSG_VALUE_ERROR = '334';\\n\\n    // extend\\n    string public constant EXTEND_STATUS_ERROR = '335';\\n    string public constant EXTEND_MSG_VALUE_ERROR = '336';\\n\\n    // liquidate\\n    string public constant START_LIQUIDATION_STATUS_ERROR = '360';\\n    string public constant END_LIQUIDATION_STATUS_ERROR = '361';\\n    string public constant END_LIQUIDATION_AMOUNT_ERROR = '362';\\n\\n    // loan\\n    string public constant LOAN_DOES_NOT_EXIST = '400';\\n    string public constant LOAN_SET_STATUS_ERROR = '401';\\n    string public constant LOAN_REPAYER_IS_NOT_OWNER = '402';\\n    string public constant LOAN_LIQUIDATING_STATUS_CAN_NOT_BE_UPDATED = '403';\\n    string public constant LOAN_CALLER_IS_NOT_OWNER = '404';\\n    string public constant LOAN_COLLATERAL_NFT_CAN_NOT_BE_CLAIMED = '405';\\n\\n    string public constant FLASHCLAIM_EXECUTOR_ERROR = '410';\\n    string public constant FLASHCLAIM_STATUS_ERROR = '411';\\n\\n    // money market\\n    string public constant MONEY_MARKET_DEPOSIT_AMOUNT_NOT_ALLOWED = '500';\\n    string public constant MONEY_MARKET_WITHDRAW_AMOUNT_NOT_ALLOWED = '501';\\n    string public constant MONEY_MARKET_APPROVAL_FAILED = '502';\\n    string public constant MONEY_MARKET_DELEGATE_CALL_ERROR = '503';\\n    string public constant MONEY_MARKET_REQUIRE_DELEGATE_CALL = '504';\\n    string public constant MONEY_MARKET_WITHDRAW_AMOUNT_NOT_MATCH = '505';\\n\\n    // price oracle\\n    string public constant PRICE_ORACLE_HAS_NO_PRICE_FEED = '600';\\n    string public constant PRICE_ORACLE_INCORRECT_TIMESTAMP = '601';\\n    string public constant PRICE_ORACLE_PARAMS_ERROR = '602';\\n}\\n\",\"keccak256\":\"0xc4e38b51f80e5ad6eeacd323b4ac0798c5ca51d7a2d0c9fc2ba52aafa8a064b8\",\"license\":\"MIT\"},\"contracts/libraries/math/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {WadRayMath} from './WadRayMath.sol';\\n\\nlibrary MathUtils {\\n    using WadRayMath for uint256;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n     * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate linearly accumulated during the timeDelta, in ray\\n     **/\\n\\n    function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp) external view returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 timeDifference = block.timestamp - (uint256(lastUpdateTimestamp));\\n\\n        return (rate * timeDifference) / SECONDS_PER_YEAR + WadRayMath.ray();\\n    }\\n\\n    function calculateBorrowInterest(\\n        uint256 borrowRate,\\n        uint256 amount,\\n        uint256 duration\\n    ) external pure returns (uint256) {\\n        return amount.rayMul(borrowRate.rayMul(duration).rayDiv(SECONDS_PER_YEAR));\\n    }\\n\\n    function calculateBorrowInterestPerSecond(uint256 borrowRate, uint256 amount) external pure returns (uint256) {\\n        return amount.rayMul(borrowRate).rayDiv(SECONDS_PER_YEAR);\\n    }\\n\\n    function calculateLoanSupplyRate(\\n        uint256 availableLiquidity,\\n        uint256 totalBorrows,\\n        uint256 borrowRate\\n    ) external pure returns (uint256 loanSupplyRate, uint256 utilizationRate) {\\n        utilizationRate = (totalBorrows == 0 && availableLiquidity == 0)\\n            ? 0\\n            : totalBorrows.rayDiv(availableLiquidity + totalBorrows);\\n        loanSupplyRate = utilizationRate.rayMul(borrowRate);\\n    }\\n}\\n\",\"keccak256\":\"0xe06262969c3e10f221573fd7bfdf3a89942957b5d957a6110cb5e933d2bdbff6\",\"license\":\"MIT\"},\"contracts/libraries/math/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../helpers/Errors.sol';\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded half up\\n **/\\n\\nlibrary PercentageMath {\\n  uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\n  uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\n\\n  /**\\n   * @dev Executes a percentage multiplication\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The percentage of value\\n   **/\\n  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    if (value == 0 || percentage == 0) {\\n      return 0;\\n    }\\n\\n    require(\\n      value <= (type(uint256).max - HALF_PERCENT) / percentage,\\n      Errors.MATH_MULTIPLICATION_OVERFLOW\\n    );\\n\\n    return (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\\n  }\\n\\n  /**\\n   * @dev Executes a percentage division\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The value divided the percentage\\n   **/\\n  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    require(percentage != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfPercentage = percentage / 2;\\n\\n    require(\\n      value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR,\\n      Errors.MATH_MULTIPLICATION_OVERFLOW\\n    );\\n\\n    return (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\n  }\\n}\\n\",\"keccak256\":\"0xe8333e1a929245e4198f87645eae3fc8749e8e29f505427b38ec8ca035434953\",\"license\":\"MIT\"},\"contracts/libraries/math/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {Errors} from '../helpers/Errors.sol';\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @return One ray, 1e27\\n     **/\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    /**\\n     * @return One wad, 1e18\\n     **/\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e27/2\\n     **/\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e18/2\\n     **/\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     **/\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfWAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * b + halfWAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     **/\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * WAD + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfRAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * b + halfRAY) / RAY;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, truncating the mantissa\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMulTruncate(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return (a * b) / RAY;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n        return (a * RAY + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, truncating the mantissa\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDivTruncate(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n        return (a * RAY) / b;\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @param a Ray\\n     * @return a casted to wad, rounded half up to the nearest wad\\n     **/\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n        uint256 result = halfRatio + a;\\n        require(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\\n\\n        return result / WAD_RAY_RATIO;\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @param a Wad\\n     * @return a converted in ray\\n     **/\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        uint256 result = a * WAD_RAY_RATIO;\\n        require(result / WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4bf6b9a00c5e9938726d173f11b56de8edd92e17593e4dfa61a3ce7336756c6b\",\"license\":\"MIT\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        uint256 reserveId;\\n        address underlyingAsset;\\n        address oTokenAddress;\\n        address moneyMarketAddress;\\n        uint128 lastSupplyIndex;\\n        uint256 borrowingInterestPerSecond;\\n        uint256 lastMoneyMarketBalance;\\n        uint40 lastUpdateTimestamp;\\n        uint256 totalBorrows;\\n        address interestModelAddress;\\n        uint256 treasuryFactor;\\n        bool isMoneyMarketOn;\\n    }\\n\\n    struct LoanData {\\n        uint256 reserveId;\\n        address nftAddress;\\n        uint256 tokenId;\\n        address borrower;\\n        uint256 amount;\\n        uint128 borrowRate;\\n        uint128 interestPerSecond;\\n        uint40 borrowBegin;\\n        uint40 borrowDuration;\\n        uint40 borrowOverdueTime;\\n        uint40 liquidatableTime;\\n        uint40 extendableTime;\\n        uint40 borrowEnd;\\n        LoanStatus status;\\n    }\\n\\n    enum LoanStatus {\\n        NONE,\\n        BORROWING,\\n        EXTENDABLE,\\n        OVERDUE,\\n        LIQUIDATABLE,\\n        LIQUIDATING\\n    }\\n\\n    struct WhitelistInfo {\\n        bool enabled;\\n        string name;\\n        string symbol;\\n        uint256 LTV;\\n        uint256 minBorrowDuration;\\n        uint256 maxBorrowDuration;\\n        uint256 extendableDuration;\\n        uint256 overdueDuration;\\n    }\\n}\\n\",\"keccak256\":\"0x487cd1dedb3146da46144bc8f0e5b970c5173efa8c19700184b8207c1ee3fc55\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b506040516200610f3803806200610f8339810160408190526200003491620000db565b6200003f336200006e565b6000805460ff60a01b19169055600180556001600160a01b0392831660805290821660a0521660c05262000125565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000d657600080fd5b919050565b600080600060608486031215620000f157600080fd5b620000fc84620000be565b92506200010c60208501620000be565b91506200011c60408501620000be565b90509250925092565b60805160a05160c051615e9b6200027460003960008181610673015281816110db015281816112b60152818161209a0152818161243d015281816124c701526125b80152600081816103a90152818161087a015281816120c50152818161268b01528181612f0c015281816131c70152818161364801528181613d6901528181613e5b01528181613f7b0152818161427501528181614356015281816148b601526149890152600081816106a701528181610fdf015281816113390152818161142d01528181611530015281816118f901528181611a1901528181611b0d01528181611c1001528181611d0801528181611e2d015281816120e6015281816121b1015281816122e601528181612b7501528181612f9b015281816131e8015281816132b3015281816133cf015281816134e0015281816137020152818161397d015261474f0152615e9b6000f3fe6080604052600436106102085760003560e01c8063715018a611610118578063aa99fa98116100a0578063bc6bc0cd1161006f578063bc6bc0cd146106f5578063cae5955314610710578063e3185e1214610730578063f23a6e6114610750578063f2fde38b1461077c57610253565b8063aa99fa9814610634578063ad5c464814610661578063ade97ab514610695578063bc197c81146106c957610253565b80638bf1badd116100e75780638bf1badd146105965780638da5cb5b146105b657806396e59682146105d4578063a3d5b255146105f4578063a63487391461061457610253565b8063715018a61461051f5780638456cb591461053457806384e5cec5146105495780638a1818331461056957610253565b806333bf61561161019b5780635b3ce3241161016a5780635b3ce324146104735780635c622a0e146104865780635c975abb146104b3578063622fe39f146104d25780636b52b365146104ff57610253565b806333bf615614610403578063371fd8e61461041e5780633f4ba83a1461043e5780634f0709161461045357610253565b80631c187495116101d75780631c187495146103565780632247463e1461038457806329c55f06146103975780632f844ea8146103e357610253565b806301ffc9a71461029b57806303282d6e146102d05780630647ee20146102f2578063150b7a021461031257610253565b366102535760405162461bcd60e51b8152602060048201526016602482015275109357d49150d152559157d393d517d0531313d5d15160521b60448201526064015b60405180910390fd5b60405162461bcd60e51b815260206004820152601760248201527f424d5f46414c4c4241434b5f4e4f545f414c4c4f574544000000000000000000604482015260640161024a565b3480156102a757600080fd5b506102bb6102b6366004614dcc565b61079c565b60405190151581526020015b60405180910390f35b3480156102dc57600080fd5b506102f06102eb366004614ea7565b6107d3565b005b3480156102fe57600080fd5b506102bb61030d366004614f29565b610d98565b34801561031e57600080fd5b5061033d61032d366004615056565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016102c7565b34801561036257600080fd5b506103766103713660046150c1565b610deb565b6040519081526020016102c7565b6102f06103923660046150c1565b610f79565b3480156103a357600080fd5b506103cb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102c7565b3480156103ef57600080fd5b506102f06103fe3660046150da565b61163f565b34801561040f57600080fd5b5061033d636cdb3d1360e11b81565b34801561042a57600080fd5b506102f06104393660046150c1565b611789565b34801561044a57600080fd5b506102f0611d04565b34801561045f57600080fd5b506102f061046e36600461511b565b611e29565b6102f06104813660046151ab565b611faa565b34801561049257600080fd5b506104a66104a13660046150c1565b612773565b6040516102c791906152fd565b3480156104bf57600080fd5b50600054600160a01b900460ff166102bb565b3480156104de57600080fd5b506104f26104ed3660046150c1565b612908565b6040516102c7919061530b565b34801561050b57600080fd5b5061037661051a3660046150c1565b612ae4565b34801561052b57600080fd5b506102f0612b0b565b34801561054057600080fd5b506102f0612b71565b34801561055557600080fd5b506102f06105643660046150c1565b612c93565b34801561057557600080fd5b50610376610584366004615420565b60066020526000908152604090205481565b3480156105a257600080fd5b506102f06105b13660046150c1565b612d7b565b3480156105c257600080fd5b506000546001600160a01b03166103cb565b3480156105e057600080fd5b506103766105ef3660046150c1565b612ed8565b34801561060057600080fd5b506102f061060f36600461511b565b612f97565b34801561062057600080fd5b506102f061062f3660046151ab565b6130cb565b34801561064057600080fd5b5061037661064f366004615420565b60026020526000908152604090205481565b34801561066d57600080fd5b506103cb7f000000000000000000000000000000000000000000000000000000000000000081565b3480156106a157600080fd5b506103cb7f000000000000000000000000000000000000000000000000000000000000000081565b3480156106d557600080fd5b5061033d6106e43660046154b1565b63bc197c8160e01b95945050505050565b34801561070157600080fd5b5061033d6380ac58cd60e01b81565b34801561071c57600080fd5b506102f061072b36600461555e565b6136fe565b34801561073c57600080fd5b506102f061074b3660046155c2565b613979565b34801561075c57600080fd5b5061033d61076b366004615680565b63f23a6e6160e01b95945050505050565b34801561078857600080fd5b506102f0610797366004615420565b613bd4565b60006001600160e01b03198216630271189760e51b14806107cd57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008581856001600160401b038111156107ef576107ef614f55565b604051908082528060200260200182016040528015610818578160200160208202803683370190505b5090506000866001600160401b0381111561083557610835614f55565b60405190808252806020026020018201604052801561085e578160200160208202803683370190505b509050600093505b86841015610ad857336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb322a836040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fa91906156f3565b6001600160a01b0316636352211e8a8a8881811061091a5761091a615710565b905060200201356040518263ffffffff1660e01b815260040161093f91815260200190565b602060405180830381865afa15801561095c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098091906156f3565b6001600160a01b0316146109e05760405162461bcd60e51b815260206004820152602160248201527f424d5f464c415348434c41494d5f43414c4c45525f49535f4e4f545f4f574e456044820152602960f91b606482015260840161024a565b6000610a038989878181106109f7576109f7615710565b90506020020135612908565b90506003816101c001516003811115610a1e57610a1e6152c5565b1415610a6c5760405162461bcd60e51b815260206004820152601a60248201527f424d5f464c415348434c41494d5f5354415455535f4552524f52000000000000604482015260640161024a565b8060200151838681518110610a8357610a83615710565b60200260200101906001600160a01b031690816001600160a01b0316815250508060400151828681518110610aba57610aba615710565b60209081029190910101525083610ad08161573c565b945050610866565b600093505b86841015610b8c57818481518110610af757610af7615710565b60200260200101516001600160a01b03166342842e0e308b848881518110610b2157610b21615710565b60200260200101516040518463ffffffff1660e01b8152600401610b4793929190615757565b600060405180830381600087803b158015610b6157600080fd5b505af1158015610b75573d6000803e3d6000fd5b505050508380610b849061573c565b945050610add565b604051628e896f60e41b81526001600160a01b038416906308e896f090610bc19085908590339030908d908d906004016157a4565b6020604051808303816000875af1158015610be0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c04919061586d565b610c505760405162461bcd60e51b815260206004820152601c60248201527f424d5f464c415348434c41494d5f4558454355544f525f4552524f5200000000604482015260640161024a565b600093505b86841015610d8d57818481518110610c6f57610c6f615710565b60200260200101516001600160a01b03166342842e0e8a30848881518110610c9957610c99615710565b60200260200101516040518463ffffffff1660e01b8152600401610cbf93929190615757565b600060405180830381600087803b158015610cd957600080fd5b505af1158015610ced573d6000803e3d6000fd5b50505050808481518110610d0357610d03615710565b6020026020010151828581518110610d1d57610d1d615710565b60200260200101516001600160a01b03168a6001600160a01b03167f6bac1c66016500cd7b62d69e86268760baac6cd34a70003af66ffa8a97983216610d603390565b6040516001600160a01b03909116815260200160405180910390a483610d858161573c565b945050610c55565b505050505050505050565b6001600160a01b038216600090815260036020908152604080832084845290915281205460ff16158015610de457506001600160a01b0383166000908152600260205260409020548210155b9392505050565b600081815260056020818152604080842081516101e0810183528154815260018201546001600160a01b039081169482019490945260028201549281019290925260038082015460608401526004820154841660808401529381015460a083015260068101546001600160801b0380821660c0850152600160801b9091041660e0830152600781015480841661010084015264ffffffffff600160a01b82048116610120850152600160c81b90910481166101408401526008820154808216610160850152650100000000008104909116610180840152600160501b81049093166101a08301528493919290916101c084019160ff600160f01b9091041690811115610ef957610ef96152c5565b6003811115610f0a57610f0a6152c5565b815250509050600081610160015164ffffffffff164210610f2b5742610f39565b81610160015164ffffffffff165b9050610f71610f5d83610140015164ffffffffff1683613c9c90919063ffffffff16565b60e08401516001600160801b031690613ca8565b949350505050565b60026001541415610f9c5760405162461bcd60e51b815260040161024a90615888565b60026001556000818152600560205260409020548190610fce5760405162461bcd60e51b815260040161024a906158bf565b6000610fd983612908565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa15801561103b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105f91906156f3565b82516040516391541e0560e01b81526001600160a01b0392909216916391541e05916110919160040190815260200190565b61018060405180830381865afa1580156110af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d3919061590c565b6020015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161461115a5760405162461bcd60e51b815260206004820152601c60248201527f424d5f52455041595f4554485f41535345545f4e4f545f4d4154434800000000604482015260640161024a565b6001826101c001516003811115611173576111736152c5565b148061119557506002826101c001516003811115611193576111936152c5565b145b6111d95760405162461bcd60e51b81526020600482015260156024820152742126afa922a820acafa9aa20aa2aa9afa2a92927a960591b604482015260640161024a565b6000806111e586613d64565b91509150816001600160a01b03166111fa3390565b6001600160a01b0316146112505760405162461bcd60e51b815260206004820152601d60248201527f424d5f52455041595f4e4f545f424f52524f575f4e46545f4f574e4552000000604482015260640161024a565b600080600061125e89613f50565b925092509250823410156112b45760405162461bcd60e51b815260206004820152601d60248201527f424d5f52455041595f4554485f494e5055545f4e4f545f454e4f554748000000604482015260640161024a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b15801561130f57600080fd5b505af1158015611323573d6000803e3d6000fd5b5050505050856001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015611395573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b991906156f3565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303816000875af1158015611406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142a919061586d565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015611489573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ad91906156f3565b875160405163e78f094960e01b81526004810191909152602481018490526001600160a01b03868116604483015260006064830152919091169063e78f094990608401600060405180830381600087803b15801561150a57600080fd5b505af115801561151e573d6000803e3d6000fd5b5050505060008111156115c1576115c17f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633d6a38446040518163ffffffff1660e01b8152600401602060405180830381865afa15801561158c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b091906156f3565b6001600160a01b0388169083614024565b6115da876020015130878a604001518b6060015161408c565b6115e8898860200151614273565b8234111561160357611603336115fe85346159d5565b6144d8565b60405133908a907f82569af5d9f2daff073ff0831c749b4d63b0b482446f46f2cf79d7df8f0720b190600090a350506001805550505050505050565b8061168c5760405162461bcd60e51b815260206004820152601960248201527f424d5f43414e43454c5f43414e4e4f545f42455f454d50545900000000000000604482015260640161024a565b60005b8181101561174157336000908152600260205260409020548383838181106116b9576116b9615710565b9050602002013510156116de5760405162461bcd60e51b815260040161024a906159ec565b33600090815260036020526040812060019185858581811061170257611702615710565b90506020020135815260200190815260200160002060006101000a81548160ff02191690831515021790555080806117399061573c565b91505061168f565b50336001600160a01b03167fac0004ba1a2ea62c1d6de00ade33246fa25432a7148f9e20cce8d9fea7493aa1838360405161177d929190615a64565b60405180910390a25050565b600260015414156117ac5760405162461bcd60e51b815260040161024a90615888565b600260015560008181526005602052604090205481906117de5760405162461bcd60e51b815260040161024a906158bf565b60006117e983612908565b90506001816101c001516003811115611804576118046152c5565b148061182657506002816101c001516003811115611824576118246152c5565b145b61186a5760405162461bcd60e51b81526020600482015260156024820152742126afa922a820acafa9aa20aa2aa9afa2a92927a960591b604482015260640161024a565b60008061187685613d64565b91509150816001600160a01b031661188b3390565b6001600160a01b0316146118e15760405162461bcd60e51b815260206004820152601d60248201527f424d5f52455041595f4e4f545f424f52524f575f4e46545f4f574e4552000000604482015260640161024a565b60008060006118ef88613f50565b92509250925060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015611955573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197991906156f3565b87516040516391541e0560e01b81526001600160a01b0392909216916391541e05916119ab9160040190815260200190565b61018060405180830381865afa1580156119c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ed919061590c565b602001519050611a086001600160a01b038216333087614574565b806001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9991906156f3565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018690526044016020604051808303816000875af1158015611ae6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0a919061586d565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8d91906156f3565b875160405163e78f094960e01b81526004810191909152602481018590526001600160a01b03878116604483015260006064830152919091169063e78f094990608401600060405180830381600087803b158015611bea57600080fd5b505af1158015611bfe573d6000803e3d6000fd5b505050506000821115611ca157611ca17f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633d6a38446040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9091906156f3565b6001600160a01b0383169084614024565b611cba876020015130888a604001518b6060015161408c565b611cc8898860200151614273565b60405133908a907f2469cc9e12e74c63438d5b1117b318cd3a4cdaf9d659d9eac6d975d14d96325490600090a350506001805550505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8891906156f3565b90506001600160a01b038116632500f2b6336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611dde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e02919061586d565b611e1e5760405162461bcd60e51b815260040161024a90615a78565b611e26614595565b50565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ead91906156f3565b90506001600160a01b038116639078c85a336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611f03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f27919061586d565b611f435760405162461bcd60e51b815260040161024a90615abc565b611f576001600160a01b0385168484614024565b826001600160a01b0316846001600160a01b03167f81275949a17d84915b61eeb24587a501cc8863011afba1ed12f3f6c5bdfd6a2184604051611f9c91815260200190565b60405180910390a350505050565b600054600160a01b900460ff1615611fd45760405162461bcd60e51b815260040161024a90615b01565b60026001541415611ff75760405162461bcd60e51b815260040161024a90615888565b6002600155604051629a9c4360e61b815260009073d809e473C4Dd543E1Ae4D635aAb6D139E6bf89Ae906326a710c090612035908790600401615c1b565b602060405180830381865af4158015612052573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120769190615c2a565b905073d809e473C4Dd543E1Ae4D635aAb6D139E6bf89Ae63f1085dec6003600287857f000000000000000000000000000000000000000000000000000000000000000089896120c3614632565b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518b63ffffffff1660e01b815260040161212a9a99989796959493929190615c43565b60006040518083038186803b15801561214257600080fd5b505af4158015612156573d6000803e3d6000fd5b5050506080850180516001600160a01b031660009081526003602090815260408083206101608a01518452825291829020805460ff1916600117905587015191519087015160608801516121ad945030919061408c565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa15801561220d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223191906156f3565b85516040516391541e0560e01b81526001600160a01b0392909216916391541e05916122639160040190815260200190565b61018060405180830381865afa158015612281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a5919061590c565b6040015190506000806122c48760000151846122be3390565b896146d7565b909250905081156123d3576122e46001600160a01b038416333085614574565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015612342573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236691906156f3565b8751604051630ad58d2f60e01b81526004810191909152602481018490523060448201526001600160a01b039190911690630ad58d2f90606401600060405180830381600087803b1580156123ba57600080fd5b505af11580156123ce573d6000803e3d6000fd5b505050505b80156124b0578034101561243b5760405162461bcd60e51b815260206004820152602960248201527f424d5f54414b455f424f52524f575f4f464645525f4554485f494e5055545f4e60448201526809ea8be8a9c9eaa8e960bb1b606482015260840161024a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561249657600080fd5b505af11580156124aa573d6000803e3d6000fd5b50505050505b6040516370a0823160e01b815230600482015286907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612516573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061253a9190615c2a565b101561259c5760405162461bcd60e51b815260206004820152602b60248201527f424d5f54414b455f424f52524f575f4f464645525f4554485f42414c414e434560448201526a0be9c9ea8be8a9c9eaa8e960ab1b606482015260840161024a565b60808701516040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916323b872dd916125ef9130918b90600401615757565b6020604051808303816000875af115801561260e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612632919061586d565b50600061264e88608001516126443390565b8a60200151614886565b6040516354df411f60e11b815290915073d809e473C4Dd543E1Ae4D635aAb6D139E6bf89Ae9063a9be823e906126b3906005908c9086908d908d907f000000000000000000000000000000000000000000000000000000000000000090600401615cad565b60006040518083038186803b1580156126cb57600080fd5b505af41580156126df573d6000803e3d6000fd5b50505050813411156127055760006126f783346159d5565b905061270333826144d8565b505b60808801516001600160a01b0316336001600160a01b0316827f1298f52246b94f327bb70ed663bf430fd6572492014c2556c7295f586049352c888c610160015160405161275d929190918252602082015260400190565b60405180910390a4505060018055505050505050565b600081815260056020818152604080842081516101e0810183528154815260018201546001600160a01b039081169482019490945260028201549281019290925260038082015460608401526004820154841660808401529381015460a083015260068101546001600160801b0380821660c0850152600160801b9091041660e0830152600781015480841661010084015264ffffffffff600160a01b82048116610120850152600160c81b90910481166101408401526008820154808216610160850152650100000000008104909116610180840152600160501b81049093166101a08301528493919290916101c084019160ff600160f01b9091041690811115612881576128816152c5565b6003811115612892576128926152c5565b905250600084815260056020526040902060080154909150600160f01b900460ff1660018160038111156128c8576128c86152c5565b1415610de4574282610180015164ffffffffff1610156128ea57506003610de4565b4282610160015164ffffffffff161015610de4575060029392505050565b612985604080516101e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a08101829052906101c082015290565b600082815260056020818152604080842081516101e0810183528154815260018201546001600160a01b039081169482019490945260028201549281019290925260038082015460608401526004820154841660808401529381015460a083015260068101546001600160801b0380821660c0850152600160801b9091041660e08301526007810154808416610100840152600160a01b810464ffffffffff908116610120850152600160c81b90910481166101408401526008820154808216610160850152650100000000008104909116610180840152600160501b81049093166101a0830152909290916101c0840191600160f01b90910460ff1690811115612a9257612a926152c5565b6003811115612aa357612aa36152c5565b9052509050612ab183612773565b816101c001906003811115612ac857612ac86152c5565b90816003811115612adb57612adb6152c5565b90525092915050565b60006107cd612af283610deb565b6000848152600560208190526040909120015490614aa4565b6000546001600160a01b03163314612b655760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161024a565b612b6f6000614ab0565b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bf591906156f3565b90506001600160a01b038116632500f2b6336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015612c4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c6f919061586d565b612c8b5760405162461bcd60e51b815260040161024a90615a78565b611e26614b00565b336000908152600260205260409020548111612cc15760405162461bcd60e51b815260040161024a906159ec565b33600090815260026020526040902054612cde906207a120615cf3565b8110612d2c5760405162461bcd60e51b815260206004820152601c60248201527f424d5f43414e43454c5f43414e4e4f545f43414e43454c5f4d4f524500000000604482015260640161024a565b3360008181526002602052604090819020839055517f3472ca53ce86826d0cf2457fc20b0aadb9ff559e29da4c38e37e98fb8edd966d90612d709084815260200190565b60405180910390a250565b600054600160a01b900460ff1615612da55760405162461bcd60e51b815260040161024a90615b01565b60026001541415612dc85760405162461bcd60e51b815260040161024a90615888565b60026001556000818152600560205260409020548190612dfa5760405162461bcd60e51b815260040161024a906158bf565b6000612e0583612908565b90506003816101c001516003811115612e2057612e206152c5565b14612e6d5760405162461bcd60e51b815260206004820152601960248201527f424d5f464f5245434c4f53455f5354415455535f4552524f5200000000000000604482015260640161024a565b6000612e7884613d64565b915050612e94826020015130838560400151866060015161408c565b612ea2848360200151614273565b604051339085907ee238c49f37203eb7f8f1b247198f719d692924475beb17ffb2791f4a02599190600090a35050600180555050565b600080612ee483612908565b905060006002826101c001516003811115612f0157612f016152c5565b1415610de457610f717f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d7a5a9d36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8c9190615c2a565b60a084015190614b65565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ff7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301b91906156f3565b90506001600160a01b038116632500f2b6336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015613071573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613095919061586d565b6130b15760405162461bcd60e51b815260040161024a90615a78565b6130c56001600160a01b0385168484614024565b50505050565b600054600160a01b900460ff16156130f55760405162461bcd60e51b815260040161024a90615b01565b600260015414156131185760405162461bcd60e51b815260040161024a90615888565b6002600155604051629a9c4360e61b815260009073d809e473C4Dd543E1Ae4D635aAb6D139E6bf89Ae906326a710c090613156908790600401615c1b565b602060405180830381865af4158015613173573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131979190615c2a565b905073d809e473C4Dd543E1Ae4D635aAb6D139E6bf89Ae63f1085dec600360028785600089896131c5614632565b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518b63ffffffff1660e01b815260040161322c9a99989796959493929190615c43565b60006040518083038186803b15801561324457600080fd5b505af4158015613258573d6000803e3d6000fd5b5050506080850180516001600160a01b031660009081526003602090815260408083206101608a01518452825291829020805460ff1916600117905587015191519087015160608801516132af945030919061408c565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa15801561330f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061333391906156f3565b85516040516391541e0560e01b81526001600160a01b0392909216916391541e05916133659160040190815260200190565b61018060405180830381865afa158015613383573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133a7919061590c565b90506000806133c0876000015184604001516122be3390565b909250905081156135d55760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa15801561342b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344f91906156f3565b88516040516391541e0560e01b81526001600160a01b0392909216916391541e05916134819160040190815260200190565b61018060405180830381865afa15801561349f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134c3919061590c565b6040015190506134de6001600160a01b038216333086614574565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa15801561353c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061356091906156f3565b885160808a0151604051630ad58d2f60e01b81526004810192909252602482018690526001600160a01b0390811660448301529190911690630ad58d2f90606401600060405180830381600087803b1580156135bb57600080fd5b505af11580156135cf573d6000803e3d6000fd5b50505050505b80156135fa576135fa33608089015160208601516001600160a01b0316919084614574565b600061360b88608001516126443390565b6040516354df411f60e11b815290915073d809e473C4Dd543E1Ae4D635aAb6D139E6bf89Ae9063a9be823e90613670906005908c9086908d908d907f000000000000000000000000000000000000000000000000000000000000000090600401615cad565b60006040518083038186803b15801561368857600080fd5b505af415801561369c573d6000803e3d6000fd5b5050505087608001516001600160a01b03166136b53390565b6001600160a01b0316827f07864953112d55762e87691309f2d6b84b5ea1771fbcd70b8a0b6b4474c685bd888c610160015160405161275d929190918252602082015260400190565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa15801561375e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061378291906156f3565b90506001600160a01b038116639078c85a336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156137d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137fc919061586d565b6138185760405162461bcd60e51b815260040161024a90615abc565b6001600160a01b0385166000908152600660205260409020541561388c5760405162461bcd60e51b815260206004820152602560248201527f424d5f434c41494d5f4552433732315f41495244524f505f4e4f545f5355505060448201526413d495115160da1b606482015260840161024a565b60005b8281101561392457856001600160a01b03166342842e0e30878787868181106138ba576138ba615710565b905060200201356040518463ffffffff1660e01b81526004016138df93929190615757565b600060405180830381600087803b1580156138f957600080fd5b505af115801561390d573d6000803e3d6000fd5b50505050808061391c9061573c565b91505061388f565b50836001600160a01b0316856001600160a01b03167f6c6b18e67b757c02ba92ef0f54038fc2135767acf9bef174b8780835ff455822858560405161396a929190615a64565b60405180910390a35050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156139d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139fd91906156f3565b90506001600160a01b038116639078c85a336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015613a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a77919061586d565b613a935760405162461bcd60e51b815260040161024a90615abc565b6001600160a01b03891660009081526006602052604090205415613b085760405162461bcd60e51b815260206004820152602660248201527f424d5f434c41494d5f455243313135355f41495244524f505f4e4f545f5355506044820152651413d495115160d21b606482015260840161024a565b604051631759616b60e11b81526001600160a01b038a1690632eb2c2d690613b429030908c908c908c908c908c908c908c90600401615d0b565b600060405180830381600087803b158015613b5c57600080fd5b505af1158015613b70573d6000803e3d6000fd5b50505050876001600160a01b0316896001600160a01b03167fc8144f7a11a69e58de79275b3e7420b4942b4e8318a0e0aa9ccb457c60387b02898989898989604051613bc196959493929190615d60565b60405180910390a3505050505050505050565b6000546001600160a01b03163314613c2e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161024a565b6001600160a01b038116613c935760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161024a565b611e2681614ab0565b6000610de482846159d5565b6000821580613cb5575081155b15613cc2575060006107cd565b81613cda60026b033b2e3c9fd0803ce8000000615da9565b613ce6906000196159d5565b613cf09190615da9565b8311156040518060400160405280600381526020016203130360ec1b81525090613d2d5760405162461bcd60e51b815260040161024a9190615df7565b506b033b2e3c9fd0803ce8000000613d46600282615da9565b613d508486615e2a565b613d5a9190615cf3565b610de49190615da9565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b39348386040518163ffffffff1660e01b8152600401602060405180830381865afa158015613dc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613de991906156f3565b6001600160a01b0316636352211e846040518263ffffffff1660e01b8152600401613e1691815260200190565b602060405180830381865afa158015613e33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e5791906156f3565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb322a836040518163ffffffff1660e01b8152600401602060405180830381865afa158015613eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613edb91906156f3565b6001600160a01b0316636352211e846040518263ffffffff1660e01b8152600401613f0891815260200190565b602060405180830381865afa158015613f25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f4991906156f3565b9150915091565b600080600080613f5f85612ed8565b9050613f7481613f6e87612ae4565b90614aa4565b935061400e7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634322b7146040518163ffffffff1660e01b8152600401602060405180830381865afa158015613fd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ffb9190615c2a565b61400883613f6e89610deb565b90614b65565b915061401a8483613c9c565b9250509193909250565b6040516001600160a01b03831660248201526044810182905261408790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614bef565b505050565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038616906301ffc9a790602401602060405180830381865afa1580156140d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140fb919061586d565b1561416757604051632142170760e11b81526001600160a01b038616906342842e0e9061413090879087908790600401615757565b600060405180830381600087803b15801561414a57600080fd5b505af115801561415e573d6000803e3d6000fd5b5050505061426c565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038616906301ffc9a790602401602060405180830381865afa1580156141b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141d6919061586d565b1561422d57604051637921219560e11b81526001600160a01b0385811660048301528481166024830152604482018490526064820183905260a06084830152600060a483015286169063f242432a9060c401614130565b60405162461bcd60e51b8152602060048201526014602482015273109357d3919517d393d517d4d5541413d495115160621b604482015260640161024a565b5050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb322a836040518163ffffffff1660e01b8152600401602060405180830381865afa1580156142d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142f591906156f3565b6001600160a01b03166342966c68836040518263ffffffff1660e01b815260040161432291815260200190565b600060405180830381600087803b15801561433c57600080fd5b505af1158015614350573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b39348386040518163ffffffff1660e01b8152600401602060405180830381865afa1580156143b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143d691906156f3565b6001600160a01b03166342966c68836040518263ffffffff1660e01b815260040161440391815260200190565b600060405180830381600087803b15801561441d57600080fd5b505af1158015614431573d6000803e3d6000fd5b505050506001600160a01b038116600090815260066020526040812080546001929061445e9084906159d5565b909155505050600090815260056020819052604082208281556001810180546001600160a01b03199081169091556002820184905560038201849055600482018054909116905590810182905560068101919091556007810180546001600160f01b031916905560080180546001600160f81b0319169055565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114614525576040519150601f19603f3d011682016040523d82523d6000602084013e61452a565b606091505b50509050806140875760405162461bcd60e51b8152602060048201526016602482015275109357d1551217d514905394d1915497d1905253115160521b604482015260640161024a565b6130c5846323b872dd60e01b85858560405160240161405093929190615757565b600054600160a01b900460ff166145e55760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161024a565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527ff0cf7ce475272740cae17eb3cadd6d254800be81c53f84a2f273b99036471c62918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b6040516370a0823160e01b81526001600160a01b03838116600483015260009182918291908716906370a0823190602401602060405180830381865afa158015614725573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147499190615c2a565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa1580156147ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147cf91906156f3565b6001600160a01b0316630aad628b896040518263ffffffff1660e01b81526004016147fc91815260200190565b602060405180830381865afa158015614819573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061483d9190615c2a565b905081811161484c578061484e565b815b915084821061485d578461485f565b815b935084821061486f576000614879565b6148798583613c9c565b9250505094509492505050565b600060045460016148979190615cf3565b60048181556040805163bb322a8360e01b815290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263bb322a83928082019260209290918290030181865afa1580156148ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061492391906156f3565b6040516394bf804d60e01b8152600481018390526001600160a01b03878116602483015291909116906394bf804d90604401600060405180830381600087803b15801561496f57600080fd5b505af1158015614983573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b39348386040518163ffffffff1660e01b8152600401602060405180830381865afa1580156149e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a0991906156f3565b6040516394bf804d60e01b8152600481018390526001600160a01b03868116602483015291909116906394bf804d90604401600060405180830381600087803b158015614a5557600080fd5b505af1158015614a69573d6000803e3d6000fd5b505050506001600160a01b0383166000908152600660205260408120805460019290614a96908490615cf3565b909155509095945050505050565b6000610de48284615cf3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600054600160a01b900460ff1615614b2a5760405162461bcd60e51b815260040161024a90615b01565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586146153390565b6000821580614b72575081155b15614b7f575060006107cd565b81614b8d6002612710615da9565b614b99906000196159d5565b614ba39190615da9565b8311156040518060400160405280600381526020016203130360ec1b81525090614be05760405162461bcd60e51b815260040161024a9190615df7565b50612710613d46600282615da9565b6000614c44826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614cc19092919063ffffffff16565b8051909150156140875780806020019051810190614c62919061586d565b6140875760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161024a565b6060610f71848460008585843b614d1a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161024a565b600080866001600160a01b03168587604051614d369190615e49565b60006040518083038185875af1925050503d8060008114614d73576040519150601f19603f3d011682016040523d82523d6000602084013e614d78565b606091505b5091509150614d88828286614d93565b979650505050505050565b60608315614da2575081610de4565b825115614db25782518084602001fd5b8160405162461bcd60e51b815260040161024a9190615df7565b600060208284031215614dde57600080fd5b81356001600160e01b031981168114610de457600080fd5b6001600160a01b0381168114611e2657600080fd5b8035614e1681614df6565b919050565b60008083601f840112614e2d57600080fd5b5081356001600160401b03811115614e4457600080fd5b6020830191508360208260051b8501011115614e5f57600080fd5b9250929050565b60008083601f840112614e7857600080fd5b5081356001600160401b03811115614e8f57600080fd5b602083019150836020828501011115614e5f57600080fd5b600080600080600060608688031215614ebf57600080fd5b8535614eca81614df6565b945060208601356001600160401b0380821115614ee657600080fd5b614ef289838a01614e1b565b90965094506040880135915080821115614f0b57600080fd5b50614f1888828901614e66565b969995985093965092949392505050565b60008060408385031215614f3c57600080fd5b8235614f4781614df6565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60405161020081016001600160401b0381118282101715614f8e57614f8e614f55565b60405290565b60405161018081016001600160401b0381118282101715614f8e57614f8e614f55565b604051601f8201601f191681016001600160401b0381118282101715614fdf57614fdf614f55565b604052919050565b600082601f830112614ff857600080fd5b81356001600160401b0381111561501157615011614f55565b615024601f8201601f1916602001614fb7565b81815284602083860101111561503957600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561506c57600080fd5b843561507781614df6565b9350602085013561508781614df6565b92506040850135915060608501356001600160401b038111156150a957600080fd5b6150b587828801614fe7565b91505092959194509250565b6000602082840312156150d357600080fd5b5035919050565b600080602083850312156150ed57600080fd5b82356001600160401b0381111561510357600080fd5b61510f85828601614e1b565b90969095509350505050565b60008060006060848603121561513057600080fd5b833561513b81614df6565b9250602084013561514b81614df6565b929592945050506040919091013590565b64ffffffffff81168114611e2657600080fd5b8035614e168161515c565b6001600160801b0381168114611e2657600080fd5b8035614e168161517a565b803560ff81168114614e1657600080fd5b60008060008385036102408112156151c257600080fd5b610200808212156151d257600080fd5b6151da614f6b565b9150853582526151ec60208701614e0b565b6020830152604086013560408301526060860135606083015261521160808701614e0b565b608083015260a086013560a083015260c086013560c083015261523660e0870161516f565b60e083015261010061524981880161516f565b9083015261012061525b87820161518f565b9083015261014061526d878201614e0b565b90830152610160868101359083015261018080870135908301526101a061529581880161519a565b908301526101c086810135908301526101e080870135908301529096908501359550610220909401359392505050565b634e487b7160e01b600052602160045260246000fd5b600481106152f957634e487b7160e01b600052602160045260246000fd5b9052565b602081016107cd82846152db565b815181526020808301516101e083019161532f908401826001600160a01b03169052565b506040830151604083015260608301516060830152608083015161535e60808401826001600160a01b03169052565b5060a083015160a083015260c083015161538360c08401826001600160801b03169052565b5060e083015161539e60e08401826001600160801b03169052565b50610100838101516001600160a01b03908116918401919091526101208085015164ffffffffff90811691850191909152610140808601518216908501526101608086015182169085015261018080860151909116908401526101a080850151909116908301526101c080840151615418828501826152db565b505092915050565b60006020828403121561543257600080fd5b8135610de481614df6565b600082601f83011261544e57600080fd5b813560206001600160401b0382111561546957615469614f55565b8160051b615478828201614fb7565b928352848101820192828101908785111561549257600080fd5b83870192505b84831015614d8857823582529183019190830190615498565b600080600080600060a086880312156154c957600080fd5b85356154d481614df6565b945060208601356154e481614df6565b935060408601356001600160401b038082111561550057600080fd5b61550c89838a0161543d565b9450606088013591508082111561552257600080fd5b61552e89838a0161543d565b9350608088013591508082111561554457600080fd5b5061555188828901614fe7565b9150509295509295909350565b6000806000806060858703121561557457600080fd5b843561557f81614df6565b9350602085013561558f81614df6565b925060408501356001600160401b038111156155aa57600080fd5b6155b687828801614e1b565b95989497509550505050565b60008060008060008060008060a0898b0312156155de57600080fd5b88356155e981614df6565b975060208901356155f981614df6565b965060408901356001600160401b038082111561561557600080fd5b6156218c838d01614e1b565b909850965060608b013591508082111561563a57600080fd5b6156468c838d01614e1b565b909650945060808b013591508082111561565f57600080fd5b5061566c8b828c01614e66565b999c989b5096995094979396929594505050565b600080600080600060a0868803121561569857600080fd5b85356156a381614df6565b945060208601356156b381614df6565b9350604086013592506060860135915060808601356001600160401b038111156156dc57600080fd5b61555188828901614fe7565b8051614e1681614df6565b60006020828403121561570557600080fd5b8151610de481614df6565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561575057615750615726565b5060010190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60a0808252875190820181905260009060209060c0840190828b01845b828110156157e65781516001600160a01b0316845292840192908401906001016157c1565b5050508381038285015288518082528983019183019060005b8181101561581b578351835292840192918401916001016157ff565b50506001600160a01b03891660408601526001600160a01b0388166060860152848103608086015261584e81878961577b565b9b9a5050505050505050505050565b80518015158114614e1657600080fd5b60006020828403121561587f57600080fd5b610de48261585d565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526018908201527f424d5f434845434b5f4c4f414e5f4e4f545f4558495354530000000000000000604082015260600190565b8051614e168161517a565b8051614e168161515c565b6000610180828403121561591f57600080fd5b615927614f94565b82518152615937602084016156e8565b6020820152615948604084016156e8565b6040820152615959606084016156e8565b606082015261596a608084016158f6565b608082015260a083015160a082015260c083015160c082015261598f60e08401615901565b60e082015261010083810151908201526101206159ad8185016156e8565b9082015261014083810151908201526101606159ca81850161585d565b908201529392505050565b6000828210156159e7576159e7615726565b500390565b60208082526022908201527f424d5f43414e43454c5f4e4f4e43455f4c4f5745525f5448414e5f4355525245604082015261139560f21b606082015260800190565b81835260006001600160fb1b03831115615a4757600080fd5b8260051b8083602087013760009401602001938452509192915050565b602081526000610f71602083018486615a2e565b60208082526024908201527f424d5f41434c5f4f4e4c595f454d455247454e43595f41444d494e5f43414e5f60408201526310d0531360e21b606082015260800190565b60208082526025908201527f424d5f41434c5f4f4e4c595f41495244524f505f4f50455241544f525f43414e60408201526417d0d0531360da1b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b805182526020810151615b4960208401826001600160a01b03169052565b5060408101516040830152606081015160608301526080810151615b7860808401826001600160a01b03169052565b5060a081015160a083015260c081015160c083015260e0810151615ba560e084018264ffffffffff169052565b506101008181015164ffffffffff1690830152610120808201516001600160801b031690830152610140808201516001600160a01b031690830152610160808201519083015261018080820151908301526101a08082015160ff16908301526101c080820151908301526101e090810151910152565b61020081016107cd8284615b2b565b600060208284031215615c3c57600080fd5b5051919050565b8a8152602081018a90526103208101615c5f604083018b615b2b565b6102408201989098526001600160a01b039687166102608201526102808101959095526102a08501939093526102c084019190915283166102e0830152909116610300909101529392505050565b8681526102a08101615cc26020830188615b2b565b6102208201959095526102408101939093526102608301919091526001600160a01b03166102809091015292915050565b60008219821115615d0657615d06615726565b500190565b6001600160a01b0389811682528816602082015260a060408201819052600090615d38908301888a615a2e565b8281036060840152615d4b818789615a2e565b9050828103608084015261584e81858761577b565b606081526000615d7460608301888a615a2e565b8281036020840152615d87818789615a2e565b90508281036040840152615d9c81858761577b565b9998505050505050505050565b600082615dc657634e487b7160e01b600052601260045260246000fd5b500490565b60005b83811015615de6578181015183820152602001615dce565b838111156130c55750506000910152565b6020815260008251806020840152615e16816040850160208701615dcb565b601f01601f19169190910160400192915050565b6000816000190483118215151615615e4457615e44615726565b500290565b60008251615e5b818460208701615dcb565b919091019291505056fea26469706673582212200401b06d5ef91bdd225c88319437fd0e264b423fa4bfca9f8e56dc8f5334e93e64736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106102085760003560e01c8063715018a611610118578063aa99fa98116100a0578063bc6bc0cd1161006f578063bc6bc0cd146106f5578063cae5955314610710578063e3185e1214610730578063f23a6e6114610750578063f2fde38b1461077c57610253565b8063aa99fa9814610634578063ad5c464814610661578063ade97ab514610695578063bc197c81146106c957610253565b80638bf1badd116100e75780638bf1badd146105965780638da5cb5b146105b657806396e59682146105d4578063a3d5b255146105f4578063a63487391461061457610253565b8063715018a61461051f5780638456cb591461053457806384e5cec5146105495780638a1818331461056957610253565b806333bf61561161019b5780635b3ce3241161016a5780635b3ce324146104735780635c622a0e146104865780635c975abb146104b3578063622fe39f146104d25780636b52b365146104ff57610253565b806333bf615614610403578063371fd8e61461041e5780633f4ba83a1461043e5780634f0709161461045357610253565b80631c187495116101d75780631c187495146103565780632247463e1461038457806329c55f06146103975780632f844ea8146103e357610253565b806301ffc9a71461029b57806303282d6e146102d05780630647ee20146102f2578063150b7a021461031257610253565b366102535760405162461bcd60e51b8152602060048201526016602482015275109357d49150d152559157d393d517d0531313d5d15160521b60448201526064015b60405180910390fd5b60405162461bcd60e51b815260206004820152601760248201527f424d5f46414c4c4241434b5f4e4f545f414c4c4f574544000000000000000000604482015260640161024a565b3480156102a757600080fd5b506102bb6102b6366004614dcc565b61079c565b60405190151581526020015b60405180910390f35b3480156102dc57600080fd5b506102f06102eb366004614ea7565b6107d3565b005b3480156102fe57600080fd5b506102bb61030d366004614f29565b610d98565b34801561031e57600080fd5b5061033d61032d366004615056565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016102c7565b34801561036257600080fd5b506103766103713660046150c1565b610deb565b6040519081526020016102c7565b6102f06103923660046150c1565b610f79565b3480156103a357600080fd5b506103cb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102c7565b3480156103ef57600080fd5b506102f06103fe3660046150da565b61163f565b34801561040f57600080fd5b5061033d636cdb3d1360e11b81565b34801561042a57600080fd5b506102f06104393660046150c1565b611789565b34801561044a57600080fd5b506102f0611d04565b34801561045f57600080fd5b506102f061046e36600461511b565b611e29565b6102f06104813660046151ab565b611faa565b34801561049257600080fd5b506104a66104a13660046150c1565b612773565b6040516102c791906152fd565b3480156104bf57600080fd5b50600054600160a01b900460ff166102bb565b3480156104de57600080fd5b506104f26104ed3660046150c1565b612908565b6040516102c7919061530b565b34801561050b57600080fd5b5061037661051a3660046150c1565b612ae4565b34801561052b57600080fd5b506102f0612b0b565b34801561054057600080fd5b506102f0612b71565b34801561055557600080fd5b506102f06105643660046150c1565b612c93565b34801561057557600080fd5b50610376610584366004615420565b60066020526000908152604090205481565b3480156105a257600080fd5b506102f06105b13660046150c1565b612d7b565b3480156105c257600080fd5b506000546001600160a01b03166103cb565b3480156105e057600080fd5b506103766105ef3660046150c1565b612ed8565b34801561060057600080fd5b506102f061060f36600461511b565b612f97565b34801561062057600080fd5b506102f061062f3660046151ab565b6130cb565b34801561064057600080fd5b5061037661064f366004615420565b60026020526000908152604090205481565b34801561066d57600080fd5b506103cb7f000000000000000000000000000000000000000000000000000000000000000081565b3480156106a157600080fd5b506103cb7f000000000000000000000000000000000000000000000000000000000000000081565b3480156106d557600080fd5b5061033d6106e43660046154b1565b63bc197c8160e01b95945050505050565b34801561070157600080fd5b5061033d6380ac58cd60e01b81565b34801561071c57600080fd5b506102f061072b36600461555e565b6136fe565b34801561073c57600080fd5b506102f061074b3660046155c2565b613979565b34801561075c57600080fd5b5061033d61076b366004615680565b63f23a6e6160e01b95945050505050565b34801561078857600080fd5b506102f0610797366004615420565b613bd4565b60006001600160e01b03198216630271189760e51b14806107cd57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008581856001600160401b038111156107ef576107ef614f55565b604051908082528060200260200182016040528015610818578160200160208202803683370190505b5090506000866001600160401b0381111561083557610835614f55565b60405190808252806020026020018201604052801561085e578160200160208202803683370190505b509050600093505b86841015610ad857336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb322a836040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fa91906156f3565b6001600160a01b0316636352211e8a8a8881811061091a5761091a615710565b905060200201356040518263ffffffff1660e01b815260040161093f91815260200190565b602060405180830381865afa15801561095c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098091906156f3565b6001600160a01b0316146109e05760405162461bcd60e51b815260206004820152602160248201527f424d5f464c415348434c41494d5f43414c4c45525f49535f4e4f545f4f574e456044820152602960f91b606482015260840161024a565b6000610a038989878181106109f7576109f7615710565b90506020020135612908565b90506003816101c001516003811115610a1e57610a1e6152c5565b1415610a6c5760405162461bcd60e51b815260206004820152601a60248201527f424d5f464c415348434c41494d5f5354415455535f4552524f52000000000000604482015260640161024a565b8060200151838681518110610a8357610a83615710565b60200260200101906001600160a01b031690816001600160a01b0316815250508060400151828681518110610aba57610aba615710565b60209081029190910101525083610ad08161573c565b945050610866565b600093505b86841015610b8c57818481518110610af757610af7615710565b60200260200101516001600160a01b03166342842e0e308b848881518110610b2157610b21615710565b60200260200101516040518463ffffffff1660e01b8152600401610b4793929190615757565b600060405180830381600087803b158015610b6157600080fd5b505af1158015610b75573d6000803e3d6000fd5b505050508380610b849061573c565b945050610add565b604051628e896f60e41b81526001600160a01b038416906308e896f090610bc19085908590339030908d908d906004016157a4565b6020604051808303816000875af1158015610be0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c04919061586d565b610c505760405162461bcd60e51b815260206004820152601c60248201527f424d5f464c415348434c41494d5f4558454355544f525f4552524f5200000000604482015260640161024a565b600093505b86841015610d8d57818481518110610c6f57610c6f615710565b60200260200101516001600160a01b03166342842e0e8a30848881518110610c9957610c99615710565b60200260200101516040518463ffffffff1660e01b8152600401610cbf93929190615757565b600060405180830381600087803b158015610cd957600080fd5b505af1158015610ced573d6000803e3d6000fd5b50505050808481518110610d0357610d03615710565b6020026020010151828581518110610d1d57610d1d615710565b60200260200101516001600160a01b03168a6001600160a01b03167f6bac1c66016500cd7b62d69e86268760baac6cd34a70003af66ffa8a97983216610d603390565b6040516001600160a01b03909116815260200160405180910390a483610d858161573c565b945050610c55565b505050505050505050565b6001600160a01b038216600090815260036020908152604080832084845290915281205460ff16158015610de457506001600160a01b0383166000908152600260205260409020548210155b9392505050565b600081815260056020818152604080842081516101e0810183528154815260018201546001600160a01b039081169482019490945260028201549281019290925260038082015460608401526004820154841660808401529381015460a083015260068101546001600160801b0380821660c0850152600160801b9091041660e0830152600781015480841661010084015264ffffffffff600160a01b82048116610120850152600160c81b90910481166101408401526008820154808216610160850152650100000000008104909116610180840152600160501b81049093166101a08301528493919290916101c084019160ff600160f01b9091041690811115610ef957610ef96152c5565b6003811115610f0a57610f0a6152c5565b815250509050600081610160015164ffffffffff164210610f2b5742610f39565b81610160015164ffffffffff165b9050610f71610f5d83610140015164ffffffffff1683613c9c90919063ffffffff16565b60e08401516001600160801b031690613ca8565b949350505050565b60026001541415610f9c5760405162461bcd60e51b815260040161024a90615888565b60026001556000818152600560205260409020548190610fce5760405162461bcd60e51b815260040161024a906158bf565b6000610fd983612908565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa15801561103b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105f91906156f3565b82516040516391541e0560e01b81526001600160a01b0392909216916391541e05916110919160040190815260200190565b61018060405180830381865afa1580156110af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d3919061590c565b6020015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161461115a5760405162461bcd60e51b815260206004820152601c60248201527f424d5f52455041595f4554485f41535345545f4e4f545f4d4154434800000000604482015260640161024a565b6001826101c001516003811115611173576111736152c5565b148061119557506002826101c001516003811115611193576111936152c5565b145b6111d95760405162461bcd60e51b81526020600482015260156024820152742126afa922a820acafa9aa20aa2aa9afa2a92927a960591b604482015260640161024a565b6000806111e586613d64565b91509150816001600160a01b03166111fa3390565b6001600160a01b0316146112505760405162461bcd60e51b815260206004820152601d60248201527f424d5f52455041595f4e4f545f424f52524f575f4e46545f4f574e4552000000604482015260640161024a565b600080600061125e89613f50565b925092509250823410156112b45760405162461bcd60e51b815260206004820152601d60248201527f424d5f52455041595f4554485f494e5055545f4e4f545f454e4f554748000000604482015260640161024a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b15801561130f57600080fd5b505af1158015611323573d6000803e3d6000fd5b5050505050856001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015611395573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b991906156f3565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303816000875af1158015611406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142a919061586d565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015611489573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ad91906156f3565b875160405163e78f094960e01b81526004810191909152602481018490526001600160a01b03868116604483015260006064830152919091169063e78f094990608401600060405180830381600087803b15801561150a57600080fd5b505af115801561151e573d6000803e3d6000fd5b5050505060008111156115c1576115c17f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633d6a38446040518163ffffffff1660e01b8152600401602060405180830381865afa15801561158c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b091906156f3565b6001600160a01b0388169083614024565b6115da876020015130878a604001518b6060015161408c565b6115e8898860200151614273565b8234111561160357611603336115fe85346159d5565b6144d8565b60405133908a907f82569af5d9f2daff073ff0831c749b4d63b0b482446f46f2cf79d7df8f0720b190600090a350506001805550505050505050565b8061168c5760405162461bcd60e51b815260206004820152601960248201527f424d5f43414e43454c5f43414e4e4f545f42455f454d50545900000000000000604482015260640161024a565b60005b8181101561174157336000908152600260205260409020548383838181106116b9576116b9615710565b9050602002013510156116de5760405162461bcd60e51b815260040161024a906159ec565b33600090815260036020526040812060019185858581811061170257611702615710565b90506020020135815260200190815260200160002060006101000a81548160ff02191690831515021790555080806117399061573c565b91505061168f565b50336001600160a01b03167fac0004ba1a2ea62c1d6de00ade33246fa25432a7148f9e20cce8d9fea7493aa1838360405161177d929190615a64565b60405180910390a25050565b600260015414156117ac5760405162461bcd60e51b815260040161024a90615888565b600260015560008181526005602052604090205481906117de5760405162461bcd60e51b815260040161024a906158bf565b60006117e983612908565b90506001816101c001516003811115611804576118046152c5565b148061182657506002816101c001516003811115611824576118246152c5565b145b61186a5760405162461bcd60e51b81526020600482015260156024820152742126afa922a820acafa9aa20aa2aa9afa2a92927a960591b604482015260640161024a565b60008061187685613d64565b91509150816001600160a01b031661188b3390565b6001600160a01b0316146118e15760405162461bcd60e51b815260206004820152601d60248201527f424d5f52455041595f4e4f545f424f52524f575f4e46545f4f574e4552000000604482015260640161024a565b60008060006118ef88613f50565b92509250925060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015611955573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197991906156f3565b87516040516391541e0560e01b81526001600160a01b0392909216916391541e05916119ab9160040190815260200190565b61018060405180830381865afa1580156119c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ed919061590c565b602001519050611a086001600160a01b038216333087614574565b806001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9991906156f3565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018690526044016020604051808303816000875af1158015611ae6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0a919061586d565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8d91906156f3565b875160405163e78f094960e01b81526004810191909152602481018590526001600160a01b03878116604483015260006064830152919091169063e78f094990608401600060405180830381600087803b158015611bea57600080fd5b505af1158015611bfe573d6000803e3d6000fd5b505050506000821115611ca157611ca17f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633d6a38446040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9091906156f3565b6001600160a01b0383169084614024565b611cba876020015130888a604001518b6060015161408c565b611cc8898860200151614273565b60405133908a907f2469cc9e12e74c63438d5b1117b318cd3a4cdaf9d659d9eac6d975d14d96325490600090a350506001805550505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8891906156f3565b90506001600160a01b038116632500f2b6336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611dde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e02919061586d565b611e1e5760405162461bcd60e51b815260040161024a90615a78565b611e26614595565b50565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ead91906156f3565b90506001600160a01b038116639078c85a336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611f03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f27919061586d565b611f435760405162461bcd60e51b815260040161024a90615abc565b611f576001600160a01b0385168484614024565b826001600160a01b0316846001600160a01b03167f81275949a17d84915b61eeb24587a501cc8863011afba1ed12f3f6c5bdfd6a2184604051611f9c91815260200190565b60405180910390a350505050565b600054600160a01b900460ff1615611fd45760405162461bcd60e51b815260040161024a90615b01565b60026001541415611ff75760405162461bcd60e51b815260040161024a90615888565b6002600155604051629a9c4360e61b815260009073__$99340bd5a7874738aefb18e7cdd0ba78ce$__906326a710c090612035908790600401615c1b565b602060405180830381865af4158015612052573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120769190615c2a565b905073__$99340bd5a7874738aefb18e7cdd0ba78ce$__63f1085dec6003600287857f000000000000000000000000000000000000000000000000000000000000000089896120c3614632565b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518b63ffffffff1660e01b815260040161212a9a99989796959493929190615c43565b60006040518083038186803b15801561214257600080fd5b505af4158015612156573d6000803e3d6000fd5b5050506080850180516001600160a01b031660009081526003602090815260408083206101608a01518452825291829020805460ff1916600117905587015191519087015160608801516121ad945030919061408c565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa15801561220d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223191906156f3565b85516040516391541e0560e01b81526001600160a01b0392909216916391541e05916122639160040190815260200190565b61018060405180830381865afa158015612281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a5919061590c565b6040015190506000806122c48760000151846122be3390565b896146d7565b909250905081156123d3576122e46001600160a01b038416333085614574565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015612342573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236691906156f3565b8751604051630ad58d2f60e01b81526004810191909152602481018490523060448201526001600160a01b039190911690630ad58d2f90606401600060405180830381600087803b1580156123ba57600080fd5b505af11580156123ce573d6000803e3d6000fd5b505050505b80156124b0578034101561243b5760405162461bcd60e51b815260206004820152602960248201527f424d5f54414b455f424f52524f575f4f464645525f4554485f494e5055545f4e60448201526809ea8be8a9c9eaa8e960bb1b606482015260840161024a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561249657600080fd5b505af11580156124aa573d6000803e3d6000fd5b50505050505b6040516370a0823160e01b815230600482015286907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612516573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061253a9190615c2a565b101561259c5760405162461bcd60e51b815260206004820152602b60248201527f424d5f54414b455f424f52524f575f4f464645525f4554485f42414c414e434560448201526a0be9c9ea8be8a9c9eaa8e960ab1b606482015260840161024a565b60808701516040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916323b872dd916125ef9130918b90600401615757565b6020604051808303816000875af115801561260e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612632919061586d565b50600061264e88608001516126443390565b8a60200151614886565b6040516354df411f60e11b815290915073__$99340bd5a7874738aefb18e7cdd0ba78ce$__9063a9be823e906126b3906005908c9086908d908d907f000000000000000000000000000000000000000000000000000000000000000090600401615cad565b60006040518083038186803b1580156126cb57600080fd5b505af41580156126df573d6000803e3d6000fd5b50505050813411156127055760006126f783346159d5565b905061270333826144d8565b505b60808801516001600160a01b0316336001600160a01b0316827f1298f52246b94f327bb70ed663bf430fd6572492014c2556c7295f586049352c888c610160015160405161275d929190918252602082015260400190565b60405180910390a4505060018055505050505050565b600081815260056020818152604080842081516101e0810183528154815260018201546001600160a01b039081169482019490945260028201549281019290925260038082015460608401526004820154841660808401529381015460a083015260068101546001600160801b0380821660c0850152600160801b9091041660e0830152600781015480841661010084015264ffffffffff600160a01b82048116610120850152600160c81b90910481166101408401526008820154808216610160850152650100000000008104909116610180840152600160501b81049093166101a08301528493919290916101c084019160ff600160f01b9091041690811115612881576128816152c5565b6003811115612892576128926152c5565b905250600084815260056020526040902060080154909150600160f01b900460ff1660018160038111156128c8576128c86152c5565b1415610de4574282610180015164ffffffffff1610156128ea57506003610de4565b4282610160015164ffffffffff161015610de4575060029392505050565b612985604080516101e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a08101829052906101c082015290565b600082815260056020818152604080842081516101e0810183528154815260018201546001600160a01b039081169482019490945260028201549281019290925260038082015460608401526004820154841660808401529381015460a083015260068101546001600160801b0380821660c0850152600160801b9091041660e08301526007810154808416610100840152600160a01b810464ffffffffff908116610120850152600160c81b90910481166101408401526008820154808216610160850152650100000000008104909116610180840152600160501b81049093166101a0830152909290916101c0840191600160f01b90910460ff1690811115612a9257612a926152c5565b6003811115612aa357612aa36152c5565b9052509050612ab183612773565b816101c001906003811115612ac857612ac86152c5565b90816003811115612adb57612adb6152c5565b90525092915050565b60006107cd612af283610deb565b6000848152600560208190526040909120015490614aa4565b6000546001600160a01b03163314612b655760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161024a565b612b6f6000614ab0565b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bf591906156f3565b90506001600160a01b038116632500f2b6336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015612c4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c6f919061586d565b612c8b5760405162461bcd60e51b815260040161024a90615a78565b611e26614b00565b336000908152600260205260409020548111612cc15760405162461bcd60e51b815260040161024a906159ec565b33600090815260026020526040902054612cde906207a120615cf3565b8110612d2c5760405162461bcd60e51b815260206004820152601c60248201527f424d5f43414e43454c5f43414e4e4f545f43414e43454c5f4d4f524500000000604482015260640161024a565b3360008181526002602052604090819020839055517f3472ca53ce86826d0cf2457fc20b0aadb9ff559e29da4c38e37e98fb8edd966d90612d709084815260200190565b60405180910390a250565b600054600160a01b900460ff1615612da55760405162461bcd60e51b815260040161024a90615b01565b60026001541415612dc85760405162461bcd60e51b815260040161024a90615888565b60026001556000818152600560205260409020548190612dfa5760405162461bcd60e51b815260040161024a906158bf565b6000612e0583612908565b90506003816101c001516003811115612e2057612e206152c5565b14612e6d5760405162461bcd60e51b815260206004820152601960248201527f424d5f464f5245434c4f53455f5354415455535f4552524f5200000000000000604482015260640161024a565b6000612e7884613d64565b915050612e94826020015130838560400151866060015161408c565b612ea2848360200151614273565b604051339085907ee238c49f37203eb7f8f1b247198f719d692924475beb17ffb2791f4a02599190600090a35050600180555050565b600080612ee483612908565b905060006002826101c001516003811115612f0157612f016152c5565b1415610de457610f717f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d7a5a9d36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8c9190615c2a565b60a084015190614b65565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ff7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301b91906156f3565b90506001600160a01b038116632500f2b6336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015613071573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613095919061586d565b6130b15760405162461bcd60e51b815260040161024a90615a78565b6130c56001600160a01b0385168484614024565b50505050565b600054600160a01b900460ff16156130f55760405162461bcd60e51b815260040161024a90615b01565b600260015414156131185760405162461bcd60e51b815260040161024a90615888565b6002600155604051629a9c4360e61b815260009073__$99340bd5a7874738aefb18e7cdd0ba78ce$__906326a710c090613156908790600401615c1b565b602060405180830381865af4158015613173573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131979190615c2a565b905073__$99340bd5a7874738aefb18e7cdd0ba78ce$__63f1085dec600360028785600089896131c5614632565b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518b63ffffffff1660e01b815260040161322c9a99989796959493929190615c43565b60006040518083038186803b15801561324457600080fd5b505af4158015613258573d6000803e3d6000fd5b5050506080850180516001600160a01b031660009081526003602090815260408083206101608a01518452825291829020805460ff1916600117905587015191519087015160608801516132af945030919061408c565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa15801561330f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061333391906156f3565b85516040516391541e0560e01b81526001600160a01b0392909216916391541e05916133659160040190815260200190565b61018060405180830381865afa158015613383573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133a7919061590c565b90506000806133c0876000015184604001516122be3390565b909250905081156135d55760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa15801561342b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344f91906156f3565b88516040516391541e0560e01b81526001600160a01b0392909216916391541e05916134819160040190815260200190565b61018060405180830381865afa15801561349f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134c3919061590c565b6040015190506134de6001600160a01b038216333086614574565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa15801561353c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061356091906156f3565b885160808a0151604051630ad58d2f60e01b81526004810192909252602482018690526001600160a01b0390811660448301529190911690630ad58d2f90606401600060405180830381600087803b1580156135bb57600080fd5b505af11580156135cf573d6000803e3d6000fd5b50505050505b80156135fa576135fa33608089015160208601516001600160a01b0316919084614574565b600061360b88608001516126443390565b6040516354df411f60e11b815290915073__$99340bd5a7874738aefb18e7cdd0ba78ce$__9063a9be823e90613670906005908c9086908d908d907f000000000000000000000000000000000000000000000000000000000000000090600401615cad565b60006040518083038186803b15801561368857600080fd5b505af415801561369c573d6000803e3d6000fd5b5050505087608001516001600160a01b03166136b53390565b6001600160a01b0316827f07864953112d55762e87691309f2d6b84b5ea1771fbcd70b8a0b6b4474c685bd888c610160015160405161275d929190918252602082015260400190565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa15801561375e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061378291906156f3565b90506001600160a01b038116639078c85a336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156137d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137fc919061586d565b6138185760405162461bcd60e51b815260040161024a90615abc565b6001600160a01b0385166000908152600660205260409020541561388c5760405162461bcd60e51b815260206004820152602560248201527f424d5f434c41494d5f4552433732315f41495244524f505f4e4f545f5355505060448201526413d495115160da1b606482015260840161024a565b60005b8281101561392457856001600160a01b03166342842e0e30878787868181106138ba576138ba615710565b905060200201356040518463ffffffff1660e01b81526004016138df93929190615757565b600060405180830381600087803b1580156138f957600080fd5b505af115801561390d573d6000803e3d6000fd5b50505050808061391c9061573c565b91505061388f565b50836001600160a01b0316856001600160a01b03167f6c6b18e67b757c02ba92ef0f54038fc2135767acf9bef174b8780835ff455822858560405161396a929190615a64565b60405180910390a35050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639a9dbb996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156139d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139fd91906156f3565b90506001600160a01b038116639078c85a336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015613a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a77919061586d565b613a935760405162461bcd60e51b815260040161024a90615abc565b6001600160a01b03891660009081526006602052604090205415613b085760405162461bcd60e51b815260206004820152602660248201527f424d5f434c41494d5f455243313135355f41495244524f505f4e4f545f5355506044820152651413d495115160d21b606482015260840161024a565b604051631759616b60e11b81526001600160a01b038a1690632eb2c2d690613b429030908c908c908c908c908c908c908c90600401615d0b565b600060405180830381600087803b158015613b5c57600080fd5b505af1158015613b70573d6000803e3d6000fd5b50505050876001600160a01b0316896001600160a01b03167fc8144f7a11a69e58de79275b3e7420b4942b4e8318a0e0aa9ccb457c60387b02898989898989604051613bc196959493929190615d60565b60405180910390a3505050505050505050565b6000546001600160a01b03163314613c2e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161024a565b6001600160a01b038116613c935760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161024a565b611e2681614ab0565b6000610de482846159d5565b6000821580613cb5575081155b15613cc2575060006107cd565b81613cda60026b033b2e3c9fd0803ce8000000615da9565b613ce6906000196159d5565b613cf09190615da9565b8311156040518060400160405280600381526020016203130360ec1b81525090613d2d5760405162461bcd60e51b815260040161024a9190615df7565b506b033b2e3c9fd0803ce8000000613d46600282615da9565b613d508486615e2a565b613d5a9190615cf3565b610de49190615da9565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b39348386040518163ffffffff1660e01b8152600401602060405180830381865afa158015613dc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613de991906156f3565b6001600160a01b0316636352211e846040518263ffffffff1660e01b8152600401613e1691815260200190565b602060405180830381865afa158015613e33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e5791906156f3565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb322a836040518163ffffffff1660e01b8152600401602060405180830381865afa158015613eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613edb91906156f3565b6001600160a01b0316636352211e846040518263ffffffff1660e01b8152600401613f0891815260200190565b602060405180830381865afa158015613f25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f4991906156f3565b9150915091565b600080600080613f5f85612ed8565b9050613f7481613f6e87612ae4565b90614aa4565b935061400e7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634322b7146040518163ffffffff1660e01b8152600401602060405180830381865afa158015613fd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ffb9190615c2a565b61400883613f6e89610deb565b90614b65565b915061401a8483613c9c565b9250509193909250565b6040516001600160a01b03831660248201526044810182905261408790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614bef565b505050565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038616906301ffc9a790602401602060405180830381865afa1580156140d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140fb919061586d565b1561416757604051632142170760e11b81526001600160a01b038616906342842e0e9061413090879087908790600401615757565b600060405180830381600087803b15801561414a57600080fd5b505af115801561415e573d6000803e3d6000fd5b5050505061426c565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038616906301ffc9a790602401602060405180830381865afa1580156141b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141d6919061586d565b1561422d57604051637921219560e11b81526001600160a01b0385811660048301528481166024830152604482018490526064820183905260a06084830152600060a483015286169063f242432a9060c401614130565b60405162461bcd60e51b8152602060048201526014602482015273109357d3919517d393d517d4d5541413d495115160621b604482015260640161024a565b5050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb322a836040518163ffffffff1660e01b8152600401602060405180830381865afa1580156142d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142f591906156f3565b6001600160a01b03166342966c68836040518263ffffffff1660e01b815260040161432291815260200190565b600060405180830381600087803b15801561433c57600080fd5b505af1158015614350573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b39348386040518163ffffffff1660e01b8152600401602060405180830381865afa1580156143b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143d691906156f3565b6001600160a01b03166342966c68836040518263ffffffff1660e01b815260040161440391815260200190565b600060405180830381600087803b15801561441d57600080fd5b505af1158015614431573d6000803e3d6000fd5b505050506001600160a01b038116600090815260066020526040812080546001929061445e9084906159d5565b909155505050600090815260056020819052604082208281556001810180546001600160a01b03199081169091556002820184905560038201849055600482018054909116905590810182905560068101919091556007810180546001600160f01b031916905560080180546001600160f81b0319169055565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114614525576040519150601f19603f3d011682016040523d82523d6000602084013e61452a565b606091505b50509050806140875760405162461bcd60e51b8152602060048201526016602482015275109357d1551217d514905394d1915497d1905253115160521b604482015260640161024a565b6130c5846323b872dd60e01b85858560405160240161405093929190615757565b600054600160a01b900460ff166145e55760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161024a565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527ff0cf7ce475272740cae17eb3cadd6d254800be81c53f84a2f273b99036471c62918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b6040516370a0823160e01b81526001600160a01b03838116600483015260009182918291908716906370a0823190602401602060405180830381865afa158015614725573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147499190615c2a565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa1580156147ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147cf91906156f3565b6001600160a01b0316630aad628b896040518263ffffffff1660e01b81526004016147fc91815260200190565b602060405180830381865afa158015614819573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061483d9190615c2a565b905081811161484c578061484e565b815b915084821061485d578461485f565b815b935084821061486f576000614879565b6148798583613c9c565b9250505094509492505050565b600060045460016148979190615cf3565b60048181556040805163bb322a8360e01b815290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263bb322a83928082019260209290918290030181865afa1580156148ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061492391906156f3565b6040516394bf804d60e01b8152600481018390526001600160a01b03878116602483015291909116906394bf804d90604401600060405180830381600087803b15801561496f57600080fd5b505af1158015614983573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b39348386040518163ffffffff1660e01b8152600401602060405180830381865afa1580156149e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a0991906156f3565b6040516394bf804d60e01b8152600481018390526001600160a01b03868116602483015291909116906394bf804d90604401600060405180830381600087803b158015614a5557600080fd5b505af1158015614a69573d6000803e3d6000fd5b505050506001600160a01b0383166000908152600660205260408120805460019290614a96908490615cf3565b909155509095945050505050565b6000610de48284615cf3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600054600160a01b900460ff1615614b2a5760405162461bcd60e51b815260040161024a90615b01565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586146153390565b6000821580614b72575081155b15614b7f575060006107cd565b81614b8d6002612710615da9565b614b99906000196159d5565b614ba39190615da9565b8311156040518060400160405280600381526020016203130360ec1b81525090614be05760405162461bcd60e51b815260040161024a9190615df7565b50612710613d46600282615da9565b6000614c44826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614cc19092919063ffffffff16565b8051909150156140875780806020019051810190614c62919061586d565b6140875760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161024a565b6060610f71848460008585843b614d1a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161024a565b600080866001600160a01b03168587604051614d369190615e49565b60006040518083038185875af1925050503d8060008114614d73576040519150601f19603f3d011682016040523d82523d6000602084013e614d78565b606091505b5091509150614d88828286614d93565b979650505050505050565b60608315614da2575081610de4565b825115614db25782518084602001fd5b8160405162461bcd60e51b815260040161024a9190615df7565b600060208284031215614dde57600080fd5b81356001600160e01b031981168114610de457600080fd5b6001600160a01b0381168114611e2657600080fd5b8035614e1681614df6565b919050565b60008083601f840112614e2d57600080fd5b5081356001600160401b03811115614e4457600080fd5b6020830191508360208260051b8501011115614e5f57600080fd5b9250929050565b60008083601f840112614e7857600080fd5b5081356001600160401b03811115614e8f57600080fd5b602083019150836020828501011115614e5f57600080fd5b600080600080600060608688031215614ebf57600080fd5b8535614eca81614df6565b945060208601356001600160401b0380821115614ee657600080fd5b614ef289838a01614e1b565b90965094506040880135915080821115614f0b57600080fd5b50614f1888828901614e66565b969995985093965092949392505050565b60008060408385031215614f3c57600080fd5b8235614f4781614df6565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60405161020081016001600160401b0381118282101715614f8e57614f8e614f55565b60405290565b60405161018081016001600160401b0381118282101715614f8e57614f8e614f55565b604051601f8201601f191681016001600160401b0381118282101715614fdf57614fdf614f55565b604052919050565b600082601f830112614ff857600080fd5b81356001600160401b0381111561501157615011614f55565b615024601f8201601f1916602001614fb7565b81815284602083860101111561503957600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561506c57600080fd5b843561507781614df6565b9350602085013561508781614df6565b92506040850135915060608501356001600160401b038111156150a957600080fd5b6150b587828801614fe7565b91505092959194509250565b6000602082840312156150d357600080fd5b5035919050565b600080602083850312156150ed57600080fd5b82356001600160401b0381111561510357600080fd5b61510f85828601614e1b565b90969095509350505050565b60008060006060848603121561513057600080fd5b833561513b81614df6565b9250602084013561514b81614df6565b929592945050506040919091013590565b64ffffffffff81168114611e2657600080fd5b8035614e168161515c565b6001600160801b0381168114611e2657600080fd5b8035614e168161517a565b803560ff81168114614e1657600080fd5b60008060008385036102408112156151c257600080fd5b610200808212156151d257600080fd5b6151da614f6b565b9150853582526151ec60208701614e0b565b6020830152604086013560408301526060860135606083015261521160808701614e0b565b608083015260a086013560a083015260c086013560c083015261523660e0870161516f565b60e083015261010061524981880161516f565b9083015261012061525b87820161518f565b9083015261014061526d878201614e0b565b90830152610160868101359083015261018080870135908301526101a061529581880161519a565b908301526101c086810135908301526101e080870135908301529096908501359550610220909401359392505050565b634e487b7160e01b600052602160045260246000fd5b600481106152f957634e487b7160e01b600052602160045260246000fd5b9052565b602081016107cd82846152db565b815181526020808301516101e083019161532f908401826001600160a01b03169052565b506040830151604083015260608301516060830152608083015161535e60808401826001600160a01b03169052565b5060a083015160a083015260c083015161538360c08401826001600160801b03169052565b5060e083015161539e60e08401826001600160801b03169052565b50610100838101516001600160a01b03908116918401919091526101208085015164ffffffffff90811691850191909152610140808601518216908501526101608086015182169085015261018080860151909116908401526101a080850151909116908301526101c080840151615418828501826152db565b505092915050565b60006020828403121561543257600080fd5b8135610de481614df6565b600082601f83011261544e57600080fd5b813560206001600160401b0382111561546957615469614f55565b8160051b615478828201614fb7565b928352848101820192828101908785111561549257600080fd5b83870192505b84831015614d8857823582529183019190830190615498565b600080600080600060a086880312156154c957600080fd5b85356154d481614df6565b945060208601356154e481614df6565b935060408601356001600160401b038082111561550057600080fd5b61550c89838a0161543d565b9450606088013591508082111561552257600080fd5b61552e89838a0161543d565b9350608088013591508082111561554457600080fd5b5061555188828901614fe7565b9150509295509295909350565b6000806000806060858703121561557457600080fd5b843561557f81614df6565b9350602085013561558f81614df6565b925060408501356001600160401b038111156155aa57600080fd5b6155b687828801614e1b565b95989497509550505050565b60008060008060008060008060a0898b0312156155de57600080fd5b88356155e981614df6565b975060208901356155f981614df6565b965060408901356001600160401b038082111561561557600080fd5b6156218c838d01614e1b565b909850965060608b013591508082111561563a57600080fd5b6156468c838d01614e1b565b909650945060808b013591508082111561565f57600080fd5b5061566c8b828c01614e66565b999c989b5096995094979396929594505050565b600080600080600060a0868803121561569857600080fd5b85356156a381614df6565b945060208601356156b381614df6565b9350604086013592506060860135915060808601356001600160401b038111156156dc57600080fd5b61555188828901614fe7565b8051614e1681614df6565b60006020828403121561570557600080fd5b8151610de481614df6565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561575057615750615726565b5060010190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60a0808252875190820181905260009060209060c0840190828b01845b828110156157e65781516001600160a01b0316845292840192908401906001016157c1565b5050508381038285015288518082528983019183019060005b8181101561581b578351835292840192918401916001016157ff565b50506001600160a01b03891660408601526001600160a01b0388166060860152848103608086015261584e81878961577b565b9b9a5050505050505050505050565b80518015158114614e1657600080fd5b60006020828403121561587f57600080fd5b610de48261585d565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526018908201527f424d5f434845434b5f4c4f414e5f4e4f545f4558495354530000000000000000604082015260600190565b8051614e168161517a565b8051614e168161515c565b6000610180828403121561591f57600080fd5b615927614f94565b82518152615937602084016156e8565b6020820152615948604084016156e8565b6040820152615959606084016156e8565b606082015261596a608084016158f6565b608082015260a083015160a082015260c083015160c082015261598f60e08401615901565b60e082015261010083810151908201526101206159ad8185016156e8565b9082015261014083810151908201526101606159ca81850161585d565b908201529392505050565b6000828210156159e7576159e7615726565b500390565b60208082526022908201527f424d5f43414e43454c5f4e4f4e43455f4c4f5745525f5448414e5f4355525245604082015261139560f21b606082015260800190565b81835260006001600160fb1b03831115615a4757600080fd5b8260051b8083602087013760009401602001938452509192915050565b602081526000610f71602083018486615a2e565b60208082526024908201527f424d5f41434c5f4f4e4c595f454d455247454e43595f41444d494e5f43414e5f60408201526310d0531360e21b606082015260800190565b60208082526025908201527f424d5f41434c5f4f4e4c595f41495244524f505f4f50455241544f525f43414e60408201526417d0d0531360da1b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b805182526020810151615b4960208401826001600160a01b03169052565b5060408101516040830152606081015160608301526080810151615b7860808401826001600160a01b03169052565b5060a081015160a083015260c081015160c083015260e0810151615ba560e084018264ffffffffff169052565b506101008181015164ffffffffff1690830152610120808201516001600160801b031690830152610140808201516001600160a01b031690830152610160808201519083015261018080820151908301526101a08082015160ff16908301526101c080820151908301526101e090810151910152565b61020081016107cd8284615b2b565b600060208284031215615c3c57600080fd5b5051919050565b8a8152602081018a90526103208101615c5f604083018b615b2b565b6102408201989098526001600160a01b039687166102608201526102808101959095526102a08501939093526102c084019190915283166102e0830152909116610300909101529392505050565b8681526102a08101615cc26020830188615b2b565b6102208201959095526102408101939093526102608301919091526001600160a01b03166102809091015292915050565b60008219821115615d0657615d06615726565b500190565b6001600160a01b0389811682528816602082015260a060408201819052600090615d38908301888a615a2e565b8281036060840152615d4b818789615a2e565b9050828103608084015261584e81858761577b565b606081526000615d7460608301888a615a2e565b8281036020840152615d87818789615a2e565b90508281036040840152615d9c81858761577b565b9998505050505050505050565b600082615dc657634e487b7160e01b600052601260045260246000fd5b500490565b60005b83811015615de6578181015183820152602001615dce565b838111156130c55750506000910152565b6020815260008251806020840152615e16816040850160208701615dcb565b601f01601f19169190910160400192915050565b6000816000190483118215151615615e4457615e44615726565b500290565b60008251615e5b818460208701615dcb565b919091019291505056fea26469706673582212200401b06d5ef91bdd225c88319437fd0e264b423fa4bfca9f8e56dc8f5334e93e64736f6c634300080a0033",
  "libraries": {
    "BespokeTypes": "0xFF7882E12131066d80B9245BBeE23e113C815B98",
    "SignatureChecker": "0x31e4D76921E9cf5cDaa6f500477316bef80b97f5",
    "BespokeLogic": "0xd809e473C4Dd543E1Ae4D635aAb6D139E6bf89Ae",
    "MathUtils": "0x76aFbdb519C270961D20ce58CEDa6D8DF10a5dC7",
    "PercentageMath": "0xeb2C7909293DAa402Ea85760f47350Fb5324FE13",
    "WadRayMath": "0x7779d777f07FB4BBDD57940DE8a1648a7104f531"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "cancelAllBorrowOffersForSender(uint256)": {
        "params": {
          "minNonce_": "minimum user nonce"
        }
      },
      "cancelMultipleBorrowOffers(uint256[])": {
        "params": {
          "offerNonces": "array of borrowOffer nonces"
        }
      },
      "claimERC1155Airdrop(address,address,uint256[],uint256[],bytes)": {
        "params": {
          "amounts": "The amount of the ERC1155 tokens",
          "data": "packed params to pass to the receiver as extra information*",
          "ids": "The ID of the ERC1155 token",
          "to": "The address which will receive the ERC1155 tokens",
          "token": "The address of the airdropped token"
        }
      },
      "claimERC20Airdrop(address,address,uint256)": {
        "params": {
          "amount": "The amount of the ERC20 token*",
          "to": "The address which will receive ERC20 token",
          "token": "The address of the airdropped token"
        }
      },
      "claimERC721Airdrop(address,address,uint256[])": {
        "params": {
          "ids": "The ID of the ERC721 token*",
          "to": "The address which will receive the ERC721 token",
          "token": "The address of the airdropped token"
        }
      },
      "emergencyTokenTransfer(address,address,uint256)": {
        "details": "transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due direct transfers to the contract address.",
        "params": {
          "amount": "amount to send",
          "to": "recipient of the transfer",
          "token": "token to transfer"
        }
      },
      "flashClaim(address,uint256[],bytes)": {
        "details": "IMPORTANT There are security concerns for developers of flash loan receiver contracts that must be carefully considered",
        "params": {
          "loanIds": "The ID of loan being flash-borrowed",
          "params": "packed params to pass to the receiver as extra information*",
          "receiverAddress": "The address of the contract receiving the funds, implementing IFlashClaimReceiver interface"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pause pool for emergency case, can only be called by emergency admin."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpause pool for emergency case, can only be called by emergency admin."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cancelAllBorrowOffersForSender(uint256)": {
        "notice": "Cancel all pending offers for a sender"
      },
      "claimERC1155Airdrop(address,address,uint256[],uint256[],bytes)": {
        "notice": "Claim the ERC1155 token which has been airdropped to the loan contract"
      },
      "claimERC20Airdrop(address,address,uint256)": {
        "notice": "Claim the ERC20 token which has been airdropped to the loan contract"
      },
      "claimERC721Airdrop(address,address,uint256[])": {
        "notice": "Claim the ERC721 token which has been airdropped to the loan contract"
      },
      "flashClaim(address,uint256[],bytes)": {
        "notice": "Allows smart contracts to access the collateralized NFT within one transaction, as long as the amount taken plus a fee is returned"
      },
      "foreclose(uint256)": {
        "notice": "anyone can trigger but only OpenSkyLendNFT owner can receive collateral"
      },
      "repay(uint256)": {
        "notice": "Only OpenSkyBorrowNFT owner can repayOnly OpenSkyLendNFT owner can recieve the paymentThis function is not pausable for safety"
      },
      "repayETH(uint256)": {
        "notice": "Only OpenSkyBorrowNFT owner can repayOnly OpenSkyLendNFT owner can recieve the paymentThis function is not pausable for safety"
      },
      "takeBorrowOffer((uint256,address,uint256,uint256,address,uint256,uint256,uint40,uint40,uint128,address,uint256,uint256,uint8,bytes32,bytes32),uint256,uint256)": {
        "notice": "take an borrowing offer using ERC20 include WETH"
      },
      "takeBorrowOfferETH((uint256,address,uint256,uint256,address,uint256,uint256,uint40,uint40,uint128,address,uint256,uint256,uint8,bytes32,bytes32),uint256,uint256)": {
        "notice": "Take a borrow offer. Only for WETH reserve.Consider using taker's oWETH balance first, then ETH if oWETH is not enoughBorrower will receive WETH"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 387,
        "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1294,
        "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1379,
        "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 13190,
        "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
        "label": "minNonce",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13196,
        "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
        "label": "_nonce",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 13198,
        "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
        "label": "_loanIdTracker",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 13203,
        "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
        "label": "_loans",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(LoanData)16679_storage)"
      },
      {
        "astId": 13207,
        "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
        "label": "nftBorrowStat",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(LoanStatus)16684": {
        "encoding": "inplace",
        "label": "enum BespokeTypes.LoanStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(LoanData)16679_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BespokeTypes.LoanData)",
        "numberOfBytes": "32",
        "value": "t_struct(LoanData)16679_storage"
      },
      "t_struct(LoanData)16679_storage": {
        "encoding": "inplace",
        "label": "struct BespokeTypes.LoanData",
        "members": [
          {
            "astId": 16649,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "reserveId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16651,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "nftAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 16653,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "tokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 16655,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "tokenAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 16657,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "borrower",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 16659,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "amount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 16661,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "borrowRate",
            "offset": 0,
            "slot": "6",
            "type": "t_uint128"
          },
          {
            "astId": 16663,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "interestPerSecond",
            "offset": 16,
            "slot": "6",
            "type": "t_uint128"
          },
          {
            "astId": 16665,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "currency",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 16667,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "borrowDuration",
            "offset": 20,
            "slot": "7",
            "type": "t_uint40"
          },
          {
            "astId": 16669,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "borrowBegin",
            "offset": 25,
            "slot": "7",
            "type": "t_uint40"
          },
          {
            "astId": 16671,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "borrowOverdueTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint40"
          },
          {
            "astId": 16673,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "liquidatableTime",
            "offset": 5,
            "slot": "8",
            "type": "t_uint40"
          },
          {
            "astId": 16675,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "lender",
            "offset": 10,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 16678,
            "contract": "contracts/bespokemarket/OpenSkyBespokeMarket.sol:OpenSkyBespokeMarket",
            "label": "status",
            "offset": 30,
            "slot": "8",
            "type": "t_enum(LoanStatus)16684"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      }
    }
  }
}