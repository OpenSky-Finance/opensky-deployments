{
  "address": "0x5ff9E72842A9E44ffa07DB897c54D4309AAc63CF",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "aggregator",
          "type": "address"
        }
      ],
      "name": "SetAggregator",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "aggregators",
      "outputs": [
        {
          "internalType": "contract AggregatorInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getAssetPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "contract AggregatorInterface[]",
          "name": "_aggregators",
          "type": "address[]"
        }
      ],
      "name": "setAggregators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x513b15a5fa2aebf3262f2ce4a1065625b9970fc1d6b32f3d6f33357e5ea1a539",
  "receipt": {
    "to": null,
    "from": "0x1a347f2aac8758E139C7401aEC878aD174C19c8a",
    "contractAddress": "0x5ff9E72842A9E44ffa07DB897c54D4309AAc63CF",
    "transactionIndex": 128,
    "gasUsed": "646475",
    "logsBloom": "0x
    "blockHash": "0xef020a6ddd4ce48c23d5add0a31d7a19283f5f69980666156a281a8298ed6969",
    "transactionHash": "0x513b15a5fa2aebf3262f2ce4a1065625b9970fc1d6b32f3d6f33357e5ea1a539",
    "logs": [
      {
        "transactionIndex": 128,
        "blockNumber": 16440078,
        "transactionHash": "0x513b15a5fa2aebf3262f2ce4a1065625b9970fc1d6b32f3d6f33357e5ea1a539",
        "address": "0x5ff9E72842A9E44ffa07DB897c54D4309AAc63CF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001a347f2aac8758e139c7401aec878ad174c19c8a"
        ],
        "data": "0x",
        "logIndex": 222,
        "blockHash": "0xef020a6ddd4ce48c23d5add0a31d7a19283f5f69980666156a281a8298ed6969"
      }
    ],
    "blockNumber": 16440078,
    "cumulativeGasUsed": "10021738",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "7dcc5f35089516332757d457dbfb67ac",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"SetAggregator\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aggregators\",\"outputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"contract AggregatorInterface[]\",\"name\":\"_aggregators\",\"type\":\"address[]\"}],\"name\":\"setAggregators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"OpenSky Labs\",\"kind\":\"dev\",\"methods\":{\"getAssetPrice(address)\":{\"params\":{\"asset\":\"The nft collection address*\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAggregators(address[],address[])\":{\"params\":{\"_aggregators\":\"The address of the source of each asset*\",\"assets\":\"The addresses of the assets\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"OpenSkyPriceAggregator Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAssetPrice(address)\":{\"notice\":\"Gets the nft floor price by address\"},\"setAggregators(address[],address[])\":{\"notice\":\"External function called by the OpenSky governance to set or replace price aggregators of assets\"}},\"notice\":\"Proxy smart contract to get the price of a nft from a price aggregator, with Chainlink Aggregator         smart contracts as primary option - Owned by the OpenSky governance system, allowed to add aggregators for nfts, replace them*\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OpenSkyPriceAggregator.sol\":\"OpenSkyPriceAggregator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/OpenSkyPriceAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport './interfaces/IOpenSkyPriceAggregator.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\ninterface AggregatorInterface {\\n    function latestAnswer() external view returns (int256);\\n    function latestRoundData() external view returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n}\\n\\n/**\\n * @title OpenSkyPriceAggregator Contract\\n * @author OpenSky Labs\\n * @notice Proxy smart contract to get the price of a nft from a price aggregator, with Chainlink Aggregator\\n *         smart contracts as primary option\\n * - Owned by the OpenSky governance system, allowed to add aggregators for nfts, replace them\\n **/\\ncontract OpenSkyPriceAggregator is IOpenSkyPriceAggregator, Ownable {\\n    mapping (address => AggregatorInterface) public aggregators;\\n\\n    constructor() Ownable() {}\\n\\n    /**\\n     * @notice External function called by the OpenSky governance to set or replace price aggregators of assets\\n     * @param assets The addresses of the assets\\n     * @param _aggregators The address of the source of each asset\\n     **/\\n    function setAggregators(address[] memory assets, AggregatorInterface[] memory _aggregators) public onlyOwner {\\n        require(assets.length == _aggregators.length, 'INCONSISTENT_PARAMS_LENGTH');\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            require(address(_aggregators[i]) != address(0), 'AGGREGATOR_CAN_NOT_BE_ZERO_ADDRESS');\\n            _setAggregator(assets[i], _aggregators[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to set the sources for each asset\\n     * @param asset The address of the nft collection address\\n     * @param aggregator The address of the aggregator\\n     **/\\n    function _setAggregator(address asset, AggregatorInterface aggregator) internal {\\n        aggregators[asset] = aggregator;\\n        emit SetAggregator(asset, address(aggregator));\\n    }\\n\\n    /**\\n     * @notice Gets the nft floor price by address\\n     * @param asset The nft collection address\\n    **/\\n    function getAssetPrice(address asset) external view override returns (uint256) {\\n        if (address(aggregators[asset]) == address(0)) {\\n            return 0;\\n        }\\n        (, int256 answer, , , ) = aggregators[asset].latestRoundData();\\n        return answer > 0 ? uint256(answer) : 0;\\n    }\\n}\\n\",\"keccak256\":\"0x87c85d00c7763423c6c4d6b0088a0da2b69674c44a0dc841bebd42ed46acc9bc\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyPriceAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IOpenSkyPriceAggregator {\\n    event SetAggregator(address indexed asset, address indexed aggregator);\\n\\n    function getAssetPrice(address nftAddress) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x65b26e4b63b54a8157ca0fd57bed0b663c9eacfd0ffb4318cdb78ded35cd9b38\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610a5b8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80638da5cb5b116100505780638da5cb5b146100f4578063b3596f0714610112578063f2fde38b1461013357600080fd5b8063112cdab9146100775780633f9fb505146100d7578063715018a6146100ec575b600080fd5b6100ad610085366004610732565b60016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100ea6100e5366004610865565b610146565b005b6100ea61036c565b60005473ffffffffffffffffffffffffffffffffffffffff166100ad565b610125610120366004610732565b6103f9565b6040519081526020016100ce565b6100ea610141366004610732565b6104ef565b60005473ffffffffffffffffffffffffffffffffffffffff1633146101cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b8051825114610237576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e434f4e53495354454e545f504152414d535f4c454e47544800000000000060448201526064016101c3565b60005b825181101561036757600073ffffffffffffffffffffffffffffffffffffffff1682828151811061026d5761026d610927565b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415610319576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f41474752454741544f525f43414e5f4e4f545f42455f5a45524f5f414444524560448201527f535300000000000000000000000000000000000000000000000000000000000060648201526084016101c3565b61035583828151811061032e5761032e610927565b602002602001015183838151811061034857610348610927565b602002602001015161061f565b8061035f81610956565b91505061023a565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101c3565b6103f7600061069b565b565b73ffffffffffffffffffffffffffffffffffffffff81811660009081526001602052604081205490911661042f57506000919050565b73ffffffffffffffffffffffffffffffffffffffff8083166000908152600160205260408082205481517ffeaf968c00000000000000000000000000000000000000000000000000000000815291519293169163feaf968c9160048082019260a0929091908290030181865afa1580156104ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d191906109d5565b505050915050600081136104e65760006104e8565b805b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101c3565b73ffffffffffffffffffffffffffffffffffffffff8116610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016101c3565b61061c8161069b565b50565b73ffffffffffffffffffffffffffffffffffffffff82811660008181526001602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169486169485179055517fc437dd54e22b198f1cbc09dee1a8e823dec5346dd8cd48b5be2c55f6e4f517e99190a35050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b73ffffffffffffffffffffffffffffffffffffffff8116811461061c57600080fd5b60006020828403121561074457600080fd5b81356104e881610710565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156107c5576107c561074f565b604052919050565b600067ffffffffffffffff8211156107e7576107e761074f565b5060051b60200190565b600082601f83011261080257600080fd5b81356020610817610812836107cd565b61077e565b82815260059290921b8401810191818101908684111561083657600080fd5b8286015b8481101561085a57803561084d81610710565b835291830191830161083a565b509695505050505050565b6000806040838503121561087857600080fd5b823567ffffffffffffffff8082111561089057600080fd5b818501915085601f8301126108a457600080fd5b813560206108b4610812836107cd565b82815260059290921b840181019181810190898411156108d357600080fd5b948201945b838610156108fa5785356108eb81610710565b825294820194908201906108d8565b9650508601359250508082111561091057600080fd5b5061091d858286016107f1565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156109af577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b805169ffffffffffffffffffff811681146109d057600080fd5b919050565b600080600080600060a086880312156109ed57600080fd5b6109f6866109b6565b9450602086015193506040860151925060608601519150610a19608087016109b6565b9050929550929590935056fea2646970667358221220e1e70bc25a6f5dcc1cedfa931117290ccb7f9271a174db8a53f79295c15c67e064736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c80638da5cb5b116100505780638da5cb5b146100f4578063b3596f0714610112578063f2fde38b1461013357600080fd5b8063112cdab9146100775780633f9fb505146100d7578063715018a6146100ec575b600080fd5b6100ad610085366004610732565b60016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100ea6100e5366004610865565b610146565b005b6100ea61036c565b60005473ffffffffffffffffffffffffffffffffffffffff166100ad565b610125610120366004610732565b6103f9565b6040519081526020016100ce565b6100ea610141366004610732565b6104ef565b60005473ffffffffffffffffffffffffffffffffffffffff1633146101cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b8051825114610237576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e434f4e53495354454e545f504152414d535f4c454e47544800000000000060448201526064016101c3565b60005b825181101561036757600073ffffffffffffffffffffffffffffffffffffffff1682828151811061026d5761026d610927565b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415610319576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f41474752454741544f525f43414e5f4e4f545f42455f5a45524f5f414444524560448201527f535300000000000000000000000000000000000000000000000000000000000060648201526084016101c3565b61035583828151811061032e5761032e610927565b602002602001015183838151811061034857610348610927565b602002602001015161061f565b8061035f81610956565b91505061023a565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101c3565b6103f7600061069b565b565b73ffffffffffffffffffffffffffffffffffffffff81811660009081526001602052604081205490911661042f57506000919050565b73ffffffffffffffffffffffffffffffffffffffff8083166000908152600160205260408082205481517ffeaf968c00000000000000000000000000000000000000000000000000000000815291519293169163feaf968c9160048082019260a0929091908290030181865afa1580156104ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d191906109d5565b505050915050600081136104e65760006104e8565b805b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101c3565b73ffffffffffffffffffffffffffffffffffffffff8116610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016101c3565b61061c8161069b565b50565b73ffffffffffffffffffffffffffffffffffffffff82811660008181526001602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169486169485179055517fc437dd54e22b198f1cbc09dee1a8e823dec5346dd8cd48b5be2c55f6e4f517e99190a35050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b73ffffffffffffffffffffffffffffffffffffffff8116811461061c57600080fd5b60006020828403121561074457600080fd5b81356104e881610710565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156107c5576107c561074f565b604052919050565b600067ffffffffffffffff8211156107e7576107e761074f565b5060051b60200190565b600082601f83011261080257600080fd5b81356020610817610812836107cd565b61077e565b82815260059290921b8401810191818101908684111561083657600080fd5b8286015b8481101561085a57803561084d81610710565b835291830191830161083a565b509695505050505050565b6000806040838503121561087857600080fd5b823567ffffffffffffffff8082111561089057600080fd5b818501915085601f8301126108a457600080fd5b813560206108b4610812836107cd565b82815260059290921b840181019181810190898411156108d357600080fd5b948201945b838610156108fa5785356108eb81610710565b825294820194908201906108d8565b9650508601359250508082111561091057600080fd5b5061091d858286016107f1565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156109af577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b805169ffffffffffffffffffff811681146109d057600080fd5b919050565b600080600080600060a086880312156109ed57600080fd5b6109f6866109b6565b9450602086015193506040860151925060608601519150610a19608087016109b6565b9050929550929590935056fea2646970667358221220e1e70bc25a6f5dcc1cedfa931117290ccb7f9271a174db8a53f79295c15c67e064736f6c634300080a0033",
  "devdoc": {
    "author": "OpenSky Labs",
    "kind": "dev",
    "methods": {
      "getAssetPrice(address)": {
        "params": {
          "asset": "The nft collection address*"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAggregators(address[],address[])": {
        "params": {
          "_aggregators": "The address of the source of each asset*",
          "assets": "The addresses of the assets"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "OpenSkyPriceAggregator Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAssetPrice(address)": {
        "notice": "Gets the nft floor price by address"
      },
      "setAggregators(address[],address[])": {
        "notice": "External function called by the OpenSky governance to set or replace price aggregators of assets"
      }
    },
    "notice": "Proxy smart contract to get the price of a nft from a price aggregator, with Chainlink Aggregator         smart contracts as primary option - Owned by the OpenSky governance system, allowed to add aggregators for nfts, replace them*",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 387,
        "contract": "contracts/OpenSkyPriceAggregator.sol:OpenSkyPriceAggregator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12349,
        "contract": "contracts/OpenSkyPriceAggregator.sol:OpenSkyPriceAggregator",
        "label": "aggregators",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_contract(AggregatorInterface)12339)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(AggregatorInterface)12339": {
        "encoding": "inplace",
        "label": "contract AggregatorInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(AggregatorInterface)12339)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract AggregatorInterface)",
        "numberOfBytes": "32",
        "value": "t_contract(AggregatorInterface)12339"
      }
    }
  }
}