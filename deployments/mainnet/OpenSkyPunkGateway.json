{
  "address": "0x5D15033865014CE533E29887d90781E052D34202",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "SETTINGS_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "PUNK_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "WPUNK_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "WETH_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "BorrowETH",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Received",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "RepayETH",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PUNK",
      "outputs": [
        {
          "internalType": "contract ICryptoPunk",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SETTINGS",
      "outputs": [
        {
          "internalType": "contract IOpenSkySettings",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WPUNK",
      "outputs": [
        {
          "internalType": "contract IWrappedPunk",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WPUNK_PROXY_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        }
      ],
      "name": "borrowETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "repayETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x78d42c1a41dd586443bfdfcf6cbe8ecb28971ebae113f022f2fd003f673f1d6a",
  "receipt": {
    "to": null,
    "from": "0x1a347f2aac8758E139C7401aEC878aD174C19c8a",
    "contractAddress": "0x5D15033865014CE533E29887d90781E052D34202",
    "transactionIndex": 154,
    "gasUsed": "2014187",
    "logsBloom": "0x
    "blockHash": "0xe3883ffa5ab8955460577db41a7d87dea5e8e7ed685c55f836a654856f0aaf40",
    "transactionHash": "0x78d42c1a41dd586443bfdfcf6cbe8ecb28971ebae113f022f2fd003f673f1d6a",
    "logs": [
      {
        "transactionIndex": 154,
        "blockNumber": 15223213,
        "transactionHash": "0x78d42c1a41dd586443bfdfcf6cbe8ecb28971ebae113f022f2fd003f673f1d6a",
        "address": "0xb7F7F6C52F2e2fdb1963Eab30438024864c313F6",
        "topics": [
          "0x3623f8bd4da9524cfaa08c81b8194f759ca625e8d761f4cc2cea23e63d3f4b12"
        ],
        "data": "0x0000000000000000000000005d15033865014ce533e29887d90781e052d342020000000000000000000000006246e183271b4a739429694c0dd6e12aa8b2a37d",
        "logIndex": 258,
        "blockHash": "0xe3883ffa5ab8955460577db41a7d87dea5e8e7ed685c55f836a654856f0aaf40"
      },
      {
        "transactionIndex": 154,
        "blockNumber": 15223213,
        "transactionHash": "0x78d42c1a41dd586443bfdfcf6cbe8ecb28971ebae113f022f2fd003f673f1d6a",
        "address": "0xb7F7F6C52F2e2fdb1963Eab30438024864c313F6",
        "topics": [
          "0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
          "0x0000000000000000000000005d15033865014ce533e29887d90781e052d34202",
          "0x000000000000000000000000dae29a91f663faf7657594f908e183e3b826d437"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 259,
        "blockHash": "0xe3883ffa5ab8955460577db41a7d87dea5e8e7ed685c55f836a654856f0aaf40"
      }
    ],
    "blockNumber": 15223213,
    "cumulativeGasUsed": "12326852",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x72A780B33915D6D229E7b31A729AE42963A57c73",
    "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
    "0xb7F7F6C52F2e2fdb1963Eab30438024864c313F6",
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
  ],
  "solcInputHash": "0ca3f66e9bd5de21ebb7765f6cea382a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"SETTINGS_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"PUNK_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"WPUNK_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"WETH_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"BorrowETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"RepayETH\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PUNK\",\"outputs\":[{\"internalType\":\"contract ICryptoPunk\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SETTINGS\",\"outputs\":[{\"internalType\":\"contract IOpenSkySettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WPUNK\",\"outputs\":[{\"internalType\":\"contract IWrappedPunk\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WPUNK_PROXY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"borrowETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"repayETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"repay(uint256)\":{\"notice\":\"Only loan NFT owner can repay\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/misc/OpenSkyPunkGateway.sol\":\"OpenSkyPunkGateway\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x8756c97d6004b1ae21517a013bdec72fbf30be7852afb2f395871d280131b250\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/dependencies/cryptopunk/ICryptoPunk.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\ninterface ICryptoPunk {\\n    function balanceOf(address account) external view returns (uint256);\\n    function punkIndexToAddress(uint256 punkIndex) external view returns (address);\\n    function punksOfferedForSale(uint256 punkIndex) external view returns (bool, uint256, address, uint256, address);\\n    function buyPunk(uint punkIndex) external payable;\\n    function transferPunk(address to, uint punkIndex) external;\\n}\\n\",\"keccak256\":\"0x4b3b7f44884d1e82da728c766485b94a488f3fcf6beeb531574176847be5de30\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/cryptopunk/IWrappedPunk.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IWrappedPunk is IERC721 {\\n    function punkContract() external view returns (address);\\n    function mint(uint256 punkIndex) external;\\n    function burn(uint256 punkIndex) external;\\n    function registerProxy() external;\\n    function proxyInfo(address user) external returns (address proxy);\\n}\\n\",\"keccak256\":\"0xf5eefde577fbfcb124be8a3505d97f75128147550d1f1a143b42fce06f0138c0\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/weth/IWETH.sol\":{\"content\":\"pragma solidity 0.8.10;\\n\\ninterface IWETH {\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x58e84c715a8587d2685d905f79018c85ff42b628f5a8ca4c115342dea17053ab\"},\"contracts/interfaces/IOpenSkyLoan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '../libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IOpenSkyLoan\\n * @author OpenSky Labs\\n * @notice Defines the basic interface for OpenSkyLoan.  This loan NFT is composable and can be used in other DeFi protocols \\n **/\\ninterface IOpenSkyLoan is IERC721 {\\n\\n    /**\\n     * @dev Emitted on mint()\\n     * @param tokenId The ID of the loan\\n     * @param recipient The address that will receive the loan NFT\\n     **/\\n    event Mint(uint256 indexed tokenId, address indexed recipient);\\n\\n    /**\\n     * @dev Emitted on end()\\n     * @param tokenId The ID of the loan\\n     * @param onBehalfOf The address the repayer is repaying for\\n     * @param repayer The address of the user initiating the repayment()\\n     **/\\n    event End(uint256 indexed tokenId, address indexed onBehalfOf, address indexed repayer);\\n\\n    /**\\n     * @dev Emitted on startLiquidation()\\n     * @param tokenId The ID of the loan\\n     * @param liquidator The address of the liquidator\\n     **/\\n    event StartLiquidation(uint256 indexed tokenId, address indexed liquidator);\\n\\n    /**\\n     * @dev Emitted on endLiquidation()\\n     * @param tokenId The ID of the loan\\n     * @param liquidator The address of the liquidator\\n     **/\\n    event EndLiquidation(uint256 indexed tokenId, address indexed liquidator);\\n\\n    /**\\n     * @dev Emitted on updateStatus()\\n     * @param tokenId The ID of the loan\\n     * @param status The status of loan\\n     **/\\n    event UpdateStatus(uint256 indexed tokenId, DataTypes.LoanStatus indexed status);\\n\\n    /**\\n     * @dev Emitted on flashClaim()\\n     * @param receiver The address of the flash loan receiver contract\\n     * @param sender The address that will receive tokens\\n     * @param nftAddress The address of the collateralized NFT\\n     * @param tokenId The ID of collateralized NFT\\n     **/\\n    event FlashClaim(address indexed receiver, address sender, address indexed nftAddress, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted on claimERC20Airdrop()\\n     * @param token The address of the ERC20 token\\n     * @param to The address that will receive the ERC20 tokens\\n     * @param amount The amount of the tokens\\n     **/\\n    event ClaimERC20Airdrop(address indexed token, address indexed to, uint256 amount);\\n\\n    /**\\n     * @dev Emitted on claimERC721Airdrop()\\n     * @param token The address of ERC721 token\\n     * @param to The address that will receive the eRC721 tokens\\n     * @param ids The ID of the token\\n     **/\\n    event ClaimERC721Airdrop(address indexed token, address indexed to, uint256[] ids);\\n\\n    /**\\n     * @dev Emitted on claimERC1155Airdrop()\\n     * @param token The address of the ERC1155 token\\n     * @param to The address that will receive the ERC1155 tokens\\n     * @param ids The ID of the token\\n     * @param amounts The amount of the tokens\\n     * @param data packed params to pass to the receiver as extra information\\n     **/\\n    event ClaimERC1155Airdrop(address indexed token, address indexed to, uint256[] ids, uint256[] amounts, bytes data);\\n\\n    /**\\n     * @notice Mints a loan NFT to user\\n     * @param reserveId The ID of the reserve\\n     * @param borrower The address of the borrower\\n     * @param nftAddress The contract address of the collateralized NFT \\n     * @param nftTokenId The ID of the collateralized NFT\\n     * @param amount The amount of the loan\\n     * @param duration The duration of the loan\\n     * @param borrowRate The borrow rate of the loan\\n     * @return loanId and loan data\\n     **/\\n    function mint(\\n        uint256 reserveId,\\n        address borrower,\\n        address nftAddress,\\n        uint256 nftTokenId,\\n        uint256 amount,\\n        uint256 duration,\\n        uint256 borrowRate\\n    ) external returns (uint256 loanId, DataTypes.LoanData memory loan);\\n\\n    /**\\n     * @notice Starts liquidation of the loan in default\\n     * @param tokenId The ID of the defaulted loan\\n     **/\\n    function startLiquidation(uint256 tokenId) external;\\n\\n    /**\\n     * @notice Ends liquidation of a loan that is fully settled\\n     * @param tokenId The ID of the loan\\n     **/\\n    function endLiquidation(uint256 tokenId) external;\\n\\n    /**\\n     * @notice Terminates the loan\\n     * @param tokenId The ID of the loan\\n     * @param onBehalfOf The address the repayer is repaying for\\n     * @param repayer The address of the repayer\\n     **/\\n    function end(uint256 tokenId, address onBehalfOf, address repayer) external;\\n    \\n    /**\\n     * @notice Returns the loan data\\n     * @param tokenId The ID of the loan\\n     * @return The details of the loan\\n     **/\\n    function getLoanData(uint256 tokenId) external view returns (DataTypes.LoanData calldata);\\n\\n    /**\\n     * @notice Returns the status of a loan\\n     * @param tokenId The ID of the loan\\n     * @return The status of the loan\\n     **/\\n    function getStatus(uint256 tokenId) external view returns (DataTypes.LoanStatus);\\n\\n    /**\\n     * @notice Returns the borrow interest of the loan\\n     * @param tokenId The ID of the loan\\n     * @return The borrow interest of the loan\\n     **/\\n    function getBorrowInterest(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the borrow balance of a loan, including borrow interest\\n     * @param tokenId The ID of the loan\\n     * @return The borrow balance of the loan\\n     **/\\n    function getBorrowBalance(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the penalty fee of the loan\\n     * @param tokenId The ID of the loan\\n     * @return The penalty fee of the loan\\n     **/\\n    function getPenalty(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the ID of the loan\\n     * @param nftAddress The address of the collateralized NFT\\n     * @param tokenId The ID of the collateralized NFT\\n     * @return The ID of the loan\\n     **/\\n    function getLoanId(address nftAddress, uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Allows smart contracts to access the collateralized NFT within one transaction,\\n     * as long as the amount taken plus a fee is returned\\n     * @dev IMPORTANT There are security concerns for developers of flash loan receiver contracts that must be carefully considered\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IOpenSkyFlashClaimReceiver interface\\n     * @param loanIds The ID of loan being flash-borrowed\\n     * @param params packed params to pass to the receiver as extra information\\n     **/\\n    function flashClaim(\\n        address receiverAddress,\\n        uint256[] calldata loanIds,\\n        bytes calldata params\\n    ) external;\\n\\n    /**\\n     * @notice Claim the ERC20 token which has been airdropped to the loan contract\\n     * @param token The address of the airdropped token\\n     * @param to The address which will receive ERC20 token\\n     * @param amount The amount of the ERC20 token\\n     **/\\n    function claimERC20Airdrop(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Claim the ERC721 token which has been airdropped to the loan contract\\n     * @param token The address of the airdropped token\\n     * @param to The address which will receive the ERC721 token\\n     * @param ids The ID of the ERC721 token\\n     **/\\n    function claimERC721Airdrop(\\n        address token,\\n        address to,\\n        uint256[] calldata ids\\n    ) external;\\n\\n    /**\\n     * @notice Claim the ERC1155 token which has been airdropped to the loan contract\\n     * @param token The address of the airdropped token\\n     * @param to The address which will receive the ERC1155 tokens\\n     * @param ids The ID of the ERC1155 token\\n     * @param amounts The amount of the ERC1155 tokens\\n     * @param data packed params to pass to the receiver as extra information\\n     **/\\n    function claimERC1155Airdrop(\\n        address token,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xac386c73607e7b408e702f0946d474834bed10fa50d862a0e8cd062e457207ce\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '../libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IOpenSkyPool\\n * @author OpenSky Labs\\n * @notice Defines the basic interface for an OpenSky Pool.\\n **/\\n\\ninterface IOpenSkyPool {\\n    /*\\n     * @dev Emitted on create()\\n     * @param reserveId The ID of the reserve\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param oTokenAddress The address of the oToken\\n     * @param name The name to use for oToken\\n     * @param symbol The symbol to use for oToken\\n     * @param decimals The decimals of the oToken\\n     */\\n    event Create(\\n        uint256 indexed reserveId,\\n        address indexed underlyingAsset,\\n        address indexed oTokenAddress,\\n        string name,\\n        string symbol,\\n        uint8 decimals\\n    );\\n\\n    /*\\n     * @dev Emitted on setTreasuryFactor()\\n     * @param reserveId The ID of the reserve\\n     * @param factor The new treasury factor of the reserve\\n     */\\n    event SetTreasuryFactor(uint256 indexed reserveId, uint256 factor);\\n\\n    /*\\n     * @dev Emitted on setInterestModelAddress()\\n     * @param reserveId The ID of the reserve\\n     * @param interestModelAddress The address of the interest model contract\\n     */\\n    event SetInterestModelAddress(uint256 indexed reserveId, address interestModelAddress);\\n\\n    /*\\n     * @dev Emitted on openMoneyMarket()\\n     * @param reserveId The ID of the reserve\\n     */\\n    event OpenMoneyMarket(uint256 reserveId);\\n\\n    /*\\n     * @dev Emitted on closeMoneyMarket()\\n     * @param reserveId The ID of the reserve\\n     */\\n    event CloseMoneyMarket(uint256 reserveId);\\n\\n    /*\\n     * @dev Emitted on deposit()\\n     * @param reserveId The ID of the reserve\\n     * @param onBehalfOf The address that will receive the oTokens\\n     * @param amount The amount of ETH to be deposited\\n     * @param referralCode integrators are assigned a referral code and can potentially receive rewards\\n     * 0 if the action is executed directly by the user, without any intermediaries\\n     */\\n    event Deposit(uint256 indexed reserveId, address indexed onBehalfOf, uint256 amount, uint256 referralCode);\\n\\n    /*\\n     * @dev Emitted on withdraw()\\n     * @param reserveId The ID of the reserve\\n     * @param onBehalfOf The address that will receive assets withdrawed\\n     * @param amount The amount to be withdrawn\\n     */\\n    event Withdraw(uint256 indexed reserveId, address indexed onBehalfOf, uint256 amount);\\n\\n    /*\\n     * @dev Emitted on borrow()\\n     * @param reserveId The ID of the reserve\\n     * @param user The address initiating the withdrawal(), owner of oTokens\\n     * @param onBehalfOf The address that will receive the ETH and the loan NFT\\n     * @param loanId The loan ID\\n     */\\n    event Borrow(\\n        uint256 indexed reserveId,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 indexed loanId\\n    );\\n\\n    /*\\n     * @dev Emitted on repay()\\n     * @param reserveId The ID of the reserve\\n     * @param repayer The address initiating the repayment()\\n     * @param onBehalfOf The address that will receive the pledged NFT\\n     * @param loanId The ID of the loan\\n     * @param repayAmount The borrow balance of the loan when it was repaid\\n     * @param penalty The penalty of the loan for either early or overdue repayment\\n     */\\n    event Repay(\\n        uint256 indexed reserveId,\\n        address repayer,\\n        address indexed onBehalfOf,\\n        uint256 indexed loanId,\\n        uint256 repayAmount,\\n        uint256 penalty\\n    );\\n\\n    /*\\n     * @dev Emitted on extend()\\n     * @param reserveId The ID of the reserve\\n     * @param onBehalfOf The owner address of loan NFT\\n     * @param oldLoanId The ID of the old loan\\n     * @param newLoanId The ID of the new loan\\n     */\\n    event Extend(uint256 indexed reserveId, address indexed onBehalfOf, uint256 oldLoanId, uint256 newLoanId);\\n\\n    /*\\n     * @dev Emitted on startLiquidation()\\n     * @param reserveId The ID of the reserve\\n     * @param loanId The ID of the loan\\n     * @param nftAddress The address of the NFT used as collateral\\n     * @param tokenId The ID of the NFT used as collateral\\n     * @param operator The address initiating startLiquidation()\\n     */\\n    event StartLiquidation(\\n        uint256 indexed reserveId,\\n        uint256 indexed loanId,\\n        address indexed nftAddress,\\n        uint256 tokenId,\\n        address operator\\n    );\\n\\n    /*\\n     * @dev Emitted on endLiquidation()\\n     * @param reserveId The ID of the reserve\\n     * @param loanId The ID of the loan\\n     * @param nftAddress The address of the NFT used as collateral\\n     * @param tokenId The ID of the NFT used as collateral\\n     * @param operator\\n     * @param repayAmount The amount used to repay, must be equal to or greater than the borrowBalance, excess part will be shared by all the lenders\\n     * @param borrowBalance The borrow balance of the loan\\n     */\\n    event EndLiquidation(\\n        uint256 indexed reserveId,\\n        uint256 indexed loanId,\\n        address indexed nftAddress,\\n        uint256 tokenId,\\n        address operator,\\n        uint256 repayAmount,\\n        uint256 borrowBalance\\n    );\\n\\n    /**\\n     * @notice Creates a reserve\\n     * @dev Only callable by the pool admin role\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param name The name of the oToken\\n     * @param symbol The symbol for the oToken\\n     * @param decimals The decimals of the oToken\\n     **/\\n    function create(\\n        address underlyingAsset,\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals\\n    ) external;\\n\\n    /**\\n     * @notice Updates the treasury factor of a reserve\\n     * @dev Only callable by the pool admin role\\n     * @param reserveId The ID of the reserve\\n     * @param factor The new treasury factor of the reserve\\n     **/\\n    function setTreasuryFactor(uint256 reserveId, uint256 factor) external;\\n\\n    /**\\n     * @notice Updates the interest model address of a reserve\\n     * @dev Only callable by the pool admin role\\n     * @param reserveId The ID of the reserve\\n     * @param interestModelAddress The new address of the interest model contract\\n     **/\\n    function setInterestModelAddress(uint256 reserveId, address interestModelAddress) external;\\n\\n    /**\\n     * @notice Open the money market\\n     * @dev Only callable by the emergency admin role\\n     * @param reserveId The ID of the reserve\\n     **/\\n    function openMoneyMarket(uint256 reserveId) external;\\n\\n    /**\\n     * @notice Close the money market\\n     * @dev Only callable by the emergency admin role\\n     * @param reserveId The ID of the reserve\\n     **/\\n    function closeMoneyMarket(uint256 reserveId) external;\\n\\n    /**\\n     * @dev Deposits ETH into the reserve.\\n     * @param reserveId The ID of the reserve\\n     * @param referralCode integrators are assigned a referral code and can potentially receive rewards\\n     **/\\n    function deposit(uint256 reserveId, uint256 amount, address onBehalfOf, uint256 referralCode) external;\\n\\n    /**\\n     * @dev withdraws the ETH from reserve.\\n     * @param reserveId The ID of the reserve\\n     * @param amount amount of oETH to withdraw and receive native ETH\\n     **/\\n    function withdraw(uint256 reserveId, uint256 amount, address onBehalfOf) external;\\n\\n    /**\\n     * @dev Borrows ETH from reserve using an NFT as collateral and will receive a loan NFT as receipt.\\n     * @param reserveId The ID of the reserve\\n     * @param amount amount of ETH user will borrow\\n     * @param duration The desired duration of the loan\\n     * @param nftAddress The collateral NFT address\\n     * @param tokenId The ID of the NFT\\n     * @param onBehalfOf address of the user who will receive ETH and loan NFT.\\n     **/\\n    function borrow(\\n        uint256 reserveId,\\n        uint256 amount,\\n        uint256 duration,\\n        address nftAddress,\\n        uint256 tokenId,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Repays a loan, as a result the corresponding loan NFT owner will receive the collateralized NFT.\\n     * @param loanId The ID of the loan the user will repay\\n     */\\n    function repay(uint256 loanId) external returns (uint256);\\n\\n    /**\\n     * @dev Extends creates a new loan and terminates the old loan.\\n     * @param loanId The loan ID to extend\\n     * @param amount The amount of ERC20 token the user will borrow in the new loan\\n     * @param duration The selected duration the user will borrow in the new loan\\n     * @param onBehalfOf The address will borrow in the new loan\\n     **/\\n    function extend(\\n        uint256 loanId,\\n        uint256 amount,\\n        uint256 duration,\\n        address onBehalfOf\\n    ) external returns (uint256, uint256);\\n\\n    /**\\n     * @dev Starts liquidation for a loan when it's in LIQUIDATABLE status\\n     * @param loanId The ID of the loan which will be liquidated\\n     */\\n    function startLiquidation(uint256 loanId) external;\\n\\n    /**\\n     * @dev Completes liquidation for a loan which will be repaid.\\n     * @param loanId The ID of the liquidated loan that will be repaid.\\n     * @param amount The amount of the token that will be repaid.\\n     */\\n    function endLiquidation(uint256 loanId, uint256 amount) external;\\n\\n    /**\\n     * @dev Returns the state of the reserve\\n     * @param reserveId The ID of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getReserveData(uint256 reserveId) external view returns (DataTypes.ReserveData memory);\\n\\n    /**\\n     * @dev Returns the normalized income of the reserve\\n     * @param reserveId The ID of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(uint256 reserveId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the remaining liquidity of the reserve\\n     * @param reserveId The ID of the reserve\\n     * @return The reserve's withdrawable balance\\n     */\\n    function getAvailableLiquidity(uint256 reserveId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the instantaneous borrow limit value of a special NFT\\n     * @param nftAddress The address of the NFT\\n     * @param tokenId The ID of the NFT\\n     * @return The NFT's borrow limit\\n     */\\n    function getBorrowLimitByOracle(\\n        uint256 reserveId,\\n        address nftAddress,\\n        uint256 tokenId\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the sum of all users borrow balances include borrow interest accrued\\n     * @param reserveId The ID of the reserve\\n     * @return The total borrow balance of the reserve\\n     */\\n    function getTotalBorrowBalance(uint256 reserveId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns TVL (total value locked) of the reserve.\\n     * @param reserveId The ID of the reserve\\n     * @return The reserve's TVL\\n     */\\n    function getTVL(uint256 reserveId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd98aee1cefc2e2c3178c22435666292f9b8a1df1e4b24b17a182d8df357951a9\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyPunkGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IOpenSkyPunkGateway {\\n    event Borrow(\\n        uint256 indexed reserveId,\\n        address indexed user,\\n        uint256 amount,\\n        uint256 duration,\\n        uint256 punkIndex,\\n        uint256 loanId\\n    );\\n    event Repay(uint256 indexed reserveId, address indexed user, uint256 punkIndex, uint256 loanId);\\n\\n    event BorrowETH(\\n        uint256 indexed reserveId,\\n        address indexed user,\\n        uint256 amount,\\n        uint256 duration,\\n        uint256 punkIndex,\\n        uint256 loanId\\n    );\\n    event RepayETH(uint256 indexed reserveId, address indexed user, uint256 punkIndex, uint256 loanId);\\n\\n    function borrow(\\n        uint256 reserveId,\\n        uint256 amount,\\n        uint256 duration,\\n        uint256 punkIndex\\n    ) external;\\n\\n    function repay(uint256 loanId) external;\\n\\n    function borrowETH(\\n        uint256 reserveId,\\n        uint256 amount,\\n        uint256 duration,\\n        uint256 punkIndex\\n    ) external;\\n\\n    function repayETH(uint256 loanId) external payable;\\n}\\n\",\"keccak256\":\"0x81d4ce56a76ac33775130a4933a29d21e4220bfa72a6254f9ad831a43a1a083e\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkySettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\nimport '../libraries/types/DataTypes.sol';\\n\\ninterface IOpenSkySettings {\\n    event InitPoolAddress(address operator, address address_);\\n    event InitLoanAddress(address operator, address address_);\\n    event InitVaultFactoryAddress(address operator, address address_);\\n    event InitIncentiveControllerAddress(address operator, address address_);\\n    event InitWETHGatewayAddress(address operator, address address_);\\n    event InitPunkGatewayAddress(address operator, address address_);\\n    event InitDaoVaultAddress(address operator, address address_);\\n\\n    event AddToWhitelist(address operator, uint256 reserveId, address nft);\\n    event RemoveFromWhitelist(address operator, uint256 reserveId, address nft);\\n    event SetReserveFactor(address operator, uint256 factor);\\n    event SetPrepaymentFeeFactor(address operator, uint256 factor);\\n    event SetOverdueLoanFeeFactor(address operator, uint256 factor);\\n    event SetMoneyMarketAddress(address operator, address address_);\\n    event SetTreasuryAddress(address operator, address address_);\\n    event SetACLManagerAddress(address operator, address address_);\\n    event SetLoanDescriptorAddress(address operator, address address_);\\n    event SetNftPriceOracleAddress(address operator, address address_);\\n    event SetInterestRateStrategyAddress(address operator, address address_);\\n    event AddLiquidator(address operator, address address_);\\n    event RemoveLiquidator(address operator, address address_);\\n\\n    function poolAddress() external view returns (address);\\n\\n    function loanAddress() external view returns (address);\\n\\n    function vaultFactoryAddress() external view returns (address);\\n\\n    function incentiveControllerAddress() external view returns (address);\\n\\n    function wethGatewayAddress() external view returns (address);\\n\\n    function punkGatewayAddress() external view returns (address);\\n\\n    function inWhitelist(uint256 reserveId, address nft) external view returns (bool);\\n\\n    function getWhitelistDetail(uint256 reserveId, address nft) external view returns (DataTypes.WhitelistInfo memory);\\n\\n    function reserveFactor() external view returns (uint256); // treasury ratio\\n\\n    function MAX_RESERVE_FACTOR() external view returns (uint256);\\n\\n    function prepaymentFeeFactor() external view returns (uint256);\\n\\n    function overdueLoanFeeFactor() external view returns (uint256);\\n\\n    function moneyMarketAddress() external view returns (address);\\n\\n    function treasuryAddress() external view returns (address);\\n\\n    function daoVaultAddress() external view returns (address);\\n\\n    function ACLManagerAddress() external view returns (address);\\n\\n    function loanDescriptorAddress() external view returns (address);\\n\\n    function nftPriceOracleAddress() external view returns (address);\\n\\n    function interestRateStrategyAddress() external view returns (address);\\n    \\n    function isLiquidator(address liquidator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd5c1c2468464891b3ce379c8a03bc21c2c67fcf0c7493e3b35fd573fa21ea448\",\"license\":\"MIT\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        uint256 reserveId;\\n        address underlyingAsset;\\n        address oTokenAddress;\\n        address moneyMarketAddress;\\n        uint128 lastSupplyIndex;\\n        uint256 borrowingInterestPerSecond;\\n        uint256 lastMoneyMarketBalance;\\n        uint40 lastUpdateTimestamp;\\n        uint256 totalBorrows;\\n        address interestModelAddress;\\n        uint256 treasuryFactor;\\n        bool isMoneyMarketOn;\\n    }\\n\\n    struct LoanData {\\n        uint256 reserveId;\\n        address nftAddress;\\n        uint256 tokenId;\\n        address borrower;\\n        uint256 amount;\\n        uint128 borrowRate;\\n        uint128 interestPerSecond;\\n        uint40 borrowBegin;\\n        uint40 borrowDuration;\\n        uint40 borrowOverdueTime;\\n        uint40 liquidatableTime;\\n        uint40 extendableTime;\\n        uint40 borrowEnd;\\n        LoanStatus status;\\n    }\\n\\n    enum LoanStatus {\\n        NONE,\\n        BORROWING,\\n        EXTENDABLE,\\n        OVERDUE,\\n        LIQUIDATABLE,\\n        LIQUIDATING\\n    }\\n\\n    struct WhitelistInfo {\\n        bool enabled;\\n        string name;\\n        string symbol;\\n        uint256 LTV;\\n        uint256 minBorrowDuration;\\n        uint256 maxBorrowDuration;\\n        uint256 extendableDuration;\\n        uint256 overdueDuration;\\n    }\\n}\\n\",\"keccak256\":\"0x487cd1dedb3146da46144bc8f0e5b970c5173efa8c19700184b8207c1ee3fc55\",\"license\":\"MIT\"},\"contracts/misc/OpenSkyPunkGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport '../dependencies/cryptopunk/ICryptoPunk.sol';\\nimport '../dependencies/cryptopunk/IWrappedPunk.sol';\\nimport '../dependencies/weth/IWETH.sol';\\n\\nimport '../libraries/types/DataTypes.sol';\\nimport '../interfaces/IOpenSkySettings.sol';\\nimport '../interfaces/IOpenSkyPool.sol';\\nimport '../interfaces/IOpenSkyLoan.sol';\\nimport '../interfaces/IOpenSkyPunkGateway.sol';\\n\\ncontract OpenSkyPunkGateway is Context, ERC721Holder, IOpenSkyPunkGateway {\\n    using SafeERC20 for IERC20;\\n\\n    IOpenSkySettings public immutable SETTINGS;\\n    ICryptoPunk public immutable PUNK;\\n    IWrappedPunk public immutable WPUNK;\\n    IWETH public immutable WETH;\\n\\n    address public immutable WPUNK_PROXY_ADDRESS;\\n\\n    constructor(\\n        address SETTINGS_,\\n        address PUNK_,\\n        address WPUNK_,\\n        address WETH_\\n    ) {\\n        SETTINGS = IOpenSkySettings(SETTINGS_);\\n        PUNK = ICryptoPunk(PUNK_);\\n        WPUNK = IWrappedPunk(WPUNK_);\\n        WETH = IWETH(WETH_);\\n\\n        WPUNK.registerProxy();\\n        WPUNK_PROXY_ADDRESS = WPUNK.proxyInfo(address(this));\\n\\n        IERC721(address(WPUNK)).setApprovalForAll(SETTINGS.poolAddress(), true);\\n    }\\n\\n    function borrow(\\n        uint256 reserveId,\\n        uint256 amount,\\n        uint256 duration,\\n        uint256 punkIndex\\n    ) external override {\\n        address underlyingAsset = IOpenSkyPool(SETTINGS.poolAddress()).getReserveData(reserveId).underlyingAsset;\\n\\n        uint256 loanId = _borrow(reserveId, amount, duration, punkIndex);\\n        IERC20(underlyingAsset).safeTransfer(_msgSender(), amount);\\n\\n        emit Borrow(reserveId, _msgSender(), amount, duration, punkIndex, loanId);\\n    }\\n\\n    function borrowETH(\\n        uint256 reserveId,\\n        uint256 amount,\\n        uint256 duration,\\n        uint256 punkIndex\\n    ) external {\\n        address underlyingAsset = IOpenSkyPool(SETTINGS.poolAddress()).getReserveData(reserveId).underlyingAsset;\\n        require(underlyingAsset == address(WETH), 'BORROW_ETH_RESERVE_ASSET_NOT_MATCH');\\n\\n        uint256 loanId = _borrow(reserveId, amount, duration, punkIndex);\\n\\n        WETH.withdraw(amount);\\n        _safeTransferETH(_msgSender(), amount);\\n\\n        emit BorrowETH(reserveId, _msgSender(), amount, duration, punkIndex, loanId);\\n    }\\n\\n    /// @notice Only loan NFT owner can repay\\n    function repay(uint256 loanId) external override {\\n        IOpenSkyLoan loanNFT = IOpenSkyLoan(SETTINGS.loanAddress());\\n        DataTypes.LoanData memory loanData = loanNFT.getLoanData(loanId);\\n        address underlyingAsset = IOpenSkyPool(SETTINGS.poolAddress())\\n            .getReserveData(loanData.reserveId)\\n            .underlyingAsset;\\n        uint256 borrowBalance = loanNFT.getBorrowBalance(loanId);\\n        uint256 penalty = loanNFT.getPenalty(loanId);\\n        uint256 repayAmount = borrowBalance + penalty;\\n\\n        IERC20(underlyingAsset).safeTransferFrom(_msgSender(), address(this), repayAmount);\\n\\n        _repay(loanId, loanData, underlyingAsset, repayAmount);\\n\\n        emit Repay(loanData.reserveId, _msgSender(), loanData.tokenId, loanId);\\n    }\\n\\n    function repayETH(uint256 loanId) external payable {\\n        IOpenSkyLoan loanNFT = IOpenSkyLoan(SETTINGS.loanAddress());\\n        DataTypes.LoanData memory loanData = loanNFT.getLoanData(loanId);\\n\\n        address underlyingAsset = IOpenSkyPool(SETTINGS.poolAddress())\\n            .getReserveData(loanData.reserveId)\\n            .underlyingAsset;\\n        require(underlyingAsset == address(WETH), 'REPAY_ETH_RESERVE_ASSET_NOT_MATCH');\\n\\n        uint256 borrowBalance = loanNFT.getBorrowBalance(loanId);\\n        uint256 penalty = loanNFT.getPenalty(loanId);\\n        uint256 repayAmount = borrowBalance + penalty;\\n\\n        require(msg.value >= repayAmount, 'REPAY_ETH_NOT_ENOUGH');\\n\\n        // prepare weth\\n        WETH.deposit{value: repayAmount}();\\n\\n        _repay(loanId, loanData, underlyingAsset, repayAmount);\\n\\n        if (msg.value > repayAmount) {\\n            _safeTransferETH(_msgSender(), msg.value - repayAmount);\\n        }\\n\\n        emit RepayETH(loanData.reserveId, _msgSender(), loanData.tokenId, loanId);\\n    }\\n\\n    function _borrow(\\n        uint256 reserveId,\\n        uint256 amount,\\n        uint256 duration,\\n        uint256 punkIndex\\n    ) internal returns (uint256) {\\n        address owner = PUNK.punkIndexToAddress(punkIndex);\\n        require(owner == _msgSender(), 'BORROW_NOT_OWNER_OF_PUNK');\\n\\n        // deposit punk\\n        PUNK.buyPunk(punkIndex);\\n        PUNK.transferPunk(WPUNK_PROXY_ADDRESS, punkIndex);\\n        WPUNK.mint(punkIndex);\\n\\n        // borrow\\n        uint256 loanId = IOpenSkyPool(SETTINGS.poolAddress()).borrow(\\n            reserveId,\\n            amount,\\n            duration,\\n            address(WPUNK),\\n            punkIndex,\\n            _msgSender()\\n        );\\n        return loanId;\\n    }\\n\\n    function _repay(\\n        uint256 loanId,\\n        DataTypes.LoanData memory loanData,\\n        address underlyingAsset,\\n        uint256 repayAmount\\n    ) internal {\\n        address owner = IERC721(SETTINGS.loanAddress()).ownerOf(loanId);\\n\\n        // approve underlyingAsset\\n        IERC20(underlyingAsset).safeApprove(SETTINGS.poolAddress(), repayAmount);\\n\\n        uint256 repaid = IOpenSkyPool(SETTINGS.poolAddress()).repay(loanId);\\n        require(repaid == repayAmount, 'REPAY_AMOUNT_NOT_MATCH');\\n\\n        // withdrawPunk\\n        WPUNK.burn(loanData.tokenId);\\n        PUNK.transferPunk(owner, loanData.tokenId);\\n    }\\n\\n    function _safeTransferETH(address recipient, uint256 amount) internal {\\n        (bool success, ) = recipient.call{value: amount}('');\\n        require(success, 'ETH_TRANSFER_FAILED');\\n    }\\n\\n    event Received(address, uint256);\\n\\n    receive() external payable {\\n        emit Received(_msgSender(), msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0x7bd812bc6f6ee0e3343c0d8d1b36348850e995d41a5cb9e6ff980a321d494683\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b506040516200235938038062002359833981016040819052620000359162000234565b6001600160a01b0380851660805283811660a05282811660c081905290821660e05260408051636eec0fc160e11b8152905163ddd81f829160048082019260009290919082900301818387803b1580156200008f57600080fd5b505af1158015620000a4573d6000803e3d6000fd5b505060c051604051631538f65960e31b81523060048201526001600160a01b03909116925063a9c7b2c891506024016020604051808303816000875af1158015620000f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000119919062000291565b6001600160a01b0316610100816001600160a01b03168152505060c0516001600160a01b031663a22cb4656080516001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000185573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001ab919062000291565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260016024820152604401600060405180830381600087803b158015620001f457600080fd5b505af115801562000209573d6000803e3d6000fd5b5050505050505050620002b6565b80516001600160a01b03811681146200022f57600080fd5b919050565b600080600080608085870312156200024b57600080fd5b620002568562000217565b9350620002666020860162000217565b9250620002766040860162000217565b9150620002866060860162000217565b905092959194509250565b600060208284031215620002a457600080fd5b620002af8262000217565b9392505050565b60805160a05160c05160e05161010051611fc462000395600039600081816101730152610fec01526000818161023301528181610625015281816107e701528181610d070152610db80152600081816102670152818161108d015281816111a401526115860152600081816101bf01528181610e9801528181610f730152818161101b015261161601526000818161029b015281816102c10152818161043301528181610529015281816108d0015281816109c601528181610c10015281816110f7015281816112a60152818161139b01526114300152611fc46000f3fe6080604052600436106100955760003560e01c8063371fd8e611610059578063371fd8e6146101e1578063900f60ba14610201578063ad5c464814610221578063add9cf0314610255578063ade97ab51461028957600080fd5b8063111d9482146100e3578063150b7a02146101055780632247463e1461014e578063268b463d14610161578063296f76b3146101ad57600080fd5b366100de577f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f8852587433604080516001600160a01b0390921682523460208301520160405180910390a1005b600080fd5b3480156100ef57600080fd5b506101036100fe366004611aa4565b6102bd565b005b34801561011157600080fd5b50610130610120366004611b83565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020015b60405180910390f35b61010361015c366004611c47565b61042f565b34801561016d57600080fd5b506101957f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610145565b3480156101b957600080fd5b506101957f000000000000000000000000000000000000000000000000000000000000000081565b3480156101ed57600080fd5b506101036101fc366004611c47565b6108cc565b34801561020d57600080fd5b5061010361021c366004611aa4565b610c0c565b34801561022d57600080fd5b506101957f000000000000000000000000000000000000000000000000000000000000000081565b34801561026157600080fd5b506101957f000000000000000000000000000000000000000000000000000000000000000081565b34801561029557600080fd5b506101957f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa15801561031d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103419190611c70565b6001600160a01b03166391541e05866040518263ffffffff1660e01b815260040161036e91815260200190565b61018060405180830381865afa15801561038c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b09190611cd2565b60200151905060006103c486868686610e75565b90506103da6001600160a01b038316338761123a565b604080518681526020810186905290810184905260608101829052339087907f8022857986a1f6403c350b6ffd0f3ceef7b305fe08e1bc74b0841f4d41d3a92d906080015b60405180910390a3505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166335bc868a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561048f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b39190611c70565b60405163622fe39f60e01b8152600481018490529091506000906001600160a01b0383169063622fe39f906024016101c060405180830381865afa1580156104ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105239190611daa565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a99190611c70565b82516040516391541e0560e01b81526001600160a01b0392909216916391541e05916105db9160040190815260200190565b61018060405180830381865afa1580156105f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061d9190611cd2565b6020015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316146106b35760405162461bcd60e51b815260206004820152602160248201527f52455041595f4554485f524553455256455f41535345545f4e4f545f4d4154436044820152600960fb1b60648201526084015b60405180910390fd5b604051636b52b36560e01b8152600481018590526000906001600160a01b03851690636b52b36590602401602060405180830381865afa1580156106fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071f9190611e9a565b604051634b72cb4160e11b8152600481018790529091506000906001600160a01b038616906396e5968290602401602060405180830381865afa15801561076a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078e9190611e9a565b9050600061079c8284611ec9565b9050803410156107e55760405162461bcd60e51b81526020600482015260146024820152730a48aa082b2be8aa890be9c9ea8be8a9c9eaa8e960631b60448201526064016106aa565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561084057600080fd5b505af1158015610854573d6000803e3d6000fd5b5050505050610865878686846112a2565b80341115610880576108803361087b8334611ee1565b61167c565b84516040808701518151908152602081018a90523392917f58a95140c905d05fa474061eeec893aa434dab2bc58eaa7b48056fce4996e18b91015b60405180910390a350505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166335bc868a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561092c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109509190611c70565b60405163622fe39f60e01b8152600481018490529091506000906001600160a01b0383169063622fe39f906024016101c060405180830381865afa15801561099c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c09190611daa565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a469190611c70565b82516040516391541e0560e01b81526001600160a01b0392909216916391541e0591610a789160040190815260200190565b61018060405180830381865afa158015610a96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aba9190611cd2565b60200151604051636b52b36560e01b8152600481018690529091506000906001600160a01b03851690636b52b36590602401602060405180830381865afa158015610b09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2d9190611e9a565b604051634b72cb4160e11b8152600481018790529091506000906001600160a01b038616906396e5968290602401602060405180830381865afa158015610b78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9c9190611e9a565b90506000610baa8284611ec9565b9050610bc16001600160a01b038516333084611715565b610bcd878686846112a2565b84516040808701518151908152602081018a90523392917f4e209d95368098bc8c8a8b0010964bca5d6789b67388238d3a2bad8e236e54b091016108bb565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c909190611c70565b6001600160a01b03166391541e05866040518263ffffffff1660e01b8152600401610cbd91815260200190565b61018060405180830381865afa158015610cdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cff9190611cd2565b6020015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614610d915760405162461bcd60e51b815260206004820152602260248201527f424f52524f575f4554485f524553455256455f41535345545f4e4f545f4d4154604482015261086960f31b60648201526084016106aa565b6000610d9f86868686610e75565b604051632e1a7d4d60e01b8152600481018790529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015610e0457600080fd5b505af1158015610e18573d6000803e3d6000fd5b50505050610e2c610e263390565b8661167c565b604080518681526020810186905290810184905260608101829052339087907fd0f65229433ec4eae01027a1d44f915a610fadee0436aad3533c78340c7dfb959060800161041f565b604051630b02f02d60e31b81526004810182905260009081906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635817816890602401602060405180830381865afa158015610edf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f039190611c70565b90506001600160a01b0381163314610f5d5760405162461bcd60e51b815260206004820152601860248201527f424f52524f575f4e4f545f4f574e45525f4f465f50554e4b000000000000000060448201526064016106aa565b60405163104c9fd360e31b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638264fe9890602401600060405180830381600087803b158015610fbf57600080fd5b505af1158015610fd3573d6000803e3d6000fd5b50506040516322dca8bb60e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018790527f0000000000000000000000000000000000000000000000000000000000000000169250638b72a2ec9150604401600060405180830381600087803b15801561106157600080fd5b505af1158015611075573d6000803e3d6000fd5b505060405163140e25ad60e31b8152600481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063a0712d689150602401600060405180830381600087803b1580156110db57600080fd5b505af11580156110ef573d6000803e3d6000fd5b5050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015611153573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111779190611c70565b6040805163f668a9c560e01b8152600481018a905260248101899052604481018890526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166064830152608482018890523360a48301529151929091169163f668a9c59160c48082019260209290919082900301816000875af115801561120b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122f9190611e9a565b979650505050505050565b6040516001600160a01b03831660248201526044810182905261129d90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611753565b505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166335bc868a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611302573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113269190611c70565b6001600160a01b0316636352211e866040518263ffffffff1660e01b815260040161135391815260200190565b602060405180830381865afa158015611370573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113949190611c70565b905061142c7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141b9190611c70565b6001600160a01b0385169084611825565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa15801561148c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b09190611c70565b6001600160a01b031663371fd8e6876040518263ffffffff1660e01b81526004016114dd91815260200190565b6020604051808303816000875af11580156114fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115209190611e9a565b905082811461156a5760405162461bcd60e51b81526020600482015260166024820152750a48aa082b2be829a9eaa9ca8be9c9ea8be9a82a886960531b60448201526064016106aa565b6040858101519051630852cd8d60e31b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906342966c6890602401600060405180830381600087803b1580156115d257600080fd5b505af11580156115e6573d6000803e3d6000fd5b5050505060408581015190516322dca8bb60e21b81526001600160a01b03848116600483015260248201929092527f000000000000000000000000000000000000000000000000000000000000000090911690638b72a2ec90604401600060405180830381600087803b15801561165c57600080fd5b505af1158015611670573d6000803e3d6000fd5b50505050505050505050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146116c9576040519150601f19603f3d011682016040523d82523d6000602084013e6116ce565b606091505b505090508061129d5760405162461bcd60e51b815260206004820152601360248201527211551217d514905394d1915497d19052531151606a1b60448201526064016106aa565b6040516001600160a01b038085166024830152831660448201526064810182905261174d9085906323b872dd60e01b90608401611266565b50505050565b60006117a8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661193a9092919063ffffffff16565b80519091501561129d57808060200190518101906117c69190611ef8565b61129d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106aa565b80158061189f5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189d9190611e9a565b155b61190a5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016106aa565b6040516001600160a01b03831660248201526044810182905261129d90849063095ea7b360e01b90606401611266565b60606119498484600085611953565b90505b9392505050565b6060824710156119b45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106aa565b843b611a025760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106aa565b600080866001600160a01b03168587604051611a1e9190611f3f565b60006040518083038185875af1925050503d8060008114611a5b576040519150601f19603f3d011682016040523d82523d6000602084013e611a60565b606091505b509150915061122f82828660608315611a7a57508161194c565b825115611a8a5782518084602001fd5b8160405162461bcd60e51b81526004016106aa9190611f5b565b60008060008060808587031215611aba57600080fd5b5050823594602084013594506040840135936060013592509050565b6001600160a01b0381168114611aeb57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff81118282101715611b2857611b28611aee565b60405290565b6040516101c0810167ffffffffffffffff81118282101715611b2857611b28611aee565b604051601f8201601f1916810167ffffffffffffffff81118282101715611b7b57611b7b611aee565b604052919050565b60008060008060808587031215611b9957600080fd5b8435611ba481611ad6565b9350602085810135611bb581611ad6565b935060408601359250606086013567ffffffffffffffff80821115611bd957600080fd5b818801915088601f830112611bed57600080fd5b813581811115611bff57611bff611aee565b611c11601f8201601f19168501611b52565b91508082528984828501011115611c2757600080fd5b808484018584013760008482840101525080935050505092959194509250565b600060208284031215611c5957600080fd5b5035919050565b8051611c6b81611ad6565b919050565b600060208284031215611c8257600080fd5b815161194c81611ad6565b80516fffffffffffffffffffffffffffffffff81168114611c6b57600080fd5b805164ffffffffff81168114611c6b57600080fd5b80518015158114611c6b57600080fd5b60006101808284031215611ce557600080fd5b611ced611b04565b82518152611cfd60208401611c60565b6020820152611d0e60408401611c60565b6040820152611d1f60608401611c60565b6060820152611d3060808401611c8d565b608082015260a083015160a082015260c083015160c0820152611d5560e08401611cad565b60e08201526101008381015190820152610120611d73818501611c60565b908201526101408381015190820152610160611d90818501611cc2565b908201529392505050565b805160068110611c6b57600080fd5b60006101c08284031215611dbd57600080fd5b611dc5611b2e565b82518152611dd560208401611c60565b602082015260408301516040820152611df060608401611c60565b606082015260808301516080820152611e0b60a08401611c8d565b60a0820152611e1c60c08401611c8d565b60c0820152611e2d60e08401611cad565b60e0820152610100611e40818501611cad565b90820152610120611e52848201611cad565b90820152610140611e64848201611cad565b90820152610160611e76848201611cad565b90820152610180611e88848201611cad565b908201526101a0611d90848201611d9b565b600060208284031215611eac57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611edc57611edc611eb3565b500190565b600082821015611ef357611ef3611eb3565b500390565b600060208284031215611f0a57600080fd5b61194c82611cc2565b60005b83811015611f2e578181015183820152602001611f16565b8381111561174d5750506000910152565b60008251611f51818460208701611f13565b9190910192915050565b6020815260008251806020840152611f7a816040850160208701611f13565b601f01601f1916919091016040019291505056fea26469706673582212208d0a395253dd80f8c4c1ac73df756ee9f89140a7b07666be99836c14ae252a6564736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106100955760003560e01c8063371fd8e611610059578063371fd8e6146101e1578063900f60ba14610201578063ad5c464814610221578063add9cf0314610255578063ade97ab51461028957600080fd5b8063111d9482146100e3578063150b7a02146101055780632247463e1461014e578063268b463d14610161578063296f76b3146101ad57600080fd5b366100de577f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f8852587433604080516001600160a01b0390921682523460208301520160405180910390a1005b600080fd5b3480156100ef57600080fd5b506101036100fe366004611aa4565b6102bd565b005b34801561011157600080fd5b50610130610120366004611b83565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020015b60405180910390f35b61010361015c366004611c47565b61042f565b34801561016d57600080fd5b506101957f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610145565b3480156101b957600080fd5b506101957f000000000000000000000000000000000000000000000000000000000000000081565b3480156101ed57600080fd5b506101036101fc366004611c47565b6108cc565b34801561020d57600080fd5b5061010361021c366004611aa4565b610c0c565b34801561022d57600080fd5b506101957f000000000000000000000000000000000000000000000000000000000000000081565b34801561026157600080fd5b506101957f000000000000000000000000000000000000000000000000000000000000000081565b34801561029557600080fd5b506101957f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa15801561031d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103419190611c70565b6001600160a01b03166391541e05866040518263ffffffff1660e01b815260040161036e91815260200190565b61018060405180830381865afa15801561038c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b09190611cd2565b60200151905060006103c486868686610e75565b90506103da6001600160a01b038316338761123a565b604080518681526020810186905290810184905260608101829052339087907f8022857986a1f6403c350b6ffd0f3ceef7b305fe08e1bc74b0841f4d41d3a92d906080015b60405180910390a3505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166335bc868a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561048f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b39190611c70565b60405163622fe39f60e01b8152600481018490529091506000906001600160a01b0383169063622fe39f906024016101c060405180830381865afa1580156104ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105239190611daa565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a99190611c70565b82516040516391541e0560e01b81526001600160a01b0392909216916391541e05916105db9160040190815260200190565b61018060405180830381865afa1580156105f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061d9190611cd2565b6020015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316146106b35760405162461bcd60e51b815260206004820152602160248201527f52455041595f4554485f524553455256455f41535345545f4e4f545f4d4154436044820152600960fb1b60648201526084015b60405180910390fd5b604051636b52b36560e01b8152600481018590526000906001600160a01b03851690636b52b36590602401602060405180830381865afa1580156106fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071f9190611e9a565b604051634b72cb4160e11b8152600481018790529091506000906001600160a01b038616906396e5968290602401602060405180830381865afa15801561076a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078e9190611e9a565b9050600061079c8284611ec9565b9050803410156107e55760405162461bcd60e51b81526020600482015260146024820152730a48aa082b2be8aa890be9c9ea8be8a9c9eaa8e960631b60448201526064016106aa565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561084057600080fd5b505af1158015610854573d6000803e3d6000fd5b5050505050610865878686846112a2565b80341115610880576108803361087b8334611ee1565b61167c565b84516040808701518151908152602081018a90523392917f58a95140c905d05fa474061eeec893aa434dab2bc58eaa7b48056fce4996e18b91015b60405180910390a350505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166335bc868a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561092c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109509190611c70565b60405163622fe39f60e01b8152600481018490529091506000906001600160a01b0383169063622fe39f906024016101c060405180830381865afa15801561099c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c09190611daa565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a469190611c70565b82516040516391541e0560e01b81526001600160a01b0392909216916391541e0591610a789160040190815260200190565b61018060405180830381865afa158015610a96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aba9190611cd2565b60200151604051636b52b36560e01b8152600481018690529091506000906001600160a01b03851690636b52b36590602401602060405180830381865afa158015610b09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2d9190611e9a565b604051634b72cb4160e11b8152600481018790529091506000906001600160a01b038616906396e5968290602401602060405180830381865afa158015610b78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9c9190611e9a565b90506000610baa8284611ec9565b9050610bc16001600160a01b038516333084611715565b610bcd878686846112a2565b84516040808701518151908152602081018a90523392917f4e209d95368098bc8c8a8b0010964bca5d6789b67388238d3a2bad8e236e54b091016108bb565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c909190611c70565b6001600160a01b03166391541e05866040518263ffffffff1660e01b8152600401610cbd91815260200190565b61018060405180830381865afa158015610cdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cff9190611cd2565b6020015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614610d915760405162461bcd60e51b815260206004820152602260248201527f424f52524f575f4554485f524553455256455f41535345545f4e4f545f4d4154604482015261086960f31b60648201526084016106aa565b6000610d9f86868686610e75565b604051632e1a7d4d60e01b8152600481018790529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015610e0457600080fd5b505af1158015610e18573d6000803e3d6000fd5b50505050610e2c610e263390565b8661167c565b604080518681526020810186905290810184905260608101829052339087907fd0f65229433ec4eae01027a1d44f915a610fadee0436aad3533c78340c7dfb959060800161041f565b604051630b02f02d60e31b81526004810182905260009081906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635817816890602401602060405180830381865afa158015610edf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f039190611c70565b90506001600160a01b0381163314610f5d5760405162461bcd60e51b815260206004820152601860248201527f424f52524f575f4e4f545f4f574e45525f4f465f50554e4b000000000000000060448201526064016106aa565b60405163104c9fd360e31b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638264fe9890602401600060405180830381600087803b158015610fbf57600080fd5b505af1158015610fd3573d6000803e3d6000fd5b50506040516322dca8bb60e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018790527f0000000000000000000000000000000000000000000000000000000000000000169250638b72a2ec9150604401600060405180830381600087803b15801561106157600080fd5b505af1158015611075573d6000803e3d6000fd5b505060405163140e25ad60e31b8152600481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063a0712d689150602401600060405180830381600087803b1580156110db57600080fd5b505af11580156110ef573d6000803e3d6000fd5b5050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015611153573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111779190611c70565b6040805163f668a9c560e01b8152600481018a905260248101899052604481018890526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166064830152608482018890523360a48301529151929091169163f668a9c59160c48082019260209290919082900301816000875af115801561120b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122f9190611e9a565b979650505050505050565b6040516001600160a01b03831660248201526044810182905261129d90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611753565b505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166335bc868a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611302573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113269190611c70565b6001600160a01b0316636352211e866040518263ffffffff1660e01b815260040161135391815260200190565b602060405180830381865afa158015611370573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113949190611c70565b905061142c7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141b9190611c70565b6001600160a01b0385169084611825565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa15801561148c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b09190611c70565b6001600160a01b031663371fd8e6876040518263ffffffff1660e01b81526004016114dd91815260200190565b6020604051808303816000875af11580156114fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115209190611e9a565b905082811461156a5760405162461bcd60e51b81526020600482015260166024820152750a48aa082b2be829a9eaa9ca8be9c9ea8be9a82a886960531b60448201526064016106aa565b6040858101519051630852cd8d60e31b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906342966c6890602401600060405180830381600087803b1580156115d257600080fd5b505af11580156115e6573d6000803e3d6000fd5b5050505060408581015190516322dca8bb60e21b81526001600160a01b03848116600483015260248201929092527f000000000000000000000000000000000000000000000000000000000000000090911690638b72a2ec90604401600060405180830381600087803b15801561165c57600080fd5b505af1158015611670573d6000803e3d6000fd5b50505050505050505050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146116c9576040519150601f19603f3d011682016040523d82523d6000602084013e6116ce565b606091505b505090508061129d5760405162461bcd60e51b815260206004820152601360248201527211551217d514905394d1915497d19052531151606a1b60448201526064016106aa565b6040516001600160a01b038085166024830152831660448201526064810182905261174d9085906323b872dd60e01b90608401611266565b50505050565b60006117a8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661193a9092919063ffffffff16565b80519091501561129d57808060200190518101906117c69190611ef8565b61129d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106aa565b80158061189f5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189d9190611e9a565b155b61190a5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016106aa565b6040516001600160a01b03831660248201526044810182905261129d90849063095ea7b360e01b90606401611266565b60606119498484600085611953565b90505b9392505050565b6060824710156119b45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106aa565b843b611a025760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106aa565b600080866001600160a01b03168587604051611a1e9190611f3f565b60006040518083038185875af1925050503d8060008114611a5b576040519150601f19603f3d011682016040523d82523d6000602084013e611a60565b606091505b509150915061122f82828660608315611a7a57508161194c565b825115611a8a5782518084602001fd5b8160405162461bcd60e51b81526004016106aa9190611f5b565b60008060008060808587031215611aba57600080fd5b5050823594602084013594506040840135936060013592509050565b6001600160a01b0381168114611aeb57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff81118282101715611b2857611b28611aee565b60405290565b6040516101c0810167ffffffffffffffff81118282101715611b2857611b28611aee565b604051601f8201601f1916810167ffffffffffffffff81118282101715611b7b57611b7b611aee565b604052919050565b60008060008060808587031215611b9957600080fd5b8435611ba481611ad6565b9350602085810135611bb581611ad6565b935060408601359250606086013567ffffffffffffffff80821115611bd957600080fd5b818801915088601f830112611bed57600080fd5b813581811115611bff57611bff611aee565b611c11601f8201601f19168501611b52565b91508082528984828501011115611c2757600080fd5b808484018584013760008482840101525080935050505092959194509250565b600060208284031215611c5957600080fd5b5035919050565b8051611c6b81611ad6565b919050565b600060208284031215611c8257600080fd5b815161194c81611ad6565b80516fffffffffffffffffffffffffffffffff81168114611c6b57600080fd5b805164ffffffffff81168114611c6b57600080fd5b80518015158114611c6b57600080fd5b60006101808284031215611ce557600080fd5b611ced611b04565b82518152611cfd60208401611c60565b6020820152611d0e60408401611c60565b6040820152611d1f60608401611c60565b6060820152611d3060808401611c8d565b608082015260a083015160a082015260c083015160c0820152611d5560e08401611cad565b60e08201526101008381015190820152610120611d73818501611c60565b908201526101408381015190820152610160611d90818501611cc2565b908201529392505050565b805160068110611c6b57600080fd5b60006101c08284031215611dbd57600080fd5b611dc5611b2e565b82518152611dd560208401611c60565b602082015260408301516040820152611df060608401611c60565b606082015260808301516080820152611e0b60a08401611c8d565b60a0820152611e1c60c08401611c8d565b60c0820152611e2d60e08401611cad565b60e0820152610100611e40818501611cad565b90820152610120611e52848201611cad565b90820152610140611e64848201611cad565b90820152610160611e76848201611cad565b90820152610180611e88848201611cad565b908201526101a0611d90848201611d9b565b600060208284031215611eac57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611edc57611edc611eb3565b500190565b600082821015611ef357611ef3611eb3565b500390565b600060208284031215611f0a57600080fd5b61194c82611cc2565b60005b83811015611f2e578181015183820152602001611f16565b8381111561174d5750506000910152565b60008251611f51818460208701611f13565b9190910192915050565b6020815260008251806020840152611f7a816040850160208701611f13565b601f01601f1916919091016040019291505056fea26469706673582212208d0a395253dd80f8c4c1ac73df756ee9f89140a7b07666be99836c14ae252a6564736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "repay(uint256)": {
        "notice": "Only loan NFT owner can repay"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}