{
  "address": "0xb86476c06A4314Db2fD6D2d08eb866C0e603EE1c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_apeCoinStakingContractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_apeCoinContractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bakcContractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_instantLoanCollateralHolder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bespokeLoanCollateralHolder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "apeCoin",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "apeCoinStaking",
      "outputs": [
        {
          "internalType": "contract IApeCoinStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bakc",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bespokeLoanCollateralHolder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "nftAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "executeOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "instantLoanCollateralHolder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb0c355827f9a1b0790df53cb8e06c98faeb126ff9a15413f1f5482aafd83955d",
  "receipt": {
    "to": null,
    "from": "0x1a347f2aac8758E139C7401aEC878aD174C19c8a",
    "contractAddress": "0xb86476c06A4314Db2fD6D2d08eb866C0e603EE1c",
    "transactionIndex": 51,
    "gasUsed": "948012",
    "logsBloom": "0x
    "blockHash": "0xd3813aa47dc3a01734eb917b34827e89c590800759f5c23ce76812caf155d700",
    "transactionHash": "0xb0c355827f9a1b0790df53cb8e06c98faeb126ff9a15413f1f5482aafd83955d",
    "logs": [],
    "blockNumber": 16323417,
    "cumulativeGasUsed": "6204564",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5954aB967Bc958940b7EB73ee84797Dc8a2AFbb9",
    "0x4d224452801ACEd8B2F0aebE155379bb5D594381",
    "0xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623",
    "0x87D6DeC027E167136B081F888960fE48Bb10328a",
    "0x714aabF76065BA452933cF92D042E2B3354d7aA3"
  ],
  "solcInputHash": "441bc16d207f1dfd9ac69b280a9ecad4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_apeCoinStakingContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_apeCoinContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bakcContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_instantLoanCollateralHolder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bespokeLoanCollateralHolder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"apeCoin\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apeCoinStaking\",\"outputs\":[{\"internalType\":\"contract IApeCoinStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bakc\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bespokeLoanCollateralHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"nftAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instantLoanCollateralHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/misc/ape-staking/OpenSkyWithdrawBAKCHelper.sol\":\"OpenSkyWithdrawBAKCHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x8756c97d6004b1ae21517a013bdec72fbf30be7852afb2f395871d280131b250\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenSkyFlashClaimReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IOpenSkyFlashClaimReceiver {\\n    function executeOperation(\\n        address[] calldata nftAddresses,\\n        uint256[] calldata tokenIds,\\n        address initiator,\\n        address operator,\\n        bytes calldata params\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x20c9cbf82dc555a3e1f468dc755742af0dedb3ab5165b975b473e55870d0fbe4\",\"license\":\"MIT\"},\"contracts/misc/ape-staking/IApeCoinStaking.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title ApeCoin Staking Contract\\n * @notice Stake ApeCoin across four different pools that release hourly rewards\\n * @author HorizenLabs\\n */\\ninterface IApeCoinStaking {\\n\\n    /// @notice State for ApeCoin, BAYC, MAYC, and Pair Pools\\n    struct Pool {\\n        uint256 lastRewardedTimestampHour;\\n        uint256 lastRewardsRangeIndex;\\n        uint256 stakedAmount;\\n        uint256 accumulatedRewardsPerShare;\\n        TimeRange[] timeRanges;\\n    }\\n\\n    /// @notice Pool rules valid for a given duration of time.\\n    /// @dev All TimeRange timestamp values must represent whole hours\\n    struct TimeRange {\\n        uint256 startTimestampHour;\\n        uint256 endTimestampHour;\\n        uint256 rewardsPerHour;\\n        uint256 capPerPosition;\\n    }\\n\\n    /// @dev Convenience struct for front-end applications\\n    struct PoolUI {\\n        uint256 poolId;\\n        uint256 stakedAmount;\\n        TimeRange currentTimeRange;\\n    }\\n\\n    /// @dev Per address amount and reward tracking\\n    struct Position {\\n        uint256 stakedAmount;\\n        int256 rewardsDebt;\\n    }\\n\\n    /// @dev Struct for depositing and withdrawing from the BAYC and MAYC NFT pools\\n    struct SingleNft {\\n        uint256 tokenId;\\n        uint256 amount;\\n    }\\n    /// @dev Struct for depositing and withdrawing from the BAKC (Pair) pool\\n    struct PairNftWithAmount {\\n        uint256 mainTokenId;\\n        uint256 bakcTokenId;\\n        uint256 amount;\\n    }\\n    /// @dev Struct for claiming from an NFT pool\\n    struct PairNft {\\n        uint256 mainTokenId;\\n        uint256 bakcTokenId;\\n    }\\n    /// @dev NFT paired status.  Can be used bi-directionally (BAYC/MAYC -> BAKC) or (BAKC -> BAYC/MAYC)\\n    struct PairingStatus {\\n        uint256 tokenId;\\n        bool isPaired;\\n    }\\n\\n    // @dev UI focused payload\\n    struct DashboardStake {\\n        uint256 poolId;\\n        uint256 tokenId;\\n        uint256 deposited;\\n        uint256 unclaimed;\\n        uint256 rewards24hr;\\n        DashboardPair pair;\\n    }\\n    /// @dev Sub struct for DashboardStake\\n    struct DashboardPair {\\n        uint256 mainTokenId;\\n        uint256 mainTypePoolId;\\n    }\\n\\n    // Deposit/Commit Methods\\n\\n    /**\\n     * @notice Deposit ApeCoin to the ApeCoin Pool\\n     * @param _amount Amount in ApeCoin\\n     * @param _recipient Address the deposit it stored to\\n     * @dev ApeCoin deposit must be >= 1 ApeCoin\\n     */\\n    function depositApeCoin(uint256 _amount, address _recipient) external;\\n\\n    /**\\n     * @notice Deposit ApeCoin to the ApeCoin Pool\\n     * @param _amount Amount in ApeCoin\\n     * @dev Deposit on behalf of msg.sender. ApeCoin deposit must be >= 1 ApeCoin\\n     */\\n    function depositSelfApeCoin(uint256 _amount) external;\\n\\n    /**\\n     * @notice Deposit ApeCoin to the BAYC Pool\\n     * @param _nfts Array of SingleNft structs\\n     * @dev Commits 1 or more BAYC NFTs, each with an ApeCoin amount to the BAYC pool.\\\\\\n     * Each BAYC committed must attach an ApeCoin amount >= 1 ApeCoin and <= the BAYC pool cap amount.\\n     */\\n    function depositBAYC(SingleNft[] calldata _nfts) external;\\n\\n    /**\\n     * @notice Deposit ApeCoin to the MAYC Pool\\n     * @param _nfts Array of SingleNft structs\\n     * @dev Commits 1 or more MAYC NFTs, each with an ApeCoin amount to the MAYC pool.\\\\\\n     * Each MAYC committed must attach an ApeCoin amount >= 1 ApeCoin and <= the MAYC pool cap amount.\\n     */\\n    function depositMAYC(SingleNft[] calldata _nfts) external;\\n\\n    /**\\n     * @notice Deposit ApeCoin to the Pair Pool, where Pair = (BAYC + BAKC) or (MAYC + BAKC)\\n     * @param _baycPairs Array of PairNftWithAmount structs\\n     * @param _maycPairs Array of PairNftWithAmount structs\\n     * @dev Commits 1 or more Pairs, each with an ApeCoin amount to the Pair pool.\\\\\\n     * Each BAKC committed must attach an ApeCoin amount >= 1 ApeCoin and <= the Pair pool cap amount.\\\\\\n     * Example 1: BAYC + BAKC + 1 ApeCoin:  [[0, 0, \\\"1000000000000000000\\\"],[]]\\\\\\n     * Example 2: MAYC + BAKC + 1 ApeCoin:  [[], [0, 0, \\\"1000000000000000000\\\"]]\\\\\\n     * Example 3: (BAYC + BAKC + 1 ApeCoin) and (MAYC + BAKC + 1 ApeCoin): [[0, 0, \\\"1000000000000000000\\\"], [0, 1, \\\"1000000000000000000\\\"]]\\n     */\\n    function depositBAKC(PairNftWithAmount[] calldata _baycPairs, PairNftWithAmount[] calldata _maycPairs) external;\\n    // Claim Rewards Methods\\n\\n    /**\\n     * @notice Claim rewards for msg.sender and send to recipient\\n     * @param _recipient Address to send claim reward to\\n     */\\n    function claimApeCoin(address _recipient) external;\\n\\n    /// @notice Claim and send rewards\\n    function claimSelfApeCoin() external;\\n\\n    /**\\n     * @notice Claim rewards for array of BAYC NFTs and send to recipient\\n     * @param _nfts Array of NFTs owned and committed by the msg.sender\\n     * @param _recipient Address to send claim reward to\\n     */\\n    function claimBAYC(uint256[] calldata _nfts, address _recipient) external;\\n\\n    /**\\n     * @notice Claim rewards for array of BAYC NFTs\\n     * @param _nfts Array of NFTs owned and committed by the msg.sender\\n     */\\n    function claimSelfBAYC(uint256[] calldata _nfts) external;\\n\\n    /**\\n     * @notice Claim rewards for array of MAYC NFTs and send to recipient\\n     * @param _nfts Array of NFTs owned and committed by the msg.sender\\n     * @param _recipient Address to send claim reward to\\n     */\\n    function claimMAYC(uint256[] calldata _nfts, address _recipient) external;\\n\\n    /**\\n     * @notice Claim rewards for array of MAYC NFTs\\n     * @param _nfts Array of NFTs owned and committed by the msg.sender\\n     */\\n    function claimSelfMAYC(uint256[] calldata _nfts) external;\\n\\n    /**\\n     * @notice Claim rewards for array of Paired NFTs and send to recipient\\n     * @param _baycPairs Array of Paired BAYC NFTs owned and committed by the msg.sender\\n     * @param _maycPairs Array of Paired MAYC NFTs owned and committed by the msg.sender\\n     * @param _recipient Address to send claim reward to\\n     */\\n    function claimBAKC(PairNft[] calldata _baycPairs, PairNft[] calldata _maycPairs, address _recipient) external;\\n\\n    /**\\n     * @notice Claim rewards for array of Paired NFTs\\n     * @param _baycPairs Array of Paired BAYC NFTs owned and committed by the msg.sender\\n     * @param _maycPairs Array of Paired MAYC NFTs owned and committed by the msg.sender\\n     */\\n    function claimSelfBAKC(PairNft[] calldata _baycPairs, PairNft[] calldata _maycPairs) external;\\n\\n    // Uncommit/Withdraw Methods\\n\\n    /**\\n     * @notice Withdraw staked ApeCoin from the ApeCoin pool.  Performs an automatic claim as part of the withdraw process.\\n     * @param _amount Amount of ApeCoin\\n     * @param _recipient Address to send withdraw amount and claim to\\n     */\\n    function withdrawApeCoin(uint256 _amount, address _recipient) external;\\n\\n    /**\\n     * @notice Withdraw staked ApeCoin from the ApeCoin pool.  If withdraw is total staked amount, performs an automatic claim.\\n     * @param _amount Amount of ApeCoin\\n     */\\n    function withdrawSelfApeCoin(uint256 _amount) external;\\n\\n    /**\\n     * @notice Withdraw staked ApeCoin from the BAYC pool.  If withdraw is total staked amount, performs an automatic claim.\\n     * @param _nfts Array of BAYC NFT's with staked amounts\\n     * @param _recipient Address to send withdraw amount and claim to\\n     */\\n    function withdrawBAYC(SingleNft[] calldata _nfts, address _recipient) external;\\n\\n    /**\\n     * @notice Withdraw staked ApeCoin from the BAYC pool.  If withdraw is total staked amount, performs an automatic claim.\\n     * @param _nfts Array of BAYC NFT's with staked amounts\\n     */\\n    function withdrawSelfBAYC(SingleNft[] calldata _nfts) external;\\n\\n    /**\\n     * @notice Withdraw staked ApeCoin from the MAYC pool.  If withdraw is total staked amount, performs an automatic claim.\\n     * @param _nfts Array of MAYC NFT's with staked amounts\\n     * @param _recipient Address to send withdraw amount and claim to\\n     */\\n    function withdrawMAYC(SingleNft[] calldata _nfts, address _recipient) external;\\n\\n    /**\\n     * @notice Withdraw staked ApeCoin from the MAYC pool.  If withdraw is total staked amount, performs an automatic claim.\\n     * @param _nfts Array of MAYC NFT's with staked amounts\\n     */\\n    function withdrawSelfMAYC(SingleNft[] calldata _nfts) external;\\n\\n    /**\\n     * @notice Withdraw staked ApeCoin from the Pair pool.  If withdraw is total staked amount, performs an automatic claim.\\n     * @param _baycPairs Array of Paired BAYC NFT's with staked amounts\\n     * @param _maycPairs Array of Paired MAYC NFT's with staked amounts\\n     * @dev if pairs have split ownership and BAKC is attempting a withdraw, the withdraw must be for the total staked amount\\n     */\\n    function withdrawBAKC(PairNftWithAmount[] calldata _baycPairs, PairNftWithAmount[] calldata _maycPairs) external;\\n\\n    // Pool Methods\\n\\n    /**\\n     * @return The amount of ApeCoin rewards to be distributed by pool for a given time range\\n     * @param _poolId Available pool values 0-3\\n     * @param _from Whole hour timestamp representation\\n     * @param _to Whole hour timestamp representation\\n     */\\n    function rewardsBy(uint256 _poolId, uint256 _from, uint256 _to) external view returns (uint256, uint256);\\n\\n    /**\\n     * @dev Updates reward variables `lastRewardedTimestampHour`, `accumulatedRewardsPerShare` and `lastRewardsRangeIndex`\\n     * for a given pool.\\n     * @param _poolId Available pool values 0-3\\n     */\\n    function updatePool(uint256 _poolId) external;\\n\\n    function getPoolsUI() external view returns (PoolUI memory, PoolUI memory, PoolUI memory, PoolUI memory);\\n\\n    /**\\n     * @return staked amount for addressPosition [APECOIN] and nftPositions [BAYC, MAYC, and Pair(BAKC)] for voting.\\n     */\\n    function stakedTotal(address _addr) external view returns (uint256);\\n\\n    /**\\n     * @return staked amount, pending rewards, and estimated rewards over the last 24 hours\\n     *      for addressPosition [APECOIN, BAYC, MAYC, BAKC].\\n     */\\n    function getAllStakes(address _address) external view returns (DashboardStake[] memory);\\n\\n    /**\\n     * @return staked amount, pending rewards, and estimated rewards over the last 24 hours\\n     *      for addressPosition [APECOIN].\\n     */\\n    function getApeCoinStake(address _address) external view returns (DashboardStake memory);\\n\\n    /**\\n     * @return staked amount, pending rewards, and estimated rewards over the last 24 hours\\n     *      for addressPosition [BAYC].\\n     */\\n    function getBaycStakes(address _address) external view returns (DashboardStake[] memory);\\n\\n    /**\\n     * @return staked amount, pending rewards, and estimated rewards over the last 24 hours\\n     *      for addressPosition [MAYC].\\n     */\\n    function getMaycStakes(address _address) external view returns (DashboardStake[] memory);\\n\\n    /**\\n     * @return staked amount, pending rewards, and estimated rewards over the last 24 hours\\n     *      for addressPosition [BAKC].\\n     */\\n    function getBakcStakes(address _address) external view returns (DashboardStake[] memory);\\n\\n    /**\\n     * @return staked amount, pending rewards, and estimated rewards over the last 24 hours\\n     *      for addressPosition when BAKC Pool Pair is split.\\n     *      ie (BAYC/MAYC) and BAKC in pair pool have different owners.\\n     */\\n    function getSplitStakes(address _address) external view returns (DashboardStake[] memory);\\n\\n    /**\\n     * @return current amount of claimable $APE rewards for a given position from a given pool.\\n     * @param _poolId Available pool values 0-3\\n     * @param _address Address to lookup Position for\\n     * @param _tokenId An NFT id\\n     */\\n    function pendingRewards(uint256 _poolId, address _address, uint256 _tokenId) external view returns (uint256);\\n}\",\"keccak256\":\"0x76499c00d9508766b01c1629e5bd6114288c871168b266d0e2511e095c842056\",\"license\":\"MIT\"},\"contracts/misc/ape-staking/OpenSkyCollateralHolderChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ncontract OpenSkyCollateralHolderChecker {\\n    address public immutable instantLoanCollateralHolder;\\n    address public immutable bespokeLoanCollateralHolder;\\n\\n    constructor(\\n        address _instantLoanCollateralHolder,\\n        address _bespokeLoanCollateralHolder\\n    ) {\\n        instantLoanCollateralHolder = _instantLoanCollateralHolder;\\n        bespokeLoanCollateralHolder = _bespokeLoanCollateralHolder;\\n    }\\n\\n    modifier onlyCollateralHolder {\\n        require(\\n            msg.sender == instantLoanCollateralHolder || msg.sender == bespokeLoanCollateralHolder,\\n            \\\"ONLY_OPENSKY_COLLATERAL_HOLDER\\\");\\n        _;\\n    }\\n\\n}\",\"keccak256\":\"0xd57f90d9a3dda6099d52adc14441935e955fb38a544c4ba6ac73aa769a6963b3\",\"license\":\"MIT\"},\"contracts/misc/ape-staking/OpenSkyWithdrawBAKCHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./OpenSkyCollateralHolderChecker.sol\\\";\\nimport \\\"../../interfaces/IOpenSkyFlashClaimReceiver.sol\\\";\\nimport \\\"./IApeCoinStaking.sol\\\";\\n\\ncontract OpenSkyWithdrawBAKCHelper is IOpenSkyFlashClaimReceiver, ERC721Holder, OpenSkyCollateralHolderChecker {\\n    using SafeERC20 for IERC20;\\n\\n    IApeCoinStaking public immutable apeCoinStaking;\\n    IERC20 public immutable apeCoin;\\n    IERC721 public immutable bakc;\\n\\n    constructor(\\n        address _apeCoinStakingContractAddress,\\n        address _apeCoinContractAddress,\\n        address _bakcContractAddress,\\n        address _instantLoanCollateralHolder,\\n        address _bespokeLoanCollateralHolder\\n    ) OpenSkyCollateralHolderChecker(_instantLoanCollateralHolder, _bespokeLoanCollateralHolder) {\\n        apeCoinStaking = IApeCoinStaking(_apeCoinStakingContractAddress);\\n        apeCoin = IERC20(_apeCoinContractAddress);\\n        bakc = IERC721(_bakcContractAddress);\\n    }\\n\\n    function executeOperation(\\n        address[] calldata nftAddresses,\\n        uint256[] calldata tokenIds,\\n        address initiator,\\n        address operator,\\n        bytes calldata params\\n    ) external override onlyCollateralHolder returns (bool) {\\n        require(msg.sender == operator, \\\"PARAMS_ERROR\\\");\\n\\n        (\\n            IApeCoinStaking.PairNftWithAmount[] memory baycPairs,\\n            IApeCoinStaking.PairNftWithAmount[] memory maycPairs,\\n            address recipient\\n        ) = abi.decode(params, (IApeCoinStaking.PairNftWithAmount[], IApeCoinStaking.PairNftWithAmount[], address));\\n\\n        for (uint256 i; i < baycPairs.length; i++) {\\n            bakc.safeTransferFrom(initiator, address(this), baycPairs[i].bakcTokenId);\\n        }\\n        for (uint256 i; i < maycPairs.length; i++) {\\n            bakc.safeTransferFrom(initiator, address(this), maycPairs[i].bakcTokenId);\\n        }\\n\\n        apeCoinStaking.withdrawBAKC(baycPairs, maycPairs);\\n        apeCoin.safeTransfer(recipient, apeCoin.balanceOf(address(this)));\\n\\n        for (uint256 i; i < baycPairs.length; i++) {\\n            bakc.safeTransferFrom(address(this), initiator, baycPairs[i].bakcTokenId);\\n        }\\n        for (uint256 i; i < maycPairs.length; i++) {\\n            bakc.safeTransferFrom(address(this), initiator, maycPairs[i].bakcTokenId);\\n        }\\n\\n        for (uint256 i; i < nftAddresses.length; i++) {\\n            IERC721(nftAddresses[i]).approve(operator, tokenIds[i]);\\n        }\\n\\n        return true;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4b795dd6e96f582773fae0bc8a4d674cd3968a297168823d958376a1d1e9f293\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b50604051620011953803806200119583398101604081905262000035916200007c565b6001600160a01b03918216608052811660a05292831660c05290821660e0521661010052620000ec565b80516001600160a01b03811681146200007757600080fd5b919050565b600080600080600060a086880312156200009557600080fd5b620000a0866200005f565b9450620000b0602087016200005f565b9350620000c0604087016200005f565b9250620000d0606087016200005f565b9150620000e0608087016200005f565b90509295509295909350565b60805160a05160c05160e051610100516110266200016f6000396000818160e6015281816102d90152818161039801528181610596015261065501526000818161014c015281816104ec015261056101526000818161019a015261046001526000818161012501526101fb01526000818161017301526101c901526110266000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063595d69761161005b578063595d697614610120578063ac7ad9ba14610147578063c28f87831461016e578063c9112a771461019557600080fd5b806308e896f014610082578063150b7a02146100aa5780631ab95b9d146100e1575b600080fd5b610095610090366004610aed565b6101bc565b60405190151581526020015b60405180910390f35b6100c86100b8366004610c4d565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016100a1565b6101087f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100a1565b6101087f000000000000000000000000000000000000000000000000000000000000000081565b6101087f000000000000000000000000000000000000000000000000000000000000000081565b6101087f000000000000000000000000000000000000000000000000000000000000000081565b6101087f000000000000000000000000000000000000000000000000000000000000000081565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061021d5750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b61026e5760405162461bcd60e51b815260206004820152601e60248201527f4f4e4c595f4f50454e534b595f434f4c4c41544552414c5f484f4c444552000060448201526064015b60405180910390fd5b336001600160a01b038516146102b55760405162461bcd60e51b815260206004820152600c60248201526b2820a920a6a9afa2a92927a960a11b6044820152606401610265565b600080806102c585870187610dbf565b92509250925060005b8351811015610389577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166342842e0e8a3087858151811061031a5761031a610e37565b6020026020010151602001516040518463ffffffff1660e01b815260040161034493929190610e4d565b600060405180830381600087803b15801561035e57600080fd5b505af1158015610372573d6000803e3d6000fd5b50505050808061038190610e71565b9150506102ce565b5060005b8251811015610448577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166342842e0e8a308685815181106103d9576103d9610e37565b6020026020010151602001516040518463ffffffff1660e01b815260040161040393929190610e4d565b600060405180830381600087803b15801561041d57600080fd5b505af1158015610431573d6000803e3d6000fd5b50505050808061044090610e71565b91505061038d565b5060405163429b632960e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638536c652906104979086908690600401610eeb565b600060405180830381600087803b1580156104b157600080fd5b505af11580156104c5573d6000803e3d6000fd5b50506040516370a0823160e01b815230600482015261058892508391506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610533573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105579190610f19565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906107e6565b60005b8351811015610646577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166342842e0e308b8785815181106105d7576105d7610e37565b6020026020010151602001516040518463ffffffff1660e01b815260040161060193929190610e4d565b600060405180830381600087803b15801561061b57600080fd5b505af115801561062f573d6000803e3d6000fd5b50505050808061063e90610e71565b91505061058b565b5060005b8251811015610705577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166342842e0e308b86858151811061069657610696610e37565b6020026020010151602001516040518463ffffffff1660e01b81526004016106c093929190610e4d565b600060405180830381600087803b1580156106da57600080fd5b505af11580156106ee573d6000803e3d6000fd5b5050505080806106fd90610e71565b91505061064a565b5060005b8b8110156107d3578c8c8281811061072357610723610e37565b90506020020160208101906107389190610f32565b6001600160a01b031663095ea7b3898d8d8581811061075957610759610e37565b6040516001600160e01b031960e087901b1681526001600160a01b0390941660048501526020029190910135602483015250604401600060405180830381600087803b1580156107a857600080fd5b505af11580156107bc573d6000803e3d6000fd5b5050505080806107cb90610e71565b915050610709565b5060019c9b505050505050505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261083890849061083d565b505050565b6000610892826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661090f9092919063ffffffff16565b80519091501561083857808060200190518101906108b09190610f4f565b6108385760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610265565b606061091e8484600085610928565b90505b9392505050565b6060824710156109895760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610265565b843b6109d75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610265565b600080866001600160a01b031685876040516109f39190610fa1565b60006040518083038185875af1925050503d8060008114610a30576040519150601f19603f3d011682016040523d82523d6000602084013e610a35565b606091505b5091509150610a45828286610a50565b979650505050505050565b60608315610a5f575081610921565b825115610a6f5782518084602001fd5b8160405162461bcd60e51b81526004016102659190610fbd565b60008083601f840112610a9b57600080fd5b50813567ffffffffffffffff811115610ab357600080fd5b6020830191508360208260051b8501011115610ace57600080fd5b9250929050565b6001600160a01b0381168114610aea57600080fd5b50565b60008060008060008060008060a0898b031215610b0957600080fd5b883567ffffffffffffffff80821115610b2157600080fd5b610b2d8c838d01610a89565b909a50985060208b0135915080821115610b4657600080fd5b610b528c838d01610a89565b909850965060408b01359150610b6782610ad5565b90945060608a013590610b7982610ad5565b90935060808a01359080821115610b8f57600080fd5b818b0191508b601f830112610ba357600080fd5b813581811115610bb257600080fd5b8c6020828501011115610bc457600080fd5b6020830194508093505050509295985092959890939650565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715610c1657610c16610bdd565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610c4557610c45610bdd565b604052919050565b60008060008060808587031215610c6357600080fd5b8435610c6e81610ad5565b9350602085810135610c7f81610ad5565b935060408601359250606086013567ffffffffffffffff80821115610ca357600080fd5b818801915088601f830112610cb757600080fd5b813581811115610cc957610cc9610bdd565b610cdb601f8201601f19168501610c1c565b91508082528984828501011115610cf157600080fd5b808484018584013760008482840101525080935050505092959194509250565b600082601f830112610d2257600080fd5b8135602067ffffffffffffffff821115610d3e57610d3e610bdd565b610d4c818360051b01610c1c565b82815260609283028501820192828201919087851115610d6b57600080fd5b8387015b85811015610db25781818a031215610d875760008081fd5b610d8f610bf3565b813581528582013586820152604080830135908201528452928401928101610d6f565b5090979650505050505050565b600080600060608486031215610dd457600080fd5b833567ffffffffffffffff80821115610dec57600080fd5b610df887838801610d11565b94506020860135915080821115610e0e57600080fd5b50610e1b86828701610d11565b9250506040840135610e2c81610ad5565b809150509250925092565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000600019821415610e9357634e487b7160e01b600052601160045260246000fd5b5060010190565b600081518084526020808501945080840160005b83811015610ee05781518051885283810151848901526040908101519088015260609096019590820190600101610eae565b509495945050505050565b604081526000610efe6040830185610e9a565b8281036020840152610f108185610e9a565b95945050505050565b600060208284031215610f2b57600080fd5b5051919050565b600060208284031215610f4457600080fd5b813561092181610ad5565b600060208284031215610f6157600080fd5b8151801515811461092157600080fd5b60005b83811015610f8c578181015183820152602001610f74565b83811115610f9b576000848401525b50505050565b60008251610fb3818460208701610f71565b9190910192915050565b6020815260008251806020840152610fdc816040850160208701610f71565b601f01601f1916919091016040019291505056fea2646970667358221220761bb409485088ca0b7d5c7e6c7eb95d7ed0f6bae3fb76e68391d3f77c97db1364736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063595d69761161005b578063595d697614610120578063ac7ad9ba14610147578063c28f87831461016e578063c9112a771461019557600080fd5b806308e896f014610082578063150b7a02146100aa5780631ab95b9d146100e1575b600080fd5b610095610090366004610aed565b6101bc565b60405190151581526020015b60405180910390f35b6100c86100b8366004610c4d565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016100a1565b6101087f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100a1565b6101087f000000000000000000000000000000000000000000000000000000000000000081565b6101087f000000000000000000000000000000000000000000000000000000000000000081565b6101087f000000000000000000000000000000000000000000000000000000000000000081565b6101087f000000000000000000000000000000000000000000000000000000000000000081565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061021d5750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b61026e5760405162461bcd60e51b815260206004820152601e60248201527f4f4e4c595f4f50454e534b595f434f4c4c41544552414c5f484f4c444552000060448201526064015b60405180910390fd5b336001600160a01b038516146102b55760405162461bcd60e51b815260206004820152600c60248201526b2820a920a6a9afa2a92927a960a11b6044820152606401610265565b600080806102c585870187610dbf565b92509250925060005b8351811015610389577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166342842e0e8a3087858151811061031a5761031a610e37565b6020026020010151602001516040518463ffffffff1660e01b815260040161034493929190610e4d565b600060405180830381600087803b15801561035e57600080fd5b505af1158015610372573d6000803e3d6000fd5b50505050808061038190610e71565b9150506102ce565b5060005b8251811015610448577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166342842e0e8a308685815181106103d9576103d9610e37565b6020026020010151602001516040518463ffffffff1660e01b815260040161040393929190610e4d565b600060405180830381600087803b15801561041d57600080fd5b505af1158015610431573d6000803e3d6000fd5b50505050808061044090610e71565b91505061038d565b5060405163429b632960e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638536c652906104979086908690600401610eeb565b600060405180830381600087803b1580156104b157600080fd5b505af11580156104c5573d6000803e3d6000fd5b50506040516370a0823160e01b815230600482015261058892508391506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610533573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105579190610f19565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906107e6565b60005b8351811015610646577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166342842e0e308b8785815181106105d7576105d7610e37565b6020026020010151602001516040518463ffffffff1660e01b815260040161060193929190610e4d565b600060405180830381600087803b15801561061b57600080fd5b505af115801561062f573d6000803e3d6000fd5b50505050808061063e90610e71565b91505061058b565b5060005b8251811015610705577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166342842e0e308b86858151811061069657610696610e37565b6020026020010151602001516040518463ffffffff1660e01b81526004016106c093929190610e4d565b600060405180830381600087803b1580156106da57600080fd5b505af11580156106ee573d6000803e3d6000fd5b5050505080806106fd90610e71565b91505061064a565b5060005b8b8110156107d3578c8c8281811061072357610723610e37565b90506020020160208101906107389190610f32565b6001600160a01b031663095ea7b3898d8d8581811061075957610759610e37565b6040516001600160e01b031960e087901b1681526001600160a01b0390941660048501526020029190910135602483015250604401600060405180830381600087803b1580156107a857600080fd5b505af11580156107bc573d6000803e3d6000fd5b5050505080806107cb90610e71565b915050610709565b5060019c9b505050505050505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261083890849061083d565b505050565b6000610892826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661090f9092919063ffffffff16565b80519091501561083857808060200190518101906108b09190610f4f565b6108385760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610265565b606061091e8484600085610928565b90505b9392505050565b6060824710156109895760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610265565b843b6109d75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610265565b600080866001600160a01b031685876040516109f39190610fa1565b60006040518083038185875af1925050503d8060008114610a30576040519150601f19603f3d011682016040523d82523d6000602084013e610a35565b606091505b5091509150610a45828286610a50565b979650505050505050565b60608315610a5f575081610921565b825115610a6f5782518084602001fd5b8160405162461bcd60e51b81526004016102659190610fbd565b60008083601f840112610a9b57600080fd5b50813567ffffffffffffffff811115610ab357600080fd5b6020830191508360208260051b8501011115610ace57600080fd5b9250929050565b6001600160a01b0381168114610aea57600080fd5b50565b60008060008060008060008060a0898b031215610b0957600080fd5b883567ffffffffffffffff80821115610b2157600080fd5b610b2d8c838d01610a89565b909a50985060208b0135915080821115610b4657600080fd5b610b528c838d01610a89565b909850965060408b01359150610b6782610ad5565b90945060608a013590610b7982610ad5565b90935060808a01359080821115610b8f57600080fd5b818b0191508b601f830112610ba357600080fd5b813581811115610bb257600080fd5b8c6020828501011115610bc457600080fd5b6020830194508093505050509295985092959890939650565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715610c1657610c16610bdd565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610c4557610c45610bdd565b604052919050565b60008060008060808587031215610c6357600080fd5b8435610c6e81610ad5565b9350602085810135610c7f81610ad5565b935060408601359250606086013567ffffffffffffffff80821115610ca357600080fd5b818801915088601f830112610cb757600080fd5b813581811115610cc957610cc9610bdd565b610cdb601f8201601f19168501610c1c565b91508082528984828501011115610cf157600080fd5b808484018584013760008482840101525080935050505092959194509250565b600082601f830112610d2257600080fd5b8135602067ffffffffffffffff821115610d3e57610d3e610bdd565b610d4c818360051b01610c1c565b82815260609283028501820192828201919087851115610d6b57600080fd5b8387015b85811015610db25781818a031215610d875760008081fd5b610d8f610bf3565b813581528582013586820152604080830135908201528452928401928101610d6f565b5090979650505050505050565b600080600060608486031215610dd457600080fd5b833567ffffffffffffffff80821115610dec57600080fd5b610df887838801610d11565b94506020860135915080821115610e0e57600080fd5b50610e1b86828701610d11565b9250506040840135610e2c81610ad5565b809150509250925092565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000600019821415610e9357634e487b7160e01b600052601160045260246000fd5b5060010190565b600081518084526020808501945080840160005b83811015610ee05781518051885283810151848901526040908101519088015260609096019590820190600101610eae565b509495945050505050565b604081526000610efe6040830185610e9a565b8281036020840152610f108185610e9a565b95945050505050565b600060208284031215610f2b57600080fd5b5051919050565b600060208284031215610f4457600080fd5b813561092181610ad5565b600060208284031215610f6157600080fd5b8151801515811461092157600080fd5b60005b83811015610f8c578181015183820152602001610f74565b83811115610f9b576000848401525b50505050565b60008251610fb3818460208701610f71565b9190910192915050565b6020815260008251806020840152610fdc816040850160208701610f71565b601f01601f1916919091016040019291505056fea2646970667358221220761bb409485088ca0b7d5c7e6c7eb95d7ed0f6bae3fb76e68391d3f77c97db1364736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}